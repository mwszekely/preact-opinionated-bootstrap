(function () {
    'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    var __assign = function () {
      __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

      return __assign.apply(this, arguments);
    };
    function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
          resolve(value);
        });
      }

      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }

        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }

        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }
    function __generator(thisArg, body) {
      var _ = {
        label: 0,
        sent: function () {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      },
          f,
          y,
          t,
          g;
      return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
      }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
      }), g;

      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }

      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");

        while (_) {
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];

            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;

              case 4:
                _.label++;
                return {
                  value: op[1],
                  done: false
                };

              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;

              case 7:
                op = _.ops.pop();

                _.trys.pop();

                continue;

              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }

                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }

                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }

                if (t && _.label < t[2]) {
                  _.label = t[2];

                  _.ops.push(op);

                  break;
                }

                if (t[2]) _.ops.pop();

                _.trys.pop();

                continue;
            }

            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        }

        if (op[0] & 5) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    var preact = createCommonjsModule(function (module, exports) {
      var n,
          l,
          u,
          t,
          i,
          o,
          r,
          f,
          e = {},
          c = [],
          s = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;

      function a(n, l) {
        for (var u in l) {
          n[u] = l[u];
        }

        return n;
      }

      function p(n) {
        var l = n.parentNode;
        l && l.removeChild(n);
      }

      function v(l, u, t) {
        var i,
            o,
            r,
            f = {};

        for (r in u) {
          "key" == r ? i = u[r] : "ref" == r ? o = u[r] : f[r] = u[r];
        }

        if (arguments.length > 2 && (f.children = arguments.length > 3 ? n.call(arguments, 2) : t), "function" == typeof l && null != l.defaultProps) for (r in l.defaultProps) {
          void 0 === f[r] && (f[r] = l.defaultProps[r]);
        }
        return h(l, f, i, o, null);
      }

      function h(n, t, i, o, r) {
        var f = {
          type: n,
          props: t,
          key: i,
          ref: o,
          __k: null,
          __: null,
          __b: 0,
          __e: null,
          __d: void 0,
          __c: null,
          __h: null,
          constructor: void 0,
          __v: null == r ? ++u : r
        };
        return null != l.vnode && l.vnode(f), f;
      }

      function y(n) {
        return n.children;
      }

      function d(n, l) {
        this.props = n, this.context = l;
      }

      function _(n, l) {
        if (null == l) return n.__ ? _(n.__, n.__.__k.indexOf(n) + 1) : null;

        for (var u; l < n.__k.length; l++) {
          if (null != (u = n.__k[l]) && null != u.__e) return u.__e;
        }

        return "function" == typeof n.type ? _(n) : null;
      }

      function k(n) {
        var l, u;

        if (null != (n = n.__) && null != n.__c) {
          for (n.__e = n.__c.base = null, l = 0; l < n.__k.length; l++) {
            if (null != (u = n.__k[l]) && null != u.__e) {
              n.__e = n.__c.base = u.__e;
              break;
            }
          }

          return k(n);
        }
      }

      function x(n) {
        (!n.__d && (n.__d = !0) && i.push(n) && !b.__r++ || r !== l.debounceRendering) && ((r = l.debounceRendering) || o)(b);
      }

      function b() {
        for (var n; b.__r = i.length;) {
          n = i.sort(function (n, l) {
            return n.__v.__b - l.__v.__b;
          }), i = [], n.some(function (n) {
            var l, u, t, i, o, r;
            n.__d && (o = (i = (l = n).__v).__e, (r = l.__P) && (u = [], (t = a({}, i)).__v = i.__v + 1, I(r, i, t, l.__n, void 0 !== r.ownerSVGElement, null != i.__h ? [o] : null, u, null == o ? _(i) : o, i.__h), T(u, i), i.__e != o && k(i)));
          });
        }
      }

      function m(n, l, u, t, i, o, r, f, s, a) {
        var p,
            v,
            d,
            k,
            x,
            b,
            m,
            A = t && t.__k || c,
            P = A.length;

        for (u.__k = [], p = 0; p < l.length; p++) {
          if (null != (k = u.__k[p] = null == (k = l[p]) || "boolean" == typeof k ? null : "string" == typeof k || "number" == typeof k || "bigint" == typeof k ? h(null, k, null, null, k) : Array.isArray(k) ? h(y, {
            children: k
          }, null, null, null) : k.__b > 0 ? h(k.type, k.props, k.key, null, k.__v) : k)) {
            if (k.__ = u, k.__b = u.__b + 1, null === (d = A[p]) || d && k.key == d.key && k.type === d.type) A[p] = void 0;else for (v = 0; v < P; v++) {
              if ((d = A[v]) && k.key == d.key && k.type === d.type) {
                A[v] = void 0;
                break;
              }

              d = null;
            }
            I(n, k, d = d || e, i, o, r, f, s, a), x = k.__e, (v = k.ref) && d.ref != v && (m || (m = []), d.ref && m.push(d.ref, null, k), m.push(v, k.__c || x, k)), null != x ? (null == b && (b = x), "function" == typeof k.type && null != k.__k && k.__k === d.__k ? k.__d = s = g(k, s, n) : s = w(n, k, d, A, x, s), a || "option" !== u.type ? "function" == typeof u.type && (u.__d = s) : n.value = "") : s && d.__e == s && s.parentNode != n && (s = _(d));
          }
        }

        for (u.__e = b, p = P; p--;) {
          null != A[p] && ("function" == typeof u.type && null != A[p].__e && A[p].__e == u.__d && (u.__d = _(t, p + 1)), L(A[p], A[p]));
        }

        if (m) for (p = 0; p < m.length; p++) {
          z(m[p], m[++p], m[++p]);
        }
      }

      function g(n, l, u) {
        var t, i;

        for (t = 0; t < n.__k.length; t++) {
          (i = n.__k[t]) && (i.__ = n, l = "function" == typeof i.type ? g(i, l, u) : w(u, i, i, n.__k, i.__e, l));
        }

        return l;
      }

      function w(n, l, u, t, i, o) {
        var r, f, e;
        if (void 0 !== l.__d) r = l.__d, l.__d = void 0;else if (null == u || i != o || null == i.parentNode) n: if (null == o || o.parentNode !== n) n.appendChild(i), r = null;else {
          for (f = o, e = 0; (f = f.nextSibling) && e < t.length; e += 2) {
            if (f == i) break n;
          }

          n.insertBefore(i, o), r = o;
        }
        return void 0 !== r ? r : i.nextSibling;
      }

      function A(n, l, u, t, i) {
        var o;

        for (o in u) {
          "children" === o || "key" === o || o in l || C(n, o, null, u[o], t);
        }

        for (o in l) {
          i && "function" != typeof l[o] || "children" === o || "key" === o || "value" === o || "checked" === o || u[o] === l[o] || C(n, o, l[o], u[o], t);
        }
      }

      function P(n, l, u) {
        "-" === l[0] ? n.setProperty(l, u) : n[l] = null == u ? "" : "number" != typeof u || s.test(l) ? u : u + "px";
      }

      function C(n, l, u, t, i) {
        var o;

        n: if ("style" === l) {
          if ("string" == typeof u) n.style.cssText = u;else {
            if ("string" == typeof t && (n.style.cssText = t = ""), t) for (l in t) {
              u && l in u || P(n.style, l, "");
            }
            if (u) for (l in u) {
              t && u[l] === t[l] || P(n.style, l, u[l]);
            }
          }
        } else if ("o" === l[0] && "n" === l[1]) o = l !== (l = l.replace(/Capture$/, "")), l = l.toLowerCase() in n ? l.toLowerCase().slice(2) : l.slice(2), n.l || (n.l = {}), n.l[l + o] = u, u ? t || n.addEventListener(l, o ? H : $, o) : n.removeEventListener(l, o ? H : $, o);else if ("dangerouslySetInnerHTML" !== l) {
          if (i) l = l.replace(/xlink[H:h]/, "h").replace(/sName$/, "s");else if ("href" !== l && "list" !== l && "form" !== l && "tabIndex" !== l && "download" !== l && l in n) try {
            n[l] = null == u ? "" : u;
            break n;
          } catch (n) {}
          "function" == typeof u || (null != u && (!1 !== u || "a" === l[0] && "r" === l[1]) ? n.setAttribute(l, u) : n.removeAttribute(l));
        }
      }

      function $(n) {
        this.l[n.type + !1](l.event ? l.event(n) : n);
      }

      function H(n) {
        this.l[n.type + !0](l.event ? l.event(n) : n);
      }

      function I(n, u, t, i, o, r, f, e, c) {
        var s,
            p,
            v,
            h,
            _,
            k,
            x,
            b,
            g,
            w,
            A,
            P = u.type;

        if (void 0 !== u.constructor) return null;
        null != t.__h && (c = t.__h, e = u.__e = t.__e, u.__h = null, r = [e]), (s = l.__b) && s(u);

        try {
          n: if ("function" == typeof P) {
            if (b = u.props, g = (s = P.contextType) && i[s.__c], w = s ? g ? g.props.value : s.__ : i, t.__c ? x = (p = u.__c = t.__c).__ = p.__E : ("prototype" in P && P.prototype.render ? u.__c = p = new P(b, w) : (u.__c = p = new d(b, w), p.constructor = P, p.render = M), g && g.sub(p), p.props = b, p.state || (p.state = {}), p.context = w, p.__n = i, v = p.__d = !0, p.__h = []), null == p.__s && (p.__s = p.state), null != P.getDerivedStateFromProps && (p.__s == p.state && (p.__s = a({}, p.__s)), a(p.__s, P.getDerivedStateFromProps(b, p.__s))), h = p.props, _ = p.state, v) null == P.getDerivedStateFromProps && null != p.componentWillMount && p.componentWillMount(), null != p.componentDidMount && p.__h.push(p.componentDidMount);else {
              if (null == P.getDerivedStateFromProps && b !== h && null != p.componentWillReceiveProps && p.componentWillReceiveProps(b, w), !p.__e && null != p.shouldComponentUpdate && !1 === p.shouldComponentUpdate(b, p.__s, w) || u.__v === t.__v) {
                p.props = b, p.state = p.__s, u.__v !== t.__v && (p.__d = !1), p.__v = u, u.__e = t.__e, u.__k = t.__k, u.__k.forEach(function (n) {
                  n && (n.__ = u);
                }), p.__h.length && f.push(p);
                break n;
              }

              null != p.componentWillUpdate && p.componentWillUpdate(b, p.__s, w), null != p.componentDidUpdate && p.__h.push(function () {
                p.componentDidUpdate(h, _, k);
              });
            }
            p.context = w, p.props = b, p.state = p.__s, (s = l.__r) && s(u), p.__d = !1, p.__v = u, p.__P = n, s = p.render(p.props, p.state, p.context), p.state = p.__s, null != p.getChildContext && (i = a(a({}, i), p.getChildContext())), v || null == p.getSnapshotBeforeUpdate || (k = p.getSnapshotBeforeUpdate(h, _)), A = null != s && s.type === y && null == s.key ? s.props.children : s, m(n, Array.isArray(A) ? A : [A], u, t, i, o, r, f, e, c), p.base = u.__e, u.__h = null, p.__h.length && f.push(p), x && (p.__E = p.__ = null), p.__e = !1;
          } else null == r && u.__v === t.__v ? (u.__k = t.__k, u.__e = t.__e) : u.__e = j(t.__e, u, t, i, o, r, f, c);

          (s = l.diffed) && s(u);
        } catch (n) {
          u.__v = null, (c || null != r) && (u.__e = e, u.__h = !!c, r[r.indexOf(e)] = null), l.__e(n, u, t);
        }
      }

      function T(n, u) {
        l.__c && l.__c(u, n), n.some(function (u) {
          try {
            n = u.__h, u.__h = [], n.some(function (n) {
              n.call(u);
            });
          } catch (n) {
            l.__e(n, u.__v);
          }
        });
      }

      function j(l, u, t, i, o, r, f, c) {
        var s,
            a,
            v,
            h = t.props,
            y = u.props,
            d = u.type,
            k = 0;
        if ("svg" === d && (o = !0), null != r) for (; k < r.length; k++) {
          if ((s = r[k]) && (s === l || (d ? s.localName == d : 3 == s.nodeType))) {
            l = s, r[k] = null;
            break;
          }
        }

        if (null == l) {
          if (null === d) return document.createTextNode(y);
          l = o ? document.createElementNS("http://www.w3.org/2000/svg", d) : document.createElement(d, y.is && y), r = null, c = !1;
        }

        if (null === d) h === y || c && l.data === y || (l.data = y);else {
          if (r = r && n.call(l.childNodes), a = (h = t.props || e).dangerouslySetInnerHTML, v = y.dangerouslySetInnerHTML, !c) {
            if (null != r) for (h = {}, k = 0; k < l.attributes.length; k++) {
              h[l.attributes[k].name] = l.attributes[k].value;
            }
            (v || a) && (v && (a && v.__html == a.__html || v.__html === l.innerHTML) || (l.innerHTML = v && v.__html || ""));
          }

          if (A(l, y, h, o, c), v) u.__k = [];else if (k = u.props.children, m(l, Array.isArray(k) ? k : [k], u, t, i, o && "foreignObject" !== d, r, f, r ? r[0] : t.__k && _(t, 0), c), null != r) for (k = r.length; k--;) {
            null != r[k] && p(r[k]);
          }
          c || ("value" in y && void 0 !== (k = y.value) && (k !== l.value || "progress" === d && !k) && C(l, "value", k, h.value, !1), "checked" in y && void 0 !== (k = y.checked) && k !== l.checked && C(l, "checked", k, h.checked, !1));
        }
        return l;
      }

      function z(n, u, t) {
        try {
          "function" == typeof n ? n(u) : n.current = u;
        } catch (n) {
          l.__e(n, t);
        }
      }

      function L(n, u, t) {
        var i, o;

        if (l.unmount && l.unmount(n), (i = n.ref) && (i.current && i.current !== n.__e || z(i, null, u)), null != (i = n.__c)) {
          if (i.componentWillUnmount) try {
            i.componentWillUnmount();
          } catch (n) {
            l.__e(n, u);
          }
          i.base = i.__P = null;
        }

        if (i = n.__k) for (o = 0; o < i.length; o++) {
          i[o] && L(i[o], u, "function" != typeof n.type);
        }
        t || null == n.__e || p(n.__e), n.__e = n.__d = void 0;
      }

      function M(n, l, u) {
        return this.constructor(n, u);
      }

      function N(u, t, i) {
        var o, r, f;
        l.__ && l.__(u, t), r = (o = "function" == typeof i) ? null : i && i.__k || t.__k, f = [], I(t, u = (!o && i || t).__k = v(y, null, [u]), r || e, e, void 0 !== t.ownerSVGElement, !o && i ? [i] : r ? null : t.firstChild ? n.call(t.childNodes) : null, f, !o && i ? i : r ? r.__e : t.firstChild, o), T(f, u);
      }

      n = c.slice, l = {
        __e: function (n, l) {
          for (var u, t, i; l = l.__;) {
            if ((u = l.__c) && !u.__) try {
              if ((t = u.constructor) && null != t.getDerivedStateFromError && (u.setState(t.getDerivedStateFromError(n)), i = u.__d), null != u.componentDidCatch && (u.componentDidCatch(n), i = u.__d), i) return u.__E = u;
            } catch (l) {
              n = l;
            }
          }

          throw n;
        }
      }, u = 0, t = function (n) {
        return null != n && void 0 === n.constructor;
      }, d.prototype.setState = function (n, l) {
        var u;
        u = null != this.__s && this.__s !== this.state ? this.__s : this.__s = a({}, this.state), "function" == typeof n && (n = n(a({}, u), this.props)), n && a(u, n), null != n && this.__v && (l && this.__h.push(l), x(this));
      }, d.prototype.forceUpdate = function (n) {
        this.__v && (this.__e = !0, n && this.__h.push(n), x(this));
      }, d.prototype.render = y, i = [], o = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, b.__r = 0, f = 0, exports.render = N, exports.hydrate = function n(l, u) {
        N(l, u, n);
      }, exports.createElement = v, exports.h = v, exports.Fragment = y, exports.createRef = function () {
        return {
          current: null
        };
      }, exports.isValidElement = t, exports.Component = d, exports.cloneElement = function (l, u, t) {
        var i,
            o,
            r,
            f = a({}, l.props);

        for (r in u) {
          "key" == r ? i = u[r] : "ref" == r ? o = u[r] : f[r] = u[r];
        }

        return arguments.length > 2 && (f.children = arguments.length > 3 ? n.call(arguments, 2) : t), h(l.type, f, i || l.key, o || l.ref, null);
      }, exports.createContext = function (n, l) {
        var u = {
          __c: l = "__cC" + f++,
          __: n,
          Consumer: function (n, l) {
            return n.children(l);
          },
          Provider: function (n) {
            var u, t;
            return this.getChildContext || (u = [], (t = {})[l] = this, this.getChildContext = function () {
              return t;
            }, this.shouldComponentUpdate = function (n) {
              this.props.value !== n.value && u.some(x);
            }, this.sub = function (n) {
              u.push(n);
              var l = n.componentWillUnmount;

              n.componentWillUnmount = function () {
                u.splice(u.indexOf(n), 1), l && l.call(n);
              };
            }), n.children;
          }
        };
        return u.Provider.__ = u.Consumer.contextType = u;
      }, exports.toChildArray = function n(l, u) {
        return u = u || [], null == l || "boolean" == typeof l || (Array.isArray(l) ? l.some(function (l) {
          n(l, u);
        }) : u.push(l)), u;
      }, exports.options = l;
    });

    createCommonjsModule(function (module, exports) {
      "undefined" != typeof window && window.__PREACT_DEVTOOLS__ && window.__PREACT_DEVTOOLS__.attachPreact("10.5.14", preact.options, {
        Fragment: preact.Fragment,
        Component: preact.Component
      }), exports.addHookName = function (e, o) {
        return preact.options.__a && preact.options.__a(o), e;
      };
    });

    createCommonjsModule(function (module, exports) {
      var n = preact;
      var e = {};

      function t(e) {
        return e.type === n.Fragment ? "Fragment" : "function" == typeof e.type ? e.type.displayName || e.type.name : "string" == typeof e.type ? e.type : "#text";
      }

      var o = [],
          r = [];

      function a() {
        return o.length > 0 ? o[o.length - 1] : null;
      }

      var i = !1;

      function s(e) {
        return "function" == typeof e.type && e.type != n.Fragment;
      }

      function c(n) {
        for (var e = [n], o = n; null != o.__o;) {
          e.push(o.__o), o = o.__o;
        }

        return e.reduce(function (n, e) {
          n += "  in " + t(e);
          var o = e.__source;
          return o ? n += " (at " + o.fileName + ":" + o.lineNumber + ")" : i || (i = !0, console.warn("Add @babel/plugin-transform-react-jsx-source to get a more detailed component stack. Note that you should not add it to production builds of your App for bundle size reasons.")), n + "\n";
        }, "");
      }

      var l = "function" == typeof WeakMap,
          u = n.Component.prototype.setState;

      n.Component.prototype.setState = function (n, e) {
        return null == this.__v ? null == this.state && console.warn('Calling "this.setState" inside the constructor of a component is a no-op and might be a bug in your application. Instead, set "this.state = {}" directly.\n\n' + c(a())) : null == this.__P && console.warn('Can\'t call "this.setState" on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method.\n\n' + c(this.__v)), u.call(this, n, e);
      };

      var f = n.Component.prototype.forceUpdate;

      function p(n) {
        var e = n.props,
            o = t(n),
            r = "";

        for (var a in e) {
          if (e.hasOwnProperty(a) && "children" !== a) {
            var i = e[a];
            "function" == typeof i && (i = "function " + (i.displayName || i.name) + "() {}"), i = Object(i) !== i || i.toString ? i + "" : Object.prototype.toString.call(i), r += " " + a + "=" + JSON.stringify(i);
          }
        }

        var s = e.children;
        return "<" + o + r + (s && s.length ? ">..</" + o + ">" : " />");
      }

      n.Component.prototype.forceUpdate = function (n) {
        return null == this.__v ? console.warn('Calling "this.forceUpdate" inside the constructor of a component is a no-op and might be a bug in your application.\n\n' + c(a())) : null == this.__P && console.warn('Can\'t call "this.forceUpdate" on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in the componentWillUnmount method.\n\n' + c(this.__v)), f.call(this, n);
      }, function () {
        !function () {
          var e = n.options.__b,
              t = n.options.diffed,
              a = n.options.__,
              i = n.options.vnode,
              c = n.options.__r;
          n.options.diffed = function (n) {
            s(n) && r.pop(), o.pop(), t && t(n);
          }, n.options.__b = function (n) {
            s(n) && o.push(n), e && e(n);
          }, n.options.__ = function (n, e) {
            r = [], a && a(n, e);
          }, n.options.vnode = function (n) {
            n.__o = r.length > 0 ? r[r.length - 1] : null, i && i(n);
          }, n.options.__r = function (n) {
            s(n) && r.push(n), c && c(n);
          };
        }();
        var a = !1,
            i = n.options.__b,
            u = n.options.diffed,
            f = n.options.vnode,
            d = n.options.__e,
            h = n.options.__,
            y = n.options.__h,
            v = l ? {
          useEffect: new WeakMap(),
          useLayoutEffect: new WeakMap(),
          lazyPropTypes: new WeakMap()
        } : null,
            m = [];
        n.options.__e = function (n, e, o) {
          if (e && e.__c && "function" == typeof n.then) {
            var r = n;
            n = new Error("Missing Suspense. The throwing component was: " + t(e));

            for (var a = e; a; a = a.__) {
              if (a.__c && a.__c.__c) {
                n = r;
                break;
              }
            }

            if (n instanceof Error) throw n;
          }

          try {
            d(n, e, o), "function" != typeof n.then && setTimeout(function () {
              throw n;
            });
          } catch (n) {
            throw n;
          }
        }, n.options.__ = function (n, e) {
          if (!e) throw new Error("Undefined parent passed to render(), this is the second argument.\nCheck if the element is available in the DOM/has the correct id.");
          var o;

          switch (e.nodeType) {
            case 1:
            case 11:
            case 9:
              o = !0;
              break;

            default:
              o = !1;
          }

          if (!o) {
            var r = t(n);
            throw new Error("Expected a valid HTML node as a second argument to render.\tReceived " + e + " instead: render(<" + r + " />, " + e + ");");
          }

          h && h(n, e);
        }, n.options.__b = function (n) {
          var o = n.type,
              r = function n(e) {
            return e ? "function" == typeof e.type ? n(e.__) : e : {};
          }(n.__);

          if (a = !0, void 0 === o) throw new Error("Undefined component passed to createElement()\n\nYou likely forgot to export your component or might have mixed up default and named imports" + p(n) + "\n\n" + c(n));

          if (null != o && "object" == typeof o) {
            if (void 0 !== o.__k && void 0 !== o.__e) throw new Error("Invalid type passed to createElement(): " + o + "\n\nDid you accidentally pass a JSX literal as JSX twice?\n\n  let My" + t(n) + " = " + p(o) + ";\n  let vnode = <My" + t(n) + " />;\n\nThis usually happens when you export a JSX literal and not the component.\n\n" + c(n));
            throw new Error("Invalid type passed to createElement(): " + (Array.isArray(o) ? "array" : o));
          }

          if ("thead" !== o && "tfoot" !== o && "tbody" !== o || "table" === r.type ? "tr" === o && "thead" !== r.type && "tfoot" !== r.type && "tbody" !== r.type && "table" !== r.type ? console.error("Improper nesting of table. Your <tr> should have a <thead/tbody/tfoot/table> parent." + p(n) + "\n\n" + c(n)) : "td" === o && "tr" !== r.type ? console.error("Improper nesting of table. Your <td> should have a <tr> parent." + p(n) + "\n\n" + c(n)) : "th" === o && "tr" !== r.type && console.error("Improper nesting of table. Your <th> should have a <tr>." + p(n) + "\n\n" + c(n)) : console.error("Improper nesting of table. Your <thead/tbody/tfoot> should have a <table> parent." + p(n) + "\n\n" + c(n)), void 0 !== n.ref && "function" != typeof n.ref && "object" != typeof n.ref && !("$$typeof" in n)) throw new Error('Component\'s "ref" property should be a function, or an object created by createRef(), but got [' + typeof n.ref + "] instead\n" + p(n) + "\n\n" + c(n));
          if ("string" == typeof n.type) for (var s in n.props) {
            if ("o" === s[0] && "n" === s[1] && "function" != typeof n.props[s] && null != n.props[s]) throw new Error("Component's \"" + s + '" property should be a function, but got [' + typeof n.props[s] + "] instead\n" + p(n) + "\n\n" + c(n));
          }

          if ("function" == typeof n.type && n.type.propTypes) {
            if ("Lazy" === n.type.displayName && v && !v.lazyPropTypes.has(n.type)) {
              var l = "PropTypes are not supported on lazy(). Use propTypes on the wrapped component itself. ";

              try {
                var u = n.type();
                v.lazyPropTypes.set(n.type, !0), console.warn(l + "Component wrapped in lazy() is " + t(u));
              } catch (n) {
                console.warn(l + "We will log the wrapped component's name once it is loaded.");
              }
            }

            var f = n.props;
            n.type.__f && delete (f = function (n, e) {
              for (var t in e) {
                n[t] = e[t];
              }

              return n;
            }({}, f)).ref, function (n, t, o, r, a) {
              Object.keys(n).forEach(function (o) {
                var i;

                try {
                  i = n[o](t, o, r, "prop", null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (n) {
                  i = n;
                }

                !i || i.message in e || (e[i.message] = !0, console.error("Failed prop type: " + i.message + (a && "\n" + a() || "")));
              });
            }(n.type.propTypes, f, 0, t(n), function () {
              return c(n);
            });
          }

          i && i(n);
        }, n.options.__h = function (n, e, t) {
          if (!n || !a) throw new Error("Hook can only be invoked from render methods.");
          y && y(n, e, t);
        };

        var b = function (n, e) {
          return {
            get: function () {
              var t = "get" + n + e;
              m && m.indexOf(t) < 0 && (m.push(t), console.warn("getting vnode." + n + " is deprecated, " + e));
            },
            set: function () {
              var t = "set" + n + e;
              m && m.indexOf(t) < 0 && (m.push(t), console.warn("setting vnode." + n + " is not allowed, " + e));
            }
          };
        },
            w = {
          nodeName: b("nodeName", "use vnode.type"),
          attributes: b("attributes", "use vnode.props"),
          children: b("children", "use vnode.props.children")
        },
            g = Object.create({}, w);

        n.options.vnode = function (n) {
          var e = n.props;

          if (null !== n.type && null != e && ("__source" in e || "__self" in e)) {
            var t = n.props = {};

            for (var o in e) {
              var r = e[o];
              "__source" === o ? n.__source = r : "__self" === o ? n.__self = r : t[o] = r;
            }
          }

          n.__proto__ = g, f && f(n);
        }, n.options.diffed = function (n) {
          if (n.__k && n.__k.forEach(function (e) {
            if (e && void 0 === e.type) {
              delete e.__, delete e.__b;
              var t = Object.keys(e).join(",");
              throw new Error("Objects are not valid as a child. Encountered an object with the keys {" + t + "}.\n\n" + c(n));
            }
          }), a = !1, u && u(n), null != n.__k) for (var e = [], t = 0; t < n.__k.length; t++) {
            var o = n.__k[t];

            if (o && null != o.key) {
              var r = o.key;

              if (-1 !== e.indexOf(r)) {
                console.error('Following component has two or more children with the same key attribute: "' + r + '". This may cause glitches and misbehavior in rendering process. Component: \n\n' + p(n) + "\n\n" + c(n));
                break;
              }

              e.push(r);
            }
          }
        };
      }(), exports.resetPropWarnings = function () {
        e = {};
      };
    });

    var n,
        l$1,
        u$1,
        t$1,
        o$1,
        r$1,
        f$1,
        e$1 = {},
        c$1 = [],
        s$1 = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;

    function a$1(n, l) {
      for (var u in l) {
        n[u] = l[u];
      }

      return n;
    }

    function h$1(n) {
      var l = n.parentNode;
      l && l.removeChild(n);
    }

    function v$1(l, u, i) {
      var t,
          o,
          r,
          f = {};

      for (r in u) {
        "key" == r ? t = u[r] : "ref" == r ? o = u[r] : f[r] = u[r];
      }

      if (arguments.length > 2 && (f.children = arguments.length > 3 ? n.call(arguments, 2) : i), "function" == typeof l && null != l.defaultProps) for (r in l.defaultProps) {
        void 0 === f[r] && (f[r] = l.defaultProps[r]);
      }
      return y$1(l, f, t, o, null);
    }

    function y$1(n, i, t, o, r) {
      var f = {
        type: n,
        props: i,
        key: t,
        ref: o,
        __k: null,
        __: null,
        __b: 0,
        __e: null,
        __d: void 0,
        __c: null,
        __h: null,
        constructor: void 0,
        __v: null == r ? ++u$1 : r
      };
      return null != l$1.vnode && l$1.vnode(f), f;
    }

    function d$1(n) {
      return n.children;
    }

    function _$1(n, l) {
      this.props = n, this.context = l;
    }

    function k$1(n, l) {
      if (null == l) return n.__ ? k$1(n.__, n.__.__k.indexOf(n) + 1) : null;

      for (var u; l < n.__k.length; l++) {
        if (null != (u = n.__k[l]) && null != u.__e) return u.__e;
      }

      return "function" == typeof n.type ? k$1(n) : null;
    }

    function b$1(n) {
      var l, u;

      if (null != (n = n.__) && null != n.__c) {
        for (n.__e = n.__c.base = null, l = 0; l < n.__k.length; l++) {
          if (null != (u = n.__k[l]) && null != u.__e) {
            n.__e = n.__c.base = u.__e;
            break;
          }
        }

        return b$1(n);
      }
    }

    function m$1(n) {
      (!n.__d && (n.__d = !0) && t$1.push(n) && !g$2.__r++ || r$1 !== l$1.debounceRendering) && ((r$1 = l$1.debounceRendering) || o$1)(g$2);
    }

    function g$2() {
      for (var n; g$2.__r = t$1.length;) {
        n = t$1.sort(function (n, l) {
          return n.__v.__b - l.__v.__b;
        }), t$1 = [], n.some(function (n) {
          var l, u, i, t, o, r;
          n.__d && (o = (t = (l = n).__v).__e, (r = l.__P) && (u = [], (i = a$1({}, t)).__v = t.__v + 1, j$2(r, t, i, l.__n, void 0 !== r.ownerSVGElement, null != t.__h ? [o] : null, u, null == o ? k$1(t) : o, t.__h), z(u, t), t.__e != o && b$1(t)));
        });
      }
    }

    function w$2(n, l, u, i, t, o, r, f, s, a) {
      var h,
          v,
          p,
          _,
          b,
          m,
          g,
          w = i && i.__k || c$1,
          A = w.length;

      for (u.__k = [], h = 0; h < l.length; h++) {
        if (null != (_ = u.__k[h] = null == (_ = l[h]) || "boolean" == typeof _ ? null : "string" == typeof _ || "number" == typeof _ || "bigint" == typeof _ ? y$1(null, _, null, null, _) : Array.isArray(_) ? y$1(d$1, {
          children: _
        }, null, null, null) : _.__b > 0 ? y$1(_.type, _.props, _.key, null, _.__v) : _)) {
          if (_.__ = u, _.__b = u.__b + 1, null === (p = w[h]) || p && _.key == p.key && _.type === p.type) w[h] = void 0;else for (v = 0; v < A; v++) {
            if ((p = w[v]) && _.key == p.key && _.type === p.type) {
              w[v] = void 0;
              break;
            }

            p = null;
          }
          j$2(n, _, p = p || e$1, t, o, r, f, s, a), b = _.__e, (v = _.ref) && p.ref != v && (g || (g = []), p.ref && g.push(p.ref, null, _), g.push(v, _.__c || b, _)), null != b ? (null == m && (m = b), "function" == typeof _.type && null != _.__k && _.__k === p.__k ? _.__d = s = x$2(_, s, n) : s = P$1(n, _, p, w, b, s), a || "option" !== u.type ? "function" == typeof u.type && (u.__d = s) : n.value = "") : s && p.__e == s && s.parentNode != n && (s = k$1(p));
        }
      }

      for (u.__e = m, h = A; h--;) {
        null != w[h] && ("function" == typeof u.type && null != w[h].__e && w[h].__e == u.__d && (u.__d = k$1(i, h + 1)), N(w[h], w[h]));
      }

      if (g) for (h = 0; h < g.length; h++) {
        M$1(g[h], g[++h], g[++h]);
      }
    }

    function x$2(n, l, u) {
      var i, t;

      for (i = 0; i < n.__k.length; i++) {
        (t = n.__k[i]) && (t.__ = n, l = "function" == typeof t.type ? x$2(t, l, u) : P$1(u, t, t, n.__k, t.__e, l));
      }

      return l;
    }

    function A$2(n, l) {
      return l = l || [], null == n || "boolean" == typeof n || (Array.isArray(n) ? n.some(function (n) {
        A$2(n, l);
      }) : l.push(n)), l;
    }

    function P$1(n, l, u, i, t, o) {
      var r, f, e;
      if (void 0 !== l.__d) r = l.__d, l.__d = void 0;else if (null == u || t != o || null == t.parentNode) n: if (null == o || o.parentNode !== n) n.appendChild(t), r = null;else {
        for (f = o, e = 0; (f = f.nextSibling) && e < i.length; e += 2) {
          if (f == t) break n;
        }

        n.insertBefore(t, o), r = o;
      }
      return void 0 !== r ? r : t.nextSibling;
    }

    function C$1(n, l, u, i, t) {
      var o;

      for (o in u) {
        "children" === o || "key" === o || o in l || H$1(n, o, null, u[o], i);
      }

      for (o in l) {
        t && "function" != typeof l[o] || "children" === o || "key" === o || "value" === o || "checked" === o || u[o] === l[o] || H$1(n, o, l[o], u[o], i);
      }
    }

    function $$1(n, l, u) {
      "-" === l[0] ? n.setProperty(l, u) : n[l] = null == u ? "" : "number" != typeof u || s$1.test(l) ? u : u + "px";
    }

    function H$1(n, l, u, i, t) {
      var o;

      n: if ("style" === l) {
        if ("string" == typeof u) n.style.cssText = u;else {
          if ("string" == typeof i && (n.style.cssText = i = ""), i) for (l in i) {
            u && l in u || $$1(n.style, l, "");
          }
          if (u) for (l in u) {
            i && u[l] === i[l] || $$1(n.style, l, u[l]);
          }
        }
      } else if ("o" === l[0] && "n" === l[1]) o = l !== (l = l.replace(/Capture$/, "")), l = l.toLowerCase() in n ? l.toLowerCase().slice(2) : l.slice(2), n.l || (n.l = {}), n.l[l + o] = u, u ? i || n.addEventListener(l, o ? T$1 : I$1, o) : n.removeEventListener(l, o ? T$1 : I$1, o);else if ("dangerouslySetInnerHTML" !== l) {
        if (t) l = l.replace(/xlink[H:h]/, "h").replace(/sName$/, "s");else if ("href" !== l && "list" !== l && "form" !== l && "tabIndex" !== l && "download" !== l && l in n) try {
          n[l] = null == u ? "" : u;
          break n;
        } catch (n) {}
        "function" == typeof u || (null != u && (!1 !== u || "a" === l[0] && "r" === l[1]) ? n.setAttribute(l, u) : n.removeAttribute(l));
      }
    }

    function I$1(n) {
      this.l[n.type + !1](l$1.event ? l$1.event(n) : n);
    }

    function T$1(n) {
      this.l[n.type + !0](l$1.event ? l$1.event(n) : n);
    }

    function j$2(n, u, i, t, o, r, f, e, c) {
      var s,
          h,
          v,
          y,
          p,
          k,
          b,
          m,
          g,
          x,
          A,
          P = u.type;
      if (void 0 !== u.constructor) return null;
      null != i.__h && (c = i.__h, e = u.__e = i.__e, u.__h = null, r = [e]), (s = l$1.__b) && s(u);

      try {
        n: if ("function" == typeof P) {
          if (m = u.props, g = (s = P.contextType) && t[s.__c], x = s ? g ? g.props.value : s.__ : t, i.__c ? b = (h = u.__c = i.__c).__ = h.__E : ("prototype" in P && P.prototype.render ? u.__c = h = new P(m, x) : (u.__c = h = new _$1(m, x), h.constructor = P, h.render = O$1), g && g.sub(h), h.props = m, h.state || (h.state = {}), h.context = x, h.__n = t, v = h.__d = !0, h.__h = []), null == h.__s && (h.__s = h.state), null != P.getDerivedStateFromProps && (h.__s == h.state && (h.__s = a$1({}, h.__s)), a$1(h.__s, P.getDerivedStateFromProps(m, h.__s))), y = h.props, p = h.state, v) null == P.getDerivedStateFromProps && null != h.componentWillMount && h.componentWillMount(), null != h.componentDidMount && h.__h.push(h.componentDidMount);else {
            if (null == P.getDerivedStateFromProps && m !== y && null != h.componentWillReceiveProps && h.componentWillReceiveProps(m, x), !h.__e && null != h.shouldComponentUpdate && !1 === h.shouldComponentUpdate(m, h.__s, x) || u.__v === i.__v) {
              h.props = m, h.state = h.__s, u.__v !== i.__v && (h.__d = !1), h.__v = u, u.__e = i.__e, u.__k = i.__k, u.__k.forEach(function (n) {
                n && (n.__ = u);
              }), h.__h.length && f.push(h);
              break n;
            }

            null != h.componentWillUpdate && h.componentWillUpdate(m, h.__s, x), null != h.componentDidUpdate && h.__h.push(function () {
              h.componentDidUpdate(y, p, k);
            });
          }
          h.context = x, h.props = m, h.state = h.__s, (s = l$1.__r) && s(u), h.__d = !1, h.__v = u, h.__P = n, s = h.render(h.props, h.state, h.context), h.state = h.__s, null != h.getChildContext && (t = a$1(a$1({}, t), h.getChildContext())), v || null == h.getSnapshotBeforeUpdate || (k = h.getSnapshotBeforeUpdate(y, p)), A = null != s && s.type === d$1 && null == s.key ? s.props.children : s, w$2(n, Array.isArray(A) ? A : [A], u, i, t, o, r, f, e, c), h.base = u.__e, u.__h = null, h.__h.length && f.push(h), b && (h.__E = h.__ = null), h.__e = !1;
        } else null == r && u.__v === i.__v ? (u.__k = i.__k, u.__e = i.__e) : u.__e = L$1(i.__e, u, i, t, o, r, f, c);

        (s = l$1.diffed) && s(u);
      } catch (n) {
        u.__v = null, (c || null != r) && (u.__e = e, u.__h = !!c, r[r.indexOf(e)] = null), l$1.__e(n, u, i);
      }
    }

    function z(n, u) {
      l$1.__c && l$1.__c(u, n), n.some(function (u) {
        try {
          n = u.__h, u.__h = [], n.some(function (n) {
            n.call(u);
          });
        } catch (n) {
          l$1.__e(n, u.__v);
        }
      });
    }

    function L$1(l, u, i, t, o, r, f, c) {
      var s,
          a,
          v,
          y = i.props,
          p = u.props,
          d = u.type,
          _ = 0;
      if ("svg" === d && (o = !0), null != r) for (; _ < r.length; _++) {
        if ((s = r[_]) && (s === l || (d ? s.localName == d : 3 == s.nodeType))) {
          l = s, r[_] = null;
          break;
        }
      }

      if (null == l) {
        if (null === d) return document.createTextNode(p);
        l = o ? document.createElementNS("http://www.w3.org/2000/svg", d) : document.createElement(d, p.is && p), r = null, c = !1;
      }

      if (null === d) y === p || c && l.data === p || (l.data = p);else {
        if (r = r && n.call(l.childNodes), a = (y = i.props || e$1).dangerouslySetInnerHTML, v = p.dangerouslySetInnerHTML, !c) {
          if (null != r) for (y = {}, _ = 0; _ < l.attributes.length; _++) {
            y[l.attributes[_].name] = l.attributes[_].value;
          }
          (v || a) && (v && (a && v.__html == a.__html || v.__html === l.innerHTML) || (l.innerHTML = v && v.__html || ""));
        }

        if (C$1(l, p, y, o, c), v) u.__k = [];else if (_ = u.props.children, w$2(l, Array.isArray(_) ? _ : [_], u, i, t, o && "foreignObject" !== d, r, f, r ? r[0] : i.__k && k$1(i, 0), c), null != r) for (_ = r.length; _--;) {
          null != r[_] && h$1(r[_]);
        }
        c || ("value" in p && void 0 !== (_ = p.value) && (_ !== l.value || "progress" === d && !_) && H$1(l, "value", _, y.value, !1), "checked" in p && void 0 !== (_ = p.checked) && _ !== l.checked && H$1(l, "checked", _, y.checked, !1));
      }
      return l;
    }

    function M$1(n, u, i) {
      try {
        "function" == typeof n ? n(u) : n.current = u;
      } catch (n) {
        l$1.__e(n, i);
      }
    }

    function N(n, u, i) {
      var t, o;

      if (l$1.unmount && l$1.unmount(n), (t = n.ref) && (t.current && t.current !== n.__e || M$1(t, null, u)), null != (t = n.__c)) {
        if (t.componentWillUnmount) try {
          t.componentWillUnmount();
        } catch (n) {
          l$1.__e(n, u);
        }
        t.base = t.__P = null;
      }

      if (t = n.__k) for (o = 0; o < t.length; o++) {
        t[o] && N(t[o], u, "function" != typeof n.type);
      }
      i || null == n.__e || h$1(n.__e), n.__e = n.__d = void 0;
    }

    function O$1(n, l, u) {
      return this.constructor(n, u);
    }

    function S$1(u, i, t) {
      var o, r, f;
      l$1.__ && l$1.__(u, i), r = (o = "function" == typeof t) ? null : t && t.__k || i.__k, f = [], j$2(i, u = (!o && t || i).__k = v$1(d$1, null, [u]), r || e$1, e$1, void 0 !== i.ownerSVGElement, !o && t ? [t] : r ? null : i.firstChild ? n.call(i.childNodes) : null, f, !o && t ? t : r ? r.__e : i.firstChild, o), z(f, u);
    }

    function B(l, u, i) {
      var t,
          o,
          r,
          f = a$1({}, l.props);

      for (r in u) {
        "key" == r ? t = u[r] : "ref" == r ? o = u[r] : f[r] = u[r];
      }

      return arguments.length > 2 && (f.children = arguments.length > 3 ? n.call(arguments, 2) : i), y$1(l.type, f, t || l.key, o || l.ref, null);
    }

    function D$1(n, l) {
      var u = {
        __c: l = "__cC" + f$1++,
        __: n,
        Consumer: function (n, l) {
          return n.children(l);
        },
        Provider: function (n) {
          var u, i;
          return this.getChildContext || (u = [], (i = {})[l] = this, this.getChildContext = function () {
            return i;
          }, this.shouldComponentUpdate = function (n) {
            this.props.value !== n.value && u.some(m$1);
          }, this.sub = function (n) {
            u.push(n);
            var l = n.componentWillUnmount;

            n.componentWillUnmount = function () {
              u.splice(u.indexOf(n), 1), l && l.call(n);
            };
          }), n.children;
        }
      };
      return u.Provider.__ = u.Consumer.contextType = u;
    }

    n = c$1.slice, l$1 = {
      __e: function (n, l) {
        for (var u, i, t; l = l.__;) {
          if ((u = l.__c) && !u.__) try {
            if ((i = u.constructor) && null != i.getDerivedStateFromError && (u.setState(i.getDerivedStateFromError(n)), t = u.__d), null != u.componentDidCatch && (u.componentDidCatch(n), t = u.__d), t) return u.__E = u;
          } catch (l) {
            n = l;
          }
        }

        throw n;
      }
    }, u$1 = 0, _$1.prototype.setState = function (n, l) {
      var u;
      u = null != this.__s && this.__s !== this.state ? this.__s : this.__s = a$1({}, this.state), "function" == typeof n && (n = n(a$1({}, u), this.props)), n && a$1(u, n), null != n && this.__v && (l && this.__h.push(l), m$1(this));
    }, _$1.prototype.forceUpdate = function (n) {
      this.__v && (this.__e = !0, n && this.__h.push(n), m$1(this));
    }, _$1.prototype.render = d$1, t$1 = [], o$1 = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, g$2.__r = 0, f$1 = 0;

    "undefined" != typeof window && window.__PREACT_DEVTOOLS__ && window.__PREACT_DEVTOOLS__.attachPreact("10.5.14", l$1, {
      Fragment: d$1,
      Component: _$1
    });

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);

      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);

        if (enumerableOnly) {
          symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }

        keys.push.apply(keys, symbols);
      }

      return keys;
    }

    function _objectSpread2(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};

        if (i % 2) {
          ownKeys(Object(source), true).forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }

      return target;
    }

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    }

    function _extends() {
      _extends = Object.assign || function (target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      };

      return _extends.apply(this, arguments);
    }

    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;

      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }

      return target;
    }

    function _objectWithoutProperties(source, excluded) {
      if (source == null) return {};

      var target = _objectWithoutPropertiesLoose(source, excluded);

      var key, i;

      if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

        for (i = 0; i < sourceSymbolKeys.length; i++) {
          key = sourceSymbolKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
          target[key] = source[key];
        }
      }

      return target;
    }

    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];

      if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }

      return (hint === "string" ? String : Number)(input);
    }

    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");

      return typeof key === "symbol" ? key : String(key);
    }

    var t,
        u,
        r,
        o = 0,
        i = [],
        c = l$1.__b,
        f = l$1.__r,
        e = l$1.diffed,
        a = l$1.__c,
        v = l$1.unmount;

    function m(t, r) {
      l$1.__h && l$1.__h(u, t, o || r), o = 0;
      var i = u.__H || (u.__H = {
        __: [],
        __h: []
      });
      return t >= i.__.length && i.__.push({}), i.__[t];
    }

    function l(n) {
      return o = 1, p(w$1, n);
    }

    function p(n, r, o) {
      var i = m(t++, 2);
      return i.t = n, i.__c || (i.__ = [o ? o(r) : w$1(void 0, r), function (n) {
        var t = i.t(i.__[0], n);
        i.__[0] !== t && (i.__ = [t, i.__[1]], i.__c.setState({}));
      }], i.__c = u), i.__;
    }

    function y(r, o) {
      var i = m(t++, 3);
      !l$1.__s && k(i.__H, o) && (i.__ = r, i.__H = o, u.__H.__h.push(i));
    }

    function h(r, o) {
      var i = m(t++, 4);
      !l$1.__s && k(i.__H, o) && (i.__ = r, i.__H = o, u.__h.push(i));
    }

    function s(n) {
      return o = 5, d(function () {
        return {
          current: n
        };
      }, []);
    }

    function _(n, t, u) {
      o = 6, h(function () {
        "function" == typeof n ? n(t()) : n && (n.current = t());
      }, null == u ? u : u.concat(n));
    }

    function d(n, u) {
      var r = m(t++, 7);
      return k(r.__H, u) && (r.__ = n(), r.__H = u, r.__h = n), r.__;
    }

    function A$1(n, t) {
      return o = 8, d(function () {
        return n;
      }, t);
    }

    function F(n) {
      var r = u.context[n.__c],
          o = m(t++, 9);
      return o.c = n, r ? (null == o.__ && (o.__ = !0, r.sub(u)), r.props.value) : n.__;
    }

    function x$1() {
      i.forEach(function (t) {
        if (t.__P) try {
          t.__H.__h.forEach(g$1), t.__H.__h.forEach(j$1), t.__H.__h = [];
        } catch (u) {
          t.__H.__h = [], l$1.__e(u, t.__v);
        }
      }), i = [];
    }

    l$1.__b = function (n) {
      u = null, c && c(n);
    }, l$1.__r = function (n) {
      f && f(n), t = 0;
      var r = (u = n.__c).__H;
      r && (r.__h.forEach(g$1), r.__h.forEach(j$1), r.__h = []);
    }, l$1.diffed = function (t) {
      e && e(t);
      var o = t.__c;
      o && o.__H && o.__H.__h.length && (1 !== i.push(o) && r === l$1.requestAnimationFrame || ((r = l$1.requestAnimationFrame) || function (n) {
        var t,
            u = function () {
          clearTimeout(r), b && cancelAnimationFrame(t), setTimeout(n);
        },
            r = setTimeout(u, 100);

        b && (t = requestAnimationFrame(u));
      })(x$1)), u = void 0;
    }, l$1.__c = function (t, u) {
      u.some(function (t) {
        try {
          t.__h.forEach(g$1), t.__h = t.__h.filter(function (n) {
            return !n.__ || j$1(n);
          });
        } catch (r) {
          u.some(function (n) {
            n.__h && (n.__h = []);
          }), u = [], l$1.__e(r, t.__v);
        }
      }), a && a(t, u);
    }, l$1.unmount = function (t) {
      v && v(t);
      var u = t.__c;
      if (u && u.__H) try {
        u.__H.__.forEach(g$1);
      } catch (t) {
        l$1.__e(t, u.__v);
      }
    };
    var b = "function" == typeof requestAnimationFrame;

    function g$1(n) {
      var t = u;
      "function" == typeof n.__c && n.__c(), u = t;
    }

    function j$1(n) {
      var t = u;
      n.__c = n.__(), u = t;
    }

    function k(n, t) {
      return !n || n.length !== t.length || t.some(function (t, u) {
        return t !== n[u];
      });
    }

    function w$1(n, t) {
      return "function" == typeof t ? t(n) : t;
    }

    /**
     * Slightly enhanced version of `useState` that includes a getter that remains constant
     * (i.e. you can use it in `useEffect` and friends without it being a dependency).
     *
     * @param initialState
     * @returns
     */

    function useState(initialState) {
      // We keep both
      var [state, setState] = l(initialState);
      var ref = s(state); // Hijack the normal setter function 
      // to also set our ref to the new value

      var set = A$1(value => {
        if (typeof value === "function") {
          var callback = value;
          setState(prevValue => {
            var nextValue = callback(prevValue);
            ref.current = nextValue;
            return nextValue;
          });
        } else {
          ref.current = value;
          setState(value);
        }
      }, []);

      var get = () => {
        return ref.current;
      };

      console.assert(ref.current === state);
      return [state, set, get];
    }

    /**
     *
     * There are several different ways that a focus event can happen.  Assume
     * the following steps happen in order:
     *
     * 1. The page loads.
     *    * Nothing is focused, but `document.activeElement` is `body`.
     *    * No focus events are fired.
     * 2. The window is focused, an unfocusable element is clicked, text is selected, etc.
     *    * The `activeElement` remains as `body`.
     *    * A `focus`/`focusin` event *MIGHT* be fired for `body`. Depending on
     *      the browser, this depends on whether the handler was attached to `window` or `document`.
     *      Probably just best to not rely on it, or listen to `window` focus events directly.
     * 3. A focusable element is clicked, etc.
     *    * The `activeElement` is set to the new element before any event even fires.
     *    * `focusout` and `blur` are *not* fired on `body`.
     *    * `focus` and `focusin` are fired on the new element. `relatedTarget` is null.
     * 4. A focusable element is clicked, etc.
     *    * **The `activeElement` is set to the `body`** before any event even fires.
     *    * `blur` and `focusout` are fired on the old element. `relatedTarget` is the new element.
     *    * The `activeElement` is now set to the new element.
     *    * `focusin` is fired on the new element. `relatedTarget` is the old element.
     * 5. An unfocusable element is clicked, text is selected, etc.
     *    * The `activeElement` is set to `body`.
     *    * `blur` and `focusout` are fired on the old element. `relatedTarget` is null.
     *    * `focusin` is *not* fired on `body`.
     *
     *
     * In summary:
     * 1. Focus events *do* notify us of all changes in focus, but there is no one single comprehensive event that provides us with all available information.
     * 2. `document.activeElement` *is not* always the same as what's being referenced by a focus event. In particular, it may become `body` at any arbitrary time.
     * 3. A `blur` without a `focus` can and will occur. This means it is not possible to solely use `focus` to detect all changes.
     * 4. A `blur` event whose `relatedTarget` is null indicates that there will be no following `focus` event.
     *
     *
     * @param callback
     * @returns
     */

    var currentlyFocusedElement = null;
    var lastFocusedElement = null;

    function getLastFocusedElement() {
      return lastFocusedElement;
    }

    function getCurrentlyFocusedElement() {
      return currentlyFocusedElement;
    }

    var updaters = new Set();

    function focusout(e) {
      if (e.relatedTarget == null) {
        currentlyFocusedElement = null;

        for (var f of updaters) {
          f({
            current: currentlyFocusedElement,
            last: lastFocusedElement,
            windowFocused
          });
        }
      }
    }

    function focusin(e) {
      currentlyFocusedElement = lastFocusedElement = e.target;

      for (var f of updaters) {
        f({
          current: currentlyFocusedElement,
          last: lastFocusedElement,
          windowFocused
        });
      }
    }

    var windowFocused = true;

    function windowFocus() {
      windowFocused = true;

      for (var f of updaters) {
        f({
          current: currentlyFocusedElement,
          last: lastFocusedElement,
          windowFocused
        });
      }
    }

    function windowBlur() {
      windowFocused = false;

      for (var f of updaters) {
        f({
          current: currentlyFocusedElement,
          last: lastFocusedElement,
          windowFocused
        });
      }
    }

    function useActiveElement(filter) {
      var [i, setI] = useState(0);
      h(() => {
        var F = info => {
          if (filter == null || filter(info)) setI(i => ++i);
        };

        if (updaters.size === 0) {
          document.addEventListener("focusin", focusin, {
            passive: true
          });
          document.addEventListener("focusout", focusout, {
            passive: true
          });
          window.addEventListener("focus", windowFocus, {
            passive: true
          });
          window.addEventListener("blur", windowBlur, {
            passive: true
          });
        }

        updaters.add(F);
        return () => {
          updaters.delete(F);

          if (updaters.size === 0) {
            document.removeEventListener("focusin", focusin);
            document.removeEventListener("focusout", focusout);
            window.removeEventListener("focus", windowFocus);
            window.removeEventListener("blur", windowBlur);
          }
        };
      }, [filter]);
      return {
        activeElement: currentlyFocusedElement,
        lastActiveElement: lastFocusedElement,
        getActiveElement: getCurrentlyFocusedElement,
        getLastActiveElement: getLastFocusedElement,
        windowFocused
      };
    }

    function useMergedChildren(lhsProps, rhsProps) {
      var lhs = lhsProps === null || lhsProps === void 0 ? void 0 : lhsProps.children;
      var rhs = rhsProps === null || rhsProps === void 0 ? void 0 : rhsProps.children;

      if (lhs == null && rhs == null) {
        return undefined;
      } else if (lhs == null) {
        return rhs;
      } else if (rhs == null) {
        return lhs;
      } else {
        var ret = v$1(d$1, {}, lhs, rhs);
        return ret;
      }
    }

    function toVal(mix) {
      var k,
          y,
          str = '';

      if (typeof mix === 'string' || typeof mix === 'number') {
        str += mix;
      } else if (typeof mix === 'object') {
        if (Array.isArray(mix)) {
          for (k = 0; k < mix.length; k++) {
            if (mix[k]) {
              if (y = toVal(mix[k])) {
                str && (str += ' ');
                str += y;
              }
            }
          }
        } else {
          for (k in mix) {
            if (mix[k]) {
              str && (str += ' ');
              str += k;
            }
          }
        }
      }

      return str;
    }

    function clsx () {
      var i = 0,
          tmp,
          x,
          str = '';

      while (i < arguments.length) {
        if (tmp = arguments[i++]) {
          if (x = toVal(tmp)) {
            str && (str += ' ');
            str += x;
          }
        }
      }

      return str;
    }

    /**
     * Given two sets of props, merges their `class` and `className` properties.
     * Duplicate classes are removed (order doesn't matter anyway).
     *
     * @param lhs Classes of the first component
     * @param rhs Classes of the second component
     * @returns A string representing all combined classes from both arguments.
     */

    function useMergedClasses(lhs, rhs) {
      // Note: For the sake of forward compatibility, this function is labelled as
      // a hook, but as it uses no other hooks it technically isn't one.
      return mergeClasses(lhs, rhs);
    }

    function mergeClasses(lhs, rhs) {
      var lhsClass = lhs === null || lhs === void 0 ? void 0 : lhs.class;
      var lhsClassName = lhs === null || lhs === void 0 ? void 0 : lhs.className;
      var rhsClass = rhs === null || rhs === void 0 ? void 0 : rhs.class;
      var rhsClassName = rhs === null || rhs === void 0 ? void 0 : rhs.className;

      if (lhsClass || rhsClass || lhsClassName || rhsClassName) {
        var lhsClasses = clsx(lhsClass, lhsClassName).split(" ");
        var rhsClasses = clsx(rhsClass, rhsClassName).split(" ");
        var allClasses = new Set([...Array.from(lhsClasses), ...Array.from(rhsClasses)]);
        return Array.from(allClasses).join(" ");
      } else {
        return undefined;
      }
    }

    function processRef(instance, ref) {
      if (typeof ref === "function") {
        ref(instance);
      } else if (ref != null) {
        ref.current = instance;
      }
    }
    /**
     * Combines two refs into one. This allows a component to both use its own ref *and* forward a ref that was given to it.
     * @param lhs
     * @param rhs
     * @returns
     */


    function useMergedRefs() {
      return function (lhsProps, rhsProps) {
        var lhs = lhsProps === null || lhsProps === void 0 ? void 0 : lhsProps.ref;
        var rhs = rhsProps === null || rhsProps === void 0 ? void 0 : rhsProps.ref;

        if (lhs == null && rhs == null) {
          return undefined;
        } else if (lhs == null) {
          return rhs;
        } else if (rhs == null) {
          return lhs;
        } else {
          var ret = A$1(current => {
            processRef(current, lhs);
            processRef(current, rhs);
          }, [lhs, rhs]);
          return ret;
        }
      };
    }
    /*
    function typetest<P extends h.JSX.HTMLAttributes<HTMLInputElement>>(props: P) {

        const ref: RefObject<HTMLInputElement> = useRef<HTMLInputElement>(null);

        function acceptsRef(ref: Ref<any>) { }
        function acceptsOptionalRef(ref: Ref<any> | undefined) { }

        const c = [
            useMergedRefs<HTMLInputElement>()(undefined, undefined),
            useMergedRefs<HTMLInputElement>()({}, undefined),
            useMergedRefs<HTMLInputElement>()(props, undefined),
            useMergedRefs<HTMLInputElement>()(undefined, props),
            useMergedRefs<HTMLInputElement>()(props, props),
            useMergedRefs<HTMLInputElement>()({ ref }, props),
            useMergedRefs<HTMLInputElement>()({ ref }, { ref: undefined }),
            useMergedRefs<HTMLInputElement>()({ ref: undefined }, { ref }),
            useMergedRefs<HTMLInputElement>()({ ref }, { ref }),
        ] as const;

        /// @ts-expect-error
        acceptsRef(c[0]);
        /// @ts-expect-error
        acceptsRef(c[1]);

        acceptsOptionalRef(c[2]);
        acceptsOptionalRef(c[3]);
        acceptsOptionalRef(c[4]);

        /// @ts-expect-error TODO
        acceptsRef(c[5]);
        acceptsRef(c[6]);
        acceptsRef(c[7]);
        acceptsRef(c[8]);
    }
    */

    /**
     * Merges two style objects, returning the result.
     *
     * @param style The user-given style prop for this component
     * @param obj The CSS properties you want added to the user-given style
     * @returns A CSS object containing the properties of both objects.
     */
    function useMergedStyles(lhs, rhs) {
      var _lhs$style, _rhs$style;

      // Easy case, when there are no styles to merge return nothing.
      if (!lhs && !rhs) return undefined;

      if (typeof lhs != typeof rhs) {
        // Easy cases, when one is null and the other isn't.
        if (lhs && !rhs) return lhs;
        if (!lhs && rhs) return rhs; // They're both non-null but different types.
        // Convert the string type to an object bag type and run it again.

        if (lhs && rhs) {
          if (typeof lhs == "string") return useMergedStyles({
            style: Object.fromEntries(lhs.split(";").map(statement => statement.split(":")))
          }, rhs);
          if (typeof rhs == "string") return useMergedStyles(lhs, {
            style: Object.fromEntries(lhs.split(";").map(statement => statement.split(":")))
          });
        } // Logic???


        return undefined;
      } // They're both strings, just concatenate them.


      if (typeof lhs == "string") {
        return "".concat(lhs, ";").concat(rhs); // TODO: Improve the typing to make this possible
      } // They're both objects, just merge them.


      return _objectSpread2(_objectSpread2({}, (_lhs$style = lhs === null || lhs === void 0 ? void 0 : lhs.style) !== null && _lhs$style !== void 0 ? _lhs$style : {}), (_rhs$style = rhs === null || rhs === void 0 ? void 0 : rhs.style) !== null && _rhs$style !== void 0 ? _rhs$style : {});
    }

    var _excluded$E = ["children", "class", "className", "style", "ref"],
        _excluded2$b = ["children", "class", "className", "style", "ref"];

    var log = str => {
      debugger;
      /* Intentional */
    };
    /**
     * Given two sets of props, merges them and returns the result.
     *
     * The hook is aware of and can intelligently merge `className`, `class`, `style`, `ref`, and all event handlers.
     * @param lhs2
     * @param rhs2
     * @returns
     */

    function useMergedProps() {
      return function (lhs2, rhs2) {
        // First, put in all the properties that are easy to reason about
        // and all lhs props. We're going to merge in rhs just after.
        var lhs = _objectWithoutProperties(lhs2, _excluded$E);

        var rhs = _objectWithoutProperties(rhs2, _excluded2$b);

        var ret = _objectSpread2(_objectSpread2({}, lhs), {}, {
          ref: useMergedRefs()(lhs2, rhs2),
          style: useMergedStyles(lhs2, rhs2),
          className: useMergedClasses(lhs2, rhs2),
          children: useMergedChildren(lhs2, rhs2)
        }); // Now, do *everything* else
        // Merge every remaining existing entry in lhs with what we've already put in ret.
        //const lhsEntries = Object.entries(lhs) as [keyof T, T[keyof T]][];


        var rhsEntries = Object.entries(rhs);

        for (var [rhsKey, rhsValue] of rhsEntries) {
          var lhsValue = lhs[rhsKey];

          if (typeof lhsValue === "function" || typeof rhsValue === "function") {
            // They're both functions that can be merged (or one's a function and the other's null).
            // Not an *easy* case, but a well-defined one.
            var merged = mergeFunctions(lhsValue, rhsValue);
            ret[rhsKey] = merged;
          } else {
            // Uh...we're here because one of them's null, right?
            if (lhsValue == null && rhsValue == null) {
              if (rhsValue === null && lhsValue === undefined) ret[rhsKey] = rhsValue;else ret[rhsKey] = lhsValue;
            }

            if (lhsValue == null) ret[rhsKey] = rhsValue;else if (rhsValue == null) ret[rhsKey] = lhsValue;else if (rhsValue == lhsValue) ; else {
              var _log;

              // Ugh.
              // No good strategies here, just log it if requested
              (_log = log) === null || _log === void 0 ? void 0 : _log("Could not merge incompatible prop \"".concat(rhsKey, "\" (type: ").concat(typeof rhsValue, ", values: [").concat(lhsValue, ", ").concat(rhsValue, "])"));
              ret[rhsKey] = rhsValue;
            }
          }
        }

        return ret;
      };
    }

    function mergeFunctions(lhs, rhs) {
      if (!lhs) return rhs;
      if (!rhs) return lhs;
      return (...args) => {
        var lv = lhs === null || lhs === void 0 ? void 0 : lhs(...args);
        var rv = rhs === null || rhs === void 0 ? void 0 : rhs(...args);
        if (lv instanceof Promise || rv instanceof Promise) return Promise.all([lv, rv]);
      };
    }
    /*
    function test<P extends h.JSX.HTMLAttributes<HTMLInputElement>>(props: P) {

        const id0: GenericGet<{}, "id", string> = "";
        const id3: GenericGet<{ id: undefined }, "id", string> = undefined;
        const id4: GenericGet<{ id: undefined }, "id", string> = undefined;
        const id5: GenericGet<{ id: undefined }, "id", string> = undefined;
        const id6: GenericGet<{ id: undefined }, "id", string> = undefined;
        //const id2: ZipSingle<string | undefined, string | undefined> = undefined;
        const id1: ZipObject<{ id: undefined }, { id: string }> = { id: undefined };

        type M1 = GenericGet<P, "style", string>;
        type M2 = GenericGet<{}, "style", string>;
        const m1: M1 = "";
        const m2: M1 = undefined;
        /// @ts-expect-error    Because number isn't assignable to string
        const m3: M1 = 0;

        const m4: M2 = "";
        const m5: M2 = undefined;
        /// @ts-expect-error    Because number isn't assignable to string
        const m6: M2 = 0;

        const p1: MergedProps<HTMLInputElement, {}, { id: string }> = useMergedProps<HTMLInputElement>()({}, { id: "string" });
        const p2: MergedProps<HTMLInputElement, { id: undefined }, { id: string }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: "string" });
        const p3: MergedProps<HTMLInputElement, { id: undefined }, { id: undefined }> = useMergedProps<HTMLInputElement>()({ id: undefined }, { id: undefined });
        const p4: MergedProps<HTMLInputElement, {}, {}> = useMergedProps<HTMLInputElement>()({}, {});
        const p5 = useMergedProps<HTMLInputElement>()(props, {});
        const p6 = useMergedProps<HTMLInputElement>()(props, { id: undefined });
        const p7 = useMergedProps<HTMLInputElement>()(props, { id: "string" });


        p1.id?.concat("");
        p2.id?.concat("");
        /// @ts-expect-error    id can't be anything but undefined
        p3.id?.concat("");
        /// @ts-expect-error    id can't be anything but undefined
        p4.id?.concat("");


        p5.id?.concat("");
        p6.id?.concat("");
        p7.id?.concat("");

        /// @ts-expect-error    id must contain undefined
        p5.id.concat("");
        /// @ts-expect-error    id must contain undefined
        p6.id.concat("");
        /// @ts-expect-error    id must contain undefined
        p7.id.concat("");


        if (p5.allowFullScreen === undefined) {}
        else if (p5.allowFullScreen === false) {}
        else if (p5.allowFullScreen === true) {}
        else {
            acceptsNever(p5.allowFullScreen);
        }


        if (p6.allowFullScreen === undefined) {}
        else if (p6.allowFullScreen === false) {}
        else if (p6.allowFullScreen === true) {}
        else {
            acceptsNever(p6.allowFullScreen);
        }


        if (p7.allowFullScreen === undefined) {}
        else if (p7.allowFullScreen === false) {}
        else if (p7.allowFullScreen === true) {}
        else {
            acceptsNever(p7.allowFullScreen);
        }


        // Make sure it works recursively
        const r1a = useMergedProps<HTMLInputElement>()({}, p1);
        const r1b = useMergedProps<HTMLInputElement>()(props, p1);
        const r2a = useMergedProps<HTMLInputElement>()({}, p2);
        const r2b = useMergedProps<HTMLInputElement>()(props, p2);
        const r3a = useMergedProps<HTMLInputElement>()({}, p3);
        const r3b = useMergedProps<HTMLInputElement>()(props, p3);
        const r4a = useMergedProps<HTMLInputElement>()({}, p4);
        const r4b = useMergedProps<HTMLInputElement>()(props, p4);
        const r5a = useMergedProps<HTMLInputElement>()({}, p5);
        const r5b = useMergedProps<HTMLInputElement>()(props, p5);
        const r6a = useMergedProps<HTMLInputElement>()({}, p6);
        const r6b = useMergedProps<HTMLInputElement>()(props, p6);
        const r7a = useMergedProps<HTMLInputElement>()({}, p7);
        const r7b = useMergedProps<HTMLInputElement>()(props, p7);


        r1a.id?.concat("");
        r1b.id?.concat("");
        r2a.id?.concat("");
        r2b.id?.concat("");
        // @ts-expect-error    id can't be anything but undefined
        r3a.id?.concat("");
        r3b.id?.concat("");
        /// @ts-expect-error    id can't be anything but undefined
        r4a.id?.concat("");
        r4b.id?.concat("");


        r5a.id?.concat("");
        r5b.id?.concat("");
        r6a.id?.concat("");
        r6b.id?.concat("");
        r7a.id?.concat("");
        r7b.id?.concat("");

        /// @ts-expect-error    id must contain undefined
        r5a.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r5b.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r6a.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r6b.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r7a.id.concat("");
        /// @ts-expect-error    id must contain undefined
        r7b.id.concat("");


        if (r5a.allowFullScreen === undefined) {}
        else if (r5a.allowFullScreen === false) {}
        else if (r5a.allowFullScreen === true) {}
        else {
            acceptsNever(r5a.allowFullScreen);
        }


        if (r5b.allowFullScreen === undefined) {}
        else if (r5b.allowFullScreen === false) {}
        else if (r5b.allowFullScreen === true) {}
        else {
            acceptsNever(r5b.allowFullScreen);
        }


        if (r6a.allowFullScreen === undefined) {}
        else if (r6a.allowFullScreen === false) {}
        else if (r6a.allowFullScreen === true) {}
        else {
            acceptsNever(r6a.allowFullScreen);
        }


        if (r6b.allowFullScreen === undefined) {}
        else if (r6b.allowFullScreen === false) {}
        else if (r6b.allowFullScreen === true) {}
        else {
            acceptsNever(r6b.allowFullScreen);
        }


        if (r7a.allowFullScreen === undefined) {}
        else if (r7a.allowFullScreen === false) {}
        else if (r7a.allowFullScreen === true) {}
        else {
            acceptsNever(r7a.allowFullScreen);
        }


        if (r7b.allowFullScreen === undefined) {}
        else if (r7b.allowFullScreen === false) {}
        else if (r7b.allowFullScreen === true) {}
        else {
            acceptsNever(r7b.allowFullScreen);
        }

    }
    function acceptsNever(n: never) {}
    */

    /**
     * Allows accessing the element a ref references as soon as it does so.
     * *This hook itself returns a hook*--useRefElementProps modifies the props that you were going to pass to an HTMLElement,
     * adding a RefCallback and merging it with any existing ref that existed on the props.
     *
     * Don't forget to provide the Element as the type argument!
     *
     * @returns The element, and the sub-hook that makes it retrievable.
     */

    function useRefElement() {
      // Let us store the actual (reference to) the element we capture
      var [element, setElement, getElement] = useState(null); // Create a RefCallback that's fired when mounted 
      // and that notifies us of our element when we have it

      var myRef = A$1(e => {
        if (e) setElement(() => e);
      }, []);
      var useRefElementProps = A$1(props => useMergedProps()({
        ref: myRef
      }, props), []); // Return both the element and the hook that modifies 
      // the props and allows us to actually find the element

      return {
        useRefElementProps,
        element,
        getElement
      };
    }

    function useHasFocus({} = {}) {
      // These are slightly redundant, but any time the focus changes, we need to know if it's "relevant" to us.
      // It's "relevant" if the newly-focused element is a child of us,
      // OR if we're focused and focus moves OUTSIDE of us our our children.
      // Because of that second bit, we need to keep track of where the focus was the last time we checked for the filter.
      var [hasFocus, setHasFocus, getHasFocus] = useState(false);
      var [hasLastFocus, setHasLastFocus, getHasLastFocus] = useState(false);
      var {
        element,
        getElement,
        useRefElementProps
      } = useRefElement();
      var {
        activeElement,
        lastActiveElement
      } = useActiveElement(A$1(({
        current,
        last,
        windowFocused
      }) => {
        // Keep in mind that once we get our element, even if the hook and filter functions
        // don't re-run, the currently-focused element will still be returned below, and,
        // even if it's not us or one of our children, will still be safely filtered out at render time.
        var element = getElement();
        if (!element) return false;
        var hasFocusNow = element.contains(current) || element.contains(last);

        if (hasFocusNow) {
          return true;
        } else {
          var hadFocusBeforeThis = getHasLastFocus() || getHasFocus();

          if (hadFocusBeforeThis) {
            // Return true once, so that useActiveElement will return one instance of a different element having focus.
            // Then, back outside this filter function, we'll know that we're no longer focused.
            return true;
          }

          return false;
        }
      }, [])); // These are primarily used for bookkeeping during the filter function above.

      h(() => {
        var _element$contains;

        setHasFocus((_element$contains = element === null || element === void 0 ? void 0 : element.contains(activeElement)) !== null && _element$contains !== void 0 ? _element$contains : false);
      }, [element, activeElement]);
      h(() => {
        var _element$contains2;

        setHasLastFocus((_element$contains2 = element === null || element === void 0 ? void 0 : element.contains(lastActiveElement)) !== null && _element$contains2 !== void 0 ? _element$contains2 : false);
      }, [element, lastActiveElement]);
      var useHasFocusProps = A$1(props => {
        return useRefElementProps(props);
      }, [useRefElementProps]);
      var focused = d(() => {
        return element == activeElement;
      }, [element, activeElement]);
      var focusedInner = d(() => {
        var _element$contains3;

        return (_element$contains3 = element === null || element === void 0 ? void 0 : element.contains(activeElement)) !== null && _element$contains3 !== void 0 ? _element$contains3 : false;
      }, [element, activeElement]);
      var lastFocused = d(() => {
        return element == lastActiveElement;
      }, [element, lastActiveElement]);
      var lastFocusedInner = d(() => {
        var _element$contains4;

        return (_element$contains4 = element === null || element === void 0 ? void 0 : element.contains(lastActiveElement)) !== null && _element$contains4 !== void 0 ? _element$contains4 : false;
      }, [element, lastActiveElement]);
      return {
        useHasFocusProps,
        focused,
        focusedInner,
        lastFocused,
        lastFocusedInner
      };
    }

    var Table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";

    function base64(value) {
      return Table[value];
    }

    function random6Bits() {
      return Math.floor(Math.random() * 0b1000000);
    }

    function random64Bits() {
      return [random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits(), random6Bits()];
    }
    /**
     * Returns a randomly-generated ID with an optional prefix.
     * Note that if the prefix is *explicitly* set to "", then
     * IDs that are not valid under HTML4 may be generated. Oh no.
     */


    function generateRandomId(prefix) {
      return "".concat(prefix !== null && prefix !== void 0 ? prefix : "id-").concat(random64Bits().map(n => base64(n)).join(""));
    }
    /**
     * Returns a hook that modifies a set of props to provide a randomly-generated ID if one was not provided.
     *
     * If you'd like to use the ID in a property that's *not* named `id` (like `for` or `aria-labelledby` or whatnot), `useReferencedIdProps` is also provided.
     *
     * And the randomly-generated id itself is also provided in case you want to handle the logic yourself without `useMergedProps`.
     *
     * Unlike most other `use*Props` hooks, these are mostly stable.
     */

    function useRandomId({
      prefix
    } = {}) {
      var [randomId, setRandomId] = useState(() => generateRandomId(prefix));
      var [watchPrefixUpdates, setWatchPrefixUpdates, getWatchPrefixUpdates] = useState(false);
      h(() => {
        var watchPrefixUpdates = getWatchPrefixUpdates();
        if (watchPrefixUpdates) setRandomId(() => generateRandomId(prefix));
        setWatchPrefixUpdates(true);
      }, [prefix]); // Whatever ID was most recently used by the actual "id" prop.
      // Used so that any ID-referencing props don't need to provide the same value.
      //
      // TODO: This does mean that on the first render, if just the ID is provided,
      // there will be a temporary mismatch, but it's corrected before rendering finishes.
      // Is this okay?

      var [usedId, setUsedId, getUsedId] = useState(undefined);
      var useReferencedIdProps = A$1(function useReferencedIdProps(idPropName) {
        var ret = function (_ref) {
          var _ref2, _ref3;

          var {
            [idPropName]: givenId
          } = _ref,
              props = _objectWithoutProperties(_ref, [idPropName].map(_toPropertyKey));

          var usedId2 = (_ref2 = (_ref3 = givenId !== null && givenId !== void 0 ? givenId : usedId) !== null && _ref3 !== void 0 ? _ref3 : randomId) !== null && _ref2 !== void 0 ? _ref2 : undefined;
          if (idPropName === "id") setUsedId(usedId2);
          return useMergedProps()({
            [idPropName]: usedId2
          }, props);
        };

        return ret;
      }, [usedId, randomId]);
      var useRandomIdProps = A$1(function useRandomIdProps(p) {
        return useReferencedIdProps("id")(p);
      }, [useReferencedIdProps]);
      return {
        randomId,
        id: usedId,
        getId: getUsedId,
        useRandomIdProps,
        useReferencedIdProps
      };
    }

    function useElementSize({
      observeBox
    } = {}) {
      var {
        element,
        useRefElementProps
      } = useRefElement();
      var [size, setSize, getSize] = useState(null);
      y(() => {
        if (element) {
          var handleUpdate = () => {
            var {
              clientWidth,
              scrollWidth,
              offsetWidth,
              clientHeight,
              scrollHeight,
              offsetHeight,
              clientLeft,
              scrollLeft,
              offsetLeft,
              clientTop,
              scrollTop,
              offsetTop
            } = element;
            setSize({
              clientWidth,
              scrollWidth,
              offsetWidth,
              clientHeight,
              scrollHeight,
              offsetHeight,
              clientLeft,
              scrollLeft,
              offsetLeft,
              clientTop,
              scrollTop,
              offsetTop
            });
          };

          if (!("ResizeObserver" in window)) {
            document.addEventListener("resize", handleUpdate, {
              passive: true
            });
            return () => document.removeEventListener("resize", handleUpdate);
          } else {
            var observer = new ResizeObserver(entries => {
              handleUpdate();
            });
            observer.observe(element, {
              box: observeBox
            });
            return () => observer.disconnect();
          }
        }
      }, [element, observeBox]);
      return {
        element,
        elementSize: size,
        getElementSize: getSize,
        useElementSizeProps: useRefElementProps
      };
    }

    function capitalize(str) {
      return str[0].toUpperCase() + str.substr(1);
    }
    /**
     * Inspects the element's style and determines the logical direction that text flows.
     *
     * Certain CSS properties, like `block-size`, respect the current writing mode and text direction.
     * But `transform`, `clip`, etc. don't.
     *
     * This is provided so that CSS properties can consistently use those logical properties.
     *
     * See https://drafts.csswg.org/css-writing-modes/#logical-to-physical
     *
     * @returns An object containing the following functions:
     * * `getLogicalDirection`: retrieves a `LogicalDirectionInfo` representing the current state of the element. (Function is constant between renders)
     * * `convertElementSize`: When used in conjunction with `useElementSize`, allows you to retrieve the logical size of an element instead of the physical size.
     * * `convertToLogicalOrientation`: Based on the current direction, converts "horizontal" or "vertical" to "inline" or "block".
     * * `convertToPhysicalOrientation`:  Based on the current direction, converts "inline" or "block" to "horizontal" or "vertical".
     */


    function useLogicalDirection(element) {
      var [writingMode, setWritingMode] = l(null);
      var [direction, setDirection] = l(null);
      var [textOrientation, setTextOrientation] = l(null);
      var writingModeRef = s(writingMode);
      var directionRef = s(direction);
      var textOrientationRef = s(textOrientation);
      h(() => {
        writingModeRef.current = writingMode;
      }, [writingMode]);
      h(() => {
        directionRef.current = direction;
      }, [direction]);
      h(() => {
        textOrientationRef.current = textOrientation;
      }, [textOrientation]);
      h(() => {
        if (element) {
          var computedStyles = window.getComputedStyle(element);
          var w = computedStyles.writingMode;
          var t = computedStyles.textOrientation;
          var d = computedStyles.direction;
          setWritingMode(w || "horizontal-tb");
          setDirection(d || "rtl");
          setTextOrientation(t || "mixed");
        }
      });
      var getLogicalDirection = A$1(() => {
        var _direction;

        var writingMode = writingModeRef.current;
        var direction = directionRef.current;
        var textOrientation = textOrientationRef.current;
        if (!writingMode || !direction || !textOrientation) return null;
        if (textOrientation == "upright") direction = "ltr";
        return _objectSpread2({}, WritingModes[writingMode !== null && writingMode !== void 0 ? writingMode : "horizontal-tb"][(_direction = direction) !== null && _direction !== void 0 ? _direction : "ltr"]);
      }, [writingModeRef, directionRef, textOrientationRef]);
      var convertToLogicalOrientation = A$1((elementOrientation, direction) => {
        var _direction2, _direction3;

        (_direction2 = direction) !== null && _direction2 !== void 0 ? _direction2 : direction = getLogicalDirection();
        if (((_direction3 = direction) === null || _direction3 === void 0 ? void 0 : _direction3.inlineOrientation) === elementOrientation) return "inline";
        return "block";
      }, [getLogicalDirection]);
      var convertToPhysicalOrientation = A$1((elementOrientation, direction) => {
        var _direction4;

        (_direction4 = direction) !== null && _direction4 !== void 0 ? _direction4 : direction = getLogicalDirection();

        if (elementOrientation == "inline") {
          var _direction5;

          if (((_direction5 = direction) === null || _direction5 === void 0 ? void 0 : _direction5.inlineOrientation) == "horizontal") return "horizontal";
          return "vertical";
        } else {
          var _direction6;

          if (((_direction6 = direction) === null || _direction6 === void 0 ? void 0 : _direction6.blockOrientation) == "vertical") return "vertical";
          return "horizontal";
        }
      }, [getLogicalDirection]);
      var convertElementSize = A$1((elementSize, direction) => {
        var _direction7;

        (_direction7 = direction) !== null && _direction7 !== void 0 ? _direction7 : direction = getLogicalDirection();

        if (direction) {
          var {
            inlineSize,
            blockSize,
            inlineDirection,
            blockDirection
          } = direction; // Size is relatively simple

          var clientInlineSize = elementSize["client".concat(capitalize(inlineSize))];
          var clientBlockSize = elementSize["client".concat(capitalize(blockSize))];
          var offsetInlineSize = elementSize["offset".concat(capitalize(inlineSize))];
          var offsetBlockSize = elementSize["offset".concat(capitalize(blockSize))];
          var scrollInlineSize = elementSize["scroll".concat(capitalize(inlineSize))];
          var scrollBlockSize = elementSize["scroll".concat(capitalize(blockSize))]; // Position requires us to sometimes use one property (like `left`)
          // or sometimes two (like `left` + `width`)

          function getPhysicalLeftTop(dir) {
            if (dir === "ltr" || dir == "rtl") return "left";
            return "top";
          }

          function getPhysicalRightBottom(dir) {
            if (dir === "rtl") return "width";
            if (dir === "btt") return "height";
            return null;
          }

          var f1 = getPhysicalLeftTop(inlineDirection);
          var f2 = getPhysicalRightBottom(inlineDirection);
          var f3 = getPhysicalLeftTop(blockDirection);
          var f4 = getPhysicalRightBottom(blockDirection);
          var clientInlineInset = elementSize["client".concat(capitalize(f1))] + (!f2 ? 0 : elementSize["client".concat(capitalize(f2))]);
          var scrollInlineInset = elementSize["scroll".concat(capitalize(f1))] + (!f2 ? 0 : elementSize["scroll".concat(capitalize(f2))]);
          var offsetInlineInset = elementSize["offset".concat(capitalize(f1))] + (!f2 ? 0 : elementSize["offset".concat(capitalize(f2))]);
          var clientBlockInset = elementSize["client".concat(capitalize(f3))] + (!f4 ? 0 : elementSize["client".concat(capitalize(f4))]);
          var scrollBlockInset = elementSize["scroll".concat(capitalize(f3))] + (!f4 ? 0 : elementSize["scroll".concat(capitalize(f4))]);
          var offsetBlockInset = elementSize["offset".concat(capitalize(f3))] + (!f4 ? 0 : elementSize["offset".concat(capitalize(f4))]);
          return {
            clientInlineSize,
            scrollInlineSize,
            offsetInlineSize,
            clientBlockSize,
            scrollBlockSize,
            offsetBlockSize,
            clientInlineInset,
            scrollInlineInset,
            offsetInlineInset,
            clientBlockInset,
            scrollBlockInset,
            offsetBlockInset
          };
        }

        return null;
      }, [getLogicalDirection]);
      return {
        getLogicalDirection,
        convertElementSize,
        convertToLogicalOrientation,
        convertToPhysicalOrientation
      };
    }
    var HorizontalTbLtr = {
      inlineDirection: "ltr",
      blockDirection: "ttb",
      inlineOrientation: "horizontal",
      blockOrientation: "vertical",
      inlineSize: "width",
      blockSize: "height",
      leftRightDirection: "ltr",
      overUnderDirection: "ttb"
    };

    var HorizontalTbRtl = _objectSpread2(_objectSpread2({}, HorizontalTbLtr), {}, {
      inlineDirection: "rtl"
    });

    var VerticalRlLtr = {
      inlineDirection: "ttb",
      blockDirection: "rtl",
      inlineOrientation: "vertical",
      blockOrientation: "horizontal",
      inlineSize: "height",
      blockSize: "width",
      leftRightDirection: "ttb",
      overUnderDirection: "rtl"
    };

    var VerticalRlRtl = _objectSpread2(_objectSpread2({}, VerticalRlLtr), {}, {
      inlineDirection: "btt"
    });

    var SidewaysRlLtr = _objectSpread2({}, VerticalRlLtr);

    var SidewaysRlRtl = _objectSpread2({}, VerticalRlRtl);

    var VerticalLrLtr = _objectSpread2(_objectSpread2({}, VerticalRlLtr), {}, {
      blockDirection: "ltr"
    });

    var VerticalLrRtl = _objectSpread2(_objectSpread2({}, VerticalRlRtl), {}, {
      blockDirection: "ltr"
    });

    var SidewaysLtLtr = _objectSpread2(_objectSpread2({}, VerticalLrLtr), {}, {
      inlineDirection: "btt",
      leftRightDirection: "btt",
      overUnderDirection: "ltr"
    });

    var SidewaysLtRtl = _objectSpread2(_objectSpread2({}, SidewaysLtLtr), {}, {
      inlineDirection: "ttb"
    });

    var HorizontalTb = {
      ltr: HorizontalTbLtr,
      rtl: HorizontalTbRtl
    };
    var VerticalRl = {
      ltr: VerticalRlLtr,
      rtl: VerticalRlRtl
    };
    var VerticalLr = {
      ltr: VerticalLrLtr,
      rtl: VerticalLrRtl
    };
    var SidewaysRl = {
      ltr: SidewaysRlLtr,
      rtl: SidewaysRlRtl
    };
    var SidewaysLr = {
      ltr: SidewaysLtLtr,
      rtl: SidewaysLtRtl
    };
    var WritingModes = {
      "horizontal-tb": HorizontalTb,
      "vertical-lr": VerticalLr,
      "vertical-rl": VerticalRl,
      "sideways-lr": SidewaysLr,
      "sideways-rl": SidewaysRl
    };

    /**
     * Given an input value, returns a constant getter function that can be used
     * inside of `useEffect` and friends without including it in the dependency array.
     *
     * Use with caution, and **do not use the getter in useLayoutEffect!!**
     * `setState`'s getter does not have this problem, but then you're using your own state
     * instead of an existing value, which might not always be feasible.
     *
     * Weigh your options, and hopefully one of them gets the job done.
     *
     * @param value
     * @returns
     */

    function useStableGetter(value) {
      var ref = s(value);
      _(ref, () => value);
      return A$1(() => {
        return ref.current;
      }, []);
    }

    /**
     * Alternate useCallback() which always returns the same (wrapped) function reference
     * so that it can be excluded from the dependency arrays of `useEffect` and friends.
     *
     * DO NOT USE THE RESULT IN useLayoutEffect!!
     *
     * TODO: Investigate options.diffed if the useLayoutEffect limitation becomes limitlessly limiting.
     *
     * Source: https://github.com/facebook/react/issues/14099#issuecomment-659298422
     */

    function useStableCallback(fn) {
      var currentCallbackGetter = useStableGetter(fn);
      return A$1((...args) => {
        var currentFunc = currentCallbackGetter();

        if (!currentFunc) {
          throw new Error('Callback retrieved from useStableCallback() cannot be called from useLayoutEffect().');
        }

        return currentFunc(...args);
      }, []);
    }

    /**
     * Wrap the native `useLayoutEffect` to add arguments
     * that allow accessing the previous value as the first argument,
     * as well as the changes that caused the hook to be called as the second argument.
     *
     * @param effect
     * @param inputs
     */

    function useLayoutEffect(effect, inputs) {
      var prevInputs = s(inputs);

      var effect2 = () => {
        var changes = [];

        for (var i = 0; i < Math.max(prevInputs.current.length, inputs.length); ++i) {
          if (prevInputs.current[i] != inputs[i]) changes[i] = {
            from: prevInputs.current[i],
            to: inputs[i]
          };
        }

        effect(prevInputs.current, changes);
        prevInputs.current = inputs;
      };

      h(effect2, inputs);
    }

    function useTimeout({
      timeout,
      callback,
      triggerIndex
    }) {
      var stableCallback = useStableCallback(callback);
      var getTimeout = useStableGetter(timeout);
      var timeoutIsNull = timeout == null;
      y(() => {
        var timeout = getTimeout();
        console.assert(timeoutIsNull == (timeout == null));

        if (timeout) {
          var handle = setTimeout(stableCallback, timeout);
          return () => clearTimeout(handle);
        }
      }, [triggerIndex, timeoutIsNull]);
    }

    /**
     * Given an asyncronous event handler, returns a syncronous one that works on the DOM,
     * along with some other information related to the current state.
     * Does not modify any props.
     *
     * The handler is automatically throttled to only run one at a time.
     * If the handler is called, and then before it finishes, is called again,
     * it will be put on hold until the current one finishes, at which point
     * the second one will run.  If the handler is called a third time before
     * the first has finished, it will *replace* the second, so only the most
     * recently called iteration of the handler will run.
     *
     * You may optionally *also* specify a debounce parameter that waits until the
     * syncronous handler has not been called for the specified number of
     * milliseconds, at which point we *actually* run the asyncronous handler
     * according to the logic in the previous paragraph. This is in
     * *addition* to throttling the handler, and does not replace that behavior.
     *
     * Note that the parameters to the async handler are slightly different than
     * the sync handler &ndash; the first argument, as decided by you with the
     * `capture` parameter for this hook, is the "saved" information from the
     * event.  For example, the event's currentTarget's `value`, which may have
     * changed by the time the handler is *actually* called.  The second argument
     * is the original event, which might still have some useful fields on it
     * like `mouseX` or something, but is stale at least in regards to the
     * element it references.
     */

    function useAsyncHandler() {
      return function ({
        capture,
        debounce
      }) {
        // Always represents whatever promise is currently being waited on, or null if none.
        var [promise, setPromise, getPromise] = useState(null); // Keep track of how many times we've actually called the async handler

        var [runCount, setRunCount] = useState(0);
        var [resolveCount, setResolveCount] = useState(0);
        var [rejectCount, setRejectCount] = useState(0); // If we're set to use a debounce, then when the timeout finishes,
        // the promise from this state object is transferred over to either 
        // the current promise or the pending promise.

        var [debouncedPromiseStarter, setDebouncedPromiseStarter, getDebouncedPromiseStarter] = useState(null); // When we want to start a new promise, we won't allow it to start if one is still running.
        // In that case, we store the promise (or rather, a way to start the promise) in state.

        var [pendingPromiseStarter, setPendingPromiseStarter, getPendingPromiseStarter] = useState(null); // We need to differentiate between `undefined` and "no error has been thrown".

        var [error, setError, getError] = useState(undefined);
        var [hasError, setHasError, getHasError] = useState(false); // Same thing, we need to differentiate between "nothing captured yet" and "`undefined` was captured"

        var [currentCapture, setCurrentCapture, getCurrentCapture] = useState(undefined);
        var [hasCapture, setHasCapture] = useState(false); // When the debounce timer is up (or we manually request the debounce to end)
        // run the normal "please consider running this promise" routine that we would
        // have just run immediately if we weren't debouncing our promises.

        var onDebounceTimeUp = A$1(() => {
          var debouncedPromiseStarter = getDebouncedPromiseStarter();
          if (debouncedPromiseStarter) wantToStartANewPromise(debouncedPromiseStarter);
          setDebouncedPromiseStarter(null);
        }, [wantToStartANewPromise, setDebouncedPromiseStarter]); // Handle the debounce. Logically this happens before the main step as a sort of step 0.
        // Resets the timeout any time the handler was requested to be called again
        // and when it finishes, actually call the handler (or set it as the pending promise)

        useTimeout({
          timeout: debounce !== null && debounce !== void 0 ? debounce : null,
          callback: onDebounceTimeUp,
          triggerIndex: debouncedPromiseStarter
        }); // See if we should set our current promise to be whatever the pending promise is
        // (usually because the current promise finished and became null).

        useLayoutEffect(() => {
          // Our current promise just finished and there's one waiting?
          if (promise == null && pendingPromiseStarter != null) {
            wantToStartANewPromise(pendingPromiseStarter);
            setPendingPromiseStarter(null);
          }
        }, [promise, pendingPromiseStarter]); // Called any time the async handler is about to be called for whatever reason,
        // except for debounce, which comes first, as a sort of "step 0".
        // Handles all the necessary boilerplate related to choosing whether to
        // run or set as pending, resetting state variables, etc.

        function wantToStartANewPromise(startPromise) {
          var alreadyRunningPromise = getPromise() != null; // Boilerplate wrapper around the given promise starter

          var startPromiseWithBoilerplate = () => {
            // When it starts, notify the caller
            setRunCount(r => ++r); // When it completes, notify the caller
            // When it fails, save the error and notify the caller
            // When it settles, reset our state so we can run a pending promise if it exists

            var onThen = () => {
              setResolveCount(c => ++c);
            };

            var onCatch = ex => {
              setError(ex);
              setHasError(true);
              setRejectCount(c => ++c);
            };

            var onFinally = () => {
              setPromise(null);
            }; // Handle the special case where the handler is synchronous


            var result;

            try {
              result = startPromise();

              if (result == undefined) {
                // It's synchronous and returned successfully.
                // Bail out early.
                onThen();
                onFinally();
                return;
              }

              console.assert("then" in result);
            } catch (ex) {
              // It's synchronous (or asynchronous but didn't await anything yet) and threw an error.
              // Bail out early.
              onCatch(ex);
              onFinally();
              return;
            } // The handler is asynchronous


            return _asyncToGenerator(function* () {
              yield result;
            })().then(onThen).catch(onCatch).finally(onFinally);
          };

          if (!alreadyRunningPromise) {
            // Start the promise immediately, because there wasn't one running already.
            var nextPromise = startPromiseWithBoilerplate();

            if (nextPromise == undefined) ; else {
              setError(undefined);
              setHasError(false);
              setPromise(nextPromise);
            }
          } else {
            // Don't start the promise yet, 
            // and allow it to start in the future instead.
            setPendingPromiseStarter(_ => startPromiseWithBoilerplate);
          }
        }

        var ret = {
          getSyncHandler,
          getCurrentCapture,
          callCount: runCount,
          currentCapture,
          hasCapture,
          pending: promise != null,
          hasError,
          error,
          flushDebouncedPromise: onDebounceTimeUp,
          resolveCount,
          rejectCount,
          settleCount: rejectCount + resolveCount
        };
        return ret;

        function getSyncHandler(asyncHandler) {
          var syncHandler = useStableCallback(function syncHandler(event) {
            if (asyncHandler == null) return; // Get the most significant information from the event at this time,
            // which is necessary since the promise could actually be called much later
            // when the element's value (etc.) has changed.

            var captured = capture(event);
            setCurrentCapture(captured);
            setHasCapture(true);

            var startPromise = () => asyncHandler(captured, event);

            if (debounce == null) {
              wantToStartANewPromise(startPromise);
            } else {
              setDebouncedPromiseStarter(_ => startPromise);
            }
          });
          return asyncHandler == null ? undefined : syncHandler;
        }
      };
    }

    /**
     * Allows attaching an event handler to any *non-Preact* element, and removing it when the component using the hook unmounts. The callback does not need to be stable across renders.
     *
     * Due to typing limitations, this function must be called like this:
     *
     * `useEventHandler(element, "input")<InputEvent>(e => {})`
     *
     * The type argument is optional, but narrows down the type from "a union of all events" to whatever you specify, and errors if it doesn't exist.
     *
     * There is a separate version that attaches event handlers to a set of props.
     * It takes different event string types (onEvent vs onevent).
     *
     * @param target A *non-Preact* node to attach the event to.
     * @returns
     * *
     */

    function useGlobalHandler(target, type, handler, options) {
      // Note to self: The typing doesn't improve even if this is split up into a sub-function.
      // No matter what, it seems impossible to get the handler's event object typed perfectly.
      // It seems like it's guaranteed to always be a union of all available tupes.
      // Again, no matter what combination of sub- or sub-sub-functions used.
      var stableHandler = useStableCallback(handler !== null && handler !== void 0 ? handler : () => {});
      y(() => {
        target.addEventListener(type, stableHandler, options);
        return () => target.removeEventListener(type, stableHandler, options);
      }, [target, type, stableHandler]);
    }

    function useInterval({
      interval,
      callback
    }) {
      // Get a wrapper around the given callback that's stable
      var stableCallback = useStableCallback(callback);
      var getInterval = useStableGetter(interval);
      y(() => {
        var interval = getInterval();
        var lastDelayUsed = interval;
        if (interval == null) return; // Get a wrapper around the wrapper around the callback
        // that clears and resets the interval if it changes.

        var adjustableCallback = () => {
          stableCallback();
          var currentInterval = getInterval();

          if (currentInterval != lastDelayUsed) {
            clearInterval(handle);
            if (currentInterval != null) handle = setInterval(adjustableCallback, lastDelayUsed = currentInterval);
          }
        };

        var handle = setInterval(adjustableCallback, interval);
        return () => clearInterval(handle);
      }, []);
    }

    /**
     * Allows a parent component to access information about certain
     * child components once they have rendered.
     *
     * This hook is slightly more complicated in that it returns both a
     * prop-modifying hook, but also a hook that each child will need
     * to use: `useManagedChild`.  It's stable across renders, so just
     * toss it into a `Context` so the children can have access to it.
     * This function registers the child with the parent and provides
     * it with any requested information, but doesn't do anything else
     * until it unmounts and retracts that information.
     */

    function useChildManager() {
      // This is blindly updated any time a child mounts or unmounts itself.
      // Used to make sure that any time the array of managed children updates,
      // we also re-render.
      var [childUpdateIndex, setChildUpdateIndex] = useState(0);
      var [totalChildrenMounted, setTotalChildrenMounted, getTotalChildrenMounted] = useState(0);
      var [totalChildrenUnounted, setTotalChildrenUnounted, getTotalChildrenUnounted] = useState(0);
      var childrenCurrentlyMounted = totalChildrenMounted - totalChildrenUnounted;
      var managedChildren = s([]
      /** TODO: Any problems caused by using an array when it should be an object? */
      );
      var mountedChildren = s([]);
      var mountOrder = s(new Map());
      var indicesByElement = s(new Map());
      var getMountIndex = A$1(index => {
        return mountOrder.current.get(index);
      }, []);
      var useManagedChild = A$1(info => {
        var {
          element,
          getElement,
          useRefElementProps
        } = useRefElement();
        useLayoutEffect(() => {
          var index = getTotalChildrenMounted();
          mountOrder.current.set(info.index, index);
          mountedChildren.current[index] = info;
          setTotalChildrenMounted(t => ++t);
          return () => {
            mountOrder.current.delete(info.index);
            mountedChildren.current[index] = null;
            setTotalChildrenUnounted(t => ++t);
          };
        }, [info.index]); // As soon as the component mounts, notify the parent and request a rerender.

        useLayoutEffect(([prevElement, prevIndex], changes) => {
          if (element) {
            indicesByElement.current.set(element, info.index);

            if (managedChildren.current[info.index] != undefined) {
              console.assert(info.index == undefined, "Two children with the same index were added, which may result in unexpected behavior.");
              debugger; // Intentional
            }

            setChildUpdateIndex(c => ++c);
            managedChildren.current[info.index] = _objectSpread2({}, info);
            return () => {
              setChildUpdateIndex(c => ++c);
              delete managedChildren.current[info.index];
              indicesByElement.current.delete(element);
            };
          }
        }, [element, info.index]); // Any time our child props change, make that information available generally.
        // *Don't re-render*, otherwise we'd be stuck in an
        // infinite loop every time an anonymous function is passed.
        // It comes in from the props so the child was already updated by it --
        // we don't need the parent to re-render every single child any time
        // "onClick" updates or whatever.  The relevant child already knows,
        // and that's what matters.

        useLayoutEffect(() => {
          if (managedChildren.current[info.index] != undefined) managedChildren.current[info.index] = _objectSpread2({}, info);
        }, [...Object.entries(info).flat()]);
        return {
          element,
          getElement,
          useManagedChildProps: useRefElementProps
        };
      }, []);
      return {
        useManagedChild,
        childCount: childrenCurrentlyMounted,
        managedChildren: managedChildren.current,
        mountedChildren: mountedChildren.current,
        indicesByElement: indicesByElement.current,
        totalChildrenMounted,
        totalChildrenUnounted,
        getMountIndex
      };
    }
    /**
     * Helper function for letting children know when they are or are not the
     * current selected/expanded/focused/whatever child.
     *
     * Automatically handles when children are mounted & unmounted and such.
     *
     * @param activatedIndex What index the current selected (etc.) child is
     * @param length How many children exist (as managedChildren.length)
     * @param setFlag A function that probably looks like (i, flag) => managedChildren[i].setActive(flag)
     */

    function useChildFlag(activatedIndex, length, setFlag) {
      var [prevActivatedIndex, setPrevActivatedIndex, getPrevActivatedIndex] = useState(null);
      var [prevChildCount, setPrevChildCount, getPrevChildCount] = useState(length); // Any time the number of components changes,
      // reset any initial, possibly incorrect state they might have had, just in case.

      useLayoutEffect(() => {
        var direction = Math.sign(length - getPrevChildCount());

        if (direction !== 0) {
          for (var i = (_getPrevChildCount = getPrevChildCount()) !== null && _getPrevChildCount !== void 0 ? _getPrevChildCount : 0; i != length; i += direction) {
            var _getPrevChildCount;

            setFlag(i, i === activatedIndex);
          }

          setPrevChildCount(length);
        }
      }, [setFlag, activatedIndex, length]);
      useLayoutEffect(() => {
        // Deactivate the previously activated component
        var prevActivatedIndex = getPrevActivatedIndex();

        if (prevActivatedIndex != activatedIndex) {
          if (prevActivatedIndex != null && prevActivatedIndex >= 0 && prevActivatedIndex < length) setFlag(prevActivatedIndex, false);
        } // Activate the current component


        if (activatedIndex != null && activatedIndex >= 0 && activatedIndex < length) {
          setFlag(activatedIndex, true);
          setPrevActivatedIndex(activatedIndex);
        }
      }, [setFlag, activatedIndex, length]);
    }

    var _excluded$D = ["managedChildren", "childCount", "useManagedChild", "indicesByElement"],
        _excluded2$a = ["tabIndex"],
        _excluded3$3 = ["tabIndex"];
    /**
     * Implements a roving tabindex system where only one "focusable"
     * component in a set is able to receive a tab focus. *Which*
     * of those elements receives focus is determined by you, but it's
     * recommended to offload that logic then to another hook, like
     * `useLinearNavigation`, which lets you change the tabbable
     * element with the arrow keys, `useTypeaheadNavigation`, which
     * lets you change the tabbable index with typeahead, or
     * `useListNavigation` if you just want everything bundled together.
     *
     * Note that the child hook returned by this function must be used
     * by every child that uses this roving tabindex logic.  The
     * prop-modifying hook *that* hook returns should then be used
     * on the child's element, as well as any other elements you'd like
     * to be explicitly made untabbable too.
     *
     * `focusOnChange` should be set to true if focus is
     * contained within whatever element contains the roving tab index.
     * Generally as simple as the following:
     * ```
     * const { focused, focusedInner, useHasFocusProps } = useHasFocus<ParentElement>();
     * const focusOnChange = (focusedInner != false);
     * ```
     * It's not included here because `useRovingTabIndex` doesn't know
     * anything about the container element, only children elements.
     * And just as well! Children should be allowed at the root,
     * regardless of if it's the whole app or just a given component.
     */

    function useRovingTabIndex({
      focusOnChange: foc,
      tabbableIndex
    }) {
      var [rerenderAndFocus, setRerenderAndFocus] = useState(null);
      var getFocusOnChange = useStableGetter(foc);
      var getTabbableIndex = useStableGetter(tabbableIndex);
      s(-Infinity); // Call the hook that allows us to collect information from children who provide it

      var _useChildManager = useChildManager(),
          {
        managedChildren,
        childCount,
        useManagedChild,
        indicesByElement
      } = _useChildManager,
          rest = _objectWithoutProperties(_useChildManager, _excluded$D); // Any time the tabbable index changes,
      // notify the previous child that it's no longer tabbable,
      // and notify the next child that is allowed to be tabbed to.


      useChildFlag(tabbableIndex, childCount, (index, tabbable) => {
        var _managedChildren$inde;

        if (index != null) (_managedChildren$inde = managedChildren[index]) === null || _managedChildren$inde === void 0 ? void 0 : _managedChildren$inde.setTabbable(tabbable);
      });
      A$1(() => {
        if (tabbableIndex != null) managedChildren[tabbableIndex].setTabbable(true);
      }, [tabbableIndex]);
      var useRovingTabIndexChild = A$1(info => {
        var [rrafIndex, setRrafIndex] = useState(1);
        var rerenderAndFocus = A$1(() => {
          setRrafIndex(i => ++i);
        }, []);

        var newInfo = _objectSpread2(_objectSpread2({}, info), {}, {
          rerenderAndFocus,
          setTabbable: A$1(tabbable => {
            setTabbable(tabbable);
          }, [])
        });

        var {
          element,
          getElement,
          useManagedChildProps
        } = useManagedChild(newInfo); // TODO: Using getTabbableIndex during render phase on mount

        var [tabbable, setTabbable] = useState(getTabbableIndex() == info.index);
        y(() => {
          if (element && tabbable) {
            setRerenderAndFocus(_ => rerenderAndFocus);

            if (getFocusOnChange() && "focus" in element) {
              requestAnimationFrame(() => {
                queueMicrotask(() => {
                  element.focus();
                });
              });
            }
          }
        }, [element, tabbable, rrafIndex]);

        function useRovingTabIndexSiblingProps(_ref) {
          var {
            tabIndex
          } = _ref,
              props = _objectWithoutProperties(_ref, _excluded2$a);

          if (tabIndex == null) {
            if (tabbable) tabIndex = 0;else tabIndex = -1;
          }

          return useMergedProps()({
            tabIndex
          }, props);
        }

        function useRovingTabIndexChildProps(_ref2) {
          var {
            tabIndex
          } = _ref2,
              props = _objectWithoutProperties(_ref2, _excluded3$3);

          if (tabIndex == null) {
            if (tabbable) tabIndex = 0;else tabIndex = -1;
          }

          return useMergedProps()(useManagedChildProps({
            tabIndex
          }), props);
        }
        return {
          useRovingTabIndexChildProps,
          useRovingTabIndexSiblingProps,
          tabbable
        };
      }, [useManagedChild]);
      return _objectSpread2({
        useRovingTabIndexChild,
        childCount,
        managedChildren,
        indicesByElement,
        focusCurrent: rerenderAndFocus
      }, rest);
    }

    var _excluded$C = ["text"];
    /**
     * When used in tandem with `useRovingTabIndex`, allows control of
     * the tabbable index with the arrow keys.
     *
     * @see useListNavigation, which packages everything up together.
     */

    function useLinearNavigation({
      getIndex,
      setIndex,
      managedChildren,
      navigationDirection
    }) {
      var _navigationDirection;

      (_navigationDirection = navigationDirection) !== null && _navigationDirection !== void 0 ? _navigationDirection : navigationDirection = "either";
      var index = getIndex();
      var childCount = managedChildren.length; // Make sure the tabbable index never escapes the bounds of all available children
      // TODO: Keep track of the original index and keep it, at least until keyboard navigation.

      useLayoutEffect(() => {
        if (index !== null) {
          if (index < 0) {
            setIndex(0);
          } else if (childCount > 0 && index >= childCount) {
            setIndex(childCount - 1);
          }
        }
      }, [index, childCount]); // These allow us to manipulate what our current tabbable child is.

      var navigateToIndex = A$1(index => {
        setIndex(index < 0 ? managedChildren.length + index : index);
      }, []);
      var navigateToNext = A$1(() => {
        setIndex(i => i === null ? null : ++i);
      }, []);
      var navigateToPrev = A$1(() => {
        setIndex(i => i === null ? null : --i);
      }, []);
      var navigateToStart = A$1(() => {
        navigateToIndex(0);
      }, [navigateToIndex]);
      var navigateToEnd = A$1(() => {
        navigateToIndex(-1);
      }, [navigateToIndex]);
      var useLinearNavigationChild = A$1(() => {
        var _element$parentElemen;

        var {
          useRefElementProps,
          element
        } = useRefElement(); // Prefer the parent element's direction so that we're not calling getComputedStyle
        // on every single individual child, which is likely redundant.
        // TODO: Does useLogicalDirection need to hold a per-render & per-element cache to make this work?
        // Or does the browser automatically cache the computations until something changes?
        // Given that the values are live, it seems like it should be the latter...

        var {
          convertElementSize,
          getLogicalDirection
        } = useLogicalDirection((_element$parentElemen = element === null || element === void 0 ? void 0 : element.parentElement) !== null && _element$parentElemen !== void 0 ? _element$parentElemen : element);

        var useLinearNavigationChildProps = props => {
          var onKeyDown = e => {
            // Not handled by typeahead (i.e. assume this is a keyboard shortcut)
            if (e.ctrlKey || e.metaKey) return;
            var info = getLogicalDirection();
            var allowsBlockNavigation = navigationDirection == "block" || navigationDirection == "either";
            var allowsInlineNavigation = navigationDirection == "inline" || navigationDirection == "either";

            switch (e.key) {
              case "ArrowUp":
                {
                  var propName = (info === null || info === void 0 ? void 0 : info.blockOrientation) === "vertical" ? "blockDirection" : "inlineDirection";
                  var directionAllowed = (info === null || info === void 0 ? void 0 : info.blockOrientation) === "vertical" ? allowsBlockNavigation : allowsInlineNavigation;

                  if (directionAllowed) {
                    if ((info === null || info === void 0 ? void 0 : info[propName]) === "btt") {
                      navigateToNext();
                    } else {
                      navigateToPrev();
                    }

                    e.preventDefault();
                    e.stopPropagation();
                  }

                  break;
                }

              case "ArrowDown":
                {
                  var _propName = (info === null || info === void 0 ? void 0 : info.blockOrientation) === "vertical" ? "blockDirection" : "inlineDirection";

                  var _directionAllowed = (info === null || info === void 0 ? void 0 : info.blockOrientation) === "vertical" ? allowsBlockNavigation : allowsInlineNavigation;

                  if (_directionAllowed) {
                    if ((info === null || info === void 0 ? void 0 : info[_propName]) === "btt") {
                      navigateToPrev();
                    } else {
                      navigateToNext();
                    }

                    e.preventDefault();
                    e.stopPropagation();
                  }

                  break;
                }

              case "ArrowLeft":
                {
                  var _propName2 = (info === null || info === void 0 ? void 0 : info.inlineOrientation) === "horizontal" ? "inlineDirection" : "blockDirection";

                  var _directionAllowed2 = (info === null || info === void 0 ? void 0 : info.inlineOrientation) === "horizontal" ? allowsInlineNavigation : allowsBlockNavigation;

                  if (_directionAllowed2) {
                    if ((info === null || info === void 0 ? void 0 : info[_propName2]) === "rtl") {
                      navigateToNext();
                    } else {
                      navigateToPrev();
                    }

                    e.preventDefault();
                    e.stopPropagation();
                  }

                  break;
                }

              case "ArrowRight":
                {
                  var _propName3 = (info === null || info === void 0 ? void 0 : info.inlineOrientation) === "horizontal" ? "inlineDirection" : "blockDirection";

                  var _directionAllowed3 = (info === null || info === void 0 ? void 0 : info.inlineOrientation) === "horizontal" ? allowsInlineNavigation : allowsBlockNavigation;

                  if (_directionAllowed3) {
                    if ((info === null || info === void 0 ? void 0 : info[_propName3]) === "rtl") {
                      navigateToPrev();
                    } else {
                      navigateToNext();
                    }

                    e.preventDefault();
                    e.stopPropagation();
                  }

                  e.preventDefault();
                  e.stopPropagation();
                  break;
                }

              case "Home":
                navigateToStart();
                e.preventDefault();
                e.stopPropagation();
                break;

              case "End":
                navigateToEnd();
                e.preventDefault();
                e.stopPropagation();
                break;
            }
          };

          return useRefElementProps(useMergedProps()({
            onKeyDown
          }, props));
        };

        return {
          useLinearNavigationChildProps
        };
      }, [navigationDirection, navigateToNext, navigateToPrev, navigateToStart, navigateToEnd]);
      return {
        useLinearNavigationChild,
        navigateToIndex,
        navigateToNext,
        navigateToPrev,
        navigateToStart,
        navigateToEnd
      };
    }
    /**
     * Allows for the selection of a managed child by typing the given text associated with it.
     *
     * @see useListNavigation, which packages everything up together.
     */

    function useTypeaheadNavigation({
      collator,
      getIndex,
      typeaheadTimeout,
      setIndex
    }) {
      // For typeahead, keep track of what our current "search" string is (if we have one)
      // and also clear it every 1000 ms since the last time it changed.
      // Next, keep a mapping of typeahead values to indices for faster searching.
      // And, for the user's sake, let them know when their typeahead can't match anything anymore
      var [currentTypeahead, setCurrentTypeahead, getCurrentTypeahead] = useState(null);
      useTimeout({
        timeout: typeaheadTimeout !== null && typeaheadTimeout !== void 0 ? typeaheadTimeout : 1000,
        callback: () => {
          setCurrentTypeahead(null);
          setInvalidTypeahead(null);
        },
        triggerIndex: currentTypeahead
      });
      var sortedTypeaheadInfo = s([]);
      var [invalidTypeahead, setInvalidTypeahead] = useState(false); // Handle typeahead for input method editors as well
      // Essentially, when active, ignore further keys 
      // because we're waiting for a CompositionEnd event

      var [imeActive, setImeActive, getImeActive] = useState(false); // Because composition events fire *after* keydown events 
      // (but within the same task, which, TODO, could be browser-dependent),
      // we can use this to keep track of which event we're listening for on the first keydown.

      var [nextTypeaheadChar, setNextTypeaheadChar] = useState(null);
      useLayoutEffect(() => {
        if (nextTypeaheadChar !== null) {
          setCurrentTypeahead(typeahead => (typeahead !== null && typeahead !== void 0 ? typeahead : "") + nextTypeaheadChar);
          setNextTypeaheadChar(null);
        }
      }, [nextTypeaheadChar]);
      var comparator = useStableCallback((lhs, rhs) => {
        var compare;

        if (typeof lhs === "string" && typeof rhs.text === "string") {
          var _safeRhs$toLowerCase;

          // For the purposes of typeahead, only compare a string of the same size as our currently typed string.
          // By normalizing them first, we ensure this byte-by-byte handling of raw character data works out okay.
          var safeLhs = lhs.normalize("NFD");
          var safeRhs = rhs.text.normalize("NFD").substr(0, safeLhs.length);
          if (collator) compare = collator.compare(safeLhs, safeRhs);else compare = safeLhs.toLowerCase().localeCompare((_safeRhs$toLowerCase = safeRhs.toLowerCase()) !== null && _safeRhs$toLowerCase !== void 0 ? _safeRhs$toLowerCase : "");
          return compare;
        }

        return lhs - rhs;
      }); // Handle changes in typeahead that cause changes to the tabbable index

      y(() => {
        if (currentTypeahead && sortedTypeaheadInfo.current.length) {
          var sortedTypeaheadIndex = binarySearch(sortedTypeaheadInfo.current, currentTypeahead, comparator);

          if (sortedTypeaheadIndex < 0) {
            // The user has typed an entry that doesn't exist in the list
            // (or more specifically "for which there is no entry that starts with that input")
            setInvalidTypeahead(true);
          } else {
            setInvalidTypeahead(false);
            /*
              We know roughly where, in the sorted array of strings, our next typeahead location is.
              But roughly isn't good enough if there are multiple matches.
              To convert our sorted index to the unsorted index we need, we have to find the first
              element that matches us *and* (if any such exist) is *after* our current selection.
                In other words, the only way typeahead moves backwards relative to our current
              position is if the only other option is behind us.
                It's not specified in WAI-ARIA what to do in that case.  I suppose wrap back to the start?
              Though there's also a case for just going upwards to the nearest to prevent jumpiness.
              But if you're already doing typeahead on an unsorted list, like, jumpiness can't be avoided.
              I dunno. Going back to the start is the simplist though.
                Basically what this does: Starting from where we found ourselves after our binary search,
              scan backwards and forwards through all adjacent entries that also compare equally so that
              we can find the one whose `unsortedIndex` is the lowest amongst all other equal strings
              (and also the lowest `unsortedIndex` yadda yadda except that it comes after us).
                TODO: The binary search starts this off with a solid O(log n), but one-character
              searches are, thanks to pigeonhole principal, eventually guaranteed to become
              O(n*log n). This is annoying but probably not easily solvable? There could be an
              exception for one-character strings, but that's just kicking the can down
              the road. Maybe one or two characters would be good enough though.
            */
            // These are used to keep track of the candidates' positions in both our sorted array and the unsorted DOM.

            var lowestUnsortedIndexAll = null;
            var lowestSortedIndexAll = sortedTypeaheadIndex; // These two are only set for elements that are ahead of us, but the principle's the same otherwise

            var lowestUnsortedIndexNext = null;
            var lowestSortedIndexNext = sortedTypeaheadIndex;

            var updateBestFit = u => {
              var _getIndex;

              if (lowestUnsortedIndexAll == null || u < lowestUnsortedIndexAll) {
                lowestUnsortedIndexAll = u;
                lowestSortedIndexAll = i;
              }

              if ((lowestUnsortedIndexNext == null || u < lowestUnsortedIndexNext) && u > ((_getIndex = getIndex()) !== null && _getIndex !== void 0 ? _getIndex : -Infinity)) {
                lowestUnsortedIndexNext = u;
                lowestSortedIndexNext = i;
              }
            };

            var i = sortedTypeaheadIndex;

            while (i >= 0 && comparator(currentTypeahead, sortedTypeaheadInfo.current[i]) == 0) {
              updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);
              --i;
            }

            i = sortedTypeaheadIndex;

            while (i < sortedTypeaheadInfo.current.length && comparator(currentTypeahead, sortedTypeaheadInfo.current[i]) == 0) {
              updateBestFit(sortedTypeaheadInfo.current[i].unsortedIndex);
              ++i;
            }

            if (lowestUnsortedIndexNext !== null) setIndex(sortedTypeaheadInfo.current[lowestSortedIndexNext].unsortedIndex);else if (lowestUnsortedIndexAll !== null) setIndex(sortedTypeaheadInfo.current[lowestSortedIndexAll].unsortedIndex);
          }
        }
      }, [currentTypeahead]);
      var useTypeaheadNavigationChild = A$1(_ref => {
        var {
          text
        } = _ref,
            i = _objectWithoutProperties(_ref, _excluded$C);

        y(() => {
          if (text) {
            // Find where to insert this item.
            // Because all index values should be unique, the returned sortedIndex
            // should always refer to a new location (i.e. be negative)                
            var sortedIndex = binarySearch(sortedTypeaheadInfo.current, text, comparator);
            console.assert(sortedIndex < 0);

            if (sortedIndex < 0) {
              sortedTypeaheadInfo.current.splice(-sortedIndex - 1, 0, {
                text,
                unsortedIndex: i.index
              });
            }

            return () => {
              // When unmounting, find where we were and remove ourselves.
              // Again, we should always find ourselves because there should be no duplicate values if each index is unique.
              var sortedIndex = binarySearch(sortedTypeaheadInfo.current, text, comparator);
              console.assert(sortedIndex >= 0);

              if (sortedIndex >= 0) {
                sortedTypeaheadInfo.current.splice(sortedIndex, 1);
              }
            };
          }
        }, [text]);

        var useTypeaheadNavigationChildProps = function (_ref2) {
          var props = _extends({}, _ref2);

          var {
            useRefElementProps,
            element
          } = useRefElement();

          var onCompositionStart = e => {
            setImeActive(true);
          };

          var onCompositionEnd = e => {
            setNextTypeaheadChar(e.data);
            setImeActive(false);
          };

          var onKeyDown = e => {
            var imeActive = getImeActive();
            var key = e.key; // Not handled by typeahead (i.e. assume this is a keyboard shortcut)

            if (e.ctrlKey || e.metaKey) return;

            if (!imeActive && e.key === "Backspace") {
              // Remove the last character in a way that doesn't split UTF-16 surrogates.
              setCurrentTypeahead(t => t === null ? null : [...t].reverse().slice(1).reverse().join(""));
              e.preventDefault();
              e.stopPropagation();
              return;
            } // The key property represents the typed character OR the "named key attribute" of the key pressed.
            // There's no definite way to tell the difference, but for all intents and purposes
            // there are no one-character names, and there are no non-ASCII-alpha names.
            // Thus, any one-character or non-ASCII value for `key` is *almost certainly* a typed character.


            var isCharacterKey = key.length === 1 || !/^[A-Za-z]/.test(key);

            if (isCharacterKey) {
              var _getCurrentTypeahead;

              if (key == " " && ((_getCurrentTypeahead = getCurrentTypeahead()) !== null && _getCurrentTypeahead !== void 0 ? _getCurrentTypeahead : "").trim().length == 0) ; else {
                e.preventDefault();
                e.stopPropagation(); // Note: Won't be true for the first keydown
                // but will be overwritten before useLayoutEffect is called
                // to actually apply the change

                if (!imeActive) setNextTypeaheadChar(key);
              }
            }
          };

          return useMergedProps()(useRefElementProps({
            onKeyDown,
            onCompositionStart,
            onCompositionEnd
          }), props);
        };

        return {
          useTypeaheadNavigationChildProps
        };
      }, []);
      return {
        useTypeaheadNavigationChild,
        currentTypeahead,
        invalidTypeahead
      };
    }
    /**
     * Your usual binary search implementation.
     *
     * It's used here to quickly find a good spot to start searching for our next typeahead candidate.
     * @param array The array to search through
     * @param wanted The value you'd like to find
     * @param comparator Compares `wanted` with the current value in `array`
     * @returns A non-negative value if `wanted` was found, and a negative number if not.
     * The absolute value of this number, minus one, is where `wanted` *would* be found if it *was* in `array`
     */

    function binarySearch(array, wanted, comparator) {
      var firstIndex = 0;
      var lastIndex = array.length - 1;

      while (firstIndex <= lastIndex) {
        var testIndex = lastIndex + firstIndex >> 1;
        var comparisonResult = comparator(wanted, array[testIndex]);

        if (comparisonResult > 0) {
          firstIndex = testIndex + 1;
        } else if (comparisonResult < 0) {
          lastIndex = testIndex - 1;
        } else {
          return testIndex;
        }
      }

      return -firstIndex - 1;
    }

    var _excluded$B = ["managedChildren", "indicesByElement", "useRovingTabIndexChild", "focusCurrent"];
    /**
     * Implements proper keyboard navigation for components like listboxes, button groups, menus, etc.
     *
     * In the document order, there will be only one "focused" or "tabbable" element, making it act more like one complete unit in comparison to everything around it.
     * Navigating forwards/backwards can be done with the arrow keys, Home/End keys, or any any text for typeahead to focus the next item that matches.
     */

    function useListNavigation({
      initialIndex,
      focusOnChange,
      collator,
      keyNavigation
    }) {
      var _keyNavigation;

      (_keyNavigation = keyNavigation) !== null && _keyNavigation !== void 0 ? _keyNavigation : keyNavigation = "either"; // Keep track of three things related to the currently tabbable element's index:
      // What it is, and whether, when we render this component and it's changed, to also focus the element that was made tabbable.

      var [tabbableIndex, setTabbableIndex, getTabbableIndex] = useState(initialIndex === undefined ? 0 : initialIndex);
      var setIndex = A$1(index => {
        setTabbableIndex(index);
      }, []);

      var _useRovingTabIndex = useRovingTabIndex({
        focusOnChange,
        tabbableIndex
      }),
          {
        managedChildren,
        indicesByElement,
        useRovingTabIndexChild,
        focusCurrent
      } = _useRovingTabIndex,
          rest = _objectWithoutProperties(_useRovingTabIndex, _excluded$B);

      var {
        currentTypeahead,
        invalidTypeahead,
        useTypeaheadNavigationChild
      } = useTypeaheadNavigation({
        collator,
        getIndex: getTabbableIndex,
        setIndex,
        typeaheadTimeout: 1000
      });
      var {
        navigateToEnd,
        navigateToIndex,
        navigateToNext,
        navigateToPrev,
        navigateToStart,
        useLinearNavigationChild
      } = useLinearNavigation({
        navigationDirection: keyNavigation,
        getIndex: getTabbableIndex,
        setIndex,
        managedChildren
      });
      var useListNavigationChild = A$1(info => {
        var {
          useTypeaheadNavigationChildProps
        } = useTypeaheadNavigationChild(info);
        var {
          useLinearNavigationChildProps
        } = useLinearNavigationChild();
        var {
          useRovingTabIndexChildProps,
          useRovingTabIndexSiblingProps,
          tabbable
        } = useRovingTabIndexChild(info);

        var useListNavigationChildProps = function (_ref) {
          var props = _extends({}, _ref);

          return useMergedProps()(useRovingTabIndexChildProps(useTypeaheadNavigationChildProps(useLinearNavigationChildProps({
            onClick: roveToSelf
          }))), props);
        };

        var roveToSelf = A$1(() => {
          navigateToIndex(info.index);
        }, []);
        return {
          useListNavigationChildProps,
          useListNavigationSiblingProps: useRovingTabIndexSiblingProps,
          tabbable //roveToSelf,
          //element

        };
      }, [useTypeaheadNavigationChild, useLinearNavigationChild, useRovingTabIndexChild, navigateToIndex]);
      return _objectSpread2({
        useListNavigationChild,
        currentTypeahead,
        invalidTypeahead,
        tabbableIndex,
        setTabbableIndex,
        managedChildren,
        indicesByElement,
        navigateToIndex,
        navigateToNext,
        navigateToPrev,
        navigateToStart,
        navigateToEnd,
        focusCurrent
      }, rest);
    }

    /*!
    * tabbable 5.2.1
    * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
    */
    var candidateSelectors = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])', 'details>summary:first-of-type', 'details'];
    var matches = typeof Element === 'undefined' ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;

    var isInput = function isInput(node) {
      return node.tagName === 'INPUT';
    };

    var isHiddenInput = function isHiddenInput(node) {
      return isInput(node) && node.type === 'hidden';
    };

    var isDetailsWithSummary = function isDetailsWithSummary(node) {
      var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {
        return child.tagName === 'SUMMARY';
      });
      return r;
    };

    var isHidden = function isHidden(node, displayCheck) {
      if (getComputedStyle(node).visibility === 'hidden') {
        return true;
      }

      var isDirectSummary = matches.call(node, 'details>summary:first-of-type');
      var nodeUnderDetails = isDirectSummary ? node.parentElement : node;

      if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {
        return true;
      }

      if (!displayCheck || displayCheck === 'full') {
        while (node) {
          if (getComputedStyle(node).display === 'none') {
            return true;
          }

          node = node.parentElement;
        }
      } else if (displayCheck === 'non-zero-area') {
        var _node$getBoundingClie = node.getBoundingClientRect(),
            width = _node$getBoundingClie.width,
            height = _node$getBoundingClie.height;

        return width === 0 && height === 0;
      }

      return false;
    }; // form fields (nested) inside a disabled fieldset are not focusable/tabbable
    //  unless they are in the _first_ <legend> element of the top-most disabled
    //  fieldset


    var isDisabledFromFieldset = function isDisabledFromFieldset(node) {
      if (isInput(node) || node.tagName === 'SELECT' || node.tagName === 'TEXTAREA' || node.tagName === 'BUTTON') {
        var parentNode = node.parentElement;

        while (parentNode) {
          if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {
            // look for the first <legend> as an immediate child of the disabled
            //  <fieldset>: if the node is in that legend, it'll be enabled even
            //  though the fieldset is disabled; otherwise, the node is in a
            //  secondary/subsequent legend, or somewhere else within the fieldset
            //  (however deep nested) and it'll be disabled
            for (var i = 0; i < parentNode.children.length; i++) {
              var child = parentNode.children.item(i);

              if (child.tagName === 'LEGEND') {
                if (child.contains(node)) {
                  return false;
                } // the node isn't in the first legend (in doc order), so no matter
                //  where it is now, it'll be disabled


                return true;
              }
            } // the node isn't in a legend, so no matter where it is now, it'll be disabled


            return true;
          }

          parentNode = parentNode.parentElement;
        }
      } // else, node's tabbable/focusable state should not be affected by a fieldset's
      //  enabled/disabled state


      return false;
    };

    var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {
      if (node.disabled || isHiddenInput(node) || isHidden(node, options.displayCheck) || // For a details element with a summary, the summary element gets the focus
      isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
        return false;
      }

      return true;
    };

    var focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');

    var isFocusable = function isFocusable(node, options) {
      options = options || {};

      if (!node) {
        throw new Error('No node provided');
      }

      if (matches.call(node, focusableCandidateSelector) === false) {
        return false;
      }

      return isNodeMatchingSelectorFocusable(options, node);
    };

    /**
     * @license
     * Copyright 2016 Google Inc. All rights reserved.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    (() => {
      var _a, _b, _c;
      /* Symbols for private properties */


      var _blockingElements = Symbol();

      var _alreadyInertElements = Symbol();

      var _topElParents = Symbol();

      var _siblingsToRestore = Symbol();

      var _parentMO = Symbol();
      /* Symbols for private static methods */


      var _topChanged = Symbol();

      var _swapInertedSibling = Symbol();

      var _inertSiblings = Symbol();

      var _restoreInertedSiblings = Symbol();

      var _getParents = Symbol();

      var _getDistributedChildren = Symbol();

      var _isInertable = Symbol();

      var _handleMutations = Symbol();

      class BlockingElementsImpl {
        constructor() {
          /**
           * The blocking elements.
           */
          this[_a] = [];
          /**
           * Used to keep track of the parents of the top element, from the element
           * itself up to body. When top changes, the old top might have been removed
           * from the document, so we need to memoize the inerted parents' siblings
           * in order to restore their inerteness when top changes.
           */

          this[_b] = [];
          /**
           * Elements that are already inert before the first blocking element is
           * pushed.
           */

          this[_c] = new Set();
        }

        destructor() {
          // Restore original inertness.
          this[_restoreInertedSiblings](this[_topElParents]); // Note we don't want to make these properties nullable on the class,
          // since then we'd need non-null casts in many places. Calling a method on
          // a BlockingElements instance after calling destructor will result in an
          // exception.


          var nullable = this;
          nullable[_blockingElements] = null;
          nullable[_topElParents] = null;
          nullable[_alreadyInertElements] = null;
        }

        get top() {
          var elems = this[_blockingElements];
          return elems[elems.length - 1] || null;
        }

        push(element) {
          if (!element || element === this.top) {
            return;
          } // Remove it from the stack, we'll bring it to the top.


          this.remove(element);

          this[_topChanged](element);

          this[_blockingElements].push(element);
        }

        remove(element) {
          var i = this[_blockingElements].indexOf(element);

          if (i === -1) {
            return false;
          }

          this[_blockingElements].splice(i, 1); // Top changed only if the removed element was the top element.


          if (i === this[_blockingElements].length) {
            this[_topChanged](this.top);
          }

          return true;
        }

        pop() {
          var top = this.top;
          top && this.remove(top);
          return top;
        }

        has(element) {
          return this[_blockingElements].indexOf(element) !== -1;
        }
        /**
         * Sets `inert` to all document elements except the new top element, its
         * parents, and its distributed content.
         */


        [(_a = _blockingElements, _b = _topElParents, _c = _alreadyInertElements, _topChanged)](newTop) {
          var toKeepInert = this[_alreadyInertElements];
          var oldParents = this[_topElParents]; // No new top, reset old top if any.

          if (!newTop) {
            this[_restoreInertedSiblings](oldParents);

            toKeepInert.clear();
            this[_topElParents] = [];
            return;
          }

          var newParents = this[_getParents](newTop); // New top is not contained in the main document!


          if (newParents[newParents.length - 1].parentNode !== document.body) {
            throw Error('Non-connected element cannot be a blocking element');
          } // Cast here because we know we'll call _inertSiblings on newParents
          // below.


          this[_topElParents] = newParents;

          var toSkip = this[_getDistributedChildren](newTop); // No previous top element.


          if (!oldParents.length) {
            this[_inertSiblings](newParents, toSkip, toKeepInert);

            return;
          }

          var i = oldParents.length - 1;
          var j = newParents.length - 1; // Find common parent. Index 0 is the element itself (so stop before it).

          while (i > 0 && j > 0 && oldParents[i] === newParents[j]) {
            i--;
            j--;
          } // If up the parents tree there are 2 elements that are siblings, swap
          // the inerted sibling.


          if (oldParents[i] !== newParents[j]) {
            this[_swapInertedSibling](oldParents[i], newParents[j]);
          } // Restore old parents siblings inertness.


          i > 0 && this[_restoreInertedSiblings](oldParents.slice(0, i)); // Make new parents siblings inert.

          j > 0 && this[_inertSiblings](newParents.slice(0, j), toSkip, null);
        }
        /**
         * Swaps inertness between two sibling elements.
         * Sets the property `inert` over the attribute since the inert spec
         * doesn't specify if it should be reflected.
         * https://html.spec.whatwg.org/multipage/interaction.html#inert
         */


        [_swapInertedSibling](oldInert, newInert) {
          var siblingsToRestore = oldInert[_siblingsToRestore]; // oldInert is not contained in siblings to restore, so we have to check
          // if it's inertable and if already inert.

          if (this[_isInertable](oldInert) && !oldInert.inert) {
            oldInert.inert = true;
            siblingsToRestore.add(oldInert);
          } // If newInert was already between the siblings to restore, it means it is
          // inertable and must be restored.


          if (siblingsToRestore.has(newInert)) {
            newInert.inert = false;
            siblingsToRestore.delete(newInert);
          }

          newInert[_parentMO] = oldInert[_parentMO];
          newInert[_siblingsToRestore] = siblingsToRestore;
          oldInert[_parentMO] = undefined;
          oldInert[_siblingsToRestore] = undefined;
        }
        /**
         * Restores original inertness to the siblings of the elements.
         * Sets the property `inert` over the attribute since the inert spec
         * doesn't specify if it should be reflected.
         * https://html.spec.whatwg.org/multipage/interaction.html#inert
         */


        [_restoreInertedSiblings](elements) {
          for (var element of elements) {
            var mo = element[_parentMO];
            mo.disconnect();
            element[_parentMO] = undefined;
            var siblings = element[_siblingsToRestore];

            for (var sibling of siblings) {
              sibling.inert = false;
            }

            element[_siblingsToRestore] = undefined;
          }
        }
        /**
         * Inerts the siblings of the elements except the elements to skip. Stores
         * the inerted siblings into the element's symbol `_siblingsToRestore`.
         * Pass `toKeepInert` to collect the already inert elements.
         * Sets the property `inert` over the attribute since the inert spec
         * doesn't specify if it should be reflected.
         * https://html.spec.whatwg.org/multipage/interaction.html#inert
         */


        [_inertSiblings](elements, toSkip, toKeepInert) {
          for (var element of elements) {
            // Assume element is not a Document, so it must have a parentNode.
            var parent = element.parentNode;
            var children = parent.children;
            var inertedSiblings = new Set();

            for (var j = 0; j < children.length; j++) {
              var sibling = children[j]; // Skip the input element, if not inertable or to be skipped.

              if (sibling === element || !this[_isInertable](sibling) || toSkip && toSkip.has(sibling)) {
                continue;
              } // Should be collected since already inerted.


              if (toKeepInert && sibling.inert) {
                toKeepInert.add(sibling);
              } else {
                sibling.inert = true;
                inertedSiblings.add(sibling);
              }
            } // Store the siblings that were inerted.


            element[_siblingsToRestore] = inertedSiblings; // Observe only immediate children mutations on the parent.

            var mo = new MutationObserver(this[_handleMutations].bind(this));
            element[_parentMO] = mo;
            var parentToObserve = parent; // If we're using the ShadyDOM polyfill, then our parent could be a
            // shady root, which is an object that acts like a ShadowRoot, but isn't
            // actually a node in the real DOM. Observe the real DOM parent instead.

            var maybeShadyRoot = parentToObserve;

            if (maybeShadyRoot.__shady && maybeShadyRoot.host) {
              parentToObserve = maybeShadyRoot.host;
            }

            mo.observe(parentToObserve, {
              childList: true
            });
          }
        }
        /**
         * Handles newly added/removed nodes by toggling their inertness.
         * It also checks if the current top Blocking Element has been removed,
         * notifying and removing it.
         */


        [_handleMutations](mutations) {
          var parents = this[_topElParents];
          var toKeepInert = this[_alreadyInertElements];

          for (var mutation of mutations) {
            // If the target is a shadowRoot, get its host as we skip shadowRoots when
            // computing _topElParents.
            var target = mutation.target.host || mutation.target;
            var idx = target === document.body ? parents.length : parents.indexOf(target);
            var inertedChild = parents[idx - 1];
            var inertedSiblings = inertedChild[_siblingsToRestore]; // To restore.

            for (var i = 0; i < mutation.removedNodes.length; i++) {
              var sibling = mutation.removedNodes[i];

              if (sibling === inertedChild) {
                console.info('Detected removal of the top Blocking Element.');
                this.pop();
                return;
              }

              if (inertedSiblings.has(sibling)) {
                sibling.inert = false;
                inertedSiblings.delete(sibling);
              }
            } // To inert.


            for (var _i = 0; _i < mutation.addedNodes.length; _i++) {
              var _sibling = mutation.addedNodes[_i];

              if (!this[_isInertable](_sibling)) {
                continue;
              }

              if (toKeepInert && _sibling.inert) {
                toKeepInert.add(_sibling);
              } else {
                _sibling.inert = true;
                inertedSiblings.add(_sibling);
              }
            }
          }
        }
        /**
         * Returns if the element is inertable.
         */


        [_isInertable](element) {
          return false === /^(style|template|script)$/.test(element.localName);
        }
        /**
         * Returns the list of newParents of an element, starting from element
         * (included) up to `document.body` (excluded).
         */


        [_getParents](element) {
          var parents = [];
          var current = element; // Stop to body.

          while (current && current !== document.body) {
            // Skip shadow roots.
            if (current.nodeType === Node.ELEMENT_NODE) {
              parents.push(current);
            } // ShadowDom v1


            if (current.assignedSlot) {
              // Collect slots from deepest slot to top.
              while (current = current.assignedSlot) {
                parents.push(current);
              } // Continue the search on the top slot.


              current = parents.pop();
              continue;
            }

            current = current.parentNode || current.host;
          }

          return parents;
        }
        /**
         * Returns the distributed children of the element's shadow root.
         * Returns null if the element doesn't have a shadow root.
         */


        [_getDistributedChildren](element) {
          var shadowRoot = element.shadowRoot;

          if (!shadowRoot) {
            return null;
          }

          var result = new Set();
          var i;
          var j;
          var nodes;
          var slots = shadowRoot.querySelectorAll('slot');

          if (slots.length && slots[0].assignedNodes) {
            for (i = 0; i < slots.length; i++) {
              nodes = slots[i].assignedNodes({
                flatten: true
              });

              for (j = 0; j < nodes.length; j++) {
                if (nodes[j].nodeType === Node.ELEMENT_NODE) {
                  result.add(nodes[j]);
                }
              }
            } // No need to search for <content>.

          }

          return result;
        }

      }

      document.$blockingElements = new BlockingElementsImpl();
    })();

    createCommonjsModule(function (module, exports) {
      (function (global, factory) {
        factory() ;
      })(commonjsGlobal, function () {

        var _createClass = function () {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }

          return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        /**
         * This work is licensed under the W3C Software and Document License
         * (http://www.w3.org/Consortium/Legal/2015/copyright-software-and-document).
         */


        (function () {
          // Return early if we're not running inside of the browser.
          if (typeof window === 'undefined') {
            return;
          } // Convenience function for converting NodeLists.

          /** @type {typeof Array.prototype.slice} */


          var slice = Array.prototype.slice;
          /**
           * IE has a non-standard name for "matches".
           * @type {typeof Element.prototype.matches}
           */

          var matches = Element.prototype.matches || Element.prototype.msMatchesSelector;
          /** @type {string} */

          var _focusableElementsString = ['a[href]', 'area[href]', 'input:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'details', 'summary', 'iframe', 'object', 'embed', '[contenteditable]'].join(',');
          /**
           * `InertRoot` manages a single inert subtree, i.e. a DOM subtree whose root element has an `inert`
           * attribute.
           *
           * Its main functions are:
           *
           * - to create and maintain a set of managed `InertNode`s, including when mutations occur in the
           *   subtree. The `makeSubtreeUnfocusable()` method handles collecting `InertNode`s via registering
           *   each focusable node in the subtree with the singleton `InertManager` which manages all known
           *   focusable nodes within inert subtrees. `InertManager` ensures that a single `InertNode`
           *   instance exists for each focusable node which has at least one inert root as an ancestor.
           *
           * - to notify all managed `InertNode`s when this subtree stops being inert (i.e. when the `inert`
           *   attribute is removed from the root node). This is handled in the destructor, which calls the
           *   `deregister` method on `InertManager` for each managed inert node.
           */


          var InertRoot = function () {
            /**
             * @param {!Element} rootElement The Element at the root of the inert subtree.
             * @param {!InertManager} inertManager The global singleton InertManager object.
             */
            function InertRoot(rootElement, inertManager) {
              _classCallCheck(this, InertRoot);
              /** @type {!InertManager} */


              this._inertManager = inertManager;
              /** @type {!Element} */

              this._rootElement = rootElement;
              /**
               * @type {!Set<!InertNode>}
               * All managed focusable nodes in this InertRoot's subtree.
               */

              this._managedNodes = new Set(); // Make the subtree hidden from assistive technology

              if (this._rootElement.hasAttribute('aria-hidden')) {
                /** @type {?string} */
                this._savedAriaHidden = this._rootElement.getAttribute('aria-hidden');
              } else {
                this._savedAriaHidden = null;
              }

              this._rootElement.setAttribute('aria-hidden', 'true'); // Make all focusable elements in the subtree unfocusable and add them to _managedNodes


              this._makeSubtreeUnfocusable(this._rootElement); // Watch for:
              // - any additions in the subtree: make them unfocusable too
              // - any removals from the subtree: remove them from this inert root's managed nodes
              // - attribute changes: if `tabindex` is added, or removed from an intrinsically focusable
              //   element, make that node a managed node.


              this._observer = new MutationObserver(this._onMutation.bind(this));

              this._observer.observe(this._rootElement, {
                attributes: true,
                childList: true,
                subtree: true
              });
            }
            /**
             * Call this whenever this object is about to become obsolete.  This unwinds all of the state
             * stored in this object and updates the state of all of the managed nodes.
             */


            _createClass(InertRoot, [{
              key: 'destructor',
              value: function destructor() {
                this._observer.disconnect();

                if (this._rootElement) {
                  if (this._savedAriaHidden !== null) {
                    this._rootElement.setAttribute('aria-hidden', this._savedAriaHidden);
                  } else {
                    this._rootElement.removeAttribute('aria-hidden');
                  }
                }

                this._managedNodes.forEach(function (inertNode) {
                  this._unmanageNode(inertNode.node);
                }, this); // Note we cast the nulls to the ANY type here because:
                // 1) We want the class properties to be declared as non-null, or else we
                //    need even more casts throughout this code. All bets are off if an
                //    instance has been destroyed and a method is called.
                // 2) We don't want to cast "this", because we want type-aware optimizations
                //    to know which properties we're setting.


                this._observer =
                /** @type {?} */
                null;
                this._rootElement =
                /** @type {?} */
                null;
                this._managedNodes =
                /** @type {?} */
                null;
                this._inertManager =
                /** @type {?} */
                null;
              }
              /**
               * @return {!Set<!InertNode>} A copy of this InertRoot's managed nodes set.
               */

            }, {
              key: '_makeSubtreeUnfocusable',

              /**
               * @param {!Node} startNode
               */
              value: function _makeSubtreeUnfocusable(startNode) {
                var _this2 = this;

                composedTreeWalk(startNode, function (node) {
                  return _this2._visitNode(node);
                });
                var activeElement = document.activeElement;

                if (!document.body.contains(startNode)) {
                  // startNode may be in shadow DOM, so find its nearest shadowRoot to get the activeElement.
                  var node = startNode;
                  /** @type {!ShadowRoot|undefined} */

                  var root = undefined;

                  while (node) {
                    if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
                      root =
                      /** @type {!ShadowRoot} */
                      node;
                      break;
                    }

                    node = node.parentNode;
                  }

                  if (root) {
                    activeElement = root.activeElement;
                  }
                }

                if (startNode.contains(activeElement)) {
                  activeElement.blur(); // In IE11, if an element is already focused, and then set to tabindex=-1
                  // calling blur() will not actually move the focus.
                  // To work around this we call focus() on the body instead.

                  if (activeElement === document.activeElement) {
                    document.body.focus();
                  }
                }
              }
              /**
               * @param {!Node} node
               */

            }, {
              key: '_visitNode',
              value: function _visitNode(node) {
                if (node.nodeType !== Node.ELEMENT_NODE) {
                  return;
                }

                var element =
                /** @type {!Element} */
                node; // If a descendant inert root becomes un-inert, its descendants will still be inert because of
                // this inert root, so all of its managed nodes need to be adopted by this InertRoot.

                if (element !== this._rootElement && element.hasAttribute('inert')) {
                  this._adoptInertRoot(element);
                }

                if (matches.call(element, _focusableElementsString) || element.hasAttribute('tabindex')) {
                  this._manageNode(element);
                }
              }
              /**
               * Register the given node with this InertRoot and with InertManager.
               * @param {!Node} node
               */

            }, {
              key: '_manageNode',
              value: function _manageNode(node) {
                var inertNode = this._inertManager.register(node, this);

                this._managedNodes.add(inertNode);
              }
              /**
               * Unregister the given node with this InertRoot and with InertManager.
               * @param {!Node} node
               */

            }, {
              key: '_unmanageNode',
              value: function _unmanageNode(node) {
                var inertNode = this._inertManager.deregister(node, this);

                if (inertNode) {
                  this._managedNodes['delete'](inertNode);
                }
              }
              /**
               * Unregister the entire subtree starting at `startNode`.
               * @param {!Node} startNode
               */

            }, {
              key: '_unmanageSubtree',
              value: function _unmanageSubtree(startNode) {
                var _this3 = this;

                composedTreeWalk(startNode, function (node) {
                  return _this3._unmanageNode(node);
                });
              }
              /**
               * If a descendant node is found with an `inert` attribute, adopt its managed nodes.
               * @param {!Element} node
               */

            }, {
              key: '_adoptInertRoot',
              value: function _adoptInertRoot(node) {
                var inertSubroot = this._inertManager.getInertRoot(node); // During initialisation this inert root may not have been registered yet,
                // so register it now if need be.


                if (!inertSubroot) {
                  this._inertManager.setInert(node, true);

                  inertSubroot = this._inertManager.getInertRoot(node);
                }

                inertSubroot.managedNodes.forEach(function (savedInertNode) {
                  this._manageNode(savedInertNode.node);
                }, this);
              }
              /**
               * Callback used when mutation observer detects subtree additions, removals, or attribute changes.
               * @param {!Array<!MutationRecord>} records
               * @param {!MutationObserver} self
               */

            }, {
              key: '_onMutation',
              value: function _onMutation(records, self) {
                records.forEach(function (record) {
                  var target =
                  /** @type {!Element} */
                  record.target;

                  if (record.type === 'childList') {
                    // Manage added nodes
                    slice.call(record.addedNodes).forEach(function (node) {
                      this._makeSubtreeUnfocusable(node);
                    }, this); // Un-manage removed nodes

                    slice.call(record.removedNodes).forEach(function (node) {
                      this._unmanageSubtree(node);
                    }, this);
                  } else if (record.type === 'attributes') {
                    if (record.attributeName === 'tabindex') {
                      // Re-initialise inert node if tabindex changes
                      this._manageNode(target);
                    } else if (target !== this._rootElement && record.attributeName === 'inert' && target.hasAttribute('inert')) {
                      // If a new inert root is added, adopt its managed nodes and make sure it knows about the
                      // already managed nodes from this inert subroot.
                      this._adoptInertRoot(target);

                      var inertSubroot = this._inertManager.getInertRoot(target);

                      this._managedNodes.forEach(function (managedNode) {
                        if (target.contains(managedNode.node)) {
                          inertSubroot._manageNode(managedNode.node);
                        }
                      });
                    }
                  }
                }, this);
              }
            }, {
              key: 'managedNodes',
              get: function get() {
                return new Set(this._managedNodes);
              }
              /** @return {boolean} */

            }, {
              key: 'hasSavedAriaHidden',
              get: function get() {
                return this._savedAriaHidden !== null;
              }
              /** @param {?string} ariaHidden */

            }, {
              key: 'savedAriaHidden',
              set: function set(ariaHidden) {
                this._savedAriaHidden = ariaHidden;
              }
              /** @return {?string} */
              ,
              get: function get() {
                return this._savedAriaHidden;
              }
            }]);

            return InertRoot;
          }();
          /**
           * `InertNode` initialises and manages a single inert node.
           * A node is inert if it is a descendant of one or more inert root elements.
           *
           * On construction, `InertNode` saves the existing `tabindex` value for the node, if any, and
           * either removes the `tabindex` attribute or sets it to `-1`, depending on whether the element
           * is intrinsically focusable or not.
           *
           * `InertNode` maintains a set of `InertRoot`s which are descendants of this `InertNode`. When an
           * `InertRoot` is destroyed, and calls `InertManager.deregister()`, the `InertManager` notifies the
           * `InertNode` via `removeInertRoot()`, which in turn destroys the `InertNode` if no `InertRoot`s
           * remain in the set. On destruction, `InertNode` reinstates the stored `tabindex` if one exists,
           * or removes the `tabindex` attribute if the element is intrinsically focusable.
           */


          var InertNode = function () {
            /**
             * @param {!Node} node A focusable element to be made inert.
             * @param {!InertRoot} inertRoot The inert root element associated with this inert node.
             */
            function InertNode(node, inertRoot) {
              _classCallCheck(this, InertNode);
              /** @type {!Node} */


              this._node = node;
              /** @type {boolean} */

              this._overrodeFocusMethod = false;
              /**
               * @type {!Set<!InertRoot>} The set of descendant inert roots.
               *    If and only if this set becomes empty, this node is no longer inert.
               */

              this._inertRoots = new Set([inertRoot]);
              /** @type {?number} */

              this._savedTabIndex = null;
              /** @type {boolean} */

              this._destroyed = false; // Save any prior tabindex info and make this node untabbable

              this.ensureUntabbable();
            }
            /**
             * Call this whenever this object is about to become obsolete.
             * This makes the managed node focusable again and deletes all of the previously stored state.
             */


            _createClass(InertNode, [{
              key: 'destructor',
              value: function destructor() {
                this._throwIfDestroyed();

                if (this._node && this._node.nodeType === Node.ELEMENT_NODE) {
                  var element =
                  /** @type {!Element} */
                  this._node;

                  if (this._savedTabIndex !== null) {
                    element.setAttribute('tabindex', this._savedTabIndex);
                  } else {
                    element.removeAttribute('tabindex');
                  } // Use `delete` to restore native focus method.


                  if (this._overrodeFocusMethod) {
                    delete element.focus;
                  }
                } // See note in InertRoot.destructor for why we cast these nulls to ANY.


                this._node =
                /** @type {?} */
                null;
                this._inertRoots =
                /** @type {?} */
                null;
                this._destroyed = true;
              }
              /**
               * @type {boolean} Whether this object is obsolete because the managed node is no longer inert.
               * If the object has been destroyed, any attempt to access it will cause an exception.
               */

            }, {
              key: '_throwIfDestroyed',

              /**
               * Throw if user tries to access destroyed InertNode.
               */
              value: function _throwIfDestroyed() {
                if (this.destroyed) {
                  throw new Error('Trying to access destroyed InertNode');
                }
              }
              /** @return {boolean} */

            }, {
              key: 'ensureUntabbable',

              /** Save the existing tabindex value and make the node untabbable and unfocusable */
              value: function ensureUntabbable() {
                if (this.node.nodeType !== Node.ELEMENT_NODE) {
                  return;
                }

                var element =
                /** @type {!Element} */
                this.node;

                if (matches.call(element, _focusableElementsString)) {
                  if (
                  /** @type {!HTMLElement} */
                  element.tabIndex === -1 && this.hasSavedTabIndex) {
                    return;
                  }

                  if (element.hasAttribute('tabindex')) {
                    this._savedTabIndex =
                    /** @type {!HTMLElement} */
                    element.tabIndex;
                  }

                  element.setAttribute('tabindex', '-1');

                  if (element.nodeType === Node.ELEMENT_NODE) {
                    element.focus = function () {};

                    this._overrodeFocusMethod = true;
                  }
                } else if (element.hasAttribute('tabindex')) {
                  this._savedTabIndex =
                  /** @type {!HTMLElement} */
                  element.tabIndex;
                  element.removeAttribute('tabindex');
                }
              }
              /**
               * Add another inert root to this inert node's set of managing inert roots.
               * @param {!InertRoot} inertRoot
               */

            }, {
              key: 'addInertRoot',
              value: function addInertRoot(inertRoot) {
                this._throwIfDestroyed();

                this._inertRoots.add(inertRoot);
              }
              /**
               * Remove the given inert root from this inert node's set of managing inert roots.
               * If the set of managing inert roots becomes empty, this node is no longer inert,
               * so the object should be destroyed.
               * @param {!InertRoot} inertRoot
               */

            }, {
              key: 'removeInertRoot',
              value: function removeInertRoot(inertRoot) {
                this._throwIfDestroyed();

                this._inertRoots['delete'](inertRoot);

                if (this._inertRoots.size === 0) {
                  this.destructor();
                }
              }
            }, {
              key: 'destroyed',
              get: function get() {
                return (
                  /** @type {!InertNode} */
                  this._destroyed
                );
              }
            }, {
              key: 'hasSavedTabIndex',
              get: function get() {
                return this._savedTabIndex !== null;
              }
              /** @return {!Node} */

            }, {
              key: 'node',
              get: function get() {
                this._throwIfDestroyed();

                return this._node;
              }
              /** @param {?number} tabIndex */

            }, {
              key: 'savedTabIndex',
              set: function set(tabIndex) {
                this._throwIfDestroyed();

                this._savedTabIndex = tabIndex;
              }
              /** @return {?number} */
              ,
              get: function get() {
                this._throwIfDestroyed();

                return this._savedTabIndex;
              }
            }]);

            return InertNode;
          }();
          /**
           * InertManager is a per-document singleton object which manages all inert roots and nodes.
           *
           * When an element becomes an inert root by having an `inert` attribute set and/or its `inert`
           * property set to `true`, the `setInert` method creates an `InertRoot` object for the element.
           * The `InertRoot` in turn registers itself as managing all of the element's focusable descendant
           * nodes via the `register()` method. The `InertManager` ensures that a single `InertNode` instance
           * is created for each such node, via the `_managedNodes` map.
           */


          var InertManager = function () {
            /**
             * @param {!Document} document
             */
            function InertManager(document) {
              _classCallCheck(this, InertManager);

              if (!document) {
                throw new Error('Missing required argument; InertManager needs to wrap a document.');
              }
              /** @type {!Document} */


              this._document = document;
              /**
               * All managed nodes known to this InertManager. In a map to allow looking up by Node.
               * @type {!Map<!Node, !InertNode>}
               */

              this._managedNodes = new Map();
              /**
               * All inert roots known to this InertManager. In a map to allow looking up by Node.
               * @type {!Map<!Node, !InertRoot>}
               */

              this._inertRoots = new Map();
              /**
               * Observer for mutations on `document.body`.
               * @type {!MutationObserver}
               */

              this._observer = new MutationObserver(this._watchForInert.bind(this)); // Add inert style.

              addInertStyle(document.head || document.body || document.documentElement); // Wait for document to be loaded.

              if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', this._onDocumentLoaded.bind(this));
              } else {
                this._onDocumentLoaded();
              }
            }
            /**
             * Set whether the given element should be an inert root or not.
             * @param {!Element} root
             * @param {boolean} inert
             */


            _createClass(InertManager, [{
              key: 'setInert',
              value: function setInert(root, inert) {
                if (inert) {
                  if (this._inertRoots.has(root)) {
                    // element is already inert
                    return;
                  }

                  var inertRoot = new InertRoot(root, this);
                  root.setAttribute('inert', '');

                  this._inertRoots.set(root, inertRoot); // If not contained in the document, it must be in a shadowRoot.
                  // Ensure inert styles are added there.


                  if (!this._document.body.contains(root)) {
                    var parent = root.parentNode;

                    while (parent) {
                      if (parent.nodeType === 11) {
                        addInertStyle(parent);
                      }

                      parent = parent.parentNode;
                    }
                  }
                } else {
                  if (!this._inertRoots.has(root)) {
                    // element is already non-inert
                    return;
                  }

                  var _inertRoot = this._inertRoots.get(root);

                  _inertRoot.destructor();

                  this._inertRoots['delete'](root);

                  root.removeAttribute('inert');
                }
              }
              /**
               * Get the InertRoot object corresponding to the given inert root element, if any.
               * @param {!Node} element
               * @return {!InertRoot|undefined}
               */

            }, {
              key: 'getInertRoot',
              value: function getInertRoot(element) {
                return this._inertRoots.get(element);
              }
              /**
               * Register the given InertRoot as managing the given node.
               * In the case where the node has a previously existing inert root, this inert root will
               * be added to its set of inert roots.
               * @param {!Node} node
               * @param {!InertRoot} inertRoot
               * @return {!InertNode} inertNode
               */

            }, {
              key: 'register',
              value: function register(node, inertRoot) {
                var inertNode = this._managedNodes.get(node);

                if (inertNode !== undefined) {
                  // node was already in an inert subtree
                  inertNode.addInertRoot(inertRoot);
                } else {
                  inertNode = new InertNode(node, inertRoot);
                }

                this._managedNodes.set(node, inertNode);

                return inertNode;
              }
              /**
               * De-register the given InertRoot as managing the given inert node.
               * Removes the inert root from the InertNode's set of managing inert roots, and remove the inert
               * node from the InertManager's set of managed nodes if it is destroyed.
               * If the node is not currently managed, this is essentially a no-op.
               * @param {!Node} node
               * @param {!InertRoot} inertRoot
               * @return {?InertNode} The potentially destroyed InertNode associated with this node, if any.
               */

            }, {
              key: 'deregister',
              value: function deregister(node, inertRoot) {
                var inertNode = this._managedNodes.get(node);

                if (!inertNode) {
                  return null;
                }

                inertNode.removeInertRoot(inertRoot);

                if (inertNode.destroyed) {
                  this._managedNodes['delete'](node);
                }

                return inertNode;
              }
              /**
               * Callback used when document has finished loading.
               */

            }, {
              key: '_onDocumentLoaded',
              value: function _onDocumentLoaded() {
                // Find all inert roots in document and make them actually inert.
                var inertElements = slice.call(this._document.querySelectorAll('[inert]'));
                inertElements.forEach(function (inertElement) {
                  this.setInert(inertElement, true);
                }, this); // Comment this out to use programmatic API only.

                this._observer.observe(this._document.body || this._document.documentElement, {
                  attributes: true,
                  subtree: true,
                  childList: true
                });
              }
              /**
               * Callback used when mutation observer detects attribute changes.
               * @param {!Array<!MutationRecord>} records
               * @param {!MutationObserver} self
               */

            }, {
              key: '_watchForInert',
              value: function _watchForInert(records, self) {
                var _this = this;

                records.forEach(function (record) {
                  switch (record.type) {
                    case 'childList':
                      slice.call(record.addedNodes).forEach(function (node) {
                        if (node.nodeType !== Node.ELEMENT_NODE) {
                          return;
                        }

                        var inertElements = slice.call(node.querySelectorAll('[inert]'));

                        if (matches.call(node, '[inert]')) {
                          inertElements.unshift(node);
                        }

                        inertElements.forEach(function (inertElement) {
                          this.setInert(inertElement, true);
                        }, _this);
                      }, _this);
                      break;

                    case 'attributes':
                      if (record.attributeName !== 'inert') {
                        return;
                      }

                      var target =
                      /** @type {!Element} */
                      record.target;
                      var inert = target.hasAttribute('inert');

                      _this.setInert(target, inert);

                      break;
                  }
                }, this);
              }
            }]);

            return InertManager;
          }();
          /**
           * Recursively walk the composed tree from |node|.
           * @param {!Node} node
           * @param {(function (!Element))=} callback Callback to be called for each element traversed,
           *     before descending into child nodes.
           * @param {?ShadowRoot=} shadowRootAncestor The nearest ShadowRoot ancestor, if any.
           */


          function composedTreeWalk(node, callback, shadowRootAncestor) {
            if (node.nodeType == Node.ELEMENT_NODE) {
              var element =
              /** @type {!Element} */
              node;

              if (callback) {
                callback(element);
              } // Descend into node:
              // If it has a ShadowRoot, ignore all child elements - these will be picked
              // up by the <content> or <shadow> elements. Descend straight into the
              // ShadowRoot.


              var shadowRoot =
              /** @type {!HTMLElement} */
              element.shadowRoot;

              if (shadowRoot) {
                composedTreeWalk(shadowRoot, callback);
                return;
              } // If it is a <content> element, descend into distributed elements - these
              // are elements from outside the shadow root which are rendered inside the
              // shadow DOM.


              if (element.localName == 'content') {
                var content =
                /** @type {!HTMLContentElement} */
                element; // Verifies if ShadowDom v0 is supported.

                var distributedNodes = content.getDistributedNodes ? content.getDistributedNodes() : [];

                for (var i = 0; i < distributedNodes.length; i++) {
                  composedTreeWalk(distributedNodes[i], callback);
                }

                return;
              } // If it is a <slot> element, descend into assigned nodes - these
              // are elements from outside the shadow root which are rendered inside the
              // shadow DOM.


              if (element.localName == 'slot') {
                var slot =
                /** @type {!HTMLSlotElement} */
                element; // Verify if ShadowDom v1 is supported.

                var _distributedNodes = slot.assignedNodes ? slot.assignedNodes({
                  flatten: true
                }) : [];

                for (var _i = 0; _i < _distributedNodes.length; _i++) {
                  composedTreeWalk(_distributedNodes[_i], callback);
                }

                return;
              }
            } // If it is neither the parent of a ShadowRoot, a <content> element, a <slot>
            // element, nor a <shadow> element recurse normally.


            var child = node.firstChild;

            while (child != null) {
              composedTreeWalk(child, callback);
              child = child.nextSibling;
            }
          }
          /**
           * Adds a style element to the node containing the inert specific styles
           * @param {!Node} node
           */


          function addInertStyle(node) {
            if (node.querySelector('style#inert-style, link#inert-style')) {
              return;
            }

            var style = document.createElement('style');
            style.setAttribute('id', 'inert-style');
            style.textContent = '\n' + '[inert] {\n' + '  pointer-events: none;\n' + '  cursor: default;\n' + '}\n' + '\n' + '[inert], [inert] * {\n' + '  -webkit-user-select: none;\n' + '  -moz-user-select: none;\n' + '  -ms-user-select: none;\n' + '  user-select: none;\n' + '}\n';
            node.appendChild(style);
          }

          if (!Element.prototype.hasOwnProperty('inert')) {
            /** @type {!InertManager} */
            var inertManager = new InertManager(document);
            Object.defineProperty(Element.prototype, 'inert', {
              enumerable: true,

              /** @this {!Element} */
              get: function get() {
                return this.hasAttribute('inert');
              },

              /** @this {!Element} */
              set: function set(inert) {
                inertManager.setInert(this, inert);
              }
            });
          }
        })();
      });
    });

    var blockingElements = document.$blockingElements;
    /**
     * Allows an element to trap focus by applying the "inert" attribute to all sibling, aunt, and uncle nodes.
     *
     * Automatically handles consecutive calls with a loosely applied stack operation
     * (specifically via `blockingElements`, with a small polyfill because I'm not sure how long
     * it'll take to find its way into the spec, if ever)
     * @param target
     */

    function useBlockingElement(target) {
      /**
       * Push/pop the element from the blockingElements stack.
       */
      h(() => {
        if (target) {
          blockingElements.push(target);
          return () => {
            blockingElements.remove(target);
          };
        }
      }, [target]);
    }
    function getTopElement() {
      return blockingElements.top;
    }

    var elementsToRestoreFocusTo = new Map();
    function useFocusTrap({
      trapActive
    }) {
      var {
        element,
        useRefElementProps,
        getElement
      } = useRefElement();
      var {
        getLastActiveElement
      } = useActiveElement(); // When the trap becomes active, before we let the blockingElements hook run,
      // keep track of whatever's currently focused and save it.

      h(() => {
        if (trapActive && element) {
          var _getLastActiveElement;

          // Save the currently focused element
          // to whatever's currently at the top of the stack
          elementsToRestoreFocusTo.set(getTopElement(), (_getLastActiveElement = getLastActiveElement()) !== null && _getLastActiveElement !== void 0 ? _getLastActiveElement : document.body);
        }
      }, [trapActive, element]);
      useBlockingElement(trapActive ? element : null);
      /**
       * Any time we activate or deactivate the trap,
       * change focus to something else (something in
       * the trap if it's active, or whatever we've
       * tracked in elementsToRestoreFocusTo if not)
       */

      h(() => {
        if (trapActive && element) {
          var rafHandle = requestAnimationFrame(() => {
            // TODO: This extra queueMicrotask is needed for
            // ...reasons?
            queueMicrotask(() => {
              var _findFirstFocusable;

              (_findFirstFocusable = findFirstFocusable(element)) === null || _findFirstFocusable === void 0 ? void 0 : _findFirstFocusable.focus();
              rafHandle = 0;
            });
          });
          return () => {
            if (rafHandle) cancelAnimationFrame(rafHandle);
          };
        } else if (element) {
          // Restore the focus to the element
          // that has returned to the top of the stack
          var _rafHandle = requestAnimationFrame(() => {
            queueMicrotask(() => {
              var _elementsToRestoreFoc;

              (_elementsToRestoreFoc = elementsToRestoreFocusTo.get(getTopElement())) === null || _elementsToRestoreFoc === void 0 ? void 0 : _elementsToRestoreFoc.focus();
              _rafHandle = 0;
            });
          });

          return () => {
            if (_rafHandle) cancelAnimationFrame(_rafHandle);
          };
        }
      }, [trapActive, element]);

      var useFocusTrapProps = props => {
        return useMergedProps()({
          "aria-modal": trapActive ? "true" : undefined
        }, useRefElementProps(props));
      };

      return {
        useFocusTrapProps,
        element,
        getElement
      };
    }
    /**
     * Returns the first focusable element contained within the given node, or null if none are found.
     * @param element
     * @returns
     */

    function findFirstFocusable(element) {
      var treeWalker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, {
        acceptNode: node => node instanceof Element && isFocusable(node) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP
      });
      var firstFocusable = treeWalker.firstChild();
      return firstFocusable;
    }

    function useAriaTooltip({
      mouseoverDelay
    }) {
      var _mouseoverDelay;

      (_mouseoverDelay = mouseoverDelay) !== null && _mouseoverDelay !== void 0 ? _mouseoverDelay : mouseoverDelay = 400;
      var [open, setOpen, getOpen] = useState(false);
      var [hasAnyMouseover, setHasAnyMouseover] = useState(false); //const [mouseoverIsValid, setMouseoverIsValid] = useState(false);

      var {
        useRandomIdProps: useTooltipIdProps,
        useReferencedIdProps: useTooltipIdReferencingProps
      } = useRandomId({
        prefix: "aria-tooltip-"
      });
      var {
        focusedInner: triggerFocused,
        useHasFocusProps
      } = useHasFocus();
      var [triggerHasMouseover, setTriggerHasMouseover] = useState(false);
      var [tooltipHasMouseover, setTooltipHasMouseover] = useState(false);
      useTimeout({
        timeout: mouseoverDelay,
        triggerIndex: +triggerHasMouseover + +tooltipHasMouseover,
        callback: () => {
          if (triggerHasMouseover || tooltipHasMouseover) setHasAnyMouseover(true);
        }
      });
      useTimeout({
        timeout: 50,
        triggerIndex: +triggerHasMouseover + +tooltipHasMouseover,
        callback: () => {
          if (!triggerHasMouseover && !tooltipHasMouseover) setHasAnyMouseover(false);
        }
      });
      y(() => {
        setOpen(hasAnyMouseover || triggerFocused);
      }, [hasAnyMouseover, triggerFocused]);
      var useTooltipTrigger = A$1(function useTooltipTrigger() {
        function onPointerEnter(e) {
          setTriggerHasMouseover(true);
        }

        function onPointerLeave(e) {
          setTriggerHasMouseover(false);
        }

        function useTooltipTriggerProps(_ref) {
          var props = _extends({}, _ref);

          // Note: Though it's important to make sure that focusing activates a tooltip,
          // it's perfectly reasonable that a child element will be the one that's focused,
          // not this one, so we don't set tabIndex=0
          return useTooltipIdReferencingProps("aria-describedby")(useMergedProps()({
            onPointerEnter,
            onPointerLeave
          }, useHasFocusProps(props)));
        }

        return {
          useTooltipTriggerProps
        };
      }, [useTooltipIdReferencingProps]);
      var useTooltip = A$1(function useTooltip() {
        function onPointerEnter(e) {
          setTooltipHasMouseover(true);
        }

        function onPointerLeave(e) {
          setTooltipHasMouseover(false);
        }

        function useTooltipProps(_ref2) {
          var props = _extends({}, _ref2);

          props.role = "tooltip";
          return useTooltipIdProps(useMergedProps()({
            onPointerEnter,
            onPointerLeave
          }, props));
        }

        return {
          useTooltipProps
        };
      }, [useTooltipIdProps]);
      return {
        useTooltip,
        useTooltipTrigger,
        isOpen: open,
        getIsOpen: getOpen
      };
    }

    function S(n, t) {
      for (var e in t) {
        n[e] = t[e];
      }

      return n;
    }

    function C(n, t) {
      for (var e in n) {
        if ("__source" !== e && !(e in t)) return !0;
      }

      for (var r in t) {
        if ("__source" !== r && n[r] !== t[r]) return !0;
      }

      return !1;
    }

    function E(n) {
      this.props = n;
    }

    function g(n, t) {
      function e(n) {
        var e = this.props.ref,
            r = e == n.ref;
        return !r && e && (e.call ? e(null) : e.current = null), t ? !t(this.props, n) || !r : C(this.props, n);
      }

      function r(t) {
        return this.shouldComponentUpdate = e, v$1(n, t);
      }

      return r.displayName = "Memo(" + (n.displayName || n.name) + ")", r.prototype.isReactComponent = !0, r.__f = !0, r;
    }

    (E.prototype = new _$1()).isPureReactComponent = !0, E.prototype.shouldComponentUpdate = function (n, t) {
      return C(this.props, n) || C(this.state, t);
    };
    var w = l$1.__b;

    l$1.__b = function (n) {
      n.type && n.type.__f && n.ref && (n.props.ref = n.ref, n.ref = null), w && w(n);
    };

    var R = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.forward_ref") || 3911;

    function x(n) {
      function t(t, e) {
        var r = S({}, t);
        return delete r.ref, n(r, (e = t.ref || e) && ("object" != typeof e || "current" in e) ? e : null);
      }

      return t.$$typeof = R, t.render = t, t.prototype.isReactComponent = t.__f = !0, t.displayName = "ForwardRef(" + (n.displayName || n.name) + ")", t;
    }

    var A = l$1.__e;

    l$1.__e = function (n, t, e) {
      if (n.then) for (var r, u = t; u = u.__;) {
        if ((r = u.__c) && r.__c) return null == t.__e && (t.__e = e.__e, t.__k = e.__k), r.__c(n, t);
      }
      A(n, t, e);
    };

    var O = l$1.unmount;

    function L() {
      this.__u = 0, this.t = null, this.__b = null;
    }

    function U(n) {
      var t = n.__.__c;
      return t && t.__e && t.__e(n);
    }

    function M() {
      this.u = null, this.o = null;
    }

    l$1.unmount = function (n) {
      var t = n.__c;
      t && t.__R && t.__R(), t && !0 === n.__h && (n.type = null), O && O(n);
    }, (L.prototype = new _$1()).__c = function (n, t) {
      var e = t.__c,
          r = this;
      null == r.t && (r.t = []), r.t.push(e);

      var u = U(r.__v),
          o = !1,
          i = function () {
        o || (o = !0, e.__R = null, u ? u(l) : l());
      };

      e.__R = i;

      var l = function () {
        if (! --r.__u) {
          if (r.state.__e) {
            var n = r.state.__e;

            r.__v.__k[0] = function n(t, e, r) {
              return t && (t.__v = null, t.__k = t.__k && t.__k.map(function (t) {
                return n(t, e, r);
              }), t.__c && t.__c.__P === e && (t.__e && r.insertBefore(t.__e, t.__d), t.__c.__e = !0, t.__c.__P = r)), t;
            }(n, n.__c.__P, n.__c.__O);
          }

          var t;

          for (r.setState({
            __e: r.__b = null
          }); t = r.t.pop();) {
            t.forceUpdate();
          }
        }
      },
          f = !0 === t.__h;

      r.__u++ || f || r.setState({
        __e: r.__b = r.__v.__k[0]
      }), n.then(i, i);
    }, L.prototype.componentWillUnmount = function () {
      this.t = [];
    }, L.prototype.render = function (n, t) {
      if (this.__b) {
        if (this.__v.__k) {
          var e = document.createElement("div"),
              r = this.__v.__k[0].__c;

          this.__v.__k[0] = function n(t, e, r) {
            return t && (t.__c && t.__c.__H && (t.__c.__H.__.forEach(function (n) {
              "function" == typeof n.__c && n.__c();
            }), t.__c.__H = null), null != (t = S({}, t)).__c && (t.__c.__P === r && (t.__c.__P = e), t.__c = null), t.__k = t.__k && t.__k.map(function (t) {
              return n(t, e, r);
            })), t;
          }(this.__b, e, r.__O = r.__P);
        }

        this.__b = null;
      }

      var u = t.__e && v$1(d$1, null, n.fallback);
      return u && (u.__h = null), [v$1(d$1, null, t.__e ? null : n.children), u];
    };

    var T = function (n, t, e) {
      if (++e[1] === e[0] && n.o.delete(t), n.props.revealOrder && ("t" !== n.props.revealOrder[0] || !n.o.size)) for (e = n.u; e;) {
        for (; e.length > 3;) {
          e.pop()();
        }

        if (e[1] < e[0]) break;
        n.u = e = e[2];
      }
    };

    function D(n) {
      return this.getChildContext = function () {
        return n.context;
      }, n.children;
    }

    function I(n) {
      var t = this,
          e = n.i;
      t.componentWillUnmount = function () {
        S$1(null, t.l), t.l = null, t.i = null;
      }, t.i && t.i !== e && t.componentWillUnmount(), n.__v ? (t.l || (t.i = e, t.l = {
        nodeType: 1,
        parentNode: e,
        childNodes: [],
        appendChild: function (n) {
          this.childNodes.push(n), t.i.appendChild(n);
        },
        insertBefore: function (n, e) {
          this.childNodes.push(n), t.i.appendChild(n);
        },
        removeChild: function (n) {
          this.childNodes.splice(this.childNodes.indexOf(n) >>> 1, 1), t.i.removeChild(n);
        }
      }), S$1(v$1(D, {
        context: t.context
      }, n.__v), t.l)) : t.l && t.componentWillUnmount();
    }

    function W(n, t) {
      return v$1(I, {
        __v: n,
        i: t
      });
    }

    (M.prototype = new _$1()).__e = function (n) {
      var t = this,
          e = U(t.__v),
          r = t.o.get(n);
      return r[0]++, function (u) {
        var o = function () {
          t.props.revealOrder ? (r.push(u), T(t, n, r)) : u();
        };

        e ? e(o) : o();
      };
    }, M.prototype.render = function (n) {
      this.u = null, this.o = new Map();
      var t = A$2(n.children);
      n.revealOrder && "b" === n.revealOrder[0] && t.reverse();

      for (var e = t.length; e--;) {
        this.o.set(t[e], this.u = [1, 0, this.u]);
      }

      return n.children;
    }, M.prototype.componentDidUpdate = M.prototype.componentDidMount = function () {
      var n = this;
      this.o.forEach(function (t, e) {
        T(n, e, t);
      });
    };

    var j = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103,
        P = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,
        V = function (n) {
      return ("undefined" != typeof Symbol && "symbol" == typeof Symbol() ? /fil|che|rad/i : /fil|che|ra/i).test(n);
    };

    _$1.prototype.isReactComponent = {}, ["componentWillMount", "componentWillReceiveProps", "componentWillUpdate"].forEach(function (n) {
      Object.defineProperty(_$1.prototype, n, {
        configurable: !0,
        get: function () {
          return this["UNSAFE_" + n];
        },
        set: function (t) {
          Object.defineProperty(this, n, {
            configurable: !0,
            writable: !0,
            value: t
          });
        }
      });
    });
    var H = l$1.event;

    function Z() {}

    function Y() {
      return this.cancelBubble;
    }

    function $() {
      return this.defaultPrevented;
    }

    l$1.event = function (n) {
      return H && (n = H(n)), n.persist = Z, n.isPropagationStopped = Y, n.isDefaultPrevented = $, n.nativeEvent = n;
    };

    var G = {
      configurable: !0,
      get: function () {
        return this.class;
      }
    },
        J = l$1.vnode;

    l$1.vnode = function (n) {
      var t = n.type,
          e = n.props,
          r = e;

      if ("string" == typeof t) {
        for (var u in r = {}, e) {
          var o = e[u];
          "value" === u && "defaultValue" in e && null == o || ("defaultValue" === u && "value" in e && null == e.value ? u = "value" : "download" === u && !0 === o ? o = "" : /ondoubleclick/i.test(u) ? u = "ondblclick" : /^onchange(textarea|input)/i.test(u + t) && !V(e.type) ? u = "oninput" : /^on(Ani|Tra|Tou|BeforeInp)/.test(u) ? u = u.toLowerCase() : P.test(u) ? u = u.replace(/[A-Z0-9]/, "-$&").toLowerCase() : null === o && (o = void 0), r[u] = o);
        }

        "select" == t && r.multiple && Array.isArray(r.value) && (r.value = A$2(e.children).forEach(function (n) {
          n.props.selected = -1 != r.value.indexOf(n.props.value);
        })), "select" == t && null != r.defaultValue && (r.value = A$2(e.children).forEach(function (n) {
          n.props.selected = r.multiple ? -1 != r.defaultValue.indexOf(n.props.value) : r.defaultValue == n.props.value;
        })), n.props = r;
      }

      t && e.class != e.className && (G.enumerable = "className" in e, null != e.className && (r.class = e.className), Object.defineProperty(r, "className", G)), n.$$typeof = j, J && J(n);
    };

    var K = l$1.__r;

    l$1.__r = function (n) {
      K && K(n);
    };

    /**
     * Shortcut for preact/compat's `forwardRef` that auto-assumes some things that are useful for forwarding refs to `HTMLElements` specifically.
     * Namely it involves de-gunking the type system by letting us return *generic* function and playing nice with React. In all other respects, it acts like `forwardRef`.
     */

    function forwardElementRef$1(Component) {
      var ForwardedComponent = x(Component);
      return ForwardedComponent;
    }

    var _excluded$A = ["children", "duration", "classBase", "measure", "exitVisibility", "open", "onTransitionUpdate", "animateOnMount"];

    function getClassName(classBase, open, phase) {
      if (phase) return "".concat(classBase || "transition", "-").concat(open, "-").concat(phase);else return "".concat(classBase || "transition", "-").concat(open);
    }

    function forceReflow(e) {
      // Try really hard to make sure this isn't optimized out by anything.
      // We need it for its document reflow side effect.
      e.getBoundingClientRect();
      return e;
    }
    /**
     * A hook that adds & removes class names in a way that facilitates proper transitions.
     *
     * The first argument contains the props related directly to the transition.
     *
     * The second argument contains any other props you might want merged into the final product (these are not read or manipulated or anything -- it's purely shorthand and can be omitted with `{}` and then your own `useMergedProps`).
     */


    function useCreateTransitionableProps({
      measure,
      animateOnMount,
      classBase,
      onTransitionUpdate,
      exitVisibility,
      duration,
      open,
      ref
    }, otherProps) {
      var _classBase;

      (_classBase = classBase) !== null && _classBase !== void 0 ? _classBase : classBase = "transition";
      var {
        element,
        useRefElementProps
      } = useRefElement();
      var [phase, setPhase] = l(animateOnMount ? "init" : null);
      var [direction, setDirection] = l(open == null ? null : open ? "enter" : "exit");
      var [surfaceWidth, setSurfaceWidth] = l(null);
      var [surfaceHeight, setSurfaceHeight] = l(null);
      var [surfaceX, setSurfaceX] = l(null);
      var [surfaceY, setSurfaceY] = l(null);
      var [transitioningWidth, setTransitioningWidth] = l(null);
      var [transitioningHeight, setTransitioningHeight] = l(null);
      var [transitioningX, setTransitioningX] = l(null);
      var [transitioningY, setTransitioningY] = l(null);
      var {
        getLogicalDirection
      } = useLogicalDirection(element);
      var logicalDirection = getLogicalDirection();
      var onTransitionUpdateRef = s(onTransitionUpdate);
      var phaseRef = s(phase);
      var directionRef = s(direction);
      var durationRef = s(duration);
      var tooEarlyTimeoutRef = s(null);
      var tooEarlyValueRef = s(true);
      var tooLateTimeoutRef = s(null);
      var onTransitionEnd = A$1(e => {
        if (e.target === element && tooEarlyValueRef.current == false) {
          setPhase("finalize");
        }
      }, [element]);
      h(() => {
        onTransitionUpdateRef.current = onTransitionUpdate;
      }, [onTransitionUpdate]);
      h(() => {
        phaseRef.current = phase;
      }, [phase]);
      h(() => {
        directionRef.current = direction;
      }, [direction]);
      h(() => {
        durationRef.current = duration;
      }, [duration]);
      h(() => {
        var _onTransitionUpdateRe;

        if (direction && phase) (_onTransitionUpdateRe = onTransitionUpdateRef.current) === null || _onTransitionUpdateRe === void 0 ? void 0 : _onTransitionUpdateRe.call(onTransitionUpdateRef, direction, phase);
      }, [direction, phase]); // Every time the phase changes to "transition", add our transition timeout timeouts
      // to catch any time onTransitionEnd fails to report for whatever reason to be safe

      h(() => {
        if (phase == "transition") {
          var _durationRef$current;

          var timeoutDuration = (_durationRef$current = durationRef.current) !== null && _durationRef$current !== void 0 ? _durationRef$current : 1000;
          tooEarlyTimeoutRef.current = window.setTimeout(() => {
            tooEarlyValueRef.current = false;
            tooEarlyTimeoutRef.current = null;
          }, 50);
          tooLateTimeoutRef.current = window.setTimeout(() => {
            tooEarlyValueRef.current = true;
            tooLateTimeoutRef.current = null;
            setPhase("finalize");
          }, timeoutDuration);
        }

        return () => {
          if (tooEarlyTimeoutRef.current) clearTimeout(tooEarlyTimeoutRef.current);
          if (tooLateTimeoutRef.current) clearTimeout(tooLateTimeoutRef.current);
        };
      }, [phase]); // Any time "open" changes, update our direction and phase.
      // In addition, measure the size of the element if requested.

      h(() => {
        if (element && open != null) {
          var previousPhase = phaseRef.current; // Swap our direction

          if (open) setDirection("enter");else setDirection("exit");
          setPhase(previousPhase === null ? "finalize" : "init");

          if (measure) {
            var currentSizeWithTransition = element.getBoundingClientRect();
            {
              var {
                x,
                y,
                width,
                height
              } = currentSizeWithTransition;
              setTransitioningX(x + "px");
              setTransitioningY(y + "px");
              setTransitioningWidth(width + "px");
              setTransitioningHeight(height + "px");
            }

            if (previousPhase === "finalize") {
              // We're going to be messing with the actual element's class, 
              // so we'll want an easy way to restore it later.
              var backup = element.className;
              element.classList.add("".concat(classBase, "-measure"));
              element.classList.remove("".concat(classBase, "-enter"), "".concat(classBase, "-enter-init"), "".concat(classBase, "-enter-transition"), "".concat(classBase, "-enter-finalize"), "".concat(classBase, "-exit"), "".concat(classBase, "-exit-init"), "".concat(classBase, "-exit-transition"), "".concat(classBase, "-exit-finalize"));
              forceReflow(element);
              var sizeWithoutTransition = element.getBoundingClientRect();
              var {
                x: _x,
                y: _y,
                width: _width,
                height: _height
              } = sizeWithoutTransition;
              setSurfaceX(_x + "px");
              setSurfaceY(_y + "px");
              setSurfaceWidth(_width + "px");
              setSurfaceHeight(_height + "px");
              element.className = backup;
              forceReflow(element);
            }
          }
        }
      }, [open, element, measure, classBase]); // Any time the phase changes to init, immediately before the screen is painted,
      // change the phase to "transition" and re-render ().

      h(() => {
        if (element && directionRef.current != null) {
          var _classBase2;

          (_classBase2 = classBase) !== null && _classBase2 !== void 0 ? _classBase2 : classBase = "transition";

          if (phase === "init") {
            // Preact just finished rendering init
            // Now set our transition style.
            setPhase("transition");

            if (measure) {
              forceReflow(element);
            }
          }
        }
      }, [phase, measure, element]);
      var inlineDirection = logicalDirection === null || logicalDirection === void 0 ? void 0 : logicalDirection.inlineDirection;
      var blockDirection = logicalDirection === null || logicalDirection === void 0 ? void 0 : logicalDirection.blockDirection;
      var writingModeIsHorizontal = inlineDirection == "rtl" || inlineDirection == "ltr";
      var surfaceInlineInset = writingModeIsHorizontal ? surfaceX : surfaceY;
      var surfaceBlockInset = writingModeIsHorizontal ? surfaceY : surfaceX;
      var surfaceInlineSize = writingModeIsHorizontal ? surfaceWidth : surfaceHeight;
      var surfaceBlockSize = writingModeIsHorizontal ? surfaceHeight : surfaceWidth;
      var transitioningInlineInset = writingModeIsHorizontal ? transitioningX : transitioningY;
      var transitioningBlockInset = writingModeIsHorizontal ? transitioningY : transitioningX;
      var transitioningInlineSize = writingModeIsHorizontal ? transitioningWidth : transitioningHeight;
      var transitioningBlockSize = writingModeIsHorizontal ? transitioningHeight : transitioningWidth;
      var almostDone = useRefElementProps(_objectSpread2(_objectSpread2({
        ref,
        style: removeEmpty({
          ["--".concat(classBase, "-duration")]: duration,
          ["--".concat(classBase, "-surface-x")]: surfaceX,
          ["--".concat(classBase, "-surface-y")]: surfaceY,
          ["--".concat(classBase, "-surface-width")]: surfaceWidth,
          ["--".concat(classBase, "-surface-height")]: surfaceHeight,
          ["--".concat(classBase, "-surface-inline-inset")]: surfaceInlineInset,
          ["--".concat(classBase, "-surface-block-inset")]: surfaceBlockInset,
          ["--".concat(classBase, "-surface-inline-size")]: surfaceInlineSize,
          ["--".concat(classBase, "-surface-block-size")]: surfaceBlockSize,
          ["--".concat(classBase, "-transitioning-x")]: transitioningX,
          ["--".concat(classBase, "-transitioning-y")]: transitioningY,
          ["--".concat(classBase, "-transitioning-width")]: transitioningWidth,
          ["--".concat(classBase, "-transitioning-height")]: transitioningHeight,
          ["--".concat(classBase, "-transitioning-inline-inset")]: transitioningInlineInset,
          ["--".concat(classBase, "-transitioning-block-inset")]: transitioningBlockInset,
          ["--".concat(classBase, "-transitioning-inline-size")]: transitioningInlineSize,
          ["--".concat(classBase, "-transitioning-block-size")]: transitioningBlockSize
        }),
        onTransitionEnd
      }, {
        "aria-hidden": open ? undefined : "true"
      }), {}, {
        className: clsx(direction && getClassName(classBase, direction), direction && phase && getClassName(classBase, direction, phase), exitVisibility == "removed" && "".concat(classBase, "-removed-on-exit"), exitVisibility == "visible" && "".concat(classBase, "-visible-on-exit"), "".concat(classBase, "-inline-direction-").concat(inlineDirection !== null && inlineDirection !== void 0 ? inlineDirection : "ltr"), "".concat(classBase, "-block-direction-").concat(blockDirection !== null && blockDirection !== void 0 ? blockDirection : "ttb"))
      }));
      return useMergedProps()(almostDone, otherProps);
    }

    function removeEmpty(obj) {
      return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v != null));
    }
    /**
     * A component that *wraps an HTMLElement or other ref-forwarding component* and allows it to use CSS to transition in/out.
     * Combines the props passed to it, the props its child has, and the props needed for the CSS transition, and passes them
     * all to the child element you provide.
     *
     * This is the most general component that others use as a base. By default, this component by itself doesn't actually add any CSS classes that animate anything (like opacity, for example).
     * It adds classes like `transition-enter-finalize`, but you need to provide the additional e.g. `fade` class that reacts to it.
     *
     * Use this if the other, more specialized Transition components don't fit your needs.
     *
     * @example `<Transitionable open={open} {...useCreateFadeProps(...)}><div>{children}</div></Transitionable>`
     * @example `<Transitionable open={open}><div {...useCreateFadeProps(...)}>{children}</div></Transitionable>`
     */


    var Transitionable = forwardElementRef$1(function Transition(_ref, r) {
      var {
        children: child,
        duration,
        classBase,
        measure,
        exitVisibility,
        open,
        onTransitionUpdate,
        animateOnMount
      } = _ref,
          props = _objectWithoutProperties(_ref, _excluded$A);

      if (!childIsVNode(child)) {
        throw new Error("A Transitionable component must have exactly one component child (e.g. a <div>, but not \"a string\").");
      }

      var transitionProps = useCreateTransitionableProps({
        classBase,
        duration,
        measure,
        open,
        animateOnMount,
        onTransitionUpdate,
        ref: r,
        exitVisibility
      }, props);
      var mergedWithChildren = useMergedProps()(transitionProps, _objectSpread2(_objectSpread2({}, child.props), {}, {
        ref: child.ref
      }));
      return B(child, mergedWithChildren);
    });

    function childIsVNode(child) {
      if (!child) return false;

      if (Array.isArray(child)) {
        return false;
      }

      if (typeof child != "object") return false;
      return "props" in child;
    }

    var _excluded$z = ["classBase", "clipOrigin", "clipOriginInline", "clipOriginBlock", "clipMin", "clipMinInline", "clipMinBlock", "open"];
    /**
     * Creates a set of props that implement a Clip transition. Like all `useCreate*Props` hooks, must be used in tamdem with a `Transitionable` component (or `useCreateTransitionableProps`).
     * Be sure to merge these returned props with whatever the user passed in.
     */

    function useCreateClipProps({
      classBase,
      clipOrigin,
      clipOriginInline,
      clipOriginBlock,
      clipMin,
      clipMinInline,
      clipMinBlock
    }, otherProps) {
      var _classBase, _ref, _ref2, _ref3, _ref4;

      (_classBase = classBase) !== null && _classBase !== void 0 ? _classBase : classBase = "transition";
      return useMergedProps()({
        className: clsx("".concat(classBase, "-clip")),
        classBase,
        style: {
          ["--".concat(classBase, "-clip-origin-inline")]: (_ref = clipOriginInline !== null && clipOriginInline !== void 0 ? clipOriginInline : clipOrigin) !== null && _ref !== void 0 ? _ref : 0.5,
          ["--".concat(classBase, "-clip-origin-block")]: (_ref2 = clipOriginBlock !== null && clipOriginBlock !== void 0 ? clipOriginBlock : clipOrigin) !== null && _ref2 !== void 0 ? _ref2 : 0,
          ["--".concat(classBase, "-clip-min-inline")]: (_ref3 = clipMinInline !== null && clipMinInline !== void 0 ? clipMinInline : clipMin) !== null && _ref3 !== void 0 ? _ref3 : 1,
          ["--".concat(classBase, "-clip-min-block")]: (_ref4 = clipMinBlock !== null && clipMinBlock !== void 0 ? clipMinBlock : clipMin) !== null && _ref4 !== void 0 ? _ref4 : 0
        }
      }, otherProps);
    }
    var Clip = forwardElementRef$1(function Clip(_ref5, ref) {
      var {
        classBase,
        clipOrigin,
        clipOriginInline,
        clipOriginBlock,
        clipMin,
        clipMinInline,
        clipMinBlock,
        open
      } = _ref5,
          rest = _objectWithoutProperties(_ref5, _excluded$z);

      return v$1(Transitionable, _objectSpread2({
        open: open
      }, useCreateClipProps({
        classBase,
        clipOrigin,
        clipOriginInline,
        clipOriginBlock,
        clipMin,
        clipMinInline,
        clipMinBlock
      }, _objectSpread2(_objectSpread2({}, rest), {}, {
        ref
      }))));
    });

    var _excluded$y = ["classBase", "fadeMin", "fadeMax", "open"];
    /**
     * Creates a set of props that implement a Fade transition. Like all `useCreate*Props` hooks, must be used in tamdem with a `Transitionable` component (or `useCreateTransitionableProps`).
     * Be sure to merge these returned props with whatever the user passed in.
     */

    function useCreateFadeProps({
      classBase,
      fadeMin,
      fadeMax
    }, otherProps) {
      var _classBase;

      (_classBase = classBase) !== null && _classBase !== void 0 ? _classBase : classBase = "transition";
      return useMergedProps()({
        className: "".concat(classBase, "-fade"),
        classBase,
        style: {
          ["--".concat(classBase, "-fade-min")]: fadeMin !== null && fadeMin !== void 0 ? fadeMin : 0,
          ["--".concat(classBase, "-fade-max")]: fadeMax !== null && fadeMax !== void 0 ? fadeMax : 1
        }
      }, otherProps);
    }
    /**
     * Wraps a div (etc.) and allows it to transition in/out smoothly with a Fade effect.
     *
     * Note that while it is absolutely possible to wrap another transition with `<Fade>`,
     * there will be some duplicate code run as two `<Transitionable>` components end up operating on the same element.
     * It's generally recommended to either use the components that include a combined fade effect,
     * or just directly a `<Transitionable>` on your own.
     *
     * @see `Transitionable`
     */

    var Fade = forwardElementRef$1(function Fade(_ref, ref) {
      var {
        classBase,
        fadeMin,
        fadeMax,
        open
      } = _ref,
          rest = _objectWithoutProperties(_ref, _excluded$y);

      return v$1(Transitionable, _objectSpread2({
        open: open
      }, useCreateFadeProps({
        classBase,
        fadeMin,
        fadeMax
      }, _objectSpread2(_objectSpread2({}, rest), {}, {
        ref
      }))));
    });

    var _excluded$x = ["classBase", "fadeMin", "fadeMax", "open"];
    var ClipFade = forwardElementRef$1(function ClipFade(_ref, ref) {
      var {
        classBase,
        fadeMin,
        fadeMax,
        open
      } = _ref,
          rest = _objectWithoutProperties(_ref, _excluded$x);

      return v$1(Clip, _objectSpread2({
        open: open
      }, useCreateFadeProps({
        classBase,
        fadeMin,
        fadeMax
      }, _objectSpread2(_objectSpread2({}, rest), {}, {
        ref
      }))));
    });

    var _excluded$w = ["classBase", "open", "minBlockSize"];
    /**
     * Creates a set of props that implement a Zoom transition. Like all `useCreate*Props` hooks, must be used in tamdem with a `Transitionable` component (or `useCreateTransitionableProps`).
     * Be sure to merge these returned props with whatever the user passed in.
     *
     * IMPORTANT: If used outside of a `<Collapse />`, you must include the `measure` prop on the `<Transitionable>` that you use.
     *
     * @example <Transitionable measure {...useCreateCollapseProps(...)} />
     */

    function useCreateCollapseProps({
      classBase,
      minBlockSize
    }, otherProps) {
      var _classBase;

      (_classBase = classBase) !== null && _classBase !== void 0 ? _classBase : classBase = "transition";
      return useMergedProps()({
        classBase,
        measure: true,
        className: "".concat(classBase, "-collapse"),
        style: {
          ["--".concat(classBase, "-collapse-min-block")]: minBlockSize !== null && minBlockSize !== void 0 ? minBlockSize : 0
        }
      }, otherProps);
    }
    /**
     * Wraps a div (etc.) and allows it to transition in/out smoothly with a Collapse effect.
     *
     * *Important*: This component is *not* efficient for the browser to animate!
     * Make sure you do testing on lower power devices, or prefer a lighter
     * alternative, like `<Clip>`.
     *
     * @see `Transitionable`
     */

    var Collapse = forwardElementRef$1(function Collapse(_ref, ref) {
      var {
        classBase,
        open,
        minBlockSize
      } = _ref,
          rest = _objectWithoutProperties(_ref, _excluded$w);

      return v$1(Transitionable, _objectSpread2({
        open: open
      }, useCreateCollapseProps({
        classBase,
        minBlockSize
      }, _objectSpread2(_objectSpread2({}, rest), {}, {
        ref
      }))));
    });

    var _excluded$v = ["classBase", "fadeMin", "fadeMax", "open"];
    /**
     * Wraps a div (etc.) and allows it to transition in/out smoothly with both Collapse and Fade effects.
     *
     * @see `Transitionable` `Collapse` `Fade`
     */

    forwardElementRef$1(function CollapseFade(_ref, ref) {
      var {
        classBase,
        fadeMin,
        fadeMax,
        open
      } = _ref,
          rest = _objectWithoutProperties(_ref, _excluded$v);

      return v$1(Collapse, _objectSpread2({
        open: open
      }, useCreateFadeProps({
        classBase,
        fadeMin,
        fadeMax
      }, _objectSpread2(_objectSpread2({}, rest), {}, {
        ref
      }))));
    });

    var _excluded$u = ["classBase", "slideTargetInline", "slideTargetBlock", "open"];
    /**
     * Creates a set of props that implement a Slide transition. Like all `useCreate*Props` hooks, must be used in tamdem with a `Transitionable` component (or `useCreateTransitionableProps`).
     */

    function useCreateSlideProps({
      classBase,
      slideTargetInline,
      slideTargetBlock
    }, otherProps) {
      var _classBase, _slideTargetInline, _slideTargetBlock, _slideTargetInline2, _slideTargetBlock2;

      (_classBase = classBase) !== null && _classBase !== void 0 ? _classBase : classBase = "transition";
      var lastValidTargetInline = s((_slideTargetInline = slideTargetInline) !== null && _slideTargetInline !== void 0 ? _slideTargetInline : 1);
      var lastValidTargetBlock = s((_slideTargetBlock = slideTargetBlock) !== null && _slideTargetBlock !== void 0 ? _slideTargetBlock : 0);
      y(() => {
        if (slideTargetInline) lastValidTargetInline.current = slideTargetInline;
      }, [slideTargetInline]);
      y(() => {
        if (slideTargetBlock) lastValidTargetBlock.current = slideTargetBlock;
      }, [slideTargetBlock]);
      if (slideTargetInline == 0) slideTargetInline = lastValidTargetInline.current;
      if (slideTargetBlock == 0) slideTargetBlock = lastValidTargetBlock.current;
      return useMergedProps()({
        className: "".concat(classBase, "-slide"),
        classBase,
        style: {
          ["--".concat(classBase, "-slide-target-inline")]: "".concat((_slideTargetInline2 = slideTargetInline) !== null && _slideTargetInline2 !== void 0 ? _slideTargetInline2 : 0),
          ["--".concat(classBase, "-slide-target-block")]: "".concat((_slideTargetBlock2 = slideTargetBlock) !== null && _slideTargetBlock2 !== void 0 ? _slideTargetBlock2 : 0)
        }
      }, otherProps);
    }
    /**
     * Wraps a div (etc.) and allows it to transition in/out smoothly with a Slide effect.
     *
     * Provide the direction the element will travel in with `slideInline` and `slideBlock`,
     * with `1` being `100%` of the element's width or height.
     *
     * A value of `0` is handled specially, effectively meaning "use the last non-zero value",
     * which allows for convenient setups inside of a `SwapContainer`
     * (`slideInline={index - selectedIndex}` or similar.)
     *
     * @see `Transitionable`
     */

    var Slide = forwardElementRef$1(function Slide(_ref, ref) {
      var {
        classBase,
        slideTargetInline,
        slideTargetBlock,
        open
      } = _ref,
          rest = _objectWithoutProperties(_ref, _excluded$u);

      return v$1(Transitionable, _objectSpread2({
        open: open
      }, useCreateSlideProps({
        classBase,
        slideTargetInline,
        slideTargetBlock
      }, _objectSpread2(_objectSpread2({}, rest), {}, {
        ref
      }))));
    });

    var _excluded$t = ["classBase", "fadeMin", "fadeMax", "open"];
    /**
     * Wraps a div (etc.) and allows it to transition in/out smoothly with both Slide and Fade effects.
     *
     * `slideInline={(index - selectedIndex) / 10}` would make the element look like it fades out before it travels to its target destination.
     *
     * @see `Transitionable` `Zoom`
     */

    var SlideFade = forwardElementRef$1(function SlideFade(_ref, ref) {
      var {
        classBase,
        fadeMin,
        fadeMax,
        open
      } = _ref,
          rest = _objectWithoutProperties(_ref, _excluded$t);

      return v$1(Slide, _objectSpread2({
        open: open
      }, useCreateFadeProps({
        classBase,
        fadeMin,
        fadeMax
      }, _objectSpread2(_objectSpread2({}, rest), {}, {
        ref
      }))));
    });

    var _excluded$s = ["classBase", "zoomOrigin", "zoomOriginInline", "zoomOriginBlock", "zoomMin", "zoomMinInline", "zoomMinBlock", "open"];
    /**
     * Creates a set of props that implement a Zoom transition. Like all `useCreate*Props` hooks, must be used in tamdem with a `Transitionable` component (or `useCreateTransitionableProps`).
     */

    function useCreateZoomProps({
      classBase,
      zoomOrigin,
      zoomOriginInline,
      zoomOriginBlock,
      zoomMin,
      zoomMinInline,
      zoomMinBlock
    }, otherProps) {
      var _classBase, _ref, _ref2, _ref3, _ref4;

      (_classBase = classBase) !== null && _classBase !== void 0 ? _classBase : classBase = "transition";
      return useMergedProps()({
        className: "".concat(classBase, "-zoom"),
        classBase,
        style: {
          ["--".concat(classBase, "-zoom-origin-inline")]: "".concat((_ref = zoomOriginInline !== null && zoomOriginInline !== void 0 ? zoomOriginInline : zoomOrigin) !== null && _ref !== void 0 ? _ref : 0.5),
          ["--".concat(classBase, "-zoom-origin-block")]: "".concat((_ref2 = zoomOriginBlock !== null && zoomOriginBlock !== void 0 ? zoomOriginBlock : zoomOrigin) !== null && _ref2 !== void 0 ? _ref2 : 0.5),
          ["--".concat(classBase, "-zoom-min-inline")]: "".concat((_ref3 = zoomMinInline !== null && zoomMinInline !== void 0 ? zoomMinInline : zoomMin) !== null && _ref3 !== void 0 ? _ref3 : 0),
          ["--".concat(classBase, "-zoom-min-block")]: "".concat((_ref4 = zoomMinBlock !== null && zoomMinBlock !== void 0 ? zoomMinBlock : zoomMin) !== null && _ref4 !== void 0 ? _ref4 : 0)
        }
      }, otherProps);
    }
    /**
     * Wraps a div (etc.) and allows it to transition in/out smoothly with a Zoom effect.
     * @see `Transitionable` `ZoomFade`
     */

    var Zoom = forwardElementRef$1(function Zoom(_ref5, ref) {
      var {
        classBase,
        zoomOrigin,
        zoomOriginInline,
        zoomOriginBlock,
        zoomMin,
        zoomMinInline,
        zoomMinBlock,
        open
      } = _ref5,
          rest = _objectWithoutProperties(_ref5, _excluded$s);

      return v$1(Transitionable, _objectSpread2({
        open: open
      }, useCreateZoomProps({
        classBase,
        zoomOrigin,
        zoomOriginInline,
        zoomOriginBlock,
        zoomMin,
        zoomMinInline,
        zoomMinBlock
      }, _objectSpread2(_objectSpread2({}, rest), {}, {
        ref
      }))));
    });

    var _excluded$r = ["classBase", "fadeMin", "fadeMax", "open"];
    /**
     * Wraps a div (etc.) and allows it to transition in/out smoothly with both Zoom and Fade effects.
     *
     * This is an ideal time to use the minimum size Zoom properties.
     *
     * @see `Transitionable` `Zoom`
     */

    var ZoomFade = forwardElementRef$1(function ZoomFade(_ref, ref) {
      var {
        classBase,
        fadeMin,
        fadeMax,
        open
      } = _ref,
          rest = _objectWithoutProperties(_ref, _excluded$r);

      return v$1(Zoom, _objectSpread2({
        open: open
      }, useCreateFadeProps({
        classBase,
        fadeMin,
        fadeMax
      }, _objectSpread2(_objectSpread2({}, rest), {}, {
        ref
      }))));
    });

    var _excluded$q = ["classBase", "zoomMin", "zoomMinInline", "zoomMinBlock", "zoomOrigin", "zoomOriginInline", "zoomOriginBlock", "open"];
    /**
     * Wraps a div (etc.) and allows it to transition in/out smoothly with both Slide and Zoom effects.
     *
     * Probably best combined with `useCreateFadeProps` (or just using a `SlideZoomFade`?).
     *
     * @see `Transitionable` `SlideFadeZoom` `Zoom` `Fade`
     */

    var SlideZoom = forwardElementRef$1(function SlideZoom(_ref, ref) {
      var {
        classBase,
        zoomMin,
        zoomMinInline,
        zoomMinBlock,
        zoomOrigin,
        zoomOriginInline,
        zoomOriginBlock,
        open
      } = _ref,
          rest = _objectWithoutProperties(_ref, _excluded$q);

      return v$1(Slide, _objectSpread2({
        open: open
      }, useCreateZoomProps({
        classBase,
        zoomMin,
        zoomMinInline,
        zoomMinBlock,
        zoomOrigin,
        zoomOriginInline,
        zoomOriginBlock
      }, _objectSpread2(_objectSpread2({}, rest), {}, {
        ref
      }))));
    });

    var _excluded$p = ["classBase", "fadeMin", "fadeMax", "open"];
    /**
     * Wraps a div (etc.) and allows it to transition in/out smoothly with Zoom, Slide, and Fade effects.
     *
     * Note that this is basically just shorthand for some prop creation and prop merging functions.
     *
     * @see `Transitionable` `Slide` `Zoom` `Fade`
     */

    forwardElementRef$1(function SlideZoomFade(_ref, ref) {
      var {
        classBase,
        fadeMin,
        fadeMax,
        open
      } = _ref,
          rest = _objectWithoutProperties(_ref, _excluded$p);

      return v$1(SlideZoom, _objectSpread2({
        open: open
      }, useCreateFadeProps({
        classBase,
        fadeMin,
        fadeMax
      }, _objectSpread2(_objectSpread2({}, rest), {}, {
        ref
      }))));
    });

    var _excluded$o = ["classBase", "flipAngleInline", "flipAngleBlock", "perspective", "open"];
    /**
     * Creates a set of props that implement a Flip transition. Like all `useCreate*Props` hooks, must be used in tamdem with a `Transitionable` component (or `useCreateTransitionableProps`).
     */

    function useCreateFlipProps({
      classBase,
      flipAngleInline,
      flipAngleBlock,
      perspective
    }, otherProps) {
      var _classBase, _flipAngleInline, _flipAngleBlock, _flipAngleInline2, _flipAngleBlock2;

      (_classBase = classBase) !== null && _classBase !== void 0 ? _classBase : classBase = "transition";
      var lastValidTargetInline = s((_flipAngleInline = flipAngleInline) !== null && _flipAngleInline !== void 0 ? _flipAngleInline : 180);
      var lastValidTargetBlock = s((_flipAngleBlock = flipAngleBlock) !== null && _flipAngleBlock !== void 0 ? _flipAngleBlock : 0);
      y(() => {
        if (flipAngleInline) lastValidTargetInline.current = flipAngleInline;
      }, [flipAngleInline]);
      y(() => {
        if (flipAngleBlock) lastValidTargetBlock.current = flipAngleBlock;
      }, [flipAngleBlock]);
      if (flipAngleInline == 0) flipAngleInline = lastValidTargetInline.current;
      if (flipAngleBlock == 0) flipAngleBlock = lastValidTargetBlock.current;
      return useMergedProps()({
        className: "".concat(classBase, "-flip"),
        classBase,
        style: {
          ["--".concat(classBase, "-flip-angle-inline")]: "".concat((_flipAngleInline2 = flipAngleInline) !== null && _flipAngleInline2 !== void 0 ? _flipAngleInline2 : 0, "deg"),
          ["--".concat(classBase, "-flip-angle-block")]: "".concat((_flipAngleBlock2 = flipAngleBlock) !== null && _flipAngleBlock2 !== void 0 ? _flipAngleBlock2 : 0, "deg"),
          ["--".concat(classBase, "-perspective")]: "".concat(perspective !== null && perspective !== void 0 ? perspective : 800, "px")
        }
      }, otherProps);
    }
    /**
     * Wraps a div (etc.) and allows it to transition in/out smoothly with a Flip effect.
     *
     * Provide the direction the element will travel in with `flipInline` and `flipBlock`,
     * with `1` being `100%` of the element's width or height.
     *
     * A value of `0` is handled specially, effectively meaning "use the last non-zero value",
     * which allows for convenient setups inside of a `SwapContainer`
     * (`flipInline={index - selectedIndex}` or similar.)
     *
     * @see `Transitionable`
     */

    forwardElementRef$1(function Flip(_ref, ref) {
      var {
        classBase,
        flipAngleInline,
        flipAngleBlock,
        perspective,
        open
      } = _ref,
          rest = _objectWithoutProperties(_ref, _excluded$o);

      return v$1(Transitionable, _objectSpread2({
        open: open
      }, useCreateFlipProps({
        classBase,
        flipAngleInline,
        flipAngleBlock,
        perspective
      }, _objectSpread2(_objectSpread2({}, rest), {}, {
        ref
      }))));
    });

    var _excluded$n = ["children", "classBase", "inline"];
    /**
     * Creates a set of props that implement a swap container.
     * Be sure to merge these returned props with whatever the user passed in.
     */

    function useCreateSwappableProps({
      inline,
      classBase
    }, otherProps) {
      return useMergedProps()({
        className: clsx("".concat(classBase !== null && classBase !== void 0 ? classBase : "transition", "-swap-container"), inline && "".concat(classBase !== null && classBase !== void 0 ? classBase : "transition", "-swap-container-inline"))
      }, otherProps);
    }
    /**
     * Allows a set of child <Transitionable> components to animate in & out in-place. Very useful for, e.g., tab panels.
     *
     * You must manage each child `<Transitionable>` component's `open` prop -- this component *does not* manage any sort of state in that regard.
     *
     * Like `<Transitionable>`, *this wraps an HTMLElement (or other ref-forwarding component)*. This will be your container that holds each `<Transitionable>` (or component that uses it). Strictly speaking it could be anything, not a `<Transitionable>`, but if it doesnt't transition out then it's just going to be hanging around 100% of the time.
     *
     * Long way of saying, if you get a cryptic error with this component, make sure it has a single `<div>` child or something.
     * @param param0
     * @returns
     */

    var Swappable = forwardElementRef$1(function Swappable(_ref, ref) {
      var _inline;

      var {
        children,
        classBase,
        inline
      } = _ref,
          p = _objectWithoutProperties(_ref, _excluded$n);

      (_inline = inline) !== null && _inline !== void 0 ? _inline : inline = typeof children.type === "string" && inlineElements.has(children.type);
      var transitionProps = useCreateSwappableProps({
        classBase,
        inline
      }, _objectSpread2(_objectSpread2({}, p), {}, {
        ref
      }));
      var mergedWithChildren = useMergedProps()(transitionProps, children.props);
      return B(children, mergedWithChildren);
    }); // If "inline" isn't explicitly provided, we try to implicitly do it based on the child's tag.
    // Not perfect, but it's not supposed to be. `inline` is for perfect.

    var inlineElements = new Set(["a", "abbr", "acronym", "audio", "b", "bdi", "bdo", "big", "br", "button", "canvas", "cite", "code", "data", "datalist", "del", "dfn", "em", "embed", "i", "iframe", "img", "input", "ins", "kbd", "label", "map", "mark", "meter", "noscript", "object", "output", "picture", "progress", "q", "ruby", "s", "samp", "script", "select", "slot", "small", "span", "strong", "sub", "sup", "svg", "template", "textarea", "time", "u", "tt", "var", "video", "wbr"]);

    var EventDetail = Symbol("event-detail");
    function enhanceEvent(e, detail) {
      var event = e;
      event[EventDetail] = detail;
      return event;
    }

    var _excluded$m = ["aria-pressed", "tabIndex", "role"];
    var pulse = "vibrate" in navigator ? () => navigator.vibrate(10) : () => {};

    function excludes(tag, target, exclude) {
      if (exclude !== null && exclude !== void 0 && exclude[target]) return true;
      if (target === "space" || target === "enter") return tag == "button";
      return false;
    }
    /**
     * Easy way to "polyfill" button-like interactions onto, e.g., a div.
     *
     * Adds click, space on keyDown, and enter on keyUp, as well as haptic
     * feedback via a momentary vibration pulse when there's an onClick handler provided
     * (this can be disabled app-wide with `setButtonVibrate`).
     *
     * In addition, when the CSS `:active` pseudo-class would apply to a normal button
     * (i.e. when holding the spacebar or during mousedown), `{ "data-pseudo-active": "true" }`
     * is added to the props.  You can either let it pass through and style it through new CSS,
     * or inspect the returned props for it and add e.g. an `.active` class for existing CSS
     *
     * @param onClick
     * @param exclude Whether the polyfill should apply (can specify for specific interactions)
     */


    function useButtonLikeEventHandlers(tag, onClickSync, exclude) {
      //type E = Ev extends h.JSX.TargetedEvent<infer E, any>? E : EventTarget;
      var [active, setActive] = useState(false);
      var onKeyUp = excludes(tag, "space", exclude) ? undefined : e => {
        if (e.key == " " && onClickSync) {
          e.preventDefault();
          onClickSync(e);
          setActive(false);
        }
      };
      var onMouseDown = excludes(tag, "click", exclude) ? undefined : e => {
        if (e.button === 0) setActive(true);
      };

      var onBlur = e => {
        setActive(false);
      };

      var onMouseUp = excludes(tag, "click", exclude) ? undefined : onBlur;
      var onMouseOut = excludes(tag, "click", exclude) ? undefined : onBlur;
      var onKeyDown = excludes(tag, "space", exclude) && excludes(tag, "enter", exclude) ? undefined : e => {
        if (e.key == " " && onClickSync && !excludes(tag, "space", exclude)) {
          // We don't actually activate it on a space keydown
          // but we do preventDefault to stop the page from scrolling.
          setActive(true);
          e.preventDefault();
        }

        if (e.key == "Enter" && onClickSync && !excludes(tag, "enter", exclude)) {
          e.preventDefault();
          onClickSync(e);
        }
      };
      var onClick2 = excludes(tag, "click", exclude) ? undefined : e => {
        if (onClickSync && !excludes(tag, "click", exclude)) {
          pulse();
          onClickSync(e);
        }
      };
      return props => useMergedProps()(_objectSpread2({
        onKeyDown,
        onKeyUp,
        onClick: onClick2,
        onBlur,
        onMouseDown,
        onMouseUp,
        onMouseOut
      }, {
        "data-pseudo-active": active ? "true" : undefined
      }), props);
    }
    function useAriaButton({
      tag,
      pressed,
      onClick
    }) {
      function useAriaButtonProps(_ref) {
        var {
          "aria-pressed": ariaPressed,
          tabIndex,
          role
        } = _ref,
            p = _objectWithoutProperties(_ref, _excluded$m);

        var props = useButtonLikeEventHandlers(tag, e => onClick === null || onClick === void 0 ? void 0 : onClick(enhanceEvent(e, {
          pressed: pressed == null ? null : !pressed
        })), undefined)(p);
        var buttonProps = {
          role,
          tabIndex,
          "aria-pressed": ariaPressed !== null && ariaPressed !== void 0 ? ariaPressed : pressed === true ? "true" : pressed === false ? "false" : undefined
        };

        var divProps = _objectSpread2(_objectSpread2({}, buttonProps), {}, {
          tabIndex: tabIndex !== null && tabIndex !== void 0 ? tabIndex : 0,
          role: role !== null && role !== void 0 ? role : "button"
        });

        var anchorProps = _objectSpread2({}, divProps);

        switch (tag) {
          case "button":
            return useMergedProps()(buttonProps, props);

          case "a":
            return useMergedProps()(anchorProps, props);

          default:
            return useMergedProps()(divProps, props);
        }
      }

      return {
        useAriaButtonProps
      };
    }

    var _excluded$l = ["aria-expanded", "aria-disabled"],
        _excluded2$9 = ["role"];
    function useAriaAccordion({
      expandedIndex,
      setExpandedIndex
    }) {
      var [lastFocusedIndex, setLastFocusedIndex, getLastFocusedIndex] = useState(0);
      var stableSetExpandedIndex = useStableCallback(setExpandedIndex !== null && setExpandedIndex !== void 0 ? setExpandedIndex : () => {});
      var {
        managedChildren: managedAccordionSections,
        useManagedChild: useManagedChildSection
      } = useChildManager();
      var {
        useLinearNavigationChild
      } = useLinearNavigation({
        managedChildren: managedAccordionSections,
        navigationDirection: "block",
        getIndex: getLastFocusedIndex,
        setIndex: setLastFocusedIndex
      }); // Any time list management changes the focused index, manually focus the child
      // TODO: Can this be cut?

      useLayoutEffect(() => {
        var _managedAccordionSect;

        if (lastFocusedIndex != null && lastFocusedIndex >= 0) (_managedAccordionSect = managedAccordionSections[lastFocusedIndex]) === null || _managedAccordionSect === void 0 ? void 0 : _managedAccordionSect.focus();
      }, [lastFocusedIndex]);
      useChildFlag(expandedIndex, managedAccordionSections.length, (i, open) => {
        var _managedAccordionSect2;

        return (_managedAccordionSect2 = managedAccordionSections[i]) === null || _managedAccordionSect2 === void 0 ? void 0 : _managedAccordionSect2.setOpenFromParent(open);
      });
      var useAriaAccordionSection = A$1(args => {
        var _ref, _args$open;

        var [openFromParent, setOpenFromParent, getOpenFromParent] = useState(null);
        var {
          randomId: bodyRandomId,
          useRandomIdProps: useBodyRandomIdProps,
          useReferencedIdProps: useReferencedBodyIdProps
        } = useRandomId({
          prefix: "aria-accordion-section-body-"
        });
        var {
          randomId: headRandomId,
          useRandomIdProps: useHeadRandomIdProps,
          useReferencedIdProps: useReferencedHeadIdProps
        } = useRandomId({
          prefix: "aria-accordion-section-header-"
        });
        var open = (_ref = (_args$open = args.open) !== null && _args$open !== void 0 ? _args$open : openFromParent) !== null && _ref !== void 0 ? _ref : null; // TODO: Convert to use useManagedChild so that this hook 
        // is stable without (directly) depending on the open state.

        var useAriaAccordionSectionHeader = A$1(function useAriaAccordionSectionHeader({
          tag
        }) {
          var {
            useRefElementProps,
            element
          } = useRefElement();
          var focus = A$1(() => {
            element === null || element === void 0 ? void 0 : element.focus();
          }, [element]);
          var {
            useManagedChildProps
          } = useManagedChildSection({
            index: args.index,
            open: open,
            setOpenFromParent,
            focus
          });
          var {
            useLinearNavigationChildProps
          } = useLinearNavigationChild();

          function useAriaAccordionSectionHeaderProps(_ref2) {
            var {
              ["aria-expanded"]: ariaExpanded,
              ["aria-disabled"]: ariaDisabled
            } = _ref2,
                props = _objectWithoutProperties(_ref2, _excluded$l);

            var onFocus = () => {
              setLastFocusedIndex(args.index);
            };

            var onClick = () => {
              if (getOpenFromParent()) stableSetExpandedIndex(null);else stableSetExpandedIndex(args.index);
            };

            var retB = useMergedProps()({
              tabIndex: 0
            }, useButtonLikeEventHandlers(tag, onClick, undefined)(props));
            var ret3 = useMergedProps()(useHeadRandomIdProps(useReferencedBodyIdProps("aria-controls")(_objectSpread2({
              "aria-expanded": ariaExpanded !== null && ariaExpanded !== void 0 ? ariaExpanded : (!!open).toString(),
              "aria-disabled": ariaDisabled !== null && ariaDisabled !== void 0 ? ariaDisabled : open ? "true" : undefined
            }, useRefElementProps(useManagedChildProps(retB))))), {
              onFocus
            });
            return useLinearNavigationChildProps(ret3);
          }
          return {
            useAriaAccordionSectionHeaderProps
          };
        }, [open]);
        var useAriaAccordionSectionBody = A$1(function useAriaAccordionSectionBody() {
          function useAriaAccordionSectionBodyProps(_ref3) {
            var {
              role
            } = _ref3,
                props = _objectWithoutProperties(_ref3, _excluded2$9);

            var ret1 = useReferencedHeadIdProps("aria-labelledby")(_objectSpread2({
              role: role !== null && role !== void 0 ? role : "region"
            }, props));
            var ret2 = useBodyRandomIdProps(ret1);
            return ret2;
          }
          return {
            useAriaAccordionSectionBodyProps
          };
        }, []);
        return {
          expanded: open,
          useAriaAccordionSectionHeader,
          useAriaAccordionSectionBody
        };
      }, [useLinearNavigationChild]);
      return {
        useAriaAccordionSection
      };
    }

    var _excluded$k = ["aria-labelledby", "aria-label"];
    /**
     * Adds an ID and "aria-labelledby" for two elements, an "input" element and a "label" element.
     *
     * Returns the `useReferencedIdProps` hooks if you need to also add other ID-referencing attributes, like `for`
     *
     * @see useInputLabel
     */

    function useGenericLabel({
      labelPrefix,
      inputPrefix,
      backupText
    } = {
      labelPrefix: "label-",
      inputPrefix: "input-"
    }) {
      var {
        element: labelElement,
        getElement: getLabelElement,
        useRefElementProps: useLabelRefElementProps
      } = useRefElement();
      var {
        element: inputElement,
        getElement: getInputElement,
        useRefElementProps: useInputRefElementProps
      } = useRefElement();
      var {
        useRandomIdProps: useLabelRandomIdProps,
        id: labelId,
        randomId: labelRandomId,
        useReferencedIdProps: useReferencedLabelIdProps
      } = useRandomId({
        prefix: labelPrefix
      });
      var {
        useRandomIdProps: useInputRandomIdProps,
        id: inputId,
        randomId: inputRandomId,
        useReferencedIdProps: useReferencedInputIdProps
      } = useRandomId({
        prefix: inputPrefix
      });
      var labelHasMounted = !!labelElement;
      var useGenericLabelLabel = A$1(function useGenericLabelLabel() {
        return {
          useGenericLabelLabelProps: props => {
            return useLabelRandomIdProps(useLabelRefElementProps(props));
          }
        };
      }, []);
      var useGenericLabelInput = A$1(function useGenericLabelInput() {
        return {
          useGenericLabelInputProps: _ref => {
            var _ref2;

            var {
              "aria-labelledby": ariaLabelledby,
              "aria-label": ariaLabel
            } = _ref,
                props = _objectWithoutProperties(_ref, _excluded$k);

            return useInputRandomIdProps(useReferencedLabelIdProps("aria-labelledby")(useInputRefElementProps(useMergedProps()({
              "aria-label": (_ref2 = !labelHasMounted ? backupText : ariaLabel) !== null && _ref2 !== void 0 ? _ref2 : ariaLabel
            }, props))));
          }
        };
      }, [labelHasMounted]);
      return {
        useGenericLabelInput,
        useGenericLabelLabel,
        useReferencedLabelIdProps,
        useReferencedInputIdProps,
        labelId,
        inputId,
        labelElement,
        inputElement,
        getLabelElement,
        getInputElement
      };
    }
    /**
     * Handles the attributes `id`, `for`, and `aria-labelledby` for to related elements.
     *
     * It's assumed that the label is an `HTMLLabelElement`, and the input is something for which
     * the `for` attribute can reference.
     *
     */

    function useInputLabel({
      labelPrefix,
      inputPrefix
    } = {
      labelPrefix: "label-",
      inputPrefix: "input-"
    }) {
      var {
        useGenericLabelInput,
        useGenericLabelLabel,
        useReferencedInputIdProps,
        useReferencedLabelIdProps,
        inputId,
        labelId,
        inputElement,
        getInputElement,
        labelElement,
        getLabelElement
      } = useGenericLabel({
        labelPrefix,
        inputPrefix
      });
      var useInputLabelLabel = A$1(function useInputLabelLabel({
        tag
      }) {
        var {
          useGenericLabelLabelProps
        } = useGenericLabelLabel();
        return {
          useInputLabelLabelProps(props) {
            var withFor = useReferencedInputIdProps("for")(props);
            var withoutFor = props;
            return useGenericLabelLabelProps(tag == "label" ? withFor : withoutFor);
          }

        };
      }, [useGenericLabelInput]);
      var useInputLabelInput = A$1(function useInputLabelInput() {
        var {
          useGenericLabelInputProps
        } = useGenericLabelInput();
        return {
          useInputLabelInputProps(props) {
            return useGenericLabelInputProps(props);
          }

        };
      }, [useGenericLabelLabel]);
      return {
        useInputLabelLabel,
        useInputLabelInput,
        labelId,
        inputId,
        inputElement,
        labelElement,
        getInputElement,
        getLabelElement
      };
    }

    var handlesInput = (tag, labelPosition, which) => {
      if (labelPosition === "separate") {
        if (which === "input-element") return true;else if (which === "label-element") return tag != "input";
      } else if (labelPosition === "wrapping") {
        if (which === "input-element") return false;
        if (which == "label-element") return true;
      }
    };
    /**
     * Handles label type (wrapping or separate) for checkboxes, radios, switches, etc.
     * @param param0
     * @returns
     */


    function useCheckboxLike({
      disabled,
      labelPosition,
      onInput,
      role
    }) {
      var stableOnInput = useStableCallback(e => {
        e.preventDefault();
        onInput === null || onInput === void 0 ? void 0 : onInput(e);
      });
      var {
        inputId,
        labelId,
        useInputLabelInput: useILInput,
        useInputLabelLabel: useILLabel,
        getLabelElement,
        getInputElement
      } = useInputLabel({
        labelPrefix: "aria-checkbox-label-",
        inputPrefix: "aria-checkbox-input-"
      });
      var useCheckboxLikeInputElement = A$1(function useCheckboxInputElement({
        tag
      }) {
        var {
          useInputLabelInputProps: useILInputProps
        } = useILInput();
        var {
          element,
          useRefElementProps
        } = useRefElement();
        return {
          inputElement: element,
          useCheckboxLikeInputElementProps
        };

        function useCheckboxLikeInputElementProps(_ref3) {
          var p0 = _extends({}, _ref3);

          // For some reason, Chrome won't fire onInput events for radio buttons that are tabIndex=-1??
          // Needs investigating, but onInput works fine in Firefox
          // TODO
          var props = useButtonLikeEventHandlers(tag, disabled || !handlesInput(tag, labelPosition, "input-element") ? undefined : stableOnInput, undefined)({});
          if (tag == "input") props.onInput = e => e.preventDefault();
          props = useRefElementProps(useILInputProps(props));

          if (labelPosition == "wrapping") {
            // Because the wrapped label handles all interactions,
            // we need to make sure this element can't be interacted with
            // even if it's an input element.
            props.inert = true;
            props.tabIndex = -1;

            props.onFocus = e => getLabelElement().focus();
          } else {
            if (tag != "input") {
              props.role = role;
              props.tabIndex = 0;
            }

            props["aria-disabled"] = disabled.toString();
          }

          return useMergedProps()(p0, props);
        }
      }, [useILInput, role, labelPosition, disabled]);
      var useCheckboxLikeLabelElement = A$1(function useCheckboxLabelElement({
        tag
      }) {
        var {
          useInputLabelLabelProps: useILLabelProps
        } = useILLabel({
          tag
        });

        function useCheckboxLikeLabelElementProps(_ref4) {
          var p0 = _extends({}, _ref4);

          var newProps = useButtonLikeEventHandlers("div", disabled || !handlesInput(tag, labelPosition, "label-element") ? undefined : stableOnInput, undefined)({});

          if (labelPosition == "wrapping") {
            newProps.tabIndex = 0;
            newProps.role = role;
            newProps["aria-disabled"] = disabled.toString();
          }

          return useMergedProps()(newProps, useILLabelProps(p0));
        }

        return {
          useCheckboxLikeLabelElementProps
        };
      }, [useILLabel, role, labelPosition]);
      return {
        useCheckboxLikeInputElement,
        useCheckboxLikeLabelElement,
        getLabelElement,
        getInputElement
      };
    }

    function useAriaCheckbox({
      labelPosition,
      checked,
      onInput,
      disabled
    }) {
      var onInputEnhanced = e => onInput === null || onInput === void 0 ? void 0 : onInput(enhanceEvent(e, {
        checked: !checked
      }));

      var {
        getInputElement,
        getLabelElement,
        useCheckboxLikeInputElement,
        useCheckboxLikeLabelElement
      } = useCheckboxLike({
        labelPosition,
        role: "checkbox",
        disabled,
        onInput: onInputEnhanced
      });
      var useCheckboxInputElement = A$1(function useCheckboxInputElement({
        tag
      }) {
        var {
          inputElement,
          useCheckboxLikeInputElementProps
        } = useCheckboxLikeInputElement({
          tag
        });
        var isMixed = checked == "mixed";
        h(() => {
          if (inputElement) {
            if (tag === "input") {
              inputElement.indeterminate = isMixed;
            }
          }
        }, [inputElement, isMixed, tag]);
        return {
          useCheckboxInputElementProps
        };

        function useCheckboxInputElementProps(_ref) {
          var _props$checked;

          var p0 = _extends({}, _ref);

          var props = useCheckboxLikeInputElementProps(p0);
          (_props$checked = props.checked) !== null && _props$checked !== void 0 ? _props$checked : props.checked = !!checked;

          if (labelPosition == "separate") {
            props["aria-checked"] = checked.toString();
            if (tag != "input") props.tabIndex = 0;
          }

          if (tag == "input") props.type = "checkbox";
          return props;
        }
      }, [checked, labelPosition, disabled]);
      var useCheckboxLabelElement = A$1(function useCheckboxLabelElement({
        tag
      }) {
        var {
          useCheckboxLikeLabelElementProps
        } = useCheckboxLikeLabelElement({
          tag
        });

        function useCheckboxLabelElementProps(_ref2) {
          var props = _extends({}, _ref2);

          if (labelPosition == "wrapping") {
            props["aria-checked"] = checked.toString();
            if (tag != "input") props.tabIndex = 0;
          }

          return useCheckboxLikeLabelElementProps(props);
        }
        return {
          useCheckboxLabelElementProps
        };
      }, [useCheckboxLikeLabelElement, disabled, labelPosition]);
      return {
        useCheckboxInputElement,
        useCheckboxLabelElement
      };
    }

    var _excluded$j = ["aria-modal", "role"];
    /**
     * Adds event handlers for a modal-like soft-dismiss interaction.
     *
     * That is, any clicks or taps outside of the given component,
     * or any time the Escape key is pressed within the component,
     * (with various browser oddities regarding clicks on blank or inert areas handled)
     * the component will request to close itself.
     *
     * Of course, if you don't do anything in the `onClose` function,
     * it won't be a soft dismiss anymore.
     *
     * @param param0
     * @returns
     */

    function useSoftDismiss({
      onClose
    }) {
      var {
        element,
        useRefElementProps
      } = useRefElement();

      function onBackdropClick(e) {
        // Basically, "was this event fired on the root-most element, or at least an element not contained by the modal?"
        // Either could be how the browser handles these sorts of "interacting with nothing" events.
        if (e.target == document.documentElement || !(element && e.target instanceof Element && element instanceof Element && element.contains(e.target))) {
          onClose("backdrop");
        }
      } // Since everything else is inert, we listen for captured clicks on the window
      // (we don't use onClick since that doesn't fire when clicked on empty/inert areas)
      // Note: We need a *separate* touch event on mobile Safari, because
      // it doesn't let click events bubble or be captured from traditionally non-interactive elements,
      // but touch events work as expected.


      useGlobalHandler(window, "mousedown", !open ? null : onBackdropClick, {
        capture: true
      });
      useGlobalHandler(window, "touchstart", !open ? null : onBackdropClick, {
        capture: true
      });

      var onKeyDown = e => {
        if (e.key === "Escape") {
          onClose("escape");
        }
      };

      return {
        useSoftDismissProps: props => useMergedProps()(useRefElementProps({
          onKeyDown
        }), props)
      };
    }
    /**
     * A generic modal hook, used by modal dialogs, but can also
     * be used by anything that's modal with a backdrop.
     * @param param0
     * @returns
     */

    function useAriaModal({
      open,
      onClose
    }) {
      var [modalDescribedByBody, setModalDescribedByBody] = useState(false);
      useHideScroll(open);
      var {
        id: modalId,
        useRandomIdProps: useModalIdProps,
        useReferencedIdProps: useModalReferencingIdProps
      } = useRandomId({
        prefix: "aria-modal-"
      });
      var {
        id: bodyId,
        useRandomIdProps: useBodyIdProps,
        useReferencedIdProps: useBodyReferencingIdProps
      } = useRandomId({
        prefix: "aria-modal-body-"
      });
      var {
        id: titleId,
        useRandomIdProps: useTitleIdProps,
        useReferencedIdProps: useTitleReferencingIdProps
      } = useRandomId({
        prefix: "aria-modal-title-"
      });
      var {
        useSoftDismissProps
      } = useSoftDismiss({
        onClose
      });
      var useModalBackdrop = A$1(function useModalBackdrop() {
        function useModalBackdropProps(props) {
          return useMergedProps()({}, props);
        }

        return {
          useModalBackdropProps
        };
      }, []);

      var useModalProps = function (_ref) {
        var p0 = _objectWithoutProperties(_ref, _excluded$j);

        var {
          useFocusTrapProps
        } = useFocusTrap({
          trapActive: open
        });
        var p1 = useTitleReferencingIdProps("aria-labelledby")(p0);
        var p2 = useModalIdProps(p1);
        var pFinal = useBodyReferencingIdProps("aria-describedby")(p2);
        return useFocusTrapProps(useMergedProps()(useSoftDismissProps({
          role: "dialog"
        }), modalDescribedByBody ? pFinal : p2));
      };

      var useModalTitle = A$1(function useModalTitle() {
        var useModalTitleProps = function (props) {
          return useTitleIdProps(props);
        };

        return {
          useModalTitleProps
        };
      }, []);
      var useModalBody = A$1(function useModalBody({
        descriptive
      }) {
        setModalDescribedByBody(descriptive);

        var useModalBodyProps = function (props) {
          return useBodyIdProps(props);
        };

        return {
          useModalBodyProps
        };
      }, []);
      return {
        useModalProps,
        useModalTitle,
        useModalBody,
        useModalBackdrop
      };
    }
    /**
     * Allows for hiding the scroll bar of the root HTML element
     * without shifting the layout of the page more than adding a fow pixels
     * of padding to the root element if necessary.
     * @param hideScroll
     */

    function useHideScroll(hideScroll) {
      var [scrollbarWidth, setScrollbarWidth, getScrollbarWidth] = useState(null);
      y(() => {
        if (hideScroll) {
          var widthWithScrollBar = document.documentElement.scrollWidth;
          document.documentElement.classList.add("document-scroll-hidden");
          document.documentElement.dataset["scrollHiders"] = (+(document.documentElement.dataset["scrollHiders"] || "0") + 1).toString();
          var widthWithoutScrollBar = document.documentElement.scrollWidth;

          var _scrollbarWidth = widthWithoutScrollBar - widthWithScrollBar; // Failsafe -- if this measuring trick does something unexpected, just ignore it


          if (_scrollbarWidth > 80) _scrollbarWidth = 0;
          document.documentElement.style.setProperty("--scrollbar-width", "".concat(_scrollbarWidth, "px"));
          setScrollbarWidth(_scrollbarWidth);
          return () => {
            document.documentElement.dataset["scrollHiders"] = (+(document.documentElement.dataset["scrollHiders"] || "0") - 1).toString();

            if (document.documentElement.dataset["scrollHiders"] == "0") {
              document.documentElement.removeAttribute("data-scroll-hiders");
              document.documentElement.classList.remove("document-scroll-hidden");
            }
          };
        }
      }, [hideScroll]);
      return {
        scrollbarWidth,
        getScrollbarWidth
      };
    }

    function useAriaDialog({
      open,
      onClose
    }) {
      // TODO: Differences between dialog and modal go here, presumably
      var {
        useModalBackdrop,
        useModalBody,
        useModalProps,
        useModalTitle
      } = useAriaModal({
        open,
        onClose
      });
      return {
        useDialogProps: useModalProps,
        useDialogTitle: useModalTitle,
        useDialogBody: useModalBody,
        useDialogBackdrop: useModalBackdrop
      };
    }

    var _excluded$i = ["selectedIndex", "onSelect", "selectionMode"];
    function useAriaListboxSingle(_ref) {
      var {
        selectedIndex,
        onSelect,
        selectionMode
      } = _ref,
          args = _objectWithoutProperties(_ref, _excluded$i);

      var {
        lastFocusedInner,
        useHasFocusProps
      } = useHasFocus();
      var {
        useGenericLabelInput,
        useGenericLabelLabel,
        useReferencedInputIdProps,
        useReferencedLabelIdProps,
        inputElement
      } = useGenericLabel({
        labelPrefix: "aria-listbox-label-",
        inputPrefix: "aria-listbox-"
      });
      var {
        useListNavigationChild,
        navigateToIndex,
        managedChildren,
        setTabbableIndex,
        tabbableIndex,
        focusCurrent,
        currentTypeahead,
        invalidTypeahead
      } = useListNavigation(_objectSpread2(_objectSpread2({}, args), {}, {
        focusOnChange: lastFocusedInner
      }));
      var {
        useGenericLabelInputProps
      } = useGenericLabelInput();
      var stableOnSelect = useStableCallback(onSelect !== null && onSelect !== void 0 ? onSelect : () => {});
      useChildFlag(selectedIndex, managedChildren.length, (i, selected) => {
        var _managedChildren$i;

        return (_managedChildren$i = managedChildren[i]) === null || _managedChildren$i === void 0 ? void 0 : _managedChildren$i.setSelected(selected);
      });
      useLayoutEffect(([]) => {
        navigateToIndex(selectedIndex);
      }, [selectedIndex, managedChildren.length]);
      var childCount = managedChildren.length;
      var {
        lastActiveElement
      } = useActiveElement();
      var anyRadiosFocused = !!(inputElement !== null && inputElement !== void 0 && inputElement.contains(lastActiveElement));
      y(() => {
        if (!anyRadiosFocused) setTabbableIndex(selectedIndex);
      }, [anyRadiosFocused, selectedIndex, setTabbableIndex]);
      var useListboxSingleItem = A$1(info => {
        var [selected, setSelected, getSelected] = useState(false);
        var {
          tabbable,
          useListNavigationSiblingProps,
          useListNavigationChildProps
        } = useListNavigationChild(_objectSpread2({
          setSelected
        }, info));
        var {
          element,
          useRefElementProps
        } = useRefElement();
        var index = info.index;
        y(() => {
          if (element && tabbable && selectionMode == "focus") {
            stableOnSelect === null || stableOnSelect === void 0 ? void 0 : stableOnSelect({
              target: element,
              currentTarget: element,
              [EventDetail]: {
                selectedIndex: index
              }
            });
          }
        }, [element, tabbable, selectionMode, index]);
        return {
          useListboxSingleItemProps,
          tabbable,
          selected,
          getSelected
        };

        function useListboxSingleItemProps(props) {
          var newProps = useButtonLikeEventHandlers(info.tag, e => {
            navigateToIndex(info.index);
            if (element) stableOnSelect === null || stableOnSelect === void 0 ? void 0 : stableOnSelect({
              target: element,
              currentTarget: element,
              [EventDetail]: {
                selectedIndex: index
              }
            });
            e.preventDefault();
          }, undefined)({});
          props.role = "option";
          props["aria-setsize"] = childCount.toString();
          props["aria-posinset"] = (info.index + 1).toString();
          props["aria-selected"] = selected.toString();
          return useListNavigationChildProps(useMergedProps()(newProps, useRefElementProps(props)));
        }
      }, [useListNavigationChild, selectionMode, childCount]);
      var useListboxSingleLabel = A$1(function useListboxSingleLabel() {
        function useListboxSingleLabelProps(props) {
          var {
            useGenericLabelLabelProps
          } = useGenericLabelLabel();
          useGenericLabelLabelProps(props);
        }

        return {
          useListboxSingleLabelProps
        };
      }, [useGenericLabelLabel]);
      return {
        useListboxSingleItem,
        useListboxSingleProps,
        useListboxSingleLabel,
        tabbableIndex,
        focus: focusCurrent,
        currentTypeahead,
        invalidTypeahead
      };

      function useListboxSingleProps(props) {
        props.role = "listbox";
        return useHasFocusProps(useGenericLabelInputProps(props));
      }
    }

    var _excluded$h = ["collator", "keyNavigation", "noTypeahead", "noWrap", "typeaheadTimeout"];
    function useAriaMenu(_ref) {
      var {
        collator,
        keyNavigation,
        noTypeahead,
        noWrap,
        typeaheadTimeout
      } = _ref,
          args = _objectWithoutProperties(_ref, _excluded$h);

      var [focusTrapActive, setFocusTrapActive] = l(false);
      var onClose = args.onClose;
      var onOpen = args.onOpen;
      var menubar = args.menubar;
      var open = menubar ? true : args.open;
      var stableOnClose = useStableCallback(onClose !== null && onClose !== void 0 ? onClose : () => {}); // TODO: It's awkward that the button focus props are out here where we don't have its type,
      // but focus management is super sensitive, and even waiting for a useLayoutEffect to sync state here
      // would be too late, so it would look like there's a moment between menu focus lost and button focus gained
      // where nothing is focused. 

      var {
        focusedInner: menuHasFocus,
        useHasFocusProps: useMenuHasFocusProps
      } = useHasFocus();
      var {
        focusedInner: buttonHasFocus,
        useHasFocusProps: useButtonHasFocusProps
      } = useHasFocus();
      var {
        activeElement,
        lastActiveElement,
        windowFocused
      } = useActiveElement();
      var {
        managedChildren,
        useListNavigationChild,
        tabbableIndex,
        focusCurrent: focusMenu
      } = useListNavigation({
        collator,
        keyNavigation,
        noTypeahead,
        noWrap,
        typeaheadTimeout,
        focusOnChange: menuHasFocus || buttonHasFocus
      });
      var {
        useRandomIdProps: useMenuIdProps,
        useReferencedIdProps: useMenuIdReferencingProps
      } = useRandomId({
        prefix: "aria-menu-"
      });
      var [openerElement, setOpenerElement] = l(null);
      var {
        useSoftDismissProps
      } = useSoftDismiss({
        onClose: stableOnClose
      });
      y(() => {
        setFocusTrapActive(open);
      }, [open]);
      y(() => {
        if (focusTrapActive) focusMenu === null || focusMenu === void 0 ? void 0 : focusMenu();else openerElement === null || openerElement === void 0 ? void 0 : openerElement.focus();
      }, [focusMenu, focusTrapActive]); // Focus management is really finicky, and there's always going to be 
      // an edge case where nothing's focused for two consecutive frames 
      // on iOS or whatever, which would immediately close the menu 
      // any time it's been opened. So any time it *looks* like we should close,
      // try waiting 100ms. If it's still true then, then yeah, we should close.

      var shouldClose = focusTrapActive && windowFocused && !menuHasFocus && !buttonHasFocus;
      useTimeout({
        timeout: 100,
        callback: () => {
          if (shouldClose) {
            onClose === null || onClose === void 0 ? void 0 : onClose();
          }
        },
        triggerIndex: "".concat(shouldClose)
      }); // A menu sentinal is a hidden but focusable element that comes at the start or end of the element
      // that, when activated or focused over, closes the menu.
      // (if focused within 100ms of the open prop changing, instead of
      // closing the menu, focusing the sentinel immediately asks the menu to focus itself).
      // This exists because while mouse users can click out of a menu
      // and keyboard users can escape to close the menu,
      // screen readers and other input methods that don't use those two become stuck.

      var useMenuSentinel = A$1(() => {
        var [firstSentinelIsActive, setFirstSentinelIsActive] = l(false);
        useTimeout({
          callback: () => {
            setFirstSentinelIsActive(open);
          },
          timeout: 100,
          triggerIndex: "".concat(firstSentinelIsActive)
        });
        var onFocus = firstSentinelIsActive ? () => stableOnClose() : () => focusMenu === null || focusMenu === void 0 ? void 0 : focusMenu();

        var onClick = () => stableOnClose();

        return {
          useMenuSentinelProps: function (p) {
            return useMergedProps()({
              onFocus,
              onClick
            }, p);
          }
        };
      }, [focusMenu, open]);
      var useMenuButton = A$1(({
        tag
      }) => {
        var {
          element,
          getElement,
          useRefElementProps
        } = useRefElement();
        useLayoutEffect(() => {
          setOpenerElement(element);
        }, [element]);
        return {
          useMenuButtonProps: function (p) {
            var props = useRefElementProps(useMergedProps()({
              onClick: () => {
                return open ? onClose === null || onClose === void 0 ? void 0 : onClose() : onOpen === null || onOpen === void 0 ? void 0 : onOpen();
              }
            }, useMenuIdReferencingProps("aria-controls")(useButtonHasFocusProps(p))));
            props["aria-haspopup"] = "menu";
            props["aria-expanded"] = open ? "true" : undefined;
            return props;
          }
        };
      }, [open, onClose, onOpen, useMenuIdReferencingProps]);
      var useMenuSubmenuItem = A$1(args => {
        var {
          useMenuProps,
          useMenuButton
        } = useAriaMenu(args);
        var {
          useMenuButtonProps
        } = useMenuButton({
          tag: "li"
        });
        var {
          element,
          getElement,
          useRefElementProps
        } = useRefElement();
        useLayoutEffect(() => {
          setOpenerElement(element);
        }, [element]);
        return {
          element,
          getElement,
          useMenuProps,
          useMenuSubmenuItemProps: function (_ref2) {
            var props = _extends({}, _ref2);

            props.role = "menuitem";
            return useRefElementProps(useMenuButtonProps(useMenuIdReferencingProps("aria-controls")(props)));
          }
        };
      }, []);
      var useMenuItem = A$1(args => {
        var {
          useListNavigationChildProps
        } = useListNavigationChild(args); // const { getSyncHandler, ...asyncInfo } = useAsyncHandler<E>()({ capture: _ => void (0) });
        // const onClick = getSyncHandler(asyncInfo.pending ? null : (args.onClick ?? null));

        var onClick = args.onClick;

        function useMenuItemProps(_ref3) {
          var props = _extends({}, _ref3);

          props.role = "menuitem";
          return useMergedProps()({
            onClick
          }, useListNavigationChildProps(props));
        }

        return {
          useMenuItemProps
        };
      }, []);
      var useMenuItemCheckbox = A$1(args => {
        //const { getSyncHandler, ...asyncInfo } = useAsyncHandler<E>()({ capture: _ => !args.checked });
        //const onClick = getSyncHandler(asyncInfo.pending ? null : args.onChange);
        var onClick = e => args.onChange(enhanceEvent(e, {
          checked: !args.checked
        }));

        function useMenuItemProps(_ref4) {
          var props = _extends({}, _ref4);

          props.role = "menuitemcheckbox";
          return useMergedProps()({
            onClick
          }, props);
        }

        return {
          useMenuItemProps
        };
      }, []);

      function useMenuProps(_ref5) {
        var props = _extends({}, _ref5);

        props.role = "menu";

        function onKeyDown(e) {
          if (e.key == "Escape" && onClose) {
            onClose();
          }
        }

        return useMenuIdProps(useMenuHasFocusProps(useMergedProps()({
          onKeyDown
        }, useSoftDismissProps(props))));
      }

      return {
        useMenuProps,
        useMenuButton,
        useMenuItem,
        useMenuSentinel,
        useMenuItemCheckbox,
        useMenuSubmenuItem,
        focusMenu
      };
    }

    var _excluded$g = ["selectionMode", "selectedIndex", "onSelect", "orientation"];
    function useAriaTabs(_ref) {
      var {
        selectionMode,
        selectedIndex,
        onSelect,
        orientation: logicalOrientation
      } = _ref,
          args = _objectWithoutProperties(_ref, _excluded$g);

      var {
        useHasFocusProps: useTabListHasFocusProps,
        focusedInner: tabListFocused
      } = useHasFocus();
      var {
        element: listElement,
        useRefElementProps
      } = useRefElement();
      var {
        getLogicalDirection,
        convertToPhysicalOrientation
      } = useLogicalDirection(listElement);
      var physicalOrientation = convertToPhysicalOrientation(logicalOrientation);
      useRandomId({
        prefix: "aria-tab-list-"
      });
      var {
        useRandomIdProps: useTabLabelIdProps,
        useReferencedIdProps: useReferencedTabLabelId
      } = useRandomId({
        prefix: "aria-tab-label-"
      });
      var {
        managedChildren: managedTabs,
        navigateToIndex,
        useListNavigationChild,
        tabbableIndex,
        invalidTypeahead,
        currentTypeahead,
        focusCurrent
      } = useListNavigation(_objectSpread2(_objectSpread2({}, args), {}, {
        focusOnChange: tabListFocused,
        keyNavigation: logicalOrientation
      }));
      var {
        managedChildren: managedPanels,
        useManagedChild: useManagedTabPanel
      } = useChildManager();
      useStableCallback(onSelect);
      var childCount = managedTabs.length;
      useLayoutEffect(() => {
        for (var child of managedTabs) {
          child.setSelectionMode(selectionMode);
        }
      }, [selectionMode]);
      useChildFlag(selectedIndex, managedTabs.length, (i, selected) => {
        var _managedTabs$i;

        return (_managedTabs$i = managedTabs[i]) === null || _managedTabs$i === void 0 ? void 0 : _managedTabs$i.setSelected(selected);
      });
      useChildFlag(selectedIndex, managedPanels.length, (i, visible) => {
        var _managedPanels$i;

        return (_managedPanels$i = managedPanels[i]) === null || _managedPanels$i === void 0 ? void 0 : _managedPanels$i.setVisible(visible);
      });
      useLayoutEffect(([prevChildCount, prevSelectedIndex]) => {
        if (selectedIndex != null && selectionMode == "activate") {
          var _managedPanels$select;

          (_managedPanels$select = managedPanels[selectedIndex]) === null || _managedPanels$select === void 0 ? void 0 : _managedPanels$select.focus();
        }
      }, [childCount, selectedIndex, selectionMode]);
      var getTabListIsFocused = useStableGetter(tabListFocused);
      var useTab = A$1(function useTab(info) {
        //const [selectedTabId, setSelectedTabId, getSelectedTabId] = useState<string | undefined>(undefined);
        var [selectionModeL, setSelectionModeL] = useState(selectionMode);
        var {
          element,
          useRefElementProps
        } = useRefElement();
        var [tabPanelId, setTabPanelId] = useState(undefined);
        var {
          useRandomIdProps: useTabIdProps,
          id: tabId,
          getId: getTabId
        } = useRandomId({
          prefix: "aria-tab-"
        });
        var [selected, setSelected, getSelected] = useState(null);
        var {
          tabbable,
          useListNavigationChildProps,
          useListNavigationSiblingProps
        } = useListNavigationChild(_objectSpread2(_objectSpread2({}, info), {}, {
          setSelected,
          tabId,
          setTabPanelId,
          setSelectionMode: setSelectionModeL
        }));
        var getIndex = useStableGetter(info.index); // const { getSyncHandler, ...asyncInfo } = useAsyncHandler<Element>()({ capture: (e: unknown) => info.index });
        // const onSelect = getSyncHandler(asyncInfo.pending? null : (stableAsyncOnSelect ?? null));

        y(() => {
          if (tabbable && selectionModeL == "focus") {
            onSelect({
              target: element,
              currentTarget: element,
              [EventDetail]: {
                selectedIndex: getIndex()
              }
            });
          }
        }, [tabbable, selectionModeL, element]);
        y(() => {
          var _managedPanels$info$i;

          (_managedPanels$info$i = managedPanels[info.index]) === null || _managedPanels$info$i === void 0 ? void 0 : _managedPanels$info$i.setTabId(tabId);
        }, [tabId, info.index]);
        /*useEffect(() => {
            if (selected)
                setSelectedTabId(tabId);
        }, [selected, tabId])*/

        function useTabProps(_ref2) {
          var props = _extends({}, _ref2);

          var newProps = useButtonLikeEventHandlers(info.tag, e => {
            navigateToIndex(info.index);
            onSelect === null || onSelect === void 0 ? void 0 : onSelect(enhanceEvent(e, {
              selectedIndex: getIndex()
            }));
            e.preventDefault();
          }, undefined)(props);
          newProps.role = "tab";
          newProps["aria-selected"] = (selected !== null && selected !== void 0 ? selected : false).toString();
          newProps["aria-controls"] = tabPanelId;
          return useMergedProps()({}, useTabIdProps(useListNavigationChildProps(useRefElementProps(newProps))));
        }

        return {
          useTabProps,
          selected
        };
      }, []);
      var useTabPanel = A$1(function usePanel(info) {
        //const [selectedTabPanelId, setSelectedTabPanelId, getSelectedTabPanelId] = useState<string | undefined>(undefined);
        var [shouldFocus, setShouldFocus] = useState(false);
        var [tabId, setTabId] = useState(undefined);
        var [selected, setSelected, getSelected] = useState(null);
        var {
          useRandomIdProps: usePanelIdProps,
          useReferencedIdProps: useReferencedPanelId,
          id: tabPanelId
        } = useRandomId({
          prefix: "aria-tab-panel-"
        });
        var {
          element,
          useManagedChildProps
        } = useManagedTabPanel(_objectSpread2(_objectSpread2({}, info), {}, {
          tabPanelId,
          setTabId,
          focus,
          setVisible: setSelected
        }));

        function focus() {
          if (getTabListIsFocused()) {
            setShouldFocus(true);
          }
        }

        y(() => {
          if (shouldFocus) {
            element === null || element === void 0 ? void 0 : element.focus();
            setShouldFocus(false);
          }
        }, [element, shouldFocus]);
        y(() => {
          var _managedTabs$info$ind;

          (_managedTabs$info$ind = managedTabs[info.index]) === null || _managedTabs$info$ind === void 0 ? void 0 : _managedTabs$info$ind.setTabPanelId(tabPanelId);
        }, [tabPanelId, info.index]);

        function useTabPanelProps(_ref3) {
          var _managedTabs$info$ind2, _props$tabIndex;

          var props = _extends({}, _ref3);

          props["aria-labelledby"] = (_managedTabs$info$ind2 = managedTabs[info.index]) === null || _managedTabs$info$ind2 === void 0 ? void 0 : _managedTabs$info$ind2.tabId;
          props.role = "tabpanel";
          (_props$tabIndex = props.tabIndex) !== null && _props$tabIndex !== void 0 ? _props$tabIndex : props.tabIndex = -1; // Make sure the tab panel is tabbable.

          return useMergedProps()({}, usePanelIdProps(useManagedChildProps(props)));
        }

        return {
          useTabPanelProps,
          selected
        };
      }, []);
      var useTabsList = A$1(function useTabList() {
        function useTabListProps(_ref4) {
          var props = _extends({}, _ref4);

          props.role = "tablist";
          props["aria-orientation"] = physicalOrientation;
          return useReferencedTabLabelId("aria-labelledby")(useTabListHasFocusProps(useRefElementProps(props)));
        }

        return {
          useTabListProps
        };
      }, [physicalOrientation]);
      var useTabsLabel = A$1(function useTabsLabel() {
        function useTabsLabelProps(_ref5) {
          var props = _extends({}, _ref5);

          return useTabLabelIdProps(props);
        }

        return {
          useTabsLabelProps
        };
      }, []);
      return {
        useTab,
        useTabPanel,
        useTabsList,
        useTabsLabel,
        tabbableIndex,
        focusTabList: focusCurrent,
        currentTypeahead,
        invalidTypeahead
      };
    }

    var _excluded$f = ["value", "index", "text", "disabled", "labelPosition"];
    function useAriaRadioGroup({
      name,
      selectedValue,
      onInput
    }) {
      var {
        element,
        useRefElementProps
      } = useRefElement();
      var [selectedIndex, setSelectedIndex, getSelectedIndex] = useState(null);
      var byName = s(new Map());
      var stableOnInput = useStableCallback(onInput);
      var {
        useHasFocusProps,
        lastFocusedInner
      } = useHasFocus();
      var {
        managedChildren,
        useListNavigationChild,
        setTabbableIndex,
        tabbableIndex,
        focusCurrent,
        currentTypeahead,
        invalidTypeahead
      } = useListNavigation({
        focusOnChange: lastFocusedInner
      });
      var useRadioGroupProps = A$1(_ref => {
        var props = _extends({}, _ref);

        props.role = "radiogroup";
        return useRefElementProps(useHasFocusProps(props));
      }, [useHasFocusProps, useRefElementProps]);
      useChildFlag(selectedIndex, managedChildren.length, (i, checked) => {
        var _managedChildren$i;

        return (_managedChildren$i = managedChildren[i]) === null || _managedChildren$i === void 0 ? void 0 : _managedChildren$i.setChecked(checked);
      });
      var {
        lastActiveElement
      } = useActiveElement();
      var anyRadiosFocused = !!(element !== null && element !== void 0 && element.contains(lastActiveElement));
      y(() => {
        if (!anyRadiosFocused && selectedIndex != null) setTabbableIndex(selectedIndex);
      }, [anyRadiosFocused, selectedIndex, setTabbableIndex]);
      y(() => {
        getSelectedIndex();
        var newIndex = byName.current.get(selectedValue);
        setSelectedIndex(newIndex);
      }, [selectedValue]);
      var useRadio = A$1(function useAriaRadio(_ref2) {
        var {
          value,
          index,
          text,
          disabled,
          labelPosition
        } = _ref2,
            rest = _objectWithoutProperties(_ref2, _excluded$f);

        var onInput = A$1(e => {
          stableOnInput(enhanceEvent(e, {
            selectedValue: value
          }));
        }, [stableOnInput, value, index]);
        var {
          getInputElement,
          getLabelElement,
          useCheckboxLikeInputElement,
          useCheckboxLikeLabelElement
        } = useCheckboxLike({
          disabled,
          labelPosition,
          onInput,
          role: "radio"
        }); //const {} = useCheckboxLikeInputElement({  })

        var byName2 = byName.current;
        var [checked, setChecked] = useState(false);
        h(() => {
          console.assert(!byName2.has(value));
          byName2.set(value, index);
          return () => {
            byName2.delete(value);
          };
        }, [value, index]);
        var {
          tabbable,
          useListNavigationChildProps,
          useListNavigationSiblingProps
        } = useListNavigationChild(_objectSpread2({
          index,
          setChecked,
          text
        }, rest));

        var useRadioInput = ({
          tag
        }) => {
          var useRadioInputProps = props => {
            if (tag == "input") {
              props.name = name;
              props.checked = checked;
            } else {
              props["aria-checked"] = checked.toString();
            }

            var {
              useCheckboxLikeInputElementProps
            } = useCheckboxLikeInputElement({
              tag
            });
            return useMergedProps()(useListNavigationChildProps(useCheckboxLikeInputElementProps({})), props);
          };

          return {
            useRadioInputProps
          };
        };

        var useRadioLabel = A$1(({
          tag
        }) => {
          var useRadioLabelProps = props => {
            var {
              useCheckboxLikeLabelElementProps
            } = useCheckboxLikeLabelElement({
              tag
            });
            return useCheckboxLikeLabelElementProps(useMergedProps()({}, props));
          };

          return {
            useRadioLabelProps
          };
        }, [useCheckboxLikeLabelElement]);
        return {
          useRadioInput,
          useRadioLabel
        };
      }, [byName, useListNavigationChild]);
      return {
        useRadio,
        useRadioGroupProps,
        managedChildren,
        getIndex: A$1(value => {
          return byName.current.get(value);
        }, [byName]),
        tabbableIndex,
        focusRadio: focusCurrent,
        currentTypeahead,
        invalidTypeahead
      };
    }

    var _excluded$e = ["role", "aria-live", "aria-relevant"];
    function useToasts({}) {
      // "Pointer" to whatever index toast is currently being shown.
      // E.g. it's 0 when the first toast is shown, then when dismissed, it becomes 1.
      // When the second toast is shown, it stays at 1 until dismissed, when it then becomes 2, etc.
      // Because toasts can potentially be dismissed out of order, this represents the "oldest" toast that still hasn't been dismissed,
      // even if "younger" ones have.
      var [activeToastIndex, setActiveToastIndex, getActiveToastIndex] = useState(-1);
      var [politeness, setPoliteness] = useState("polite");
      var {
        element,
        getElement,
        useRefElementProps
      } = useRefElement();
      var {
        indicesByElement,
        managedChildren,
        mountedChildren: toastQueue,
        useManagedChild,
        getMountIndex
      } = useChildManager(); // Any time a new toast mounts, update our bottommostToastIndex to point to it if necessary
      // ("necessary" just meaning if it's the first toast ever or all prior toasts have been dismissed)

      var onAnyToastMounted = A$1(index => {
        var bottom = getActiveToastIndex();

        while (bottom < toastQueue.length && (bottom < 0 || (_toastQueue$bottom = toastQueue[bottom]) !== null && _toastQueue$bottom !== void 0 && _toastQueue$bottom.dismissed)) {
          var _toastQueue$bottom;

          ++bottom;
        }

        setActiveToastIndex(bottom);
      }, [setActiveToastIndex]); // Any time a toast is dismissed, update our bottommostToastIndex to point to the next toast in the queue, if one exists.

      var onAnyToastDismissed = A$1(index => {
        var _getElement, _toastQueue$bottom3;

        var bottom = getActiveToastIndex();

        while (bottom < toastQueue.length && (bottom < 0 || bottom === index || (_toastQueue$bottom2 = toastQueue[bottom]) !== null && _toastQueue$bottom2 !== void 0 && _toastQueue$bottom2.dismissed)) {
          var _toastQueue$bottom2;

          ++bottom;
        }

        setActiveToastIndex(bottom);
        if ((_getElement = getElement()) !== null && _getElement !== void 0 && _getElement.contains(document.activeElement)) (_toastQueue$bottom3 = toastQueue[bottom]) === null || _toastQueue$bottom3 === void 0 ? void 0 : _toastQueue$bottom3.focus();
      }, [setActiveToastIndex]); // Any time the index pointing to the currently-showing toast changes,
      // update the relevant children and let them know that they're now either active or dismissed.

      useChildFlag(activeToastIndex, toastQueue.length, (i, set) => {
        var _toastQueue$i;

        if (set) console.assert(i <= getActiveToastIndex());
        (_toastQueue$i = toastQueue[i]) === null || _toastQueue$i === void 0 ? void 0 : _toastQueue$i.setStatus(set ? "active" : i < getActiveToastIndex() ? "dismissed" : "pending");
      });
      var useToast = A$1(({
        politeness,
        timeout
      }) => {
        var [status, setStatus, getStatus] = useState("pending");
        var dismissed = status === "dismissed";
        var dismiss = A$1(() => {
          setStatus("dismissed");
        }, []);
        var {
          randomId: toastId
        } = useRandomId({
          prefix: "toast-"
        }); //const [toastId, setToastId] = useState(() => generateRandomId("toast-"));

        h(() => {
          setPoliteness(politeness !== null && politeness !== void 0 ? politeness : "polite");
        }, [politeness]);
        var focus = A$1(() => {
          var element = getElement();

          if (element) {
            var firstFocusable = findFirstFocusable(element);
            firstFocusable === null || firstFocusable === void 0 ? void 0 : firstFocusable.focus();
          }
        }, []);
        var {
          element,
          useManagedChildProps,
          getElement
        } = useManagedChild({
          dismissed,
          index: toastId,
          setStatus,
          focus
        });
        var isActive = status === "active";
        y(() => {
          onAnyToastMounted(getMountIndex(toastId));
        }, []);
        y(() => {
          if (dismissed) onAnyToastDismissed(getMountIndex(toastId));
        }, [dismissed]);
        useTimeout({
          timeout,
          callback: () => {
            if (isActive) setStatus("dismissed");
          },
          triggerIndex: isActive
        });
        return {
          status,
          getStatus,
          dismiss,
          useToastProps: function (_ref) {
            var props = _extends({}, _ref);

            return useMergedProps()(useManagedChildProps({}), props);
          }
        };
      }, []);

      function useToastContainerProps(_ref2) {
        var _ref3;

        var {
          role,
          "aria-live": ariaLive,
          "aria-relevant": ariaRelevant
        } = _ref2,
            props = _objectWithoutProperties(_ref2, _excluded$e);

        return useMergedProps()(useRefElementProps({
          class: "toasts-container",
          role: "status",
          "aria-live": (_ref3 = politeness !== null && politeness !== void 0 ? politeness : ariaLive) !== null && _ref3 !== void 0 ? _ref3 : "polite",
          "aria-relevant": ariaRelevant !== null && ariaRelevant !== void 0 ? ariaRelevant : "additions"
        }), props);
      }

      return {
        useToast,
        useToastContainerProps
      };
    }

    var _excluded$d = ["data-pseudo-active"];
    function forwardElementRef(component) {
      return x(component);
    }
    function usePseudoActive(_ref) {
      var {
        "data-pseudo-active": active
      } = _ref,
          props = _objectWithoutProperties(_ref, _excluded$d);

      return useMergedProps()({
        className: clsx((active == true || active == "true") && "active")
      }, props);
    }
    var SpinnerDelayContext = D$1(1000);
    function useSpinnerDelay(pending, timeout) {
      var _ref2;

      var [showSpinner, setShowSpinner] = useState(false);
      y(() => {
        if (!pending) {
          setShowSpinner(false);
        }
      }, [pending]);
      var defaultDelay = F(SpinnerDelayContext);
      useTimeout({
        timeout: (_ref2 = timeout !== null && timeout !== void 0 ? timeout : defaultDelay) !== null && _ref2 !== void 0 ? _ref2 : 1000,
        callback: () => {
          setShowSpinner(pending);
        },
        triggerIndex: pending
      });
      return showSpinner;
    }

    var _excluded$c = ["expandedIndex", "setExpandedIndex", "children"],
        _excluded2$8 = ["index", "open", "header", "headerLevel", "children", "Transition"];
    var UseAriaAccordionSectionContext = D$1(null);
    var Accordion = forwardElementRef(function Accordion(_ref, ref) {
      var {
        expandedIndex,
        setExpandedIndex,
        children
      } = _ref,
          props = _objectWithoutProperties(_ref, _excluded$c);

      var {
        useAriaAccordionSection
      } = useAriaAccordion({
        expandedIndex,
        setExpandedIndex
      });
      return v$1("div", _objectSpread2({}, useMergedProps()({
        ref,
        className: "accordian"
      }, props)), v$1(UseAriaAccordionSectionContext.Provider, {
        value: useAriaAccordionSection
      }, children));
    });
    var AccordionSection = forwardElementRef(function AccordionSection(_ref2, ref) {
      var _Transition, _headerLevel;

      var {
        index,
        open,
        header,
        headerLevel,
        children,
        Transition
      } = _ref2,
          props = _objectWithoutProperties(_ref2, _excluded2$8);

      var useAriaAccordionSection = F(UseAriaAccordionSectionContext);
      var {
        expanded,
        useAriaAccordionSectionHeader,
        useAriaAccordionSectionBody
      } = useAriaAccordionSection({
        index,
        open
      });
      var {
        useAriaAccordionSectionHeaderProps
      } = useAriaAccordionSectionHeader({
        tag: "button"
      });
      var {
        useAriaAccordionSectionBodyProps
      } = useAriaAccordionSectionBody();
      (_Transition = Transition) !== null && _Transition !== void 0 ? _Transition : Transition = Collapse;
      (_headerLevel = headerLevel) !== null && _headerLevel !== void 0 ? _headerLevel : headerLevel = 2;
      console.log("".concat(index, ": ").concat(expanded === null || expanded === void 0 ? void 0 : expanded.toString()));
      var headerButtonProps = useAriaAccordionSectionHeaderProps({
        type: "button",
        class: clsx("accordion-button", !expanded ? " collapsed" : "")
      });
      var headerProps = {
        class: "accordion-header",
        children: v$1("button", _objectSpread2({}, headerButtonProps), header)
      };
      var headerJsx = headerLevel >= 1 && headerLevel <= 6 ? v$1("h".concat(headerLevel), headerProps) : v$1("div", useMergedProps()(headerProps, {
        role: "heading",
        "aria-level": "".concat(headerLevel)
      }));
      return v$1("div", _objectSpread2({}, {
        ref,
        class: "accordion-item"
      }), headerJsx, v$1(Transition, _objectSpread2({
        open: expanded
      }, useAriaAccordionSectionBodyProps(useMergedProps()(props, {
        class: ""
      }))), v$1("div", null, v$1("div", {
        class: "accordion-body"
      }, children))));
    });

    var _excluded$b = ["aria-valuemax", "aria-valuenow", "aria-valuetext", "role"],
        _excluded3$2 = ["spinnerTimeout", "mode", "colorFill", "childrenPosition", "children", "color"];
    function useAriaProgressBar({
      tag,
      max,
      value,
      valueText
    }) {
      //const { inputId, labelId, useGenericLabelInput, useGenericLabelLabel, useReferencedInputIdProps, useReferencedLabelIdProps } = useGenericLabel({ inputPrefix: "progressbar-", labelPrefix: "progressbar-reference-" });
      var {
        id: progressBarId,
        getId,
        useRandomIdProps,
        useReferencedIdProps
      } = useRandomId({
        prefix: "progressbar-"
      });

      function useProgressProps(_ref) {
        var p = _objectWithoutProperties(_ref, _excluded$b);

        var extraProps = tag === "progress" ? {
          max,
          value: value !== null && value !== void 0 ? value : undefined,
          "aria-valuenow": value == null ? undefined : "".concat(value)
        } : {
          "aria-valuemax": max == null ? undefined : "".concat(max),
          "aria-valuetext": valueText == null ? undefined : "".concat(valueText),
          "aria-valuenow": value == null ? undefined : "".concat(value),
          role: "progressbar"
        };
        return useRandomIdProps(useMergedProps()(extraProps, p));
      }

      var useReferencedElement = A$1(function useReferencedElement() {
        function useReferencedProps(props) {
          return useReferencedIdProps("aria-controls")(props);
        }

        return {
          useReferencedProps
        };
      }, [useReferencedIdProps]);
      return {
        useProgressProps,
        useReferencedElement
      };
    }
    var ProgressAsChildContext = D$1(undefined);
    D$1(undefined);
    D$1(undefined);
    D$1(undefined);

    new Date().getDate() % 2;

    function Check() {
      return v$1("i", {
        class: "bi bi-check text-success"
      });
    }

    function Cross() {
      return v$1("i", {
        class: "bi bi-x text-warning"
      });
    }

    var ProgressCircular = forwardElementRef(function (_ref3, ref) {
      var _childrenPosition;

      var {
        spinnerTimeout,
        mode,
        colorFill,
        childrenPosition,
        children,
        color
      } = _ref3,
          p = _objectWithoutProperties(_ref3, _excluded3$2);

      F(ProgressAsChildContext);
      var {
        useProgressProps,
        useReferencedElement
      } = useAriaProgressBar({
        value: null,
        valueText: undefined,
        max: undefined,
        tag: "div"
      }); //useLayoutEffect(() => { provideParentWithHook?.(useReferencedElement) }, [useReferencedElement, provideParentWithHook])

      var {
        useReferencedProps
      } = useReferencedElement();
      var showSpinner = useSpinnerDelay(mode === "pending", spinnerTimeout); //const [spinnerShowCount, setSpinnerShowCount] = useState(0);
      //useEffect(() => { setSpinnerShowCount(s => ++s) }, [showSpinner]);

      y(() => {
        setShownStatusLongEnough(false);
      }, [mode]);
      var [shownStatusLongEnough, setShownStatusLongEnough] = useState(false);
      useTimeout({
        callback: () => {
          if (mode == "failed" || mode == "succeeded") setShownStatusLongEnough(true);
        },
        timeout: 1000,
        triggerIndex: mode
      });
      var progressElement = v$1("div", _objectSpread2({}, useMergedProps()(useProgressProps({
        ref,
        className: clsx("circular-progress-container")
      }), p)), v$1(Swappable, null, v$1("div", {
        className: "circular-progress-swappable"
      }, v$1(Fade, {
        open: mode === "pending" && showSpinner
      }, v$1("div", {
        className: clsx("circular-progress", "circular-progress-".concat(color !== null && color !== void 0 ? color : "primary"), colorFill == "foreground" && "inverse-fill", colorFill === "foreground-only" && "no-fill")
      }, v$1("div", null, v$1("div", null)), v$1("div", null, v$1("div", null)), v$1("div", null, v$1("div", null)), v$1("div", null, v$1("div", null)), v$1("div", null, v$1("div", null)), v$1("div", null, v$1("div", null)), v$1("div", null, v$1("div", null)), v$1("div", null, v$1("div", null)))), v$1(Fade, {
        open: !shownStatusLongEnough && mode === "succeeded"
      }, v$1("div", null, v$1(Check, null))), v$1(Fade, {
        open: !shownStatusLongEnough && mode === "failed"
      }, v$1("div", null, v$1(Cross, null))))));
      (_childrenPosition = childrenPosition) !== null && _childrenPosition !== void 0 ? _childrenPosition : childrenPosition = "after";
      return v$1(d$1, null, childrenPosition == "before" && progressElement, children && v$1(children.type, useMergedProps()({
        children: childrenPosition === "child" ? progressElement : undefined,
        ref: children.ref
      }, useReferencedProps(children.props))), childrenPosition == "after" && progressElement);
    });

    var DefaultFillStyleContext = D$1("fill");
    var DefaultColorStyleContext = D$1("primary");
    var DefaultSizeContext = D$1("md");
    var DefaultDisabledContext = D$1(false);
    var ProvideDefaultButtonFill = g(function ProvideDefaultButtonFill({
      value,
      children
    }) {
      return v$1(DefaultFillStyleContext.Provider, {
        value: value
      }, children);
    });
    var ProvideDefaultButtonColor = g(function ProvideDefaultButtonColor({
      value,
      children
    }) {
      return v$1(DefaultColorStyleContext.Provider, {
        value: value
      }, children);
    });
    var ProvideDefaultButtonSize = g(function ProvideDefaultButtonSize({
      value,
      children
    }) {
      return v$1(DefaultSizeContext.Provider, {
        value: value
      }, children);
    });
    var ProvideDefaultButtonDisabled = g(function ProvideDefaultButtonDisabled({
      value,
      children
    }) {
      return v$1(DefaultDisabledContext.Provider, {
        value: value
      }, children);
    });
    function useButtonFillVariant(providedValue) {
      var defaultFill = F(DefaultFillStyleContext);
      return providedValue !== null && providedValue !== void 0 ? providedValue : defaultFill;
    }
    function useButtonColorVariant(providedValue) {
      var defaultColor = F(DefaultColorStyleContext);
      return providedValue !== null && providedValue !== void 0 ? providedValue : defaultColor;
    }
    function useButtonSize(providedValue) {
      var defaultSize = F(DefaultSizeContext);
      return providedValue !== null && providedValue !== void 0 ? providedValue : defaultSize;
    }
    function useButtonDisabled(providedValue) {
      var defaultDisabled = F(DefaultDisabledContext);
      return providedValue !== null && providedValue !== void 0 ? providedValue : defaultDisabled;
    }
    function useButtonStyles(p) {
      var {
        colorVariant,
        size,
        fillVariant,
        disabled
      } = p;
      colorVariant = useButtonColorVariant(colorVariant);
      size = useButtonSize(size);
      fillVariant = useButtonFillVariant(fillVariant);
      disabled = useButtonDisabled(disabled);

      var useButtonStylesProps = props => useMergedProps()({
        "aria-disabled": disabled ? "true" : undefined,
        className: clsx(disabled && "disabled", "btn", "btn-".concat(fillVariant == "outline" ? "outline-" : "").concat(colorVariant), "btn-".concat(size), disabled && "disabled")
      }, props);

      return {
        colorVariant,
        size,
        fillVariant,
        disabled,
        useButtonStylesProps
      };
    }

    var _excluded$a = ["colorVariant", "size", "fillVariant", "disabled"],
        _excluded2$7 = ["colorVariant", "size", "fillVariant", "disabled", "debounce", "showAsyncSuccess", "onClick"];

    function ButtonR(p, ref) {
      var _p$tag;

      if (((_p$tag = p.tag) === null || _p$tag === void 0 ? void 0 : _p$tag.toLowerCase()) === "a") return v$1(AnchorButton, _objectSpread2({
        ref: ref
      }, p));else return v$1(ButtonButton, _objectSpread2({
        ref: ref
      }, p));
    }

    var AnchorButton = forwardElementRef(function AnchorButton(p, ref) {
      var {
        colorVariant,
        size,
        fillVariant,
        disabled
      } = p,
          props = _objectWithoutProperties(p, _excluded$a);

      var {
        useAriaButtonProps
      } = useAriaButton({
        tag: "a"
      });
      var buttonStyleInfo = useButtonStyles({
        colorVariant,
        size,
        fillVariant,
        disabled
      });
      disabled = buttonStyleInfo.disabled;
      colorVariant = buttonStyleInfo.colorVariant;
      size = buttonStyleInfo.size;
      fillVariant = buttonStyleInfo.fillVariant;
      var useButtonStylesProps = buttonStyleInfo.useButtonStylesProps;
      return v$1("a", _objectSpread2({}, useAriaButtonProps(useButtonStylesProps(_objectSpread2(_objectSpread2({}, props), {}, {
        ref
      })))));
    });
    var ButtonButton = forwardElementRef(function ButtonButton(p, ref) {
      var {
        colorVariant,
        size,
        fillVariant,
        disabled,
        debounce,
        showAsyncSuccess,
        onClick: onClickAsync
      } = p,
          props = _objectWithoutProperties(p, _excluded2$7);

      var {
        getSyncHandler,
        pending,
        settleCount,
        hasError
      } = useAsyncHandler()({
        debounce,
        capture: A$1(() => {
          return undefined;
        }, [])
      });
      disabled || (disabled = pending);
      var {
        useAriaButtonProps
      } = useAriaButton({
        tag: "button"
      });
      var buttonStyleInfo = useButtonStyles({
        colorVariant,
        size,
        fillVariant,
        disabled
      });
      disabled = buttonStyleInfo.disabled;
      colorVariant = buttonStyleInfo.colorVariant;
      size = buttonStyleInfo.size;
      fillVariant = buttonStyleInfo.fillVariant;
      var useButtonStylesProps = buttonStyleInfo.useButtonStylesProps;
      var onClick = getSyncHandler(pending ? null : onClickAsync);
      return v$1(ProgressCircular, {
        mode: hasError ? "failed" : pending ? "pending" : settleCount && showAsyncSuccess ? "succeeded" : null,
        childrenPosition: "child",
        color: colorVariant === "link" ? "primary" : colorVariant,
        colorFill: fillVariant == "fill" ? "foreground" : "background"
      }, v$1("button", _objectSpread2({}, useAriaButtonProps(useButtonStylesProps(_objectSpread2(_objectSpread2({}, props), {}, {
        onClick,
        ref
      }))))));
    });
    var Button = forwardElementRef(ButtonR);

    var _excluded$9 = ["colorVariant", "size", "disabled", "pressed", "debounce", "onClick"];
    var ToggleButton = forwardElementRef(function ToggleButton(p, ref) {
      var {
        colorVariant,
        size,
        disabled,
        pressed,
        debounce,
        onClick: onClickAsync
      } = p,
          props = _objectWithoutProperties(p, _excluded$9);

      var fillVariant = pressed ? "fill" : "outline";
      var getPressed = useStableGetter(pressed);
      var {
        getSyncHandler,
        pending
      } = useAsyncHandler()({
        debounce,
        capture: A$1(() => {
          return !getPressed();
        }, [])
      });
      disabled || (disabled = pending);
      var {
        useAriaButtonProps
      } = useAriaButton({
        tag: "button",
        pressed
      });
      var buttonStyleInfo = useButtonStyles({
        colorVariant,
        size,
        fillVariant,
        disabled
      });
      disabled = buttonStyleInfo.disabled;
      colorVariant = buttonStyleInfo.colorVariant;
      size = buttonStyleInfo.size;
      var useButtonStylesProps = buttonStyleInfo.useButtonStylesProps;
      var onClick = getSyncHandler(pending ? null : onClickAsync);
      return v$1("button", _objectSpread2({}, useAriaButtonProps(useButtonStylesProps(_objectSpread2(_objectSpread2({}, props), {}, {
        onClick,
        ref
      })))));
    });

    var _excluded$8 = ["colorVariant", "fillVariant", "size", "disabled", "selectedIndex"],
        _excluded2$6 = ["index"];
    var UseButtonGroupChild = D$1(null);
    var ButtonGroup = forwardElementRef(function ButtonGroup(p, ref) {
      var {
        lastFocusedInner,
        useHasFocusProps
      } = useHasFocus();
      var {
        indicesByElement,
        managedChildren,
        useListNavigationChild,
        navigateToIndex,
        childCount
      } = useListNavigation({
        focusOnChange: lastFocusedInner
      }); // Styling props

      var {
        colorVariant,
        fillVariant,
        size,
        disabled,
        selectedIndex
      } = p,
          p3 = _objectWithoutProperties(p, _excluded$8);

      y(() => {
        if (selectedIndex != null) navigateToIndex(selectedIndex);
      }, [selectedIndex]); // Build new DOM props to merge based off the styling props

      colorVariant = useButtonColorVariant(colorVariant);
      size = useButtonSize(size);
      fillVariant = useButtonFillVariant(fillVariant);
      disabled = useButtonDisabled(disabled);
      var newDomProps = {
        ref,
        role: "group",
        disabled,
        className: clsx("btn-group")
      }; // Remaining props, forwarded onto the DOM

      var domProps = useHasFocusProps(useMergedProps()(newDomProps, p3));
      domProps["data-child-count"] = "".concat(childCount);
      return v$1(UseButtonGroupChild.Provider, {
        value: useListNavigationChild
      }, v$1(ProvideDefaultButtonColor, {
        value: colorVariant
      }, v$1(ProvideDefaultButtonFill, {
        value: fillVariant
      }, v$1(ProvideDefaultButtonSize, {
        value: size
      }, v$1(ProvideDefaultButtonDisabled, {
        value: disabled
      }, v$1("div", _objectSpread2({}, domProps)))))));
    });

    function ButtonGroupChild1(_ref, ref) {
      var {
        index
      } = _ref,
          buttonProps = _objectWithoutProperties(_ref, _excluded2$6);

      // This is more-or-less forced to be a separate component because of the index prop.
      // It would be really nice to find a way to make that implicit based on DOM location,
      // specifically for small things like button groups...
      var useButtonGroupChild = F(UseButtonGroupChild);
      var {
        tabbable,
        useListNavigationChildProps,
        useListNavigationSiblingProps
      } = useButtonGroupChild({
        index,
        text: null
      }); // TODO: It's kinda fragile here how the sync onClick of listNavigation 
      // and the async onClick of button are mixing.

      var p = useListNavigationChildProps(_objectSpread2({
        ref
      }, buttonProps));
      if (p.pressed != null) return v$1(ToggleButton, _objectSpread2({}, p));else return v$1(Button, _objectSpread2({}, p));
    }

    var ButtonGroupChild = forwardElementRef(ButtonGroupChild1);

    var baseId = generateRandomId("render-portal-container-");
    function BodyPortal({
      children
    }) {
      var id = s(null);
      var [portalElement, setPortalElement] = l(null);
      y(() => {
        if (id.current == null) {
          id.current = generateRandomId();
        }

        var container = document.getElementById(baseId);

        if (!container) {
          container = document.createElement("div");
          container.id = baseId;
          container.className = "body-portal-container";
          document.body.appendChild(container);
        }

        var element = document.getElementById(id.current);

        if (!element) {
          element = document.createElement("div");
          element.className = "body-portal";
          element.id = id.current;
          container.appendChild(element);
        }

        setPortalElement(element);
        return () => document.removeChild(element);
      }, []);
      if (portalElement) return W(children, portalElement);else return null;
    }

    var _excluded$7 = ["onClose", "open", "descriptive", "title", "footer", "Transition", "children"];
    var Dialog = forwardElementRef(function Dialog(_ref, ref) {
      var {
        onClose,
        open,
        descriptive,
        title,
        footer,
        Transition,
        children
      } = _ref,
          rest = _objectWithoutProperties(_ref, _excluded$7);

      var {
        useDialogBackdrop,
        useDialogBody,
        useDialogProps,
        useDialogTitle
      } = useAriaDialog({
        open,
        onClose
      });
      var {
        useModalBackdropProps
      } = useDialogBackdrop();
      var {
        useModalBodyProps
      } = useDialogBody({
        descriptive
      });
      var {
        useModalTitleProps
      } = useDialogTitle();
      return v$1(BodyPortal, null, v$1("div", {
        class: "modal-portal-container"
      }, v$1(Fade, {
        open: open
      }, v$1("div", _objectSpread2({}, useModalBackdropProps({
        class: "modal-backdrop  backdrop-filter-transition",
        onPointerUp: () => onClose("backdrop")
      })))), v$1(Transition, _objectSpread2({}, _objectSpread2({
        ref,
        open
      }, rest)), v$1("div", _objectSpread2({}, useDialogProps({
        class: "modal-dialog modal-dialog-scrollable"
      })), v$1("div", {
        class: "modal-content "
      }, title != null && v$1("div", _objectSpread2({}, useModalTitleProps({
        class: "modal-header"
      })), v$1("h1", {
        class: "modal-title"
      }, title)), v$1("div", _objectSpread2({}, useModalBodyProps({
        class: "modal-body"
      })), children), footer != null && v$1("div", {
        class: "modal-footer"
      }, footer))))));
    });

    var _excluded$6 = ["onSelect", "selectedIndex", "selectionMode", "collator", "keyNavigation", "noTypeahead", "noWrap", "typeaheadTimeout", "tag", "select"],
        _excluded2$5 = ["index"];
    var UseListboxSingleItemContext = D$1(null);
    function ListSingle(props, ref) {
      var {
        onSelect: onSelectAsync,
        selectedIndex,
        selectionMode,
        collator,
        keyNavigation,
        noTypeahead,
        noWrap,
        typeaheadTimeout,
        tag,
        select
      } = props,
          domProps = _objectWithoutProperties(props, _excluded$6);

      var {
        getSyncHandler
      } = useAsyncHandler()({
        capture: e => e[EventDetail].selectedIndex
      });
      var onSelect = getSyncHandler(onSelectAsync);
      var {
        useListboxSingleItem,
        useListboxSingleLabel,
        useListboxSingleProps
      } = useAriaListboxSingle({
        onSelect,
        selectedIndex,
        selectionMode,
        typeaheadTimeout,
        noWrap,
        noTypeahead,
        keyNavigation,
        collator
      });
      return v$1(UseListboxSingleItemContext.Provider, {
        value: useListboxSingleItem
      }, v$1(tag, useMergedProps()({
        class: "list-group",
        ref
      }, useListboxSingleProps(domProps))));
    }
    function ListItemSingle(props, ref) {
      var useListItemSingle = F(UseListboxSingleItemContext);

      var _props$ref = _objectSpread2(_objectSpread2({}, props), {}, {
        ref
      }),
          {
        index
      } = _props$ref,
          domProps = _objectWithoutProperties(_props$ref, _excluded2$5);

      var [text, setText] = useState(null);
      var {
        useRefElementProps,
        element
      } = useRefElement();
      h(() => {
        if (element) setText(element.innerText);
      }, [element]);
      var {
        getSelected,
        tabbable,
        selected,
        useListboxSingleItemProps
      } = useListItemSingle({
        index,
        text,
        tag: "li"
      });
      return v$1("li", _objectSpread2({}, usePseudoActive(useMergedProps()({
        class: clsx("list-group-item", "list-group-item-action", selected && "active")
      }, useListboxSingleItemProps(useRefElementProps(domProps))))));
    }

    var _excluded$5 = ["onSelect", "orientation", "selectedIndex", "selectionMode", "tag", "children", "visualVariant"],
        _excluded2$4 = ["index", "children"],
        _excluded3$1 = ["index", "children", "Transition"];
    var UseTabContext = D$1(null);
    var UseTabPanelContext = D$1(null);
    function Tabs(_ref) {
      var _orientation;

      var {
        onSelect: onSelectAsync,
        orientation,
        selectedIndex,
        selectionMode,
        tag,
        children,
        visualVariant
      } = _ref,
          props = _objectWithoutProperties(_ref, _excluded$5);

      var capture = e => {
        return e[EventDetail].selectedIndex;
      };

      (_orientation = orientation) !== null && _orientation !== void 0 ? _orientation : orientation = "inline";
      var {
        getSyncHandler
      } = useAsyncHandler()({
        capture: capture
      });
      var onSelect = getSyncHandler(onSelectAsync);
      var {
        useTab,
        useTabPanel,
        useTabsLabel,
        useTabsList
      } = useAriaTabs({
        onSelect,
        selectedIndex,
        selectionMode,
        orientation
      });
      var {
        useTabListProps
      } = useTabsList();
      return v$1("div", {
        class: clsx("tabs-container", "tabs-orientation-".concat(orientation))
      }, v$1(UseTabContext.Provider, {
        value: useTab
      }, B(children[0], useTabListProps(useMergedProps()({
        className: clsx("nav", visualVariant == "pills" ? "nav-pills" : "nav-tabs")
      }, _objectSpread2({}, props))), children[0].props.children)), v$1(UseTabPanelContext.Provider, {
        value: useTabPanel
      }, v$1(Swappable, null, v$1("div", {
        class: "tab-content"
      }, children.slice(1)))));
    }
    function Tab(_ref2) {
      var {
        index,
        children
      } = _ref2,
          props = _objectWithoutProperties(_ref2, _excluded2$4);

      var useTabContext = F(UseTabContext);
      var {
        useTabProps,
        selected
      } = useTabContext({
        index,
        text: null,
        tag: "button"
      });
      return v$1("li", {
        className: "nav-item",
        role: "presentation"
      }, v$1("button", _objectSpread2({}, useTabProps(useMergedProps()({
        class: clsx("nav-link", selected && "active")
      }, props))), children));
    }
    function TabPanel(_ref3) {
      var {
        index,
        children,
        Transition
      } = _ref3,
          rest = _objectWithoutProperties(_ref3, _excluded3$1);

      var useTabPanel = F(UseTabPanelContext);
      var {
        useTabPanelProps,
        selected
      } = useTabPanel({
        index
      });
      return v$1(Transition, useTabPanelProps(_objectSpread2({
        class: "",
        open: selected,
        children
      }, rest)));
    }

    var DemoUseInterval = function () {
        var _a = l(1000), interval = _a[0], setInterval = _a[1];
        var _b = l(0), fireCount = _b[0], setFireCount = _b[1];
        useInterval({ interval: interval, callback: function () { return setFireCount(function (i) { return ++i; }); } });
        return (v$1("div", { class: "demo" },
            v$1("label", null,
                "Interval duration: ",
                v$1("input", { type: "number", value: interval, onInput: function (e) { return setInterval(e.currentTarget.valueAsNumber); } })),
            v$1("div", null,
                "The callback has been called ",
                fireCount,
                " time",
                fireCount === 1 ? "" : "s",
                ".")));
    };

    var DemoUseTimeout = function () {
        var _a = l(1000), timeout = _a[0], setTimeout = _a[1];
        var _b = l(""), triggerIndex = _b[0], setTriggerIndex = _b[1];
        var _c = l(0), fireCount = _c[0], setFireCount = _c[1];
        useTimeout({ timeout: timeout, triggerIndex: triggerIndex, callback: function () { return setFireCount(function (i) { return ++i; }); } });
        return (v$1("div", { class: "demo" },
            v$1("label", null,
                "Timeout duration: ",
                v$1("input", { type: "number", value: timeout, onInput: function (e) { return setTimeout(e.currentTarget.valueAsNumber); } })),
            v$1("label", null,
                "Refresh key: ",
                v$1("input", { type: "text", value: triggerIndex, onInput: function (e) { return setTriggerIndex(e.currentTarget.value); } })),
            v$1("div", null,
                "The callback has been called ",
                fireCount,
                " time",
                fireCount === 1 ? "" : "s",
                ".")));
    };

    var _globalThis$process, _globalThis$process2, _globalThis$process2$, _globalThis$process$e, _globalThis$process$e2;

    (_globalThis$process = globalThis.process) !== null && _globalThis$process !== void 0 ? _globalThis$process : globalThis.process = {};
    (_globalThis$process2$ = (_globalThis$process2 = globalThis.process).env) !== null && _globalThis$process2$ !== void 0 ? _globalThis$process2$ : _globalThis$process2.env = {};
    (_globalThis$process$e2 = (_globalThis$process$e = globalThis.process.env).NODE_ENV) !== null && _globalThis$process$e2 !== void 0 ? _globalThis$process$e2 : _globalThis$process$e.NODE_ENV = "development";

    var top = 'top';
    var bottom = 'bottom';
    var right = 'right';
    var left = 'left';
    var auto = 'auto';
    var basePlacements = [top, bottom, right, left];
    var start = 'start';
    var end = 'end';
    var clippingParents = 'clippingParents';
    var viewport = 'viewport';
    var popper = 'popper';
    var reference = 'reference';
    var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
      return acc.concat([placement + "-" + start, placement + "-" + end]);
    }, []);
    var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
      return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
    }, []); // modifiers that need to read the DOM

    var beforeRead = 'beforeRead';
    var read = 'read';
    var afterRead = 'afterRead'; // pure-logic modifiers

    var beforeMain = 'beforeMain';
    var main = 'main';
    var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

    var beforeWrite = 'beforeWrite';
    var write = 'write';
    var afterWrite = 'afterWrite';
    var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

    function getNodeName(element) {
      return element ? (element.nodeName || '').toLowerCase() : null;
    }

    function getWindow(node) {
      if (node == null) {
        return window;
      }

      if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
      }

      return node;
    }

    function isElement(node) {
      var OwnElement = getWindow(node).Element;
      return node instanceof OwnElement || node instanceof Element;
    }

    function isHTMLElement(node) {
      var OwnElement = getWindow(node).HTMLElement;
      return node instanceof OwnElement || node instanceof HTMLElement;
    }

    function isShadowRoot(node) {
      // IE 11 has no ShadowRoot
      if (typeof ShadowRoot === 'undefined') {
        return false;
      }

      var OwnElement = getWindow(node).ShadowRoot;
      return node instanceof OwnElement || node instanceof ShadowRoot;
    }

    // and applies them to the HTMLElements such as popper and arrow

    function applyStyles(_ref) {
      var state = _ref.state;
      Object.keys(state.elements).forEach(function (name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        } // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]


        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (name) {
          var value = attributes[name];

          if (value === false) {
            element.removeAttribute(name);
          } else {
            element.setAttribute(name, value === true ? '' : value);
          }
        });
      });
    }

    function effect$2(_ref2) {
      var state = _ref2.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: '0',
          top: '0',
          margin: '0'
        },
        arrow: {
          position: 'absolute'
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;

      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }

      return function () {
        Object.keys(state.elements).forEach(function (name) {
          var element = state.elements[name];
          var attributes = state.attributes[name] || {};
          var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

          var style = styleProperties.reduce(function (style, property) {
            style[property] = '';
            return style;
          }, {}); // arrow is optional + virtual elements

          if (!isHTMLElement(element) || !getNodeName(element)) {
            return;
          }

          Object.assign(element.style, style);
          Object.keys(attributes).forEach(function (attribute) {
            element.removeAttribute(attribute);
          });
        });
      };
    } // eslint-disable-next-line import/no-unused-modules


    var applyStyles$1 = {
      name: 'applyStyles',
      enabled: true,
      phase: 'write',
      fn: applyStyles,
      effect: effect$2,
      requires: ['computeStyles']
    };

    function getBasePlacement(placement) {
      return placement.split('-')[0];
    }

    var round$1 = Math.round;
    function getBoundingClientRect(element, includeScale) {
      if (includeScale === void 0) {
        includeScale = false;
      }

      var rect = element.getBoundingClientRect();
      var scaleX = 1;
      var scaleY = 1;

      if (isHTMLElement(element) && includeScale) {
        var offsetHeight = element.offsetHeight;
        var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale
        // Fallback to 1 in case both values are `0`

        if (offsetWidth > 0) {
          scaleX = rect.width / offsetWidth || 1;
        }

        if (offsetHeight > 0) {
          scaleY = rect.height / offsetHeight || 1;
        }
      }

      return {
        width: round$1(rect.width / scaleX),
        height: round$1(rect.height / scaleY),
        top: round$1(rect.top / scaleY),
        right: round$1(rect.right / scaleX),
        bottom: round$1(rect.bottom / scaleY),
        left: round$1(rect.left / scaleX),
        x: round$1(rect.left / scaleX),
        y: round$1(rect.top / scaleY)
      };
    }

    // means it doesn't take into account transforms.

    function getLayoutRect(element) {
      var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
      // Fixes https://github.com/popperjs/popper-core/issues/1223

      var width = element.offsetWidth;
      var height = element.offsetHeight;

      if (Math.abs(clientRect.width - width) <= 1) {
        width = clientRect.width;
      }

      if (Math.abs(clientRect.height - height) <= 1) {
        height = clientRect.height;
      }

      return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
      };
    }

    function contains(parent, child) {
      var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

      if (parent.contains(child)) {
        return true;
      } // then fallback to custom implementation with Shadow DOM support
      else if (rootNode && isShadowRoot(rootNode)) {
        var next = child;

        do {
          if (next && parent.isSameNode(next)) {
            return true;
          } // $FlowFixMe[prop-missing]: need a better way to handle this...


          next = next.parentNode || next.host;
        } while (next);
      } // Give up, the result is false


      return false;
    }

    function getComputedStyle$1(element) {
      return getWindow(element).getComputedStyle(element);
    }

    function isTableElement(element) {
      return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
    }

    function getDocumentElement(element) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
      element.document) || window.document).documentElement;
    }

    function getParentNode(element) {
      if (getNodeName(element) === 'html') {
        return element;
      }

      return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
        // $FlowFixMe[incompatible-return]
        // $FlowFixMe[prop-missing]
        element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || ( // DOM Element detected
        isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
        // $FlowFixMe[incompatible-call]: HTMLElement is a Node
        getDocumentElement(element) // fallback

      );
    }

    function getTrueOffsetParent(element) {
      if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle$1(element).position === 'fixed') {
        return null;
      }

      return element.offsetParent;
    } // `.offsetParent` reports `null` for fixed elements, while absolute elements
    // return the containing block


    function getContainingBlock(element) {
      var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
      var isIE = navigator.userAgent.indexOf('Trident') !== -1;

      if (isIE && isHTMLElement(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = getComputedStyle$1(element);

        if (elementCss.position === 'fixed') {
          return null;
        }
      }

      var currentNode = getParentNode(element);

      while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
        var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }

      return null;
    } // Gets the closest ancestor positioned element. Handles some edge cases,
    // such as table ancestors and cross browser bugs.


    function getOffsetParent(element) {
      var window = getWindow(element);
      var offsetParent = getTrueOffsetParent(element);

      while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
        offsetParent = getTrueOffsetParent(offsetParent);
      }

      if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
        return window;
      }

      return offsetParent || getContainingBlock(element) || window;
    }

    function getMainAxisFromPlacement(placement) {
      return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
    }

    var max = Math.max;
    var min = Math.min;
    var round = Math.round;

    function within(min$1, value, max$1) {
      return max(min$1, min(value, max$1));
    }

    function getFreshSideObject() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }

    function mergePaddingObject(paddingObject) {
      return Object.assign({}, getFreshSideObject(), paddingObject);
    }

    function expandToHashMap(value, keys) {
      return keys.reduce(function (hashMap, key) {
        hashMap[key] = value;
        return hashMap;
      }, {});
    }

    var toPaddingObject = function toPaddingObject(padding, state) {
      padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
        placement: state.placement
      })) : padding;
      return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    };

    function arrow(_ref) {
      var _state$modifiersData$;

      var state = _ref.state,
          name = _ref.name,
          options = _ref.options;
      var arrowElement = state.elements.arrow;
      var popperOffsets = state.modifiersData.popperOffsets;
      var basePlacement = getBasePlacement(state.placement);
      var axis = getMainAxisFromPlacement(basePlacement);
      var isVertical = [left, right].indexOf(basePlacement) >= 0;
      var len = isVertical ? 'height' : 'width';

      if (!arrowElement || !popperOffsets) {
        return;
      }

      var paddingObject = toPaddingObject(options.padding, state);
      var arrowRect = getLayoutRect(arrowElement);
      var minProp = axis === 'y' ? top : left;
      var maxProp = axis === 'y' ? bottom : right;
      var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
      var startDiff = popperOffsets[axis] - state.rects.reference[axis];
      var arrowOffsetParent = getOffsetParent(arrowElement);
      var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
      var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
      // outside of the popper bounds

      var min = paddingObject[minProp];
      var max = clientSize - arrowRect[len] - paddingObject[maxProp];
      var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
      var offset = within(min, center, max); // Prevents breaking syntax highlighting...

      var axisProp = axis;
      state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
    }

    function effect$1(_ref2) {
      var state = _ref2.state,
          options = _ref2.options;
      var _options$element = options.element,
          arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

      if (arrowElement == null) {
        return;
      } // CSS selector


      if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);

        if (!arrowElement) {
          return;
        }
      }

      if (process.env.NODE_ENV !== "production") {
        if (!isHTMLElement(arrowElement)) {
          console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
        }
      }

      if (!contains(state.elements.popper, arrowElement)) {
        if (process.env.NODE_ENV !== "production") {
          console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
        }

        return;
      }

      state.elements.arrow = arrowElement;
    } // eslint-disable-next-line import/no-unused-modules


    var arrow$1 = {
      name: 'arrow',
      enabled: true,
      phase: 'main',
      fn: arrow,
      effect: effect$1,
      requires: ['popperOffsets'],
      requiresIfExists: ['preventOverflow']
    };

    function getVariation(placement) {
      return placement.split('-')[1];
    }

    var unsetSides = {
      top: 'auto',
      right: 'auto',
      bottom: 'auto',
      left: 'auto'
    }; // Round the offsets to the nearest suitable subpixel based on the DPR.
    // Zooming can change the DPR, but it seems to report a value that will
    // cleanly divide the values into the appropriate subpixels.

    function roundOffsetsByDPR(_ref) {
      var x = _ref.x,
          y = _ref.y;
      var win = window;
      var dpr = win.devicePixelRatio || 1;
      return {
        x: round(round(x * dpr) / dpr) || 0,
        y: round(round(y * dpr) / dpr) || 0
      };
    }

    function mapToStyles(_ref2) {
      var _Object$assign2;

      var popper = _ref2.popper,
          popperRect = _ref2.popperRect,
          placement = _ref2.placement,
          variation = _ref2.variation,
          offsets = _ref2.offsets,
          position = _ref2.position,
          gpuAcceleration = _ref2.gpuAcceleration,
          adaptive = _ref2.adaptive,
          roundOffsets = _ref2.roundOffsets;

      var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,
          _ref3$x = _ref3.x,
          x = _ref3$x === void 0 ? 0 : _ref3$x,
          _ref3$y = _ref3.y,
          y = _ref3$y === void 0 ? 0 : _ref3$y;

      var hasX = offsets.hasOwnProperty('x');
      var hasY = offsets.hasOwnProperty('y');
      var sideX = left;
      var sideY = top;
      var win = window;

      if (adaptive) {
        var offsetParent = getOffsetParent(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';

        if (offsetParent === getWindow(popper)) {
          offsetParent = getDocumentElement(popper);

          if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
            heightProp = 'scrollHeight';
            widthProp = 'scrollWidth';
          }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


        offsetParent = offsetParent;

        if (placement === top || (placement === left || placement === right) && variation === end) {
          sideY = bottom; // $FlowFixMe[prop-missing]

          y -= offsetParent[heightProp] - popperRect.height;
          y *= gpuAcceleration ? 1 : -1;
        }

        if (placement === left || (placement === top || placement === bottom) && variation === end) {
          sideX = right; // $FlowFixMe[prop-missing]

          x -= offsetParent[widthProp] - popperRect.width;
          x *= gpuAcceleration ? 1 : -1;
        }
      }

      var commonStyles = Object.assign({
        position: position
      }, adaptive && unsetSides);

      if (gpuAcceleration) {
        var _Object$assign;

        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
      }

      return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
    }

    function computeStyles(_ref4) {
      var state = _ref4.state,
          options = _ref4.options;
      var _options$gpuAccelerat = options.gpuAcceleration,
          gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
          _options$adaptive = options.adaptive,
          adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
          _options$roundOffsets = options.roundOffsets,
          roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

      if (process.env.NODE_ENV !== "production") {
        var transitionProperty = getComputedStyle$1(state.elements.popper).transitionProperty || '';

        if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
          return transitionProperty.indexOf(property) >= 0;
        })) {
          console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
        }
      }

      var commonStyles = {
        placement: getBasePlacement(state.placement),
        variation: getVariation(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration
      };

      if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.popperOffsets,
          position: state.options.strategy,
          adaptive: adaptive,
          roundOffsets: roundOffsets
        })));
      }

      if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.arrow,
          position: 'absolute',
          adaptive: false,
          roundOffsets: roundOffsets
        })));
      }

      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-placement': state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var computeStyles$1 = {
      name: 'computeStyles',
      enabled: true,
      phase: 'beforeWrite',
      fn: computeStyles,
      data: {}
    };

    var passive = {
      passive: true
    };

    function effect(_ref) {
      var state = _ref.state,
          instance = _ref.instance,
          options = _ref.options;
      var _options$scroll = options.scroll,
          scroll = _options$scroll === void 0 ? true : _options$scroll,
          _options$resize = options.resize,
          resize = _options$resize === void 0 ? true : _options$resize;
      var window = getWindow(state.elements.popper);
      var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.addEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.addEventListener('resize', instance.update, passive);
      }

      return function () {
        if (scroll) {
          scrollParents.forEach(function (scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
          });
        }

        if (resize) {
          window.removeEventListener('resize', instance.update, passive);
        }
      };
    } // eslint-disable-next-line import/no-unused-modules


    var eventListeners = {
      name: 'eventListeners',
      enabled: true,
      phase: 'write',
      fn: function fn() {},
      effect: effect,
      data: {}
    };

    var hash$1 = {
      left: 'right',
      right: 'left',
      bottom: 'top',
      top: 'bottom'
    };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, function (matched) {
        return hash$1[matched];
      });
    }

    var hash = {
      start: 'end',
      end: 'start'
    };
    function getOppositeVariationPlacement(placement) {
      return placement.replace(/start|end/g, function (matched) {
        return hash[matched];
      });
    }

    function getWindowScroll(node) {
      var win = getWindow(node);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      };
    }

    function getWindowScrollBarX(element) {
      // If <html> has a CSS width greater than the viewport, then this will be
      // incorrect for RTL.
      // Popper 1 is broken in this case and never had a bug report so let's assume
      // it's not an issue. I don't think anyone ever specifies width on <html>
      // anyway.
      // Browsers where the left scrollbar doesn't cause an issue report `0` for
      // this (e.g. Edge 2019, IE11, Safari)
      return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
    }

    function getViewportRect(element) {
      var win = getWindow(element);
      var html = getDocumentElement(element);
      var visualViewport = win.visualViewport;
      var width = html.clientWidth;
      var height = html.clientHeight;
      var x = 0;
      var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
      // can be obscured underneath it.
      // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
      // if it isn't open, so if this isn't available, the popper will be detected
      // to overflow the bottom of the screen too early.

      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
        // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
        // errors due to floating point numbers, so we need to check precision.
        // Safari returns a number <= 0, usually < -1 when pinch-zoomed
        // Feature detection fails in mobile emulation mode in Chrome.
        // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
        // 0.001
        // Fallback here: "Not Safari" userAgent

        if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
          x = visualViewport.offsetLeft;
          y = visualViewport.offsetTop;
        }
      }

      return {
        width: width,
        height: height,
        x: x + getWindowScrollBarX(element),
        y: y
      };
    }

    // of the `<html>` and `<body>` rect bounds if horizontally scrollable

    function getDocumentRect(element) {
      var _element$ownerDocumen;

      var html = getDocumentElement(element);
      var winScroll = getWindowScroll(element);
      var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
      var y = -winScroll.scrollTop;

      if (getComputedStyle$1(body || html).direction === 'rtl') {
        x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
      }

      return {
        width: width,
        height: height,
        x: x,
        y: y
      };
    }

    function isScrollParent(element) {
      // Firefox wants us to check `-x` and `-y` variations as well
      var _getComputedStyle = getComputedStyle$1(element),
          overflow = _getComputedStyle.overflow,
          overflowX = _getComputedStyle.overflowX,
          overflowY = _getComputedStyle.overflowY;

      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }

    function getScrollParent(node) {
      if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
        // $FlowFixMe[incompatible-return]: assume body is always available
        return node.ownerDocument.body;
      }

      if (isHTMLElement(node) && isScrollParent(node)) {
        return node;
      }

      return getScrollParent(getParentNode(node));
    }

    /*
    given a DOM element, return the list of all scroll parents, up the list of ancesors
    until we get to the top window object. This list is what we attach scroll listeners
    to, because if any of these parent elements scroll, we'll need to re-calculate the
    reference element's position.
    */

    function listScrollParents(element, list) {
      var _element$ownerDocumen;

      if (list === void 0) {
        list = [];
      }

      var scrollParent = getScrollParent(element);
      var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
      var win = getWindow(scrollParent);
      var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list.concat(target);
      return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)));
    }

    function rectToClientRect(rect) {
      return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      });
    }

    function getInnerBoundingClientRect(element) {
      var rect = getBoundingClientRect(element);
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
    }

    function getClientRectFromMixedType(element, clippingParent) {
      return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
    } // A "clipping parent" is an overflowable container with the characteristic of
    // clipping (or hiding) overflowing elements with a position different from
    // `initial`


    function getClippingParents(element) {
      var clippingParents = listScrollParents(getParentNode(element));
      var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
      var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

      if (!isElement(clipperElement)) {
        return [];
      } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


      return clippingParents.filter(function (clippingParent) {
        return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
      });
    } // Gets the maximum area that the element is visible in due to any number of
    // clipping parents


    function getClippingRect(element, boundary, rootBoundary) {
      var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
      var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
      var firstClippingParent = clippingParents[0];
      var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent);
        accRect.top = max(rect.top, accRect.top);
        accRect.right = min(rect.right, accRect.right);
        accRect.bottom = min(rect.bottom, accRect.bottom);
        accRect.left = max(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromMixedType(element, firstClippingParent));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
    }

    function computeOffsets(_ref) {
      var reference = _ref.reference,
          element = _ref.element,
          placement = _ref.placement;
      var basePlacement = placement ? getBasePlacement(placement) : null;
      var variation = placement ? getVariation(placement) : null;
      var commonX = reference.x + reference.width / 2 - element.width / 2;
      var commonY = reference.y + reference.height / 2 - element.height / 2;
      var offsets;

      switch (basePlacement) {
        case top:
          offsets = {
            x: commonX,
            y: reference.y - element.height
          };
          break;

        case bottom:
          offsets = {
            x: commonX,
            y: reference.y + reference.height
          };
          break;

        case right:
          offsets = {
            x: reference.x + reference.width,
            y: commonY
          };
          break;

        case left:
          offsets = {
            x: reference.x - element.width,
            y: commonY
          };
          break;

        default:
          offsets = {
            x: reference.x,
            y: reference.y
          };
      }

      var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

      if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';

        switch (variation) {
          case start:
            offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
            break;

          case end:
            offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
            break;
        }
      }

      return offsets;
    }

    function detectOverflow(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          _options$placement = _options.placement,
          placement = _options$placement === void 0 ? state.placement : _options$placement,
          _options$boundary = _options.boundary,
          boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
          _options$rootBoundary = _options.rootBoundary,
          rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
          _options$elementConte = _options.elementContext,
          elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
          _options$altBoundary = _options.altBoundary,
          altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
          _options$padding = _options.padding,
          padding = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
      var altContext = elementContext === popper ? reference : popper;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
      var referenceClientRect = getBoundingClientRect(state.elements.reference);
      var popperOffsets = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
      });
      var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
      var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
      // 0 or negative = within the clipping rect

      var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

      if (elementContext === popper && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function (key) {
          var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
          var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
          overflowOffsets[key] += offset[axis] * multiply;
        });
      }

      return overflowOffsets;
    }

    function computeAutoPlacement(state, options) {
      if (options === void 0) {
        options = {};
      }

      var _options = options,
          placement = _options.placement,
          boundary = _options.boundary,
          rootBoundary = _options.rootBoundary,
          padding = _options.padding,
          flipVariations = _options.flipVariations,
          _options$allowedAutoP = _options.allowedAutoPlacements,
          allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
      var variation = getVariation(placement);
      var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
        return getVariation(placement) === variation;
      }) : basePlacements;
      var allowedPlacements = placements$1.filter(function (placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
      });

      if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;

        if (process.env.NODE_ENV !== "production") {
          console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
        }
      } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


      var overflows = allowedPlacements.reduce(function (acc, placement) {
        acc[placement] = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding
        })[getBasePlacement(placement)];
        return acc;
      }, {});
      return Object.keys(overflows).sort(function (a, b) {
        return overflows[a] - overflows[b];
      });
    }

    function getExpandedFallbackPlacements(placement) {
      if (getBasePlacement(placement) === auto) {
        return [];
      }

      var oppositePlacement = getOppositePlacement(placement);
      return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
    }

    function flip(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;

      if (state.modifiersData[name]._skip) {
        return;
      }

      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
          specifiedFallbackPlacements = options.fallbackPlacements,
          padding = options.padding,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          _options$flipVariatio = options.flipVariations,
          flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
          allowedAutoPlacements = options.allowedAutoPlacements;
      var preferredPlacement = state.options.placement;
      var basePlacement = getBasePlacement(preferredPlacement);
      var isBasePlacement = basePlacement === preferredPlacement;
      var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
      var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
        return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          padding: padding,
          flipVariations: flipVariations,
          allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
      }, []);
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var checksMap = new Map();
      var makeFallbackChecks = true;
      var firstFittingPlacement = placements[0];

      for (var i = 0; i < placements.length; i++) {
        var placement = placements[i];

        var _basePlacement = getBasePlacement(placement);

        var isStartVariation = getVariation(placement) === start;
        var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = detectOverflow(state, {
          placement: placement,
          boundary: boundary,
          rootBoundary: rootBoundary,
          altBoundary: altBoundary,
          padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

        if (referenceRect[len] > popperRect[len]) {
          mainVariationSide = getOppositePlacement(mainVariationSide);
        }

        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];

        if (checkMainAxis) {
          checks.push(overflow[_basePlacement] <= 0);
        }

        if (checkAltAxis) {
          checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }

        if (checks.every(function (check) {
          return check;
        })) {
          firstFittingPlacement = placement;
          makeFallbackChecks = false;
          break;
        }

        checksMap.set(placement, checks);
      }

      if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;

        var _loop = function _loop(_i) {
          var fittingPlacement = placements.find(function (placement) {
            var checks = checksMap.get(placement);

            if (checks) {
              return checks.slice(0, _i).every(function (check) {
                return check;
              });
            }
          });

          if (fittingPlacement) {
            firstFittingPlacement = fittingPlacement;
            return "break";
          }
        };

        for (var _i = numberOfChecks; _i > 0; _i--) {
          var _ret = _loop(_i);

          if (_ret === "break") break;
        }
      }

      if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
      }
    } // eslint-disable-next-line import/no-unused-modules


    var flip$1 = {
      name: 'flip',
      enabled: true,
      phase: 'main',
      fn: flip,
      requiresIfExists: ['offset'],
      data: {
        _skip: false
      }
    };

    function getSideOffsets(overflow, rect, preventedOffsets) {
      if (preventedOffsets === void 0) {
        preventedOffsets = {
          x: 0,
          y: 0
        };
      }

      return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
      };
    }

    function isAnySideFullyClipped(overflow) {
      return [top, right, bottom, left].some(function (side) {
        return overflow[side] >= 0;
      });
    }

    function hide(_ref) {
      var state = _ref.state,
          name = _ref.name;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var preventedOffsets = state.modifiersData.preventOverflow;
      var referenceOverflow = detectOverflow(state, {
        elementContext: 'reference'
      });
      var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
      });
      var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
      var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
      var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
      var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
      state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
      };
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
      });
    } // eslint-disable-next-line import/no-unused-modules


    var hide$1 = {
      name: 'hide',
      enabled: true,
      phase: 'main',
      requiresIfExists: ['preventOverflow'],
      fn: hide
    };

    function distanceAndSkiddingToXY(placement, rects, offset) {
      var basePlacement = getBasePlacement(placement);
      var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

      var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
      })) : offset,
          skidding = _ref[0],
          distance = _ref[1];

      skidding = skidding || 0;
      distance = (distance || 0) * invertDistance;
      return [left, right].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
      } : {
        x: skidding,
        y: distance
      };
    }

    function offset(_ref2) {
      var state = _ref2.state,
          options = _ref2.options,
          name = _ref2.name;
      var _options$offset = options.offset,
          offset = _options$offset === void 0 ? [0, 0] : _options$offset;
      var data = placements.reduce(function (acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
      }, {});
      var _data$state$placement = data[state.placement],
          x = _data$state$placement.x,
          y = _data$state$placement.y;

      if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var offset$1 = {
      name: 'offset',
      enabled: true,
      phase: 'main',
      requires: ['popperOffsets'],
      fn: offset
    };

    function popperOffsets(_ref) {
      var state = _ref.state,
          name = _ref.name; // Offsets are the actual position the popper needs to have to be
      // properly positioned near its reference element
      // This is the most basic placement, and will be adjusted by
      // the modifiers in the next step

      state.modifiersData[name] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
      });
    } // eslint-disable-next-line import/no-unused-modules


    var popperOffsets$1 = {
      name: 'popperOffsets',
      enabled: true,
      phase: 'read',
      fn: popperOffsets,
      data: {}
    };

    function getAltAxis(axis) {
      return axis === 'x' ? 'y' : 'x';
    }

    function preventOverflow(_ref) {
      var state = _ref.state,
          options = _ref.options,
          name = _ref.name;
      var _options$mainAxis = options.mainAxis,
          checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
          _options$altAxis = options.altAxis,
          checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
          boundary = options.boundary,
          rootBoundary = options.rootBoundary,
          altBoundary = options.altBoundary,
          padding = options.padding,
          _options$tether = options.tether,
          tether = _options$tether === void 0 ? true : _options$tether,
          _options$tetherOffset = options.tetherOffset,
          tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
      var overflow = detectOverflow(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
      });
      var basePlacement = getBasePlacement(state.placement);
      var variation = getVariation(state.placement);
      var isBasePlacement = !variation;
      var mainAxis = getMainAxisFromPlacement(basePlacement);
      var altAxis = getAltAxis(mainAxis);
      var popperOffsets = state.modifiersData.popperOffsets;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
      })) : tetherOffset;
      var data = {
        x: 0,
        y: 0
      };

      if (!popperOffsets) {
        return;
      }

      if (checkMainAxis || checkAltAxis) {
        var mainSide = mainAxis === 'y' ? top : left;
        var altSide = mainAxis === 'y' ? bottom : right;
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min$1 = popperOffsets[mainAxis] + overflow[mainSide];
        var max$1 = popperOffsets[mainAxis] - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds

        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
          width: 0,
          height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)

        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
        var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;

        if (checkMainAxis) {
          var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
          popperOffsets[mainAxis] = preventedOffset;
          data[mainAxis] = preventedOffset - offset;
        }

        if (checkAltAxis) {
          var _mainSide = mainAxis === 'x' ? top : left;

          var _altSide = mainAxis === 'x' ? bottom : right;

          var _offset = popperOffsets[altAxis];

          var _min = _offset + overflow[_mainSide];

          var _max = _offset - overflow[_altSide];

          var _preventedOffset = within(tether ? min(_min, tetherMin) : _min, _offset, tether ? max(_max, tetherMax) : _max);

          popperOffsets[altAxis] = _preventedOffset;
          data[altAxis] = _preventedOffset - _offset;
        }
      }

      state.modifiersData[name] = data;
    } // eslint-disable-next-line import/no-unused-modules


    var preventOverflow$1 = {
      name: 'preventOverflow',
      enabled: true,
      phase: 'main',
      fn: preventOverflow,
      requiresIfExists: ['offset']
    };

    function getHTMLElementScroll(element) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }

    function getNodeScroll(node) {
      if (node === getWindow(node) || !isHTMLElement(node)) {
        return getWindowScroll(node);
      } else {
        return getHTMLElementScroll(node);
      }
    }

    function isElementScaled(element) {
      var rect = element.getBoundingClientRect();
      var scaleX = rect.width / element.offsetWidth || 1;
      var scaleY = rect.height / element.offsetHeight || 1;
      return scaleX !== 1 || scaleY !== 1;
    } // Returns the composite rect of an element relative to its offsetParent.
    // Composite means it takes into account transforms as well as layout.


    function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
      if (isFixed === void 0) {
        isFixed = false;
      }

      var isOffsetParentAnElement = isHTMLElement(offsetParent);
      var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
      var documentElement = getDocumentElement(offsetParent);
      var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
      var scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      var offsets = {
        x: 0,
        y: 0
      };

      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }

        if (isHTMLElement(offsetParent)) {
          offsets = getBoundingClientRect(offsetParent, true);
          offsets.x += offsetParent.clientLeft;
          offsets.y += offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }

      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }

    function order(modifiers) {
      var map = new Map();
      var visited = new Set();
      var result = [];
      modifiers.forEach(function (modifier) {
        map.set(modifier.name, modifier);
      }); // On visiting object, check for its dependencies and visit them recursively

      function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function (dep) {
          if (!visited.has(dep)) {
            var depModifier = map.get(dep);

            if (depModifier) {
              sort(depModifier);
            }
          }
        });
        result.push(modifier);
      }

      modifiers.forEach(function (modifier) {
        if (!visited.has(modifier.name)) {
          // check for visited object
          sort(modifier);
        }
      });
      return result;
    }

    function orderModifiers(modifiers) {
      // order based on dependencies
      var orderedModifiers = order(modifiers); // order based on phase

      return modifierPhases.reduce(function (acc, phase) {
        return acc.concat(orderedModifiers.filter(function (modifier) {
          return modifier.phase === phase;
        }));
      }, []);
    }

    function debounce(fn) {
      var pending;
      return function () {
        if (!pending) {
          pending = new Promise(function (resolve) {
            Promise.resolve().then(function () {
              pending = undefined;
              resolve(fn());
            });
          });
        }

        return pending;
      };
    }

    function format(str) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return [].concat(args).reduce(function (p, c) {
        return p.replace(/%s/, c);
      }, str);
    }

    var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
    var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
    var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
    function validateModifiers(modifiers) {
      modifiers.forEach(function (modifier) {
        [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
        .filter(function (value, index, self) {
          return self.indexOf(value) === index;
        }).forEach(function (key) {
          switch (key) {
            case 'name':
              if (typeof modifier.name !== 'string') {
                console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
              }

              break;

            case 'enabled':
              if (typeof modifier.enabled !== 'boolean') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
              }

              break;

            case 'phase':
              if (modifierPhases.indexOf(modifier.phase) < 0) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
              }

              break;

            case 'fn':
              if (typeof modifier.fn !== 'function') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
              }

              break;

            case 'effect':
              if (modifier.effect != null && typeof modifier.effect !== 'function') {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
              }

              break;

            case 'requires':
              if (modifier.requires != null && !Array.isArray(modifier.requires)) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
              }

              break;

            case 'requiresIfExists':
              if (!Array.isArray(modifier.requiresIfExists)) {
                console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
              }

              break;

            case 'options':
            case 'data':
              break;

            default:
              console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
                return "\"" + s + "\"";
              }).join(', ') + "; but \"" + key + "\" was provided.");
          }

          modifier.requires && modifier.requires.forEach(function (requirement) {
            if (modifiers.find(function (mod) {
              return mod.name === requirement;
            }) == null) {
              console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
            }
          });
        });
      });
    }

    function uniqueBy(arr, fn) {
      var identifiers = new Set();
      return arr.filter(function (item) {
        var identifier = fn(item);

        if (!identifiers.has(identifier)) {
          identifiers.add(identifier);
          return true;
        }
      });
    }

    function mergeByName(modifiers) {
      var merged = modifiers.reduce(function (merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
          options: Object.assign({}, existing.options, current.options),
          data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
      }, {}); // IE11 does not support Object.values

      return Object.keys(merged).map(function (key) {
        return merged[key];
      });
    }

    var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
    var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
    var DEFAULT_OPTIONS = {
      placement: 'bottom',
      modifiers: [],
      strategy: 'absolute'
    };

    function areValidElements() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return !args.some(function (element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
      });
    }

    function popperGenerator(generatorOptions) {
      if (generatorOptions === void 0) {
        generatorOptions = {};
      }

      var _generatorOptions = generatorOptions,
          _generatorOptions$def = _generatorOptions.defaultModifiers,
          defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
          _generatorOptions$def2 = _generatorOptions.defaultOptions,
          defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
      return function createPopper(reference, popper, options) {
        if (options === void 0) {
          options = defaultOptions;
        }

        var state = {
          placement: 'bottom',
          orderedModifiers: [],
          options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
          modifiersData: {},
          elements: {
            reference: reference,
            popper: popper
          },
          attributes: {},
          styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
          state: state,
          setOptions: function setOptions(setOptionsAction) {
            var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
            cleanupModifierEffects();
            state.options = Object.assign({}, defaultOptions, state.options, options);
            state.scrollParents = {
              reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
              popper: listScrollParents(popper)
            }; // Orders the modifiers based on their dependencies and `phase`
            // properties

            var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

            state.orderedModifiers = orderedModifiers.filter(function (m) {
              return m.enabled;
            }); // Validate the provided modifiers so that the consumer will get warned
            // if one of the modifiers is invalid for any reason

            if (process.env.NODE_ENV !== "production") {
              var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
                var name = _ref.name;
                return name;
              });
              validateModifiers(modifiers);

              if (getBasePlacement(state.options.placement) === auto) {
                var flipModifier = state.orderedModifiers.find(function (_ref2) {
                  var name = _ref2.name;
                  return name === 'flip';
                });

                if (!flipModifier) {
                  console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
                }
              }

              var _getComputedStyle = getComputedStyle$1(popper),
                  marginTop = _getComputedStyle.marginTop,
                  marginRight = _getComputedStyle.marginRight,
                  marginBottom = _getComputedStyle.marginBottom,
                  marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
              // cause bugs with positioning, so we'll warn the consumer


              if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
                return parseFloat(margin);
              })) {
                console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
              }
            }

            runModifierEffects();
            return instance.update();
          },
          // Sync update – it will always be executed, even if not necessary. This
          // is useful for low frequency updates where sync behavior simplifies the
          // logic.
          // For high frequency updates (e.g. `resize` and `scroll` events), always
          // prefer the async Popper#update method
          forceUpdate: function forceUpdate() {
            if (isDestroyed) {
              return;
            }

            var _state$elements = state.elements,
                reference = _state$elements.reference,
                popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
            // anymore

            if (!areValidElements(reference, popper)) {
              if (process.env.NODE_ENV !== "production") {
                console.error(INVALID_ELEMENT_ERROR);
              }

              return;
            } // Store the reference and popper rects to be read by modifiers


            state.rects = {
              reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
              popper: getLayoutRect(popper)
            }; // Modifiers have the ability to reset the current update cycle. The
            // most common use case for this is the `flip` modifier changing the
            // placement, which then needs to re-run all the modifiers, because the
            // logic was previously ran for the previous placement and is therefore
            // stale/incorrect

            state.reset = false;
            state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
            // is filled with the initial data specified by the modifier. This means
            // it doesn't persist and is fresh on each update.
            // To ensure persistent data, use `${name}#persistent`

            state.orderedModifiers.forEach(function (modifier) {
              return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
            });
            var __debug_loops__ = 0;

            for (var index = 0; index < state.orderedModifiers.length; index++) {
              if (process.env.NODE_ENV !== "production") {
                __debug_loops__ += 1;

                if (__debug_loops__ > 100) {
                  console.error(INFINITE_LOOP_ERROR);
                  break;
                }
              }

              if (state.reset === true) {
                state.reset = false;
                index = -1;
                continue;
              }

              var _state$orderedModifie = state.orderedModifiers[index],
                  fn = _state$orderedModifie.fn,
                  _state$orderedModifie2 = _state$orderedModifie.options,
                  _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                  name = _state$orderedModifie.name;

              if (typeof fn === 'function') {
                state = fn({
                  state: state,
                  options: _options,
                  name: name,
                  instance: instance
                }) || state;
              }
            }
          },
          // Async and optimistically optimized update – it will not be executed if
          // not necessary (debounced to run at most once-per-tick)
          update: debounce(function () {
            return new Promise(function (resolve) {
              instance.forceUpdate();
              resolve(state);
            });
          }),
          destroy: function destroy() {
            cleanupModifierEffects();
            isDestroyed = true;
          }
        };

        if (!areValidElements(reference, popper)) {
          if (process.env.NODE_ENV !== "production") {
            console.error(INVALID_ELEMENT_ERROR);
          }

          return instance;
        }

        instance.setOptions(options).then(function (state) {
          if (!isDestroyed && options.onFirstUpdate) {
            options.onFirstUpdate(state);
          }
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.

        function runModifierEffects() {
          state.orderedModifiers.forEach(function (_ref3) {
            var name = _ref3.name,
                _ref3$options = _ref3.options,
                options = _ref3$options === void 0 ? {} : _ref3$options,
                effect = _ref3.effect;

            if (typeof effect === 'function') {
              var cleanupFn = effect({
                state: state,
                name: name,
                instance: instance,
                options: options
              });

              var noopFn = function noopFn() {};

              effectCleanupFns.push(cleanupFn || noopFn);
            }
          });
        }

        function cleanupModifierEffects() {
          effectCleanupFns.forEach(function (fn) {
            return fn();
          });
          effectCleanupFns = [];
        }

        return instance;
      };
    }

    var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
    var createPopper = /*#__PURE__*/popperGenerator({
      defaultModifiers: defaultModifiers
    }); // eslint-disable-next-line import/no-unused-modules

    function usePopperApi({
      updating,
      position,
      skidding,
      distance,
      paddingTop,
      paddingBottom,
      paddingLeft,
      paddingRight
    }) {
      var [popperInstance, setPopperInstance, getPopperInstance] = useState(null);
      var [usedPlacement, setUsedPlacement] = useState(null);
      var {
        element: sourceElement,
        getElement: getSourceElement,
        useRefElementProps: useSourceElementRefProps
      } = useRefElement();
      var {
        element: popperElement,
        getElement: getPopperElement,
        useRefElementProps: usePopperElementRefProps
      } = useRefElement();
      var {
        element: arrowElement,
        getElement: getArrowElement,
        useRefElementProps: useArrowElementRefProps
      } = useRefElement();
      var [sourceStyle, setSourceStyle] = useState(null);
      var [sourceAttributes, setSourceAttributes] = useState({});
      var [popperStyle, setPopperStyle] = useState(null);
      var [popperAttributes, setPopperAttributes] = useState({});
      var [arrowStyle, setArrowStyle] = useState(null);
      var [arrowAttributes, setArrowAttributes] = useState({});
      y(() => {
        if (updating) {
          var rafHandle = 0;

          function raf() {
            var _ref, _getPopperInstance;

            var p = (_ref = closed ? Promise.resolve() : (_getPopperInstance = getPopperInstance()) === null || _getPopperInstance === void 0 ? void 0 : _getPopperInstance.update()) !== null && _ref !== void 0 ? _ref : Promise.resolve();
            p.then(_ => {
              if (rafHandle != 0) {
                rafHandle = requestAnimationFrame(raf);
              }
            });
          }

          rafHandle = requestAnimationFrame(raf);
          return () => {
            cancelAnimationFrame(rafHandle); // Single-threaded languages are nice sometimes.

            rafHandle = 0;
          };
        }
      }, [updating]);
      var updateStateModifier = d(() => {
        var modifier = {
          name: "updateState",
          enabled: true,
          phase: "write",
          fn: ({
            state,
            options,
            name,
            instance
          }) => {
            var usedPlacement = state.placement;
            if (usedPlacement.includes("-")) usedPlacement = usedPlacement.substr(0, usedPlacement.indexOf("-"));
            setUsedPlacement(usedPlacement);
            if (state.styles.reference) setSourceStyle(state.styles.reference);
            if (state.attributes.reference) setSourceAttributes(state.attributes.reference);
            if (state.styles.popper) setPopperStyle(state.styles.popper);
            if (state.attributes.popper) setPopperAttributes(state.attributes.popper);
            if (state.styles.arrow) setArrowStyle(state.styles.arrow);
            if (state.attributes.arrow) setArrowAttributes(state.attributes.arrow);
          },
          requires: ["computeStyles", "flip"]
        };
        return modifier;
      }, []);
      var {
        convertElementSize,
        getLogicalDirection
      } = useLogicalDirection(sourceElement);
      y(() => {
        if (sourceElement && popperElement) {
          var onFirstUpdate = () => {};

          var strategy = "absolute";
          var placement = logicalToPlacement(getLogicalDirection(), position);
          setPopperInstance(createPopper(sourceElement, popperElement, {
            modifiers: [{
              name: "flip",
              options: {}
            }, {
              name: "preventOverflow",
              options: {
                padding: {
                  bottom: paddingBottom,
                  top: paddingTop,
                  left: paddingLeft,
                  right: paddingRight
                }
              }
            }, updateStateModifier, {
              name: 'eventListeners',
              enabled: false
            }, {
              name: "applyStyles",
              enabled: false
            }],
            onFirstUpdate,
            placement,
            strategy
          }));
        }
      }, [sourceElement, popperElement, position, skidding, distance, paddingTop, paddingBottom, paddingLeft, paddingRight]);

      function usePopperSource() {
        function usePopperSourceProps(props) {
          var style = _objectSpread2({}, sourceStyle);

          return useMergedProps()(sourceAttributes, useMergedProps()({
            style
          }, useSourceElementRefProps(props)));
        }

        return {
          usePopperSourceProps
        };
      }

      function usePopperPopup({
        open
      }) {
        function usePopperPopupProps(props) {
          var style = _objectSpread2(_objectSpread2({}, popperStyle), {}, {
            pointerEvents: open ? undefined : "none"
          });

          return useMergedProps()(popperAttributes, useMergedProps()({
            style
          }, usePopperElementRefProps(props)));
        }

        return {
          usePopperPopupProps
        };
      }

      function usePopperArrow() {
        function usePopperArrowProps(props) {
          var style = _objectSpread2({}, arrowStyle);

          return useMergedProps()(popperAttributes, useMergedProps()({
            style
          }, useArrowElementRefProps(props)));
        }

        return {
          usePopperArrowProps
        };
      }

      return {
        usePopperSource,
        usePopperPopup,
        usePopperArrow,
        usedPlacement,
        getLogicalDirection
      };
    }
    function placementToLogical(logicalDirection, placement) {
      var {
        blockDirection,
        blockOrientation,
        inlineDirection,
        inlineOrientation
      } = logicalDirection;
      var logical;

      switch ("".concat(inlineDirection, "-").concat(blockDirection, ",").concat(placement)) {
        // There's a pattern, and it could be coded as a pattern
        case "ltr-ttb,top":
          logical = "block-start";
          break;

        case "ltr-btt,bottom":
          logical = "block-start";
          break;

        case "rtl-ttb,top":
          logical = "block-start";
          break;

        case "rtl-btt,bottom":
          logical = "block-start";
          break;

        case "ttb-ltr,left":
          logical = "block-start";
          break;

        case "btt-ltr,right":
          logical = "block-start";
          break;

        case "ttb-rtl,left":
          logical = "block-start";
          break;

        case "btt-rtl,right":
          logical = "block-start";
          break;

        case "ltr-ttb,bottom":
          logical = "block-end";
          break;

        case "rtl-ttb,bottom":
          logical = "block-end";
          break;

        case "ltr-btt,top":
          logical = "block-end";
          break;

        case "rtl-btt,top":
          logical = "block-end";
          break;

        case "ttb-ltr,right":
          logical = "block-end";
          break;

        case "ttb-rtl,right":
          logical = "block-end";
          break;

        case "btt-ltr,left":
          logical = "block-end";
          break;

        case "btt-rtl,left":
          logical = "block-end";
          break;

        case "ttb-ltr,top":
          logical = "inline-start";
          break;

        case "ttb-rtl,top":
          logical = "inline-start";
          break;

        case "btt-ltr,bottom":
          logical = "inline-start";
          break;

        case "btt-rtl,bottom":
          logical = "inline-start";
          break;

        case "ltr-ttb,left":
          logical = "inline-start";
          break;

        case "rtl-ttb,left":
          logical = "inline-start";
          break;

        case "ltr-btt,right":
          logical = "inline-start";
          break;

        case "rtl-btt,right":
          logical = "inline-start";
          break;

        case "ttb-ltr,bottom":
          logical = "inline-end";
          break;

        case "ttb-rtl,bottom":
          logical = "inline-end";
          break;

        case "btt-ltr,top":
          logical = "inline-end";
          break;

        case "btt-rtl,top":
          logical = "inline-end";
          break;

        case "ltr-ttb,right":
          logical = "inline-end";
          break;

        case "rtl-ttb,right":
          logical = "inline-end";
          break;

        case "ltr-btt,left":
          logical = "inline-end";
          break;

        case "rtl-btt,left":
          logical = "inline-end";
          break;
        // Shouldn't happen, but here for type correctness.

        case "ttb-ttb,bottom":
        case "ttb-ttb,top":
        case "btt-btt,bottom":
        case "btt-btt,top":
        case "ltr-ltr,bottom":
        case "ltr-ltr,top":
        case "rtl-rtl,bottom":
        case "rtl-rtl,top":
        case "ttb-btt,bottom":
        case "btt-ttb,top":
        case "btt-ttb,bottom":
        case "ttb-btt,top":
        case "ltr-rtl,bottom":
        case "rtl-ltr,top":
        case "rtl-ltr,bottom":
        case "ltr-rtl,top":
        case "ttb-ttb,right":
        case "ttb-ttb,left":
        case "btt-btt,right":
        case "btt-btt,left":
        case "ltr-ltr,right":
        case "ltr-ltr,left":
        case "rtl-rtl,right":
        case "rtl-rtl,left":
        case "ttb-btt,right":
        case "btt-ttb,left":
        case "btt-ttb,right":
        case "ttb-btt,left":
        case "ltr-rtl,right":
        case "rtl-ltr,left":
        case "rtl-ltr,right":
        case "ltr-rtl,left":
          debugger;
          logical = logical;
          break;
      }

      return logical;
    }
    function logicalToPlacement(logicalDirection, position) {
      var placement;
      var {
        blockDirection,
        blockOrientation,
        inlineDirection,
        inlineOrientation
      } = logicalDirection;

      if (position === "block-start" || position == "block-end") {
        switch ("".concat(position, "-").concat(blockDirection)) {
          case "block-start-ttb":
            placement = "top";
            break;

          case "block-end-btt":
            placement = "top";
            break;

          case "block-start-btt":
            placement = "bottom";
            break;

          case "block-end-ttb":
            placement = "bottom";
            break;

          case "block-start-ltr":
            placement = "left";
            break;

          case "block-end-rtl":
            placement = "left";
            break;

          case "block-end-ltr":
            placement = "right";
            break;

          case "block-start-rtl":
            placement = "right";
            break;

          default:
            placement = "bottom";
            break;
        }
      } else {
        switch ("".concat(position, "-").concat(inlineDirection)) {
          case "inline-start-ltr":
            placement = "left";
            break;

          case "inline-end-rtl":
            placement = "left";
            break;

          case "inline-end-ltr":
            placement = "right";
            break;

          case "inline-start-rtl":
            placement = "right";
            break;

          case "inline-start-ttb":
            placement = "top";
            break;

          case "inline-end-btt":
            placement = "top";
            break;

          case "inline-end-ttb":
            placement = "bottom";
            break;

          case "inline-start-btt":
            placement = "bottom";
            break;

          default:
            placement = "right";
            break;
        }
      }

      return placement;
    }
    function useShouldUpdatePopper(open, elementSize) {
      // Since scroll events are asynchronous, especially on iOS devices,
      // just manually adjust the position of the popper for a bit
      // any time basically any user interaction happens.
      var [updatingForABit, setUpdatingForABit] = useState(0);
      useTimeout({
        callback: () => {
          setUpdatingForABit(0);
        },
        timeout: 100,
        triggerIndex: updatingForABit
      });
      var onInteraction = A$1(() => {
        setUpdatingForABit(u => ++u);
      }, [closed]);
      if (!open) onInteraction = null;
      useGlobalHandler(document, "keydown", onInteraction, {
        passive: true,
        capture: true
      });
      useGlobalHandler(window, "scroll", onInteraction, {
        passive: true,
        capture: true
      });
      useGlobalHandler(window, "pointermove", onInteraction, {
        passive: true,
        capture: true
      });
      useGlobalHandler(window, "click", onInteraction, {
        passive: true,
        capture: true
      });
      useGlobalHandler(window, "resize", onInteraction, {
        passive: true,
        capture: true
      });
      y(() => {
        var _onInteraction;

        (_onInteraction = onInteraction) === null || _onInteraction === void 0 ? void 0 : _onInteraction();
      }, Object.values(elementSize !== null && elementSize !== void 0 ? elementSize : {}));
      return {
        shouldUpdate: !!updatingForABit,
        onInteraction
      };
    }
    /**
     * Handle the e.g. zoomOriginDynamic props, to turn them into zoomOriginInline or zoomOriginBlock as appropriate.
     * TODO: Right now, all *Dynamic props are just handled as 1 - prop. Some probably need to be -1 * prop though.
     */

    function fixProps(logicalDirection, requestedPlacement, usedPlacement, props) {
      var logicalSnake = placementToLogical(logicalDirection, usedPlacement);
      var propAxis;
      var reverse;

      switch (logicalSnake) {
        case "block-start":
          propAxis = "Block";
          reverse = requestedPlacement == "block-end";
          break;

        case "block-end":
          propAxis = "Block";
          reverse = requestedPlacement == "block-start";
          break;

        case "inline-start":
          propAxis = "Inline";
          reverse = requestedPlacement == "inline-end";
          break;

        case "inline-end":
          propAxis = "Inline";
          reverse = requestedPlacement == "inline-start";
          break;
      }

      var newProps = _objectSpread2({}, props);

      for (var propName in props) {
        if (propName.endsWith("Dynamic") && typeof props[propName] === "number") {
          var newPropName = "".concat(propName.substr(0, propName.indexOf("Dynamic"))).concat(propAxis);
          newProps[newPropName] = !reverse ? newProps[propName] : 1 - newProps[propName];
          delete newProps[propName];
        }
      }

      return newProps;
    }

    var _excluded$4 = ["anchor", "anchorTag", "children", "tag", "Transition"],
        _excluded2$3 = ["children", "index"];

    var OnCloseContext = D$1(undefined);
    var UseMenuItemContext = D$1(null);
    function Menu(_ref) {
      var {
        anchor,
        anchorTag,
        children,
        tag,
        Transition
      } = _ref,
          rest = _objectWithoutProperties(_ref, _excluded$4);

      var [open, setOpen] = useState(false);
      var onClose = A$1(() => setOpen(false), []);

      var onOpen = () => setOpen(true);

      var {
        useElementSizeProps,
        elementSize
      } = useElementSize();
      var {
        shouldUpdate: updatingForABit,
        onInteraction
      } = useShouldUpdatePopper(open, elementSize);
      var {
        usePopperArrow,
        usePopperPopup,
        usePopperSource,
        usedPlacement,
        getLogicalDirection
      } = usePopperApi({
        position: "block-end",
        updating: updatingForABit
      });
      var {
        useMenuButton,
        useMenuItem,
        useMenuItemCheckbox,
        useMenuProps,
        useMenuSubmenuItem,
        focusMenu
      } = useAriaMenu({
        open,
        onClose,
        onOpen
      });
      var {
        useMenuButtonProps
      } = useMenuButton({
        tag: anchorTag !== null && anchorTag !== void 0 ? anchorTag : "button"
      });
      var {
        usePopperSourceProps
      } = usePopperSource();
      var {
        usePopperPopupProps
      } = usePopperPopup({
        open
      });
      var {
        usePopperArrowProps
      } = usePopperArrow();
      /*const [sentinelFocused, setSentinelFocused] = useState(false);
      useTimeout({ callback: () => { if (sentinelFocused) onClose(); setSentinelFocused(false); }, timeout: 1000, triggerIndex: sentinelFocused.toString() })*/

      var [firstSentinelIsActive, setFirstSentinelIsActive] = useState(false);
      useTimeout({
        callback: () => {
          setFirstSentinelIsActive(open);
        },
        timeout: 100,
        triggerIndex: "".concat(firstSentinelIsActive)
      });
      var menuChildren = v$1(d$1, null, v$1("div", _objectSpread2({}, usePopperArrowProps({}))), v$1("button", {
        className: "visually-hidden",
        onFocus: !firstSentinelIsActive ? () => focusMenu === null || focusMenu === void 0 ? void 0 : focusMenu() : () => onClose(),
        onClick: onClose
      }, "Close menu"), children, v$1("button", {
        className: "visually-hidden",
        onFocus: onClose,
        onClick: onClose
      }, "Close menu"));
      var logicalDirection = getLogicalDirection();
      if (logicalDirection && usedPlacement) rest = fixProps(logicalDirection, "block-end", usedPlacement, rest);
      return v$1(d$1, null, v$1(OnCloseContext.Provider, {
        value: onClose
      }, v$1(UseMenuItemContext.Provider, {
        value: useMenuItem
      }, B(anchor, useMergedProps()(useElementSizeProps({
        ref: anchor.ref,
        class: "dropdown-toggle ".concat(open ? "active" : "")
      }), usePopperSourceProps(useMenuButtonProps(anchor.props)))), v$1(BodyPortal, null, v$1("div", _objectSpread2({}, usePopperPopupProps({
        class: "dropdown-menu-popper"
      })), v$1(Transition, _objectSpread2(_objectSpread2({}, useMenuProps(rest)), {}, {
        open: open,
        onTransitionUpdate: onInteraction,
        exitVisibility: "hidden"
      }), v$1("div", null, v$1(tag, {
        children: menuChildren,
        className: "dropdown-menu"
      }))))))));
    }
    function MenuItem(_ref2) {
      var {
        children,
        index
      } = _ref2,
          rest = _objectWithoutProperties(_ref2, _excluded2$3);

      var useMenuItem = F(UseMenuItemContext);
      var [text, setText] = useState(null);
      var {
        useRefElementProps,
        element
      } = useRefElement();
      h(() => {
        if (element) setText(element.innerText);
      }, [element]);
      var {
        useMenuItemProps
      } = useMenuItem({
        index,
        text
      });
      return v$1("li", null, v$1("button", _objectSpread2({}, useMenuItemProps(useRefElementProps(useMergedProps()(rest, {
        class: "dropdown-item"
      })))), children));
    }

    var _excluded$3 = ["aria-modal", "role"],
        _excluded2$2 = ["onClose", "open", "descriptive", "title", "footer", "Transition", "children"];
    function useAriaOffcanvas({
      open,
      onClose
    }) {
      var [offcanvasDescribedByBody, setOffcanvasDescribedByBody] = useState(false);
      var {
        id: offcanvasId,
        useRandomIdProps: useOffcanvasIdProps,
        useReferencedIdProps: useOffcanvasReferencingIdProps
      } = useRandomId({
        prefix: "aria-offcanvas-"
      });
      var {
        id: bodyId,
        useRandomIdProps: useBodyIdProps,
        useReferencedIdProps: useBodyReferencingIdProps
      } = useRandomId({
        prefix: "aria-offcanvas-body-"
      });
      var {
        id: titleId,
        useRandomIdProps: useTitleIdProps,
        useReferencedIdProps: useTitleReferencingIdProps
      } = useRandomId({
        prefix: "aria-offcanvas-title-"
      });
      useGlobalHandler(window, "mousedown", e => {
        var _document$getElementB;

        if (!(offcanvasId && e.target instanceof Element && (_document$getElementB = document.getElementById(offcanvasId)) !== null && _document$getElementB !== void 0 && _document$getElementB.contains(e.target))) {
          onClose("backdrop");
        }
      }, {
        capture: true
      });

      var onKeyDown = e => {
        if (e.key === "Escape") {
          onClose("escape");
        }
      };

      var useOffcanvasBackdrop = function () {
        //const onClick: h.JSX.EventHandler<h.JSX.TargetedEvent<BackdropElement>> = e => onClose("escape");
        function useOffcanvasBackdropProps(props) {
          return useMergedProps()({}, props);
        }

        return {
          useOffcanvasBackdropProps
        };
      };

      var useOffcanvasProps = function (_ref) {
        var p0 = _objectWithoutProperties(_ref, _excluded$3);

        var {
          useFocusTrapProps
        } = useFocusTrap({
          trapActive: open
        });
        var p1 = useTitleReferencingIdProps("aria-labelledby")(p0);
        var p2 = useOffcanvasIdProps(p1);
        var pFinal = useBodyReferencingIdProps("aria-describedby")(p2);
        return useFocusTrapProps(useMergedProps()({
          role: "offcanvas",
          onKeyDown
        }, offcanvasDescribedByBody ? pFinal : p2));
      };

      function useOffcanvasTitle() {
        var useOffcanvasTitleProps = function (props) {
          return useTitleIdProps(props);
        };

        return {
          useOffcanvasTitleProps
        };
      }

      function useOffcanvasBody({
        descriptive
      }) {
        setOffcanvasDescribedByBody(descriptive);

        var useOffcanvasBodyProps = function (props) {
          return useBodyIdProps(props);
        };

        return {
          useOffcanvasBodyProps
        };
      }

      return {
        useOffcanvasProps,
        useOffcanvasTitle,
        useOffcanvasBody,
        useOffcanvasBackdrop
      };
    }
    function Offcanvas(_ref2) {
      var {
        onClose,
        open,
        descriptive,
        title,
        footer,
        Transition,
        children
      } = _ref2,
          rest = _objectWithoutProperties(_ref2, _excluded2$2);

      var {
        useOffcanvasBackdrop,
        useOffcanvasBody,
        useOffcanvasProps,
        useOffcanvasTitle
      } = useAriaOffcanvas({
        open,
        onClose
      });
      var {
        useOffcanvasBackdropProps
      } = useOffcanvasBackdrop();
      var {
        useOffcanvasBodyProps
      } = useOffcanvasBody({
        descriptive
      });
      var {
        useOffcanvasTitleProps
      } = useOffcanvasTitle();
      return v$1(BodyPortal, null, v$1("div", null, v$1(Fade, {
        open: open
      }, v$1("div", _objectSpread2({}, useOffcanvasBackdropProps({
        class: "offcanvas-backdrop backdrop-filter-transition"
      })))), v$1(Transition, _objectSpread2({}, _objectSpread2({
        open
      }, rest)), v$1("div", _objectSpread2({}, useOffcanvasProps({
        class: "offcanvas offcanvas-start",
        tabindex: -1
      })), v$1("div", {
        class: "offcanvas-header"
      }, v$1("h5", _objectSpread2({}, useOffcanvasTitleProps({
        class: "offcanvas-title"
      })), "Offcanvas"), v$1(Button, {
        tag: "button",
        class: "btn-close text-reset",
        "aria-label": "Close",
        onClick: () => onClose("escape")
      })), v$1("div", _objectSpread2({}, useOffcanvasBodyProps({
        class: "offcanvas-body"
      })), "Content for the offcanvas goes here.You can place just about any Bootstrap component or custom elements here.")))));
    }

    var InInputGroupContext = D$1(false);
    function useInputCaptures(type) {
      var capture = A$1(event => {
        switch (type) {
          case "text":
            return event.currentTarget.value;

          case "number":
            return event.currentTarget.valueAsNumber;
        }
      }, [type]);
      var uncapture = A$1(value => {
        switch (type) {
          case "text":
            return value;

          case "number":
            return "".concat(value);
        }
      }, [type]);
      return {
        capture,
        uncapture
      };
    }

    var _excluded$2 = ["checked", "disabled", "onInput", "label", "labelPosition"];

    function capture(e) {
      return e[EventDetail].checked;
    }
    /**
     * TODO: When inside an InputGroup, Checkboxes don't forward any properties or refs because there's no one DOM element to attach to.
     *
     * Probably need separate `inputRef` & `labelRef` properties for that,
     * but given there's also no easy way to forward props to just them a solution like that feels incomplete.
     */


    function Checkbox(_ref, ref) {
      var _labelPosition;

      var {
        checked,
        disabled,
        onInput: onInputAsync,
        label,
        labelPosition
      } = _ref,
          rest = _objectWithoutProperties(_ref, _excluded$2);

      (_labelPosition = labelPosition) !== null && _labelPosition !== void 0 ? _labelPosition : labelPosition = "end";
      var {
        getSyncHandler,
        pending,
        hasError,
        settleCount
      } = useAsyncHandler()({
        capture
      });
      var onInput = getSyncHandler(onInputAsync);
      var {
        useCheckboxInputElement,
        useCheckboxLabelElement
      } = useAriaCheckbox({
        checked: checked === "indeterminate" ? "mixed" : checked,
        disabled: disabled !== null && disabled !== void 0 ? disabled : false,
        onInput,
        labelPosition: "separate"
      });
      var {
        useCheckboxInputElementProps
      } = useCheckboxInputElement({
        tag: "input"
      });
      var {
        useCheckboxLabelElementProps
      } = useCheckboxLabelElement({
        tag: "label"
      });
      var inInputGroup = F(InInputGroupContext);
      var stringLabel = "".concat(label);

      if (label != null && labelPosition === "hidden" && !["string", "number", "boolean"].includes(typeof label)) {
        console.error("Hidden labels require a string-based label for the aria-label attribute.");
      }

      var asyncState = hasError ? "failed" : pending ? "pending" : settleCount ? "succeeded" : null;
      var inputElement = v$1(OptionallyInputGroup$1, null, v$1(ProgressCircular, {
        childrenPosition: "after",
        colorFill: "foreground-only",
        mode: asyncState,
        color: "info"
      }, v$1("input", _objectSpread2({}, useCheckboxInputElementProps({
        type: "checkbox",
        className: clsx("form-check-input", inInputGroup && "mt-0"),
        "aria-label": labelPosition === "hidden" ? stringLabel : undefined
      })))));
      var labelElement = v$1(d$1, null, label != null && v$1(OptionallyInputGroup$1, null, v$1("label", _objectSpread2({}, useCheckboxLabelElementProps({
        className: "form-check-label",
        "aria-hidden": "true"
      })), label)));
      var ret = v$1(d$1, null, labelPosition == "start" && labelElement, inputElement, labelPosition == "end" && labelElement);
      if (!inInputGroup) return v$1("div", _objectSpread2({}, useMergedProps()(rest, {
        ref,
        class: "form-check"
      })), ret);
      return ret;
    }
    D$1(null);
    D$1(null);

    function OptionallyInputGroup$1({
      children
    }) {
      var inInputGroup = F(InInputGroupContext);
      if (!inInputGroup) return v$1(d$1, null, children);
      return v$1("div", {
        class: "input-group-text"
      }, children);
    }

    var RadioGroupContext = D$1(null);
    function RadioGroup({
      children,
      name,
      selectedValue,
      label,
      labelPosition,
      onInput: onInputAsync
    }) {
      var {
        getSyncHandler,
        pending,
        hasError,
        settleCount,
        currentCapture
      } = useAsyncHandler()({
        capture: e => e[EventDetail].selectedValue
      });
      var onInput = getSyncHandler(onInputAsync);
      var {
        useRadio,
        useRadioGroupProps,
        managedChildren,
        getIndex
      } = useAriaRadioGroup({
        name,
        selectedValue: currentCapture !== null && currentCapture !== void 0 ? currentCapture : selectedValue,
        onInput: onInput
      });
      var stringLabel = undefined;

      if (labelPosition === "hidden") {
        if (label != null && !["string", "number", "boolean"].includes(typeof label)) {
          console.error("Hidden labels require a string-based label for the aria-label attribute.");
        } else {
          stringLabel = "".concat(label);
        }
      }

      var selectedIndex = getIndex(currentCapture !== null && currentCapture !== void 0 ? currentCapture : selectedValue); //const capturedIndex = getIndex(currentCapture!);

      useChildFlag(selectedIndex, managedChildren.length, (index, isSelected) => managedChildren[index].setAsyncState(isSelected ? hasError ? "failed" : pending ? "pending" : "succeeded" : null)); // useChildFlag(pending ? capturedIndex : null, managedChildren.length, useCallback((index, isCaptured) => managedChildren[index].setPending(isCaptured? "in" : false), []));

      var {
        useGenericLabelLabel,
        useGenericLabelInput
      } = useGenericLabel({
        inputPrefix: "aria-radiogroup",
        labelPrefix: "aria-radiogroup-label",
        backupText: stringLabel
      });
      var {
        useGenericLabelInputProps
      } = useGenericLabelInput();
      var {
        useGenericLabelLabelProps
      } = useGenericLabelLabel();
      var labelJsx = v$1("div", _objectSpread2({}, useGenericLabelLabelProps({})));
      var groupJsx = v$1("div", _objectSpread2({}, useGenericLabelInputProps(useRadioGroupProps({
        "aria-label": labelPosition === "hidden" ? stringLabel : undefined
      }))), children);
      return v$1(RadioGroupContext.Provider, {
        value: useRadio
      }, labelPosition == "start" && labelJsx, groupJsx, labelPosition == "end" && labelJsx);
    }
    function Radio({
      disabled,
      label,
      index,
      value,
      labelPosition
    }) {
      var _labelPosition, _label;

      var useAriaRadio = F(RadioGroupContext);
      (_labelPosition = labelPosition) !== null && _labelPosition !== void 0 ? _labelPosition : labelPosition = "end";
      var text = null;
      var [asyncState, setAsyncState] = useState(null);
      var {
        useRadioInput,
        useRadioLabel
      } = useAriaRadio({
        disabled: disabled !== null && disabled !== void 0 ? disabled : false,
        labelPosition: "separate",
        index,
        text,
        value,
        setAsyncState
      });
      var {
        useRadioInputProps
      } = useRadioInput({
        tag: "input"
      });
      var {
        useRadioLabelProps
      } = useRadioLabel({
        tag: "label"
      });
      var inInputGroup = F(InInputGroupContext);
      (_label = label) !== null && _label !== void 0 ? _label : label = value;
      var stringLabel = "".concat(label);

      if (label != null && labelPosition === "hidden" && !["string", "number", "boolean"].includes(typeof label)) {
        console.error("Hidden labels require a string-based label for the aria-label attribute.");
      }

      var inputElement = v$1(OptionallyInputGroup, null, v$1(ProgressCircular, {
        childrenPosition: "after",
        colorFill: "foreground-only",
        mode: asyncState,
        color: "info"
      }, v$1("input", _objectSpread2({}, useRadioInputProps({
        type: "radio",
        className: "form-check-input",
        "aria-label": labelPosition === "hidden" ? stringLabel : undefined
      })))));
      var labelElement = v$1(d$1, null, label != null && v$1(OptionallyInputGroup, null, v$1("label", _objectSpread2({}, useRadioLabelProps({
        className: "form-check-label",
        "aria-hidden": "true"
      })), label)));
      var ret = v$1(d$1, null, labelPosition == "start" && labelElement, inputElement, labelPosition == "end" && labelElement);
      if (!inInputGroup) return v$1("div", {
        class: "form-check"
      }, ret);
      return ret;
    }

    function OptionallyInputGroup({
      children
    }) {
      var inInputGroup = F(InInputGroupContext);
      if (!inInputGroup) return v$1(d$1, null, children);
      return v$1("div", {
        class: "input-group-text"
      }, children);
    }

    var PushToastContext = D$1(null);
    var DefaultToastTimeout = D$1(5000);
    function ToastsProvider({
      children,
      defaultTimeout
    }) {
      var [pushToast, setPushToast] = useState(null);
      return v$1(d$1, null, v$1(DefaultToastTimeout.Provider, {
        value: defaultTimeout !== null && defaultTimeout !== void 0 ? defaultTimeout : 5000
      }, v$1(ToastsProviderHelper, {
        setPushToast: setPushToast
      }), pushToast && v$1(PushToastContext.Provider, {
        value: pushToast
      }, children)));
    }
    function usePushToast() {
      var pushToast = F(PushToastContext);
      return pushToast;
    } // Extracted to a separate component to avoid rerendering all non-toast children

    function ToastsProviderHelper({
      setPushToast
    }) {
      var [children, setChildren] = useState([]);
      var pushToast = A$1(toast => {
        var randomKey = generateRandomId();
        setChildren(prev => [...prev, B(toast, {
          key: randomKey
        })]);
      }, []);
      h(() => {
        setPushToast(_ => pushToast);
      }, [pushToast]);
      return v$1(BodyPortal, null, v$1(ToastsContainerChildrenContext.Provider, {
        value: children
      }, v$1(ToastsContainer, null)));
    }

    var ToastsContainerChildrenContext = D$1([]);
    var UseToastContext = D$1(null);

    function ToastsContainer(props) {
      var children = F(ToastsContainerChildrenContext);
      var {
        useToast,
        useToastContainerProps
      } = useToasts(props);
      return v$1(UseToastContext.Provider, {
        value: useToast
      }, v$1("div", _objectSpread2({}, useToastContainerProps(props)), children));
    }

    var ToastDismissContext = D$1(null);
    function Toast({
      timeout,
      politeness,
      children
    }) {
      var useToast = F(UseToastContext);
      var defaultTimeout = F(DefaultToastTimeout);
      var {
        useToastProps,
        dismiss,
        status
      } = useToast({
        timeout: timeout !== null && timeout !== void 0 ? timeout : defaultTimeout,
        politeness
      });
      return v$1(ToastDismissContext.Provider, {
        value: dismiss
      }, v$1(SlideFade, {
        open: status != "dismissed",
        slideTargetInline: 1,
        animateOnMount: true,
        exitVisibility: "removed"
      }, v$1("div", _objectSpread2({}, useToastProps({
        class: "toast show",
        role: "alert",
        "aria-atomic": "true"
      })), v$1("div", {
        class: "d-flex"
      }, v$1("div", {
        class: "toast-body"
      }, children), v$1(Button, {
        class: "btn-close me-2 m-auto",
        "aria-label": "Close",
        onClick: dismiss
      })))));
    }
    /*
    export function ToastHeader({ children }: { children: ComponentChildren }) {
        return (
            <div class="toast-header">
                <div class="me-auto">
                    {children}
                </div>
                <Button class="btn-close" aria-label="Close" />
            </div>
        )
    }*/

    var _excluded$1 = ["children"],
        _excluded2$1 = ["children"];
    /**
     * An InputGroup, that puts an Input and its Label together, visually, into one component.
     *
     * All Input-type components automatically detect when they're in an InputGroup and render different accordingly.
     */

    var InputGroup = forwardElementRef(function InputGroup(_ref, ref) {
      var {
        children
      } = _ref,
          rest = _objectWithoutProperties(_ref, _excluded$1);

      return v$1("div", _objectSpread2({}, useMergedProps()({
        class: "input-group",
        ref
      }, rest)), v$1(InInputGroupContext.Provider, {
        value: true
      }, children));
    });
    /**
     * Not generally needed, since most input components come with labels that do this for you.
     *
     * That being said, if you just need a static block of text not hooked up to any input element, this is your component.
     */

    forwardElementRef(function InputGroupText(_ref2, ref) {
      var rest = _objectWithoutProperties(_ref2, _excluded2$1);

      return v$1("span", _objectSpread2({}, useMergedProps()({
        class: "input-group-text",
        ref
      }, rest)));
    });

    var _excluded = ["type", "value", "onInput"],
        _excluded2 = ["getSyncHandler", "currentCapture", "pending", "hasError", "settleCount", "flushDebouncedPromise"],
        _excluded3 = ["label", "labelPosition"];
    function Input(_ref) {
      var {
        type,
        value,
        onInput: onInputAsync
      } = _ref,
          props = _objectWithoutProperties(_ref, _excluded);

      var {
        capture,
        uncapture
      } = useInputCaptures(type);

      var _useAsyncHandler = useAsyncHandler()({
        capture,
        debounce: 1500
      }),
          {
        getSyncHandler,
        currentCapture,
        pending,
        hasError,
        settleCount,
        flushDebouncedPromise
      } = _useAsyncHandler;
          _objectWithoutProperties(_useAsyncHandler, _excluded2);

      var onInput = getSyncHandler(onInputAsync);
      var onBlur = flushDebouncedPromise;
      return v$1(ProgressCircular, {
        spinnerTimeout: 10,
        mode: hasError ? "failed" : pending ? "pending" : settleCount ? "succeeded" : null,
        childrenPosition: "after",
        color: "info"
      }, v$1("input", _objectSpread2({}, useMergedProps()(props, {
        onBlur,
        class: clsx("form-control", pending && "with-end-icon"),
        type,
        value: currentCapture !== null && currentCapture !== void 0 ? currentCapture : uncapture(value),
        onInput
      }))));
    }
    function LabelledInput(_ref2) {
      var _labelPosition;

      var {
        label,
        labelPosition
      } = _ref2,
          props = _objectWithoutProperties(_ref2, _excluded3);

      (_labelPosition = labelPosition) !== null && _labelPosition !== void 0 ? _labelPosition : labelPosition = "start";
      var {
        inputId,
        labelId,
        useInputLabelInput,
        useInputLabelLabel
      } = useInputLabel({
        inputPrefix: "input-",
        labelPrefix: "input-label-"
      });
      var {
        useInputLabelInputProps
      } = useInputLabelInput();
      var {
        useInputLabelLabelProps
      } = useInputLabelLabel({
        tag: "label"
      });
      var isInInputGroup = F(InInputGroupContext);
      var labelJsx = v$1("label", _objectSpread2({}, useInputLabelLabelProps({
        class: isInInputGroup ? "input-group-text" : labelPosition != "floating" ? "form-label" : ""
      })), label);
      var inputJsx = v$1(Input, _objectSpread2({}, useInputLabelInputProps(props)));
      var inputWithLabel = v$1(d$1, null, labelPosition === "start" && labelJsx, inputJsx, (labelPosition === "end" || labelPosition == "floating") && labelJsx);
      if (labelPosition !== "floating") return inputWithLabel;else return v$1("div", {
        class: "form-floating"
      }, inputJsx);
    }

    var RandomWords = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.".split(" ");
    g(function (_a) {
        var depth = _a.depth;
        var _b = useState(false), active = _b[0], setActive = _b[1];
        var useFocusTrapProps = useFocusTrap({ trapActive: active }).useFocusTrapProps;
        //const { useRovingTabIndexChild, useRovingTabIndexProps } = useRovingTabIndex<HTMLUListElement, RovingTabIndexChildInfo>({ tabbableIndex, focusOnChange: false });
        var divProps = useFocusTrapProps({ ref: undefined, className: "focus-trap-demo" });
        if (depth == 2)
            return v$1("div", null);
        return (v$1("div", { className: "demo" },
            v$1("label", null,
                "Active: ",
                v$1("input", { type: "checkbox", checked: active, onInput: function (e) { e.preventDefault(); setActive(e.currentTarget.checked); } })),
            v$1("div", __assign({}, divProps),
                v$1(DemoUseFocusTrapChild, { active: active, setActive: setActive, depth: depth !== null && depth !== void 0 ? depth : 0 }))));
    });
    var DemoUseFocusTrapChild = g(function (_a) {
        var setActive = _a.setActive, active = _a.active; _a.depth;
        return (v$1(d$1, null,
            v$1("button", null, "Button 1"),
            v$1("button", null, "Button 2"),
            v$1("button", null, "Button 3"),
            v$1("label", null,
                "Active: ",
                v$1("input", { type: "checkbox", checked: active, onInput: function (e) { e.preventDefault(); setActive(e.currentTarget.checked); } }))));
    });
    var DemoDialog = g(function () {
        var onClose = (function () { return setOpen(false); });
        var _a = useState(false), open = _a[0], setOpen = _a[1];
        return (v$1("div", { class: "demo" },
            v$1(InputGroup, null,
                v$1(Checkbox, { checked: open, onInput: setOpen, label: "Open dialog" })),
            v$1(Dialog, { Transition: ClipFade, clipOriginBlock: 0, open: open, onClose: onClose, descriptive: false, title: "Dialog Title", footer: v$1("button", { onClick: onClose }, "Close") },
                v$1("p", { tabIndex: -1 }, "Dialog body content"),
                v$1("p", null, RandomWords.join(" ")),
                v$1("p", null, RandomWords.join(" ")),
                v$1("p", null, RandomWords.join(" ")),
                v$1("p", null, RandomWords.join(" ")),
                v$1("p", null, RandomWords.join(" ")))));
    });
    var DemoOffcanvas = g(function () {
        var onClose = (function () { return setOpen(false); });
        var _a = useState(false), open = _a[0], setOpen = _a[1];
        //open = true;
        return (v$1("div", { class: "demo" },
            v$1(Checkbox, { checked: open, onInput: setOpen, label: "Open offcanvas" }),
            v$1(Offcanvas, { Transition: Slide, slideTargetInline: -1, open: open, onClose: onClose, descriptive: false, title: "Dialog Title" },
                v$1("p", { tabIndex: -1 }, "Dialog body content"),
                v$1("p", null, RandomWords.join(" ")),
                v$1("p", null, RandomWords.join(" ")),
                v$1("p", null, RandomWords.join(" ")))));
    });
    var DemoMenu = g(function () {
        return (v$1("div", { class: "demo" },
            v$1(Menu, { Transition: ZoomFade, zoomOriginDynamic: 0, zoomMin: 0.85, tag: "ul", anchor: v$1(Button, null, "Open menu") },
                v$1(MenuItem, { index: 0 }, "AItem #1"),
                v$1(MenuItem, { index: 1 }, "BItem #2"),
                v$1(MenuItem, { index: 2 }, "CItem #3"),
                v$1(MenuItem, { index: 3 }, "DItem #4"))));
    });
    var DemoFocus = g(function () {
        var _a = useHasFocus(), focused = _a.focused, focusedInner = _a.focusedInner, useHasFocusProps = _a.useHasFocusProps;
        return (v$1("div", { class: "demo" },
            v$1("h2", null, "useHasFocus"),
            v$1("div", __assign({}, useHasFocusProps({ style: { border: "1px solid black" }, tabIndex: 0 })),
                "Outer ",
                v$1("div", { tabIndex: 0, style: { border: "1px solid black" } }, "Inner element")),
            v$1("div", null,
                v$1("ul", null,
                    v$1("li", null,
                        "Strictly focused: ",
                        focused.toString()),
                    v$1("li", null,
                        "Inner focused: ",
                        focusedInner.toString())))));
    });
    var DemoTabs = g(function () {
        var _a = useState(0), selectedIndex = _a[0], setSelectedIndex = _a[1];
        var _b = useState("activate"), selectionMode = _b[0];
        return (v$1("div", { class: "demo" },
            v$1("div", null,
                v$1(Tabs, { orientation: "block", onSelect: setSelectedIndex, selectedIndex: selectedIndex, selectionMode: selectionMode, tag: "ol" },
                    v$1("ol", null,
                        v$1(Tab, { index: 0 }, "Tab #1"),
                        v$1(Tab, { index: 1 }, "Tab #2"),
                        v$1(Tab, { index: 2 }, "Tab #3")),
                    v$1(TabPanel, { index: 0, Transition: ZoomFade, zoomMin: 0.8, zoomOriginBlock: 0 },
                        v$1("div", null, RandomWords.slice(0, Math.floor((1 / 3) * RandomWords.length)).join(" "))),
                    v$1(TabPanel, { index: 1, Transition: ZoomFade, zoomMin: 0.8, zoomOriginBlock: 0 },
                        v$1("div", null, RandomWords.slice(0, Math.floor((2 / 3) * RandomWords.length)).join(" "))),
                    v$1(TabPanel, { index: 2, Transition: ZoomFade, zoomMin: 0.8, zoomOriginBlock: 0 },
                        v$1("div", null, RandomWords.slice(0, Math.floor((3 / 3) * RandomWords.length)).join(" ")))))));
    });
    g(function () {
        var _a = useAriaTooltip({}), useTooltip = _a.useTooltip, useTooltipTrigger = _a.useTooltipTrigger, isOpen = _a.isOpen;
        var useTooltipProps = useTooltip().useTooltipProps;
        var useTooltipTriggerProps = useTooltipTrigger().useTooltipTriggerProps;
        return (v$1("div", { class: "demo" },
            v$1("p", null,
                "This is a paragraph with a ",
                v$1("span", __assign({}, useTooltipTriggerProps({})), "tooltip right here."),
                v$1("span", __assign({}, useTooltipProps({ hidden: !isOpen })), "This is the tooltip content."))));
    });
    function sleep(ms) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, ms); })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    var DemoButtons = g(function () {
        var _a = useState("outline"), buttonsFill = _a[0], setButtonsFill = _a[1];
        var _b = useState("md"), buttonsSize = _b[0];
        var pushToast = usePushToast();
        function onClick(str) {
            return function onClick() {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, sleep(5000)];
                            case 1:
                                _a.sent();
                                pushToast(v$1(Toast, null,
                                    "Button was clicked (",
                                    str,
                                    ")"));
                                return [2 /*return*/];
                        }
                    });
                });
            };
        }
        return (v$1("div", { class: "demo" },
            v$1(ButtonGroup, null,
                v$1(ButtonGroupChild, { index: 0, onClick: function () { return setButtonsFill("fill"); }, pressed: buttonsFill === "fill", colorVariant: "primary" }, "Fill"),
                v$1(ButtonGroupChild, { index: 1, onClick: function () { return setButtonsFill("outline"); }, pressed: buttonsFill === "outline", colorVariant: "primary" }, "Outline")),
            v$1(ProvideDefaultButtonFill, { value: buttonsFill },
                v$1(ProvideDefaultButtonSize, { value: buttonsSize },
                    v$1(ButtonGroup, null,
                        v$1(ButtonGroupChild, { onClick: onClick("primary"), index: 0, tag: "button", colorVariant: "primary" }, "Primary"),
                        v$1(ButtonGroupChild, { onClick: onClick("secondary"), index: 1, tag: "button", colorVariant: "secondary" }, "Secondary"),
                        v$1(ButtonGroupChild, { onClick: onClick("success"), index: 2, tag: "button", colorVariant: "success" }, "Success"),
                        v$1(ButtonGroupChild, { onClick: onClick("warning"), index: 3, tag: "button", colorVariant: "warning" }, "Warning")),
                    v$1(ButtonGroup, null,
                        v$1(ButtonGroupChild, { onClick: onClick("danger"), index: 0, tag: "button", colorVariant: "danger" }, "Danger"),
                        v$1(ButtonGroupChild, { onClick: onClick("info"), index: 1, tag: "button", colorVariant: "info" }, "Info"),
                        v$1(ButtonGroupChild, { onClick: onClick("light"), index: 2, tag: "button", colorVariant: "light" }, "Light"),
                        v$1(ButtonGroupChild, { onClick: onClick("dark"), index: 3, tag: "button", colorVariant: "dark" }, "Dark"),
                        v$1(ButtonGroupChild, { tag: "a", index: 4, href: "#", colorVariant: "link" }, "Link"))))));
    });
    var DemoAccordion = g(function () {
        var _a = useState(-1), expandedIndex = _a[0], setExpandedIndex = _a[1];
        return (v$1("div", { class: "demo" },
            v$1("div", null,
                v$1(Accordion, { expandedIndex: expandedIndex, setExpandedIndex: setExpandedIndex },
                    v$1(AccordionSection, { index: 0, header: "Accordion Item #1" },
                        v$1("div", null,
                            v$1("strong", null, "This is the 1st item's accordion body."),
                            " It is visible by default, You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the ",
                            v$1("code", null, "AccordionSection"),
                            ".")),
                    v$1(AccordionSection, { index: 1, header: "Accordion Item #2" },
                        v$1("div", null,
                            v$1("strong", null, "This is the 2nd item's accordion body."),
                            " It is hidden by default,  You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the ",
                            v$1("code", null, "AccordionSection"),
                            ".")),
                    v$1(AccordionSection, { index: 2, header: "Accordion Item #3" },
                        v$1("div", null,
                            v$1("strong", null, "This is the 3rd item's accordion body."),
                            " It is hidden by default,  You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the ",
                            v$1("code", null, "AccordionSection"),
                            "."))))));
    });
    var DemoList = g(function () {
        var _a = useState(0), index = _a[0], setIndex = _a[1];
        return (v$1("div", { class: "demo" },
            "Selected: ",
            index,
            v$1(ListSingle, { select: "single", onSelect: setIndex, selectedIndex: index, selectionMode: "activate", tag: "ul" },
                v$1(ListItemSingle, { index: 0 }, "Primary"),
                v$1(ListItemSingle, { index: 1 }, "Secondary"),
                v$1(ListItemSingle, { index: 2 }, "Success"),
                v$1(ListItemSingle, { index: 3 }, "Warning"),
                v$1(ListItemSingle, { index: 4 }, "Danger"),
                v$1(ListItemSingle, { index: 5 }, "Info"),
                v$1(ListItemSingle, { index: 6 }, "Light"),
                v$1(ListItemSingle, { index: 7 }, "Dark"),
                v$1(ListItemSingle, { index: 8 }, "Link"))));
    });
    var DemoInput = g(function () {
        var _a = useState(""), text = _a[0], setText = _a[1];
        var _b = useState(""), radioValue = _b[0], setRadioValue = _b[1];
        var onInput1 = A$1(function (value) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, sleep(5000)];
                    case 1:
                        _a.sent();
                        setText(value);
                        return [2 /*return*/];
                }
            });
        }); }, [setRadioValue]);
        var onInput2 = A$1(function (value) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, sleep(5000)];
                    case 1:
                        _a.sent();
                        setRadioValue(value);
                        return [2 /*return*/];
                }
            });
        }); }, [setRadioValue]);
        return (v$1("div", { class: "demo" },
            v$1(InputGroup, null,
                v$1(LabelledInput, { type: "text", label: "Test input", onInput: onInput1, value: text })),
            v$1(RadioGroup, { selectedValue: radioValue, name: "demo-radio", onInput: onInput2 },
                v$1(InputGroup, null,
                    v$1(Radio, { index: 0, value: "ARadio" })),
                v$1(InputGroup, null,
                    v$1(Radio, { index: 1, value: "BRadio" })),
                v$1(InputGroup, null,
                    v$1(Radio, { index: 2, value: "CRadio" })))));
    });
    var Component = function () {
        return v$1("div", { class: "flex", style: { flexWrap: "wrap" } },
            v$1(ToastsProvider, null,
                v$1(DemoAccordion, null),
                v$1(DemoDialog, null),
                v$1(DemoOffcanvas, null),
                v$1(DemoInput, null),
                v$1(DemoButtons, null),
                v$1(DemoList, null),
                v$1(DemoTabs, null),
                v$1(DemoMenu, null),
                v$1(DemoFocus, null),
                v$1(DemoUseTimeout, null),
                v$1(DemoUseInterval, null),
                v$1("input", null)));
    };
    requestAnimationFrame(function () {
        S$1(v$1(Component, null), document.getElementById("root"));
    });

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyJub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwibm9kZV9tb2R1bGVzL3ByZWFjdC9kaXN0L3ByZWFjdC5tanMiLCJub2RlX21vZHVsZXMvcHJlYWN0L2hvb2tzL2Rpc3QvaG9va3MubWpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLXN0YXRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLWFjdGl2ZS1lbGVtZW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLW1lcmdlZC1jaGlsZHJlbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLW1lcmdlZC1jbGFzc2VzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLW1lcmdlZC1yZWZzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLW1lcmdlZC1zdHlsZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy91c2UtbWVyZ2VkLXByb3BzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLXJlZi1lbGVtZW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLWhhcy1mb2N1cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1yYW5kb20taWQuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy91c2UtZWxlbWVudC1zaXplLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLWxvZ2ljYWwtZGlyZWN0aW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLXN0YWJsZS1nZXR0ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy91c2Utc3RhYmxlLWNhbGxiYWNrLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLWxheW91dC1lZmZlY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy91c2UtdGltZW91dC5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1hc3luYy1oYW5kbGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLWV2ZW50LWhhbmRsZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy91c2UtaW50ZXJ2YWwuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy91c2UtY2hpbGQtbWFuYWdlci5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1yb3ZpbmctdGFiaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy91c2Uta2V5Ym9hcmQtbmF2aWdhdGlvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1saXN0LW5hdmlnYXRpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvdGFiYmFibGUvZGlzdC9pbmRleC5lc20uanMiLCIuLi9ub2RlX21vZHVsZXMvYmxvY2tpbmctZWxlbWVudHMvZGlzdC9ibG9ja2luZy1lbGVtZW50cy5qcyIsIi4uL25vZGVfbW9kdWxlcy93aWNnLWluZXJ0L2Rpc3QvaW5lcnQuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXByb3AtaGVscGVycy91c2UtYmxvY2tpbmctZWxlbWVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1mb2N1cy10cmFwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1hcmlhLXdpZGdldHMvdXNlLXRvb2x0aXAuanMiLCJub2RlX21vZHVsZXMvcHJlYWN0L2NvbXBhdC9kaXN0L2NvbXBhdC5tanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXRyYW5zaXRpb24vZm9yd2FyZC1lbGVtZW50LXJlZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtdHJhbnNpdGlvbi90cmFuc2l0aW9uYWJsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtdHJhbnNpdGlvbi9jbGlwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC10cmFuc2l0aW9uL2ZhZGUuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXRyYW5zaXRpb24vY2xpcC1mYWRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC10cmFuc2l0aW9uL2NvbGxhcHNlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC10cmFuc2l0aW9uL2NvbGxhcHNlLWZhZGUuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXRyYW5zaXRpb24vc2xpZGUuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LXRyYW5zaXRpb24vc2xpZGUtZmFkZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtdHJhbnNpdGlvbi96b29tLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC10cmFuc2l0aW9uL3pvb20tZmFkZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtdHJhbnNpdGlvbi9zbGlkZS16b29tLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC10cmFuc2l0aW9uL3NsaWRlLXpvb20tZmFkZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtdHJhbnNpdGlvbi9mbGlwLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC10cmFuc2l0aW9uL3N3YXBwYWJsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtYXJpYS13aWRnZXRzL3Byb3BzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1hcmlhLXdpZGdldHMvdXNlLWJ1dHRvbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtYXJpYS13aWRnZXRzL3VzZS1hY2NvcmRpb24uanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LWFyaWEtd2lkZ2V0cy91c2UtbGFiZWwuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LWFyaWEtd2lkZ2V0cy91c2UtY2hlY2tib3guanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LWFyaWEtd2lkZ2V0cy91c2UtbW9kYWwuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LWFyaWEtd2lkZ2V0cy91c2UtZGlhbG9nLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1hcmlhLXdpZGdldHMvdXNlLWxpc3Rib3gtc2luZ2xlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3ByZWFjdC1hcmlhLXdpZGdldHMvdXNlLW1lbnUuanMiLCIuLi9ub2RlX21vZHVsZXMvcHJlYWN0LWFyaWEtd2lkZ2V0cy91c2UtdGFicy5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtYXJpYS13aWRnZXRzL3VzZS1yYWRpby1ncm91cC5qcyIsIi4uL25vZGVfbW9kdWxlcy9wcmVhY3QtYXJpYS13aWRnZXRzL3VzZS10b2FzdHMuanMiLCIuLi9wcm9wcy5qcyIsIi4uL2FjY29yZGlvbi9hY2NvcmRpb24uanMiLCIuLi9wcm9ncmVzcy9saW5lYXIuanMiLCIuLi9idXR0b24vZGVmYXVsdHMuanMiLCIuLi9idXR0b24vYnV0dG9uLmpzIiwiLi4vYnV0dG9uL3RvZ2dsZS1idXR0b24uanMiLCIuLi9idXR0b24vYnV0dG9uLWdyb3VwLmpzIiwiLi4vcG9ydGFsL2luZGV4LmpzIiwiLi4vZGlhbG9nL2RpYWxvZy5qcyIsIi4uL2xpc3QvbGlzdC1zaW5nbGUuanMiLCIuLi90YWJzL3RhYnMuanMiLCJkZW1vcy91c2UtaW50ZXJ2YWwudHN4IiwiZGVtb3MvdXNlLXRpbWVvdXQudHN4IiwiLi4vbWVudS9wb3BwZXItY29uZmlnLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9lbnVtcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldE5vZGVOYW1lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2FwcGx5U3R5bGVzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2NvbnRhaW5zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzVGFibGVFbGVtZW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0UGFyZW50Tm9kZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tYXRoLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy93aXRoaW4uanMiLCIuLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEZyZXNoU2lkZU9iamVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9leHBhbmRUb0hhc2hNYXAuanMiLCIuLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9hcnJvdy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0VmFyaWF0aW9uLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRPcHBvc2l0ZVBsYWNlbWVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGwuanMiLCIuLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Vmlld3BvcnRSZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRSZWN0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNTY3JvbGxQYXJlbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRTY3JvbGxQYXJlbnQuanMiLCIuLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9saXN0U2Nyb2xsUGFyZW50cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvcmVjdFRvQ2xpZW50UmVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvY29tcHV0ZU9mZnNldHMuanMiLCIuLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2ZsaXAuanMiLCIuLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9oaWRlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvb2Zmc2V0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0QWx0QXhpcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL3ByZXZlbnRPdmVyZmxvdy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldEhUTUxFbGVtZW50U2Nyb2xsLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Tm9kZVNjcm9sbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENvbXBvc2l0ZVJlY3QuanMiLCIuLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL29yZGVyTW9kaWZpZXJzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9kZWJvdW5jZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZm9ybWF0LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy92YWxpZGF0ZU1vZGlmaWVycy5qcyIsIi4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvdW5pcXVlQnkuanMiLCIuLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlQnlOYW1lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9jcmVhdGVQb3BwZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3BvcHBlci5qcyIsIi4uL21lbnUvcG9wcGVyLWFwaS5qcyIsIi4uL21lbnUvbWVudS5qcyIsIi4uL29mZmNhbnZhcy9vZmZjYW52YXMuanMiLCIuLi9pbnB1dC1ncm91cC9wcm9wcy5qcyIsIi4uL2lucHV0LWdyb3VwL2lucHV0LWNoZWNrLmpzIiwiLi4vaW5wdXQtZ3JvdXAvaW5wdXQtcmFkaW8uanMiLCIuLi90b2FzdC90b2FzdC5qcyIsIi4uL2lucHV0LWdyb3VwL2lucHV0LWdyb3VwLmpzIiwiLi4vaW5wdXQtZ3JvdXAvaW5wdXQtdGV4dC5qcyIsImluZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xyXG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XHJcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XHJcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59XHJcbiIsInZhciBuLGwsdSxpLHQsbyxyLGYsZT17fSxjPVtdLHM9L2FjaXR8ZXgoPzpzfGd8bnxwfCQpfHJwaHxncmlkfG93c3xtbmN8bnR3fGluZVtjaF18em9vfF5vcmR8aXRlcmEvaTtmdW5jdGlvbiBhKG4sbCl7Zm9yKHZhciB1IGluIGwpblt1XT1sW3VdO3JldHVybiBufWZ1bmN0aW9uIGgobil7dmFyIGw9bi5wYXJlbnROb2RlO2wmJmwucmVtb3ZlQ2hpbGQobil9ZnVuY3Rpb24gdihsLHUsaSl7dmFyIHQsbyxyLGY9e307Zm9yKHIgaW4gdSlcImtleVwiPT1yP3Q9dVtyXTpcInJlZlwiPT1yP289dVtyXTpmW3JdPXVbcl07aWYoYXJndW1lbnRzLmxlbmd0aD4yJiYoZi5jaGlsZHJlbj1hcmd1bWVudHMubGVuZ3RoPjM/bi5jYWxsKGFyZ3VtZW50cywyKTppKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBsJiZudWxsIT1sLmRlZmF1bHRQcm9wcylmb3IociBpbiBsLmRlZmF1bHRQcm9wcyl2b2lkIDA9PT1mW3JdJiYoZltyXT1sLmRlZmF1bHRQcm9wc1tyXSk7cmV0dXJuIHkobCxmLHQsbyxudWxsKX1mdW5jdGlvbiB5KG4saSx0LG8scil7dmFyIGY9e3R5cGU6bixwcm9wczppLGtleTp0LHJlZjpvLF9fazpudWxsLF9fOm51bGwsX19iOjAsX19lOm51bGwsX19kOnZvaWQgMCxfX2M6bnVsbCxfX2g6bnVsbCxjb25zdHJ1Y3Rvcjp2b2lkIDAsX192Om51bGw9PXI/Kyt1OnJ9O3JldHVybiBudWxsIT1sLnZub2RlJiZsLnZub2RlKGYpLGZ9ZnVuY3Rpb24gcCgpe3JldHVybntjdXJyZW50Om51bGx9fWZ1bmN0aW9uIGQobil7cmV0dXJuIG4uY2hpbGRyZW59ZnVuY3Rpb24gXyhuLGwpe3RoaXMucHJvcHM9bix0aGlzLmNvbnRleHQ9bH1mdW5jdGlvbiBrKG4sbCl7aWYobnVsbD09bClyZXR1cm4gbi5fXz9rKG4uX18sbi5fXy5fX2suaW5kZXhPZihuKSsxKTpudWxsO2Zvcih2YXIgdTtsPG4uX19rLmxlbmd0aDtsKyspaWYobnVsbCE9KHU9bi5fX2tbbF0pJiZudWxsIT11Ll9fZSlyZXR1cm4gdS5fX2U7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2Ygbi50eXBlP2sobik6bnVsbH1mdW5jdGlvbiBiKG4pe3ZhciBsLHU7aWYobnVsbCE9KG49bi5fXykmJm51bGwhPW4uX19jKXtmb3Iobi5fX2U9bi5fX2MuYmFzZT1udWxsLGw9MDtsPG4uX19rLmxlbmd0aDtsKyspaWYobnVsbCE9KHU9bi5fX2tbbF0pJiZudWxsIT11Ll9fZSl7bi5fX2U9bi5fX2MuYmFzZT11Ll9fZTticmVha31yZXR1cm4gYihuKX19ZnVuY3Rpb24gbShuKXsoIW4uX19kJiYobi5fX2Q9ITApJiZ0LnB1c2gobikmJiFnLl9fcisrfHxyIT09bC5kZWJvdW5jZVJlbmRlcmluZykmJigocj1sLmRlYm91bmNlUmVuZGVyaW5nKXx8bykoZyl9ZnVuY3Rpb24gZygpe2Zvcih2YXIgbjtnLl9fcj10Lmxlbmd0aDspbj10LnNvcnQoZnVuY3Rpb24obixsKXtyZXR1cm4gbi5fX3YuX19iLWwuX192Ll9fYn0pLHQ9W10sbi5zb21lKGZ1bmN0aW9uKG4pe3ZhciBsLHUsaSx0LG8scjtuLl9fZCYmKG89KHQ9KGw9bikuX192KS5fX2UsKHI9bC5fX1ApJiYodT1bXSwoaT1hKHt9LHQpKS5fX3Y9dC5fX3YrMSxqKHIsdCxpLGwuX19uLHZvaWQgMCE9PXIub3duZXJTVkdFbGVtZW50LG51bGwhPXQuX19oP1tvXTpudWxsLHUsbnVsbD09bz9rKHQpOm8sdC5fX2gpLHoodSx0KSx0Ll9fZSE9byYmYih0KSkpfSl9ZnVuY3Rpb24gdyhuLGwsdSxpLHQsbyxyLGYscyxhKXt2YXIgaCx2LHAsXyxiLG0sZyx3PWkmJmkuX19rfHxjLEE9dy5sZW5ndGg7Zm9yKHUuX19rPVtdLGg9MDtoPGwubGVuZ3RoO2grKylpZihudWxsIT0oXz11Ll9fa1toXT1udWxsPT0oXz1sW2hdKXx8XCJib29sZWFuXCI9PXR5cGVvZiBfP251bGw6XCJzdHJpbmdcIj09dHlwZW9mIF98fFwibnVtYmVyXCI9PXR5cGVvZiBffHxcImJpZ2ludFwiPT10eXBlb2YgXz95KG51bGwsXyxudWxsLG51bGwsXyk6QXJyYXkuaXNBcnJheShfKT95KGQse2NoaWxkcmVuOl99LG51bGwsbnVsbCxudWxsKTpfLl9fYj4wP3koXy50eXBlLF8ucHJvcHMsXy5rZXksbnVsbCxfLl9fdik6Xykpe2lmKF8uX189dSxfLl9fYj11Ll9fYisxLG51bGw9PT0ocD13W2hdKXx8cCYmXy5rZXk9PXAua2V5JiZfLnR5cGU9PT1wLnR5cGUpd1toXT12b2lkIDA7ZWxzZSBmb3Iodj0wO3Y8QTt2Kyspe2lmKChwPXdbdl0pJiZfLmtleT09cC5rZXkmJl8udHlwZT09PXAudHlwZSl7d1t2XT12b2lkIDA7YnJlYWt9cD1udWxsfWoobixfLHA9cHx8ZSx0LG8scixmLHMsYSksYj1fLl9fZSwodj1fLnJlZikmJnAucmVmIT12JiYoZ3x8KGc9W10pLHAucmVmJiZnLnB1c2gocC5yZWYsbnVsbCxfKSxnLnB1c2godixfLl9fY3x8YixfKSksbnVsbCE9Yj8obnVsbD09bSYmKG09YiksXCJmdW5jdGlvblwiPT10eXBlb2YgXy50eXBlJiZudWxsIT1fLl9fayYmXy5fX2s9PT1wLl9faz9fLl9fZD1zPXgoXyxzLG4pOnM9UChuLF8scCx3LGIscyksYXx8XCJvcHRpb25cIiE9PXUudHlwZT9cImZ1bmN0aW9uXCI9PXR5cGVvZiB1LnR5cGUmJih1Ll9fZD1zKTpuLnZhbHVlPVwiXCIpOnMmJnAuX19lPT1zJiZzLnBhcmVudE5vZGUhPW4mJihzPWsocCkpfWZvcih1Ll9fZT1tLGg9QTtoLS07KW51bGwhPXdbaF0mJihcImZ1bmN0aW9uXCI9PXR5cGVvZiB1LnR5cGUmJm51bGwhPXdbaF0uX19lJiZ3W2hdLl9fZT09dS5fX2QmJih1Ll9fZD1rKGksaCsxKSksTih3W2hdLHdbaF0pKTtpZihnKWZvcihoPTA7aDxnLmxlbmd0aDtoKyspTShnW2hdLGdbKytoXSxnWysraF0pfWZ1bmN0aW9uIHgobixsLHUpe3ZhciBpLHQ7Zm9yKGk9MDtpPG4uX19rLmxlbmd0aDtpKyspKHQ9bi5fX2tbaV0pJiYodC5fXz1uLGw9XCJmdW5jdGlvblwiPT10eXBlb2YgdC50eXBlP3godCxsLHUpOlAodSx0LHQsbi5fX2ssdC5fX2UsbCkpO3JldHVybiBsfWZ1bmN0aW9uIEEobixsKXtyZXR1cm4gbD1sfHxbXSxudWxsPT1ufHxcImJvb2xlYW5cIj09dHlwZW9mIG58fChBcnJheS5pc0FycmF5KG4pP24uc29tZShmdW5jdGlvbihuKXtBKG4sbCl9KTpsLnB1c2gobikpLGx9ZnVuY3Rpb24gUChuLGwsdSxpLHQsbyl7dmFyIHIsZixlO2lmKHZvaWQgMCE9PWwuX19kKXI9bC5fX2QsbC5fX2Q9dm9pZCAwO2Vsc2UgaWYobnVsbD09dXx8dCE9b3x8bnVsbD09dC5wYXJlbnROb2RlKW46aWYobnVsbD09b3x8by5wYXJlbnROb2RlIT09biluLmFwcGVuZENoaWxkKHQpLHI9bnVsbDtlbHNle2ZvcihmPW8sZT0wOyhmPWYubmV4dFNpYmxpbmcpJiZlPGkubGVuZ3RoO2UrPTIpaWYoZj09dClicmVhayBuO24uaW5zZXJ0QmVmb3JlKHQsbykscj1vfXJldHVybiB2b2lkIDAhPT1yP3I6dC5uZXh0U2libGluZ31mdW5jdGlvbiBDKG4sbCx1LGksdCl7dmFyIG87Zm9yKG8gaW4gdSlcImNoaWxkcmVuXCI9PT1vfHxcImtleVwiPT09b3x8byBpbiBsfHxIKG4sbyxudWxsLHVbb10saSk7Zm9yKG8gaW4gbCl0JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBsW29dfHxcImNoaWxkcmVuXCI9PT1vfHxcImtleVwiPT09b3x8XCJ2YWx1ZVwiPT09b3x8XCJjaGVja2VkXCI9PT1vfHx1W29dPT09bFtvXXx8SChuLG8sbFtvXSx1W29dLGkpfWZ1bmN0aW9uICQobixsLHUpe1wiLVwiPT09bFswXT9uLnNldFByb3BlcnR5KGwsdSk6bltsXT1udWxsPT11P1wiXCI6XCJudW1iZXJcIiE9dHlwZW9mIHV8fHMudGVzdChsKT91OnUrXCJweFwifWZ1bmN0aW9uIEgobixsLHUsaSx0KXt2YXIgbztuOmlmKFwic3R5bGVcIj09PWwpaWYoXCJzdHJpbmdcIj09dHlwZW9mIHUpbi5zdHlsZS5jc3NUZXh0PXU7ZWxzZXtpZihcInN0cmluZ1wiPT10eXBlb2YgaSYmKG4uc3R5bGUuY3NzVGV4dD1pPVwiXCIpLGkpZm9yKGwgaW4gaSl1JiZsIGluIHV8fCQobi5zdHlsZSxsLFwiXCIpO2lmKHUpZm9yKGwgaW4gdSlpJiZ1W2xdPT09aVtsXXx8JChuLnN0eWxlLGwsdVtsXSl9ZWxzZSBpZihcIm9cIj09PWxbMF0mJlwiblwiPT09bFsxXSlvPWwhPT0obD1sLnJlcGxhY2UoL0NhcHR1cmUkLyxcIlwiKSksbD1sLnRvTG93ZXJDYXNlKClpbiBuP2wudG9Mb3dlckNhc2UoKS5zbGljZSgyKTpsLnNsaWNlKDIpLG4ubHx8KG4ubD17fSksbi5sW2wrb109dSx1P2l8fG4uYWRkRXZlbnRMaXN0ZW5lcihsLG8/VDpJLG8pOm4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihsLG8/VDpJLG8pO2Vsc2UgaWYoXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCl7aWYodClsPWwucmVwbGFjZSgveGxpbmtbSDpoXS8sXCJoXCIpLnJlcGxhY2UoL3NOYW1lJC8sXCJzXCIpO2Vsc2UgaWYoXCJocmVmXCIhPT1sJiZcImxpc3RcIiE9PWwmJlwiZm9ybVwiIT09bCYmXCJ0YWJJbmRleFwiIT09bCYmXCJkb3dubG9hZFwiIT09bCYmbCBpbiBuKXRyeXtuW2xdPW51bGw9PXU/XCJcIjp1O2JyZWFrIG59Y2F0Y2gobil7fVwiZnVuY3Rpb25cIj09dHlwZW9mIHV8fChudWxsIT11JiYoITEhPT11fHxcImFcIj09PWxbMF0mJlwiclwiPT09bFsxXSk/bi5zZXRBdHRyaWJ1dGUobCx1KTpuLnJlbW92ZUF0dHJpYnV0ZShsKSl9fWZ1bmN0aW9uIEkobil7dGhpcy5sW24udHlwZSshMV0obC5ldmVudD9sLmV2ZW50KG4pOm4pfWZ1bmN0aW9uIFQobil7dGhpcy5sW24udHlwZSshMF0obC5ldmVudD9sLmV2ZW50KG4pOm4pfWZ1bmN0aW9uIGoobix1LGksdCxvLHIsZixlLGMpe3ZhciBzLGgsdix5LHAsayxiLG0sZyx4LEEsUD11LnR5cGU7aWYodm9pZCAwIT09dS5jb25zdHJ1Y3RvcilyZXR1cm4gbnVsbDtudWxsIT1pLl9faCYmKGM9aS5fX2gsZT11Ll9fZT1pLl9fZSx1Ll9faD1udWxsLHI9W2VdKSwocz1sLl9fYikmJnModSk7dHJ5e246aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUCl7aWYobT11LnByb3BzLGc9KHM9UC5jb250ZXh0VHlwZSkmJnRbcy5fX2NdLHg9cz9nP2cucHJvcHMudmFsdWU6cy5fXzp0LGkuX19jP2I9KGg9dS5fX2M9aS5fX2MpLl9fPWguX19FOihcInByb3RvdHlwZVwiaW4gUCYmUC5wcm90b3R5cGUucmVuZGVyP3UuX19jPWg9bmV3IFAobSx4KToodS5fX2M9aD1uZXcgXyhtLHgpLGguY29uc3RydWN0b3I9UCxoLnJlbmRlcj1PKSxnJiZnLnN1YihoKSxoLnByb3BzPW0saC5zdGF0ZXx8KGguc3RhdGU9e30pLGguY29udGV4dD14LGguX19uPXQsdj1oLl9fZD0hMCxoLl9faD1bXSksbnVsbD09aC5fX3MmJihoLl9fcz1oLnN0YXRlKSxudWxsIT1QLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmKGguX19zPT1oLnN0YXRlJiYoaC5fX3M9YSh7fSxoLl9fcykpLGEoaC5fX3MsUC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobSxoLl9fcykpKSx5PWgucHJvcHMscD1oLnN0YXRlLHYpbnVsbD09UC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJm51bGwhPWguY29tcG9uZW50V2lsbE1vdW50JiZoLmNvbXBvbmVudFdpbGxNb3VudCgpLG51bGwhPWguY29tcG9uZW50RGlkTW91bnQmJmguX19oLnB1c2goaC5jb21wb25lbnREaWRNb3VudCk7ZWxzZXtpZihudWxsPT1QLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmbSE9PXkmJm51bGwhPWguY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmaC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG0seCksIWguX19lJiZudWxsIT1oLnNob3VsZENvbXBvbmVudFVwZGF0ZSYmITE9PT1oLnNob3VsZENvbXBvbmVudFVwZGF0ZShtLGguX19zLHgpfHx1Ll9fdj09PWkuX192KXtoLnByb3BzPW0saC5zdGF0ZT1oLl9fcyx1Ll9fdiE9PWkuX192JiYoaC5fX2Q9ITEpLGguX192PXUsdS5fX2U9aS5fX2UsdS5fX2s9aS5fX2ssdS5fX2suZm9yRWFjaChmdW5jdGlvbihuKXtuJiYobi5fXz11KX0pLGguX19oLmxlbmd0aCYmZi5wdXNoKGgpO2JyZWFrIG59bnVsbCE9aC5jb21wb25lbnRXaWxsVXBkYXRlJiZoLmNvbXBvbmVudFdpbGxVcGRhdGUobSxoLl9fcyx4KSxudWxsIT1oLmNvbXBvbmVudERpZFVwZGF0ZSYmaC5fX2gucHVzaChmdW5jdGlvbigpe2guY29tcG9uZW50RGlkVXBkYXRlKHkscCxrKX0pfWguY29udGV4dD14LGgucHJvcHM9bSxoLnN0YXRlPWguX19zLChzPWwuX19yKSYmcyh1KSxoLl9fZD0hMSxoLl9fdj11LGguX19QPW4scz1oLnJlbmRlcihoLnByb3BzLGguc3RhdGUsaC5jb250ZXh0KSxoLnN0YXRlPWguX19zLG51bGwhPWguZ2V0Q2hpbGRDb250ZXh0JiYodD1hKGEoe30sdCksaC5nZXRDaGlsZENvbnRleHQoKSkpLHZ8fG51bGw9PWguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fChrPWguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoeSxwKSksQT1udWxsIT1zJiZzLnR5cGU9PT1kJiZudWxsPT1zLmtleT9zLnByb3BzLmNoaWxkcmVuOnMsdyhuLEFycmF5LmlzQXJyYXkoQSk/QTpbQV0sdSxpLHQsbyxyLGYsZSxjKSxoLmJhc2U9dS5fX2UsdS5fX2g9bnVsbCxoLl9faC5sZW5ndGgmJmYucHVzaChoKSxiJiYoaC5fX0U9aC5fXz1udWxsKSxoLl9fZT0hMX1lbHNlIG51bGw9PXImJnUuX192PT09aS5fX3Y/KHUuX19rPWkuX19rLHUuX19lPWkuX19lKTp1Ll9fZT1MKGkuX19lLHUsaSx0LG8scixmLGMpOyhzPWwuZGlmZmVkKSYmcyh1KX1jYXRjaChuKXt1Ll9fdj1udWxsLChjfHxudWxsIT1yKSYmKHUuX19lPWUsdS5fX2g9ISFjLHJbci5pbmRleE9mKGUpXT1udWxsKSxsLl9fZShuLHUsaSl9fWZ1bmN0aW9uIHoobix1KXtsLl9fYyYmbC5fX2ModSxuKSxuLnNvbWUoZnVuY3Rpb24odSl7dHJ5e249dS5fX2gsdS5fX2g9W10sbi5zb21lKGZ1bmN0aW9uKG4pe24uY2FsbCh1KX0pfWNhdGNoKG4pe2wuX19lKG4sdS5fX3YpfX0pfWZ1bmN0aW9uIEwobCx1LGksdCxvLHIsZixjKXt2YXIgcyxhLHYseT1pLnByb3BzLHA9dS5wcm9wcyxkPXUudHlwZSxfPTA7aWYoXCJzdmdcIj09PWQmJihvPSEwKSxudWxsIT1yKWZvcig7XzxyLmxlbmd0aDtfKyspaWYoKHM9cltfXSkmJihzPT09bHx8KGQ/cy5sb2NhbE5hbWU9PWQ6Mz09cy5ub2RlVHlwZSkpKXtsPXMscltfXT1udWxsO2JyZWFrfWlmKG51bGw9PWwpe2lmKG51bGw9PT1kKXJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShwKTtsPW8/ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixkKTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KGQscC5pcyYmcCkscj1udWxsLGM9ITF9aWYobnVsbD09PWQpeT09PXB8fGMmJmwuZGF0YT09PXB8fChsLmRhdGE9cCk7ZWxzZXtpZihyPXImJm4uY2FsbChsLmNoaWxkTm9kZXMpLGE9KHk9aS5wcm9wc3x8ZSkuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsdj1wLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLCFjKXtpZihudWxsIT1yKWZvcih5PXt9LF89MDtfPGwuYXR0cmlidXRlcy5sZW5ndGg7XysrKXlbbC5hdHRyaWJ1dGVzW19dLm5hbWVdPWwuYXR0cmlidXRlc1tfXS52YWx1ZTsodnx8YSkmJih2JiYoYSYmdi5fX2h0bWw9PWEuX19odG1sfHx2Ll9faHRtbD09PWwuaW5uZXJIVE1MKXx8KGwuaW5uZXJIVE1MPXYmJnYuX19odG1sfHxcIlwiKSl9aWYoQyhsLHAseSxvLGMpLHYpdS5fX2s9W107ZWxzZSBpZihfPXUucHJvcHMuY2hpbGRyZW4sdyhsLEFycmF5LmlzQXJyYXkoXyk/XzpbX10sdSxpLHQsbyYmXCJmb3JlaWduT2JqZWN0XCIhPT1kLHIsZixyP3JbMF06aS5fX2smJmsoaSwwKSxjKSxudWxsIT1yKWZvcihfPXIubGVuZ3RoO18tLTspbnVsbCE9cltfXSYmaChyW19dKTtjfHwoXCJ2YWx1ZVwiaW4gcCYmdm9pZCAwIT09KF89cC52YWx1ZSkmJihfIT09bC52YWx1ZXx8XCJwcm9ncmVzc1wiPT09ZCYmIV8pJiZIKGwsXCJ2YWx1ZVwiLF8seS52YWx1ZSwhMSksXCJjaGVja2VkXCJpbiBwJiZ2b2lkIDAhPT0oXz1wLmNoZWNrZWQpJiZfIT09bC5jaGVja2VkJiZIKGwsXCJjaGVja2VkXCIsXyx5LmNoZWNrZWQsITEpKX1yZXR1cm4gbH1mdW5jdGlvbiBNKG4sdSxpKXt0cnl7XCJmdW5jdGlvblwiPT10eXBlb2Ygbj9uKHUpOm4uY3VycmVudD11fWNhdGNoKG4pe2wuX19lKG4saSl9fWZ1bmN0aW9uIE4obix1LGkpe3ZhciB0LG87aWYobC51bm1vdW50JiZsLnVubW91bnQobiksKHQ9bi5yZWYpJiYodC5jdXJyZW50JiZ0LmN1cnJlbnQhPT1uLl9fZXx8TSh0LG51bGwsdSkpLG51bGwhPSh0PW4uX19jKSl7aWYodC5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7dC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKG4pe2wuX19lKG4sdSl9dC5iYXNlPXQuX19QPW51bGx9aWYodD1uLl9faylmb3Iobz0wO288dC5sZW5ndGg7bysrKXRbb10mJk4odFtvXSx1LFwiZnVuY3Rpb25cIiE9dHlwZW9mIG4udHlwZSk7aXx8bnVsbD09bi5fX2V8fGgobi5fX2UpLG4uX19lPW4uX19kPXZvaWQgMH1mdW5jdGlvbiBPKG4sbCx1KXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcihuLHUpfWZ1bmN0aW9uIFModSxpLHQpe3ZhciBvLHIsZjtsLl9fJiZsLl9fKHUsaSkscj0obz1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0KT9udWxsOnQmJnQuX19rfHxpLl9fayxmPVtdLGooaSx1PSghbyYmdHx8aSkuX19rPXYoZCxudWxsLFt1XSkscnx8ZSxlLHZvaWQgMCE9PWkub3duZXJTVkdFbGVtZW50LCFvJiZ0P1t0XTpyP251bGw6aS5maXJzdENoaWxkP24uY2FsbChpLmNoaWxkTm9kZXMpOm51bGwsZiwhbyYmdD90OnI/ci5fX2U6aS5maXJzdENoaWxkLG8pLHooZix1KX1mdW5jdGlvbiBxKG4sbCl7UyhuLGwscSl9ZnVuY3Rpb24gQihsLHUsaSl7dmFyIHQsbyxyLGY9YSh7fSxsLnByb3BzKTtmb3IociBpbiB1KVwia2V5XCI9PXI/dD11W3JdOlwicmVmXCI9PXI/bz11W3JdOmZbcl09dVtyXTtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD4yJiYoZi5jaGlsZHJlbj1hcmd1bWVudHMubGVuZ3RoPjM/bi5jYWxsKGFyZ3VtZW50cywyKTppKSx5KGwudHlwZSxmLHR8fGwua2V5LG98fGwucmVmLG51bGwpfWZ1bmN0aW9uIEQobixsKXt2YXIgdT17X19jOmw9XCJfX2NDXCIrZisrLF9fOm4sQ29uc3VtZXI6ZnVuY3Rpb24obixsKXtyZXR1cm4gbi5jaGlsZHJlbihsKX0sUHJvdmlkZXI6ZnVuY3Rpb24obil7dmFyIHUsaTtyZXR1cm4gdGhpcy5nZXRDaGlsZENvbnRleHR8fCh1PVtdLChpPXt9KVtsXT10aGlzLHRoaXMuZ2V0Q2hpbGRDb250ZXh0PWZ1bmN0aW9uKCl7cmV0dXJuIGl9LHRoaXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlPWZ1bmN0aW9uKG4pe3RoaXMucHJvcHMudmFsdWUhPT1uLnZhbHVlJiZ1LnNvbWUobSl9LHRoaXMuc3ViPWZ1bmN0aW9uKG4pe3UucHVzaChuKTt2YXIgbD1uLmNvbXBvbmVudFdpbGxVbm1vdW50O24uY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24oKXt1LnNwbGljZSh1LmluZGV4T2YobiksMSksbCYmbC5jYWxsKG4pfX0pLG4uY2hpbGRyZW59fTtyZXR1cm4gdS5Qcm92aWRlci5fXz11LkNvbnN1bWVyLmNvbnRleHRUeXBlPXV9bj1jLnNsaWNlLGw9e19fZTpmdW5jdGlvbihuLGwpe2Zvcih2YXIgdSxpLHQ7bD1sLl9fOylpZigodT1sLl9fYykmJiF1Ll9fKXRyeXtpZigoaT11LmNvbnN0cnVjdG9yKSYmbnVsbCE9aS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3ImJih1LnNldFN0YXRlKGkuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKG4pKSx0PXUuX19kKSxudWxsIT11LmNvbXBvbmVudERpZENhdGNoJiYodS5jb21wb25lbnREaWRDYXRjaChuKSx0PXUuX19kKSx0KXJldHVybiB1Ll9fRT11fWNhdGNoKGwpe249bH10aHJvdyBufX0sdT0wLGk9ZnVuY3Rpb24obil7cmV0dXJuIG51bGwhPW4mJnZvaWQgMD09PW4uY29uc3RydWN0b3J9LF8ucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKG4sbCl7dmFyIHU7dT1udWxsIT10aGlzLl9fcyYmdGhpcy5fX3MhPT10aGlzLnN0YXRlP3RoaXMuX19zOnRoaXMuX19zPWEoe30sdGhpcy5zdGF0ZSksXCJmdW5jdGlvblwiPT10eXBlb2YgbiYmKG49bihhKHt9LHUpLHRoaXMucHJvcHMpKSxuJiZhKHUsbiksbnVsbCE9biYmdGhpcy5fX3YmJihsJiZ0aGlzLl9faC5wdXNoKGwpLG0odGhpcykpfSxfLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihuKXt0aGlzLl9fdiYmKHRoaXMuX19lPSEwLG4mJnRoaXMuX19oLnB1c2gobiksbSh0aGlzKSl9LF8ucHJvdG90eXBlLnJlbmRlcj1kLHQ9W10sbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm9taXNlP1Byb21pc2UucHJvdG90eXBlLnRoZW4uYmluZChQcm9taXNlLnJlc29sdmUoKSk6c2V0VGltZW91dCxnLl9fcj0wLGY9MDtleHBvcnR7UyBhcyByZW5kZXIscSBhcyBoeWRyYXRlLHYgYXMgY3JlYXRlRWxlbWVudCx2IGFzIGgsZCBhcyBGcmFnbWVudCxwIGFzIGNyZWF0ZVJlZixpIGFzIGlzVmFsaWRFbGVtZW50LF8gYXMgQ29tcG9uZW50LEIgYXMgY2xvbmVFbGVtZW50LEQgYXMgY3JlYXRlQ29udGV4dCxBIGFzIHRvQ2hpbGRBcnJheSxsIGFzIG9wdGlvbnN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJlYWN0Lm1vZHVsZS5qcy5tYXBcbiIsImltcG9ydHtvcHRpb25zIGFzIG59ZnJvbVwicHJlYWN0XCI7dmFyIHQsdSxyLG89MCxpPVtdLGM9bi5fX2IsZj1uLl9fcixlPW4uZGlmZmVkLGE9bi5fX2Msdj1uLnVubW91bnQ7ZnVuY3Rpb24gbSh0LHIpe24uX19oJiZuLl9faCh1LHQsb3x8ciksbz0wO3ZhciBpPXUuX19IfHwodS5fX0g9e19fOltdLF9faDpbXX0pO3JldHVybiB0Pj1pLl9fLmxlbmd0aCYmaS5fXy5wdXNoKHt9KSxpLl9fW3RdfWZ1bmN0aW9uIGwobil7cmV0dXJuIG89MSxwKHcsbil9ZnVuY3Rpb24gcChuLHIsbyl7dmFyIGk9bSh0KyssMik7cmV0dXJuIGkudD1uLGkuX19jfHwoaS5fXz1bbz9vKHIpOncodm9pZCAwLHIpLGZ1bmN0aW9uKG4pe3ZhciB0PWkudChpLl9fWzBdLG4pO2kuX19bMF0hPT10JiYoaS5fXz1bdCxpLl9fWzFdXSxpLl9fYy5zZXRTdGF0ZSh7fSkpfV0saS5fX2M9dSksaS5fX31mdW5jdGlvbiB5KHIsbyl7dmFyIGk9bSh0KyssMyk7IW4uX19zJiZrKGkuX19ILG8pJiYoaS5fXz1yLGkuX19IPW8sdS5fX0guX19oLnB1c2goaSkpfWZ1bmN0aW9uIGgocixvKXt2YXIgaT1tKHQrKyw0KTshbi5fX3MmJmsoaS5fX0gsbykmJihpLl9fPXIsaS5fX0g9byx1Ll9faC5wdXNoKGkpKX1mdW5jdGlvbiBzKG4pe3JldHVybiBvPTUsZChmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om59fSxbXSl9ZnVuY3Rpb24gXyhuLHQsdSl7bz02LGgoZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBuP24odCgpKTpuJiYobi5jdXJyZW50PXQoKSl9LG51bGw9PXU/dTp1LmNvbmNhdChuKSl9ZnVuY3Rpb24gZChuLHUpe3ZhciByPW0odCsrLDcpO3JldHVybiBrKHIuX19ILHUpJiYoci5fXz1uKCksci5fX0g9dSxyLl9faD1uKSxyLl9ffWZ1bmN0aW9uIEEobix0KXtyZXR1cm4gbz04LGQoZnVuY3Rpb24oKXtyZXR1cm4gbn0sdCl9ZnVuY3Rpb24gRihuKXt2YXIgcj11LmNvbnRleHRbbi5fX2NdLG89bSh0KyssOSk7cmV0dXJuIG8uYz1uLHI/KG51bGw9PW8uX18mJihvLl9fPSEwLHIuc3ViKHUpKSxyLnByb3BzLnZhbHVlKTpuLl9ffWZ1bmN0aW9uIFQodCx1KXtuLnVzZURlYnVnVmFsdWUmJm4udXNlRGVidWdWYWx1ZSh1P3UodCk6dCl9ZnVuY3Rpb24gcShuKXt2YXIgcj1tKHQrKywxMCksbz1sKCk7cmV0dXJuIHIuX189bix1LmNvbXBvbmVudERpZENhdGNofHwodS5jb21wb25lbnREaWRDYXRjaD1mdW5jdGlvbihuKXtyLl9fJiZyLl9fKG4pLG9bMV0obil9KSxbb1swXSxmdW5jdGlvbigpe29bMV0odm9pZCAwKX1dfWZ1bmN0aW9uIHgoKXtpLmZvckVhY2goZnVuY3Rpb24odCl7aWYodC5fX1ApdHJ5e3QuX19ILl9faC5mb3JFYWNoKGcpLHQuX19ILl9faC5mb3JFYWNoKGopLHQuX19ILl9faD1bXX1jYXRjaCh1KXt0Ll9fSC5fX2g9W10sbi5fX2UodSx0Ll9fdil9fSksaT1bXX1uLl9fYj1mdW5jdGlvbihuKXt1PW51bGwsYyYmYyhuKX0sbi5fX3I9ZnVuY3Rpb24obil7ZiYmZihuKSx0PTA7dmFyIHI9KHU9bi5fX2MpLl9fSDtyJiYoci5fX2guZm9yRWFjaChnKSxyLl9faC5mb3JFYWNoKGopLHIuX19oPVtdKX0sbi5kaWZmZWQ9ZnVuY3Rpb24odCl7ZSYmZSh0KTt2YXIgbz10Ll9fYztvJiZvLl9fSCYmby5fX0guX19oLmxlbmd0aCYmKDEhPT1pLnB1c2gobykmJnI9PT1uLnJlcXVlc3RBbmltYXRpb25GcmFtZXx8KChyPW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKXx8ZnVuY3Rpb24obil7dmFyIHQsdT1mdW5jdGlvbigpe2NsZWFyVGltZW91dChyKSxiJiZjYW5jZWxBbmltYXRpb25GcmFtZSh0KSxzZXRUaW1lb3V0KG4pfSxyPXNldFRpbWVvdXQodSwxMDApO2ImJih0PXJlcXVlc3RBbmltYXRpb25GcmFtZSh1KSl9KSh4KSksdT12b2lkIDB9LG4uX19jPWZ1bmN0aW9uKHQsdSl7dS5zb21lKGZ1bmN0aW9uKHQpe3RyeXt0Ll9faC5mb3JFYWNoKGcpLHQuX19oPXQuX19oLmZpbHRlcihmdW5jdGlvbihuKXtyZXR1cm4hbi5fX3x8aihuKX0pfWNhdGNoKHIpe3Uuc29tZShmdW5jdGlvbihuKXtuLl9faCYmKG4uX19oPVtdKX0pLHU9W10sbi5fX2Uocix0Ll9fdil9fSksYSYmYSh0LHUpfSxuLnVubW91bnQ9ZnVuY3Rpb24odCl7diYmdih0KTt2YXIgdT10Ll9fYztpZih1JiZ1Ll9fSCl0cnl7dS5fX0guX18uZm9yRWFjaChnKX1jYXRjaCh0KXtuLl9fZSh0LHUuX192KX19O3ZhciBiPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZTtmdW5jdGlvbiBnKG4pe3ZhciB0PXU7XCJmdW5jdGlvblwiPT10eXBlb2Ygbi5fX2MmJm4uX19jKCksdT10fWZ1bmN0aW9uIGoobil7dmFyIHQ9dTtuLl9fYz1uLl9fKCksdT10fWZ1bmN0aW9uIGsobix0KXtyZXR1cm4hbnx8bi5sZW5ndGghPT10Lmxlbmd0aHx8dC5zb21lKGZ1bmN0aW9uKHQsdSl7cmV0dXJuIHQhPT1uW3VdfSl9ZnVuY3Rpb24gdyhuLHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dChuKTp0fWV4cG9ydHtsIGFzIHVzZVN0YXRlLHAgYXMgdXNlUmVkdWNlcix5IGFzIHVzZUVmZmVjdCxoIGFzIHVzZUxheW91dEVmZmVjdCxzIGFzIHVzZVJlZixfIGFzIHVzZUltcGVyYXRpdmVIYW5kbGUsZCBhcyB1c2VNZW1vLEEgYXMgdXNlQ2FsbGJhY2ssRiBhcyB1c2VDb250ZXh0LFQgYXMgdXNlRGVidWdWYWx1ZSxxIGFzIHVzZUVycm9yQm91bmRhcnl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG9va3MubW9kdWxlLmpzLm1hcFxuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlU3RhdGUgYXMgdXNlU3RhdGVQIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG4vKipcclxuICogU2xpZ2h0bHkgZW5oYW5jZWQgdmVyc2lvbiBvZiBgdXNlU3RhdGVgIHRoYXQgaW5jbHVkZXMgYSBnZXR0ZXIgdGhhdCByZW1haW5zIGNvbnN0YW50XHJcbiAqIChpLmUuIHlvdSBjYW4gdXNlIGl0IGluIGB1c2VFZmZlY3RgIGFuZCBmcmllbmRzIHdpdGhvdXQgaXQgYmVpbmcgYSBkZXBlbmRlbmN5KS5cclxuICpcclxuICogQHBhcmFtIGluaXRpYWxTdGF0ZVxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZVN0YXRlKGluaXRpYWxTdGF0ZSkge1xyXG4gICAgLy8gV2Uga2VlcCBib3RoXHJcbiAgICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlUChpbml0aWFsU3RhdGUpO1xyXG4gICAgY29uc3QgcmVmID0gdXNlUmVmKHN0YXRlKTtcclxuICAgIC8vIEhpamFjayB0aGUgbm9ybWFsIHNldHRlciBmdW5jdGlvbiBcclxuICAgIC8vIHRvIGFsc28gc2V0IG91ciByZWYgdG8gdGhlIG5ldyB2YWx1ZVxyXG4gICAgY29uc3Qgc2V0ID0gdXNlQ2FsbGJhY2soKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIGxldCBjYWxsYmFjayA9IHZhbHVlO1xyXG4gICAgICAgICAgICBzZXRTdGF0ZShwcmV2VmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5leHRWYWx1ZSA9IGNhbGxiYWNrKHByZXZWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZWYuY3VycmVudCA9IG5leHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXh0VmFsdWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgc2V0U3RhdGUodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIFtdKTtcclxuICAgIGNvbnN0IGdldCA9ICgpID0+IHsgcmV0dXJuIHJlZi5jdXJyZW50OyB9O1xyXG4gICAgY29uc29sZS5hc3NlcnQocmVmLmN1cnJlbnQgPT09IHN0YXRlKTtcclxuICAgIHJldHVybiBbc3RhdGUsIHNldCwgZ2V0XTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2Utc3RhdGUuanMubWFwIiwiaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCIuL3VzZS1zdGF0ZVwiO1xyXG4vKipcclxuICpcclxuICogVGhlcmUgYXJlIHNldmVyYWwgZGlmZmVyZW50IHdheXMgdGhhdCBhIGZvY3VzIGV2ZW50IGNhbiBoYXBwZW4uICBBc3N1bWVcclxuICogdGhlIGZvbGxvd2luZyBzdGVwcyBoYXBwZW4gaW4gb3JkZXI6XHJcbiAqXHJcbiAqIDEuIFRoZSBwYWdlIGxvYWRzLlxyXG4gKiAgICAqIE5vdGhpbmcgaXMgZm9jdXNlZCwgYnV0IGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBgYm9keWAuXHJcbiAqICAgICogTm8gZm9jdXMgZXZlbnRzIGFyZSBmaXJlZC5cclxuICogMi4gVGhlIHdpbmRvdyBpcyBmb2N1c2VkLCBhbiB1bmZvY3VzYWJsZSBlbGVtZW50IGlzIGNsaWNrZWQsIHRleHQgaXMgc2VsZWN0ZWQsIGV0Yy5cclxuICogICAgKiBUaGUgYGFjdGl2ZUVsZW1lbnRgIHJlbWFpbnMgYXMgYGJvZHlgLlxyXG4gKiAgICAqIEEgYGZvY3VzYC9gZm9jdXNpbmAgZXZlbnQgKk1JR0hUKiBiZSBmaXJlZCBmb3IgYGJvZHlgLiBEZXBlbmRpbmcgb25cclxuICogICAgICB0aGUgYnJvd3NlciwgdGhpcyBkZXBlbmRzIG9uIHdoZXRoZXIgdGhlIGhhbmRsZXIgd2FzIGF0dGFjaGVkIHRvIGB3aW5kb3dgIG9yIGBkb2N1bWVudGAuXHJcbiAqICAgICAgUHJvYmFibHkganVzdCBiZXN0IHRvIG5vdCByZWx5IG9uIGl0LCBvciBsaXN0ZW4gdG8gYHdpbmRvd2AgZm9jdXMgZXZlbnRzIGRpcmVjdGx5LlxyXG4gKiAzLiBBIGZvY3VzYWJsZSBlbGVtZW50IGlzIGNsaWNrZWQsIGV0Yy5cclxuICogICAgKiBUaGUgYGFjdGl2ZUVsZW1lbnRgIGlzIHNldCB0byB0aGUgbmV3IGVsZW1lbnQgYmVmb3JlIGFueSBldmVudCBldmVuIGZpcmVzLlxyXG4gKiAgICAqIGBmb2N1c291dGAgYW5kIGBibHVyYCBhcmUgKm5vdCogZmlyZWQgb24gYGJvZHlgLlxyXG4gKiAgICAqIGBmb2N1c2AgYW5kIGBmb2N1c2luYCBhcmUgZmlyZWQgb24gdGhlIG5ldyBlbGVtZW50LiBgcmVsYXRlZFRhcmdldGAgaXMgbnVsbC5cclxuICogNC4gQSBmb2N1c2FibGUgZWxlbWVudCBpcyBjbGlja2VkLCBldGMuXHJcbiAqICAgICogKipUaGUgYGFjdGl2ZUVsZW1lbnRgIGlzIHNldCB0byB0aGUgYGJvZHlgKiogYmVmb3JlIGFueSBldmVudCBldmVuIGZpcmVzLlxyXG4gKiAgICAqIGBibHVyYCBhbmQgYGZvY3Vzb3V0YCBhcmUgZmlyZWQgb24gdGhlIG9sZCBlbGVtZW50LiBgcmVsYXRlZFRhcmdldGAgaXMgdGhlIG5ldyBlbGVtZW50LlxyXG4gKiAgICAqIFRoZSBgYWN0aXZlRWxlbWVudGAgaXMgbm93IHNldCB0byB0aGUgbmV3IGVsZW1lbnQuXHJcbiAqICAgICogYGZvY3VzaW5gIGlzIGZpcmVkIG9uIHRoZSBuZXcgZWxlbWVudC4gYHJlbGF0ZWRUYXJnZXRgIGlzIHRoZSBvbGQgZWxlbWVudC5cclxuICogNS4gQW4gdW5mb2N1c2FibGUgZWxlbWVudCBpcyBjbGlja2VkLCB0ZXh0IGlzIHNlbGVjdGVkLCBldGMuXHJcbiAqICAgICogVGhlIGBhY3RpdmVFbGVtZW50YCBpcyBzZXQgdG8gYGJvZHlgLlxyXG4gKiAgICAqIGBibHVyYCBhbmQgYGZvY3Vzb3V0YCBhcmUgZmlyZWQgb24gdGhlIG9sZCBlbGVtZW50LiBgcmVsYXRlZFRhcmdldGAgaXMgbnVsbC5cclxuICogICAgKiBgZm9jdXNpbmAgaXMgKm5vdCogZmlyZWQgb24gYGJvZHlgLlxyXG4gKlxyXG4gKlxyXG4gKiBJbiBzdW1tYXJ5OlxyXG4gKiAxLiBGb2N1cyBldmVudHMgKmRvKiBub3RpZnkgdXMgb2YgYWxsIGNoYW5nZXMgaW4gZm9jdXMsIGJ1dCB0aGVyZSBpcyBubyBvbmUgc2luZ2xlIGNvbXByZWhlbnNpdmUgZXZlbnQgdGhhdCBwcm92aWRlcyB1cyB3aXRoIGFsbCBhdmFpbGFibGUgaW5mb3JtYXRpb24uXHJcbiAqIDIuIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCAqaXMgbm90KiBhbHdheXMgdGhlIHNhbWUgYXMgd2hhdCdzIGJlaW5nIHJlZmVyZW5jZWQgYnkgYSBmb2N1cyBldmVudC4gSW4gcGFydGljdWxhciwgaXQgbWF5IGJlY29tZSBgYm9keWAgYXQgYW55IGFyYml0cmFyeSB0aW1lLlxyXG4gKiAzLiBBIGBibHVyYCB3aXRob3V0IGEgYGZvY3VzYCBjYW4gYW5kIHdpbGwgb2NjdXIuIFRoaXMgbWVhbnMgaXQgaXMgbm90IHBvc3NpYmxlIHRvIHNvbGVseSB1c2UgYGZvY3VzYCB0byBkZXRlY3QgYWxsIGNoYW5nZXMuXHJcbiAqIDQuIEEgYGJsdXJgIGV2ZW50IHdob3NlIGByZWxhdGVkVGFyZ2V0YCBpcyBudWxsIGluZGljYXRlcyB0aGF0IHRoZXJlIHdpbGwgYmUgbm8gZm9sbG93aW5nIGBmb2N1c2AgZXZlbnQuXHJcbiAqXHJcbiAqXHJcbiAqIEBwYXJhbSBjYWxsYmFja1xyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxubGV0IGN1cnJlbnRseUZvY3VzZWRFbGVtZW50ID0gbnVsbDtcclxubGV0IGxhc3RGb2N1c2VkRWxlbWVudCA9IG51bGw7XHJcbmZ1bmN0aW9uIGdldExhc3RGb2N1c2VkRWxlbWVudCgpIHtcclxuICAgIHJldHVybiBsYXN0Rm9jdXNlZEVsZW1lbnQ7XHJcbn1cclxuZnVuY3Rpb24gZ2V0Q3VycmVudGx5Rm9jdXNlZEVsZW1lbnQoKSB7XHJcbiAgICByZXR1cm4gY3VycmVudGx5Rm9jdXNlZEVsZW1lbnQ7XHJcbn1cclxuY29uc3QgdXBkYXRlcnMgPSBuZXcgU2V0KCk7XHJcbmZ1bmN0aW9uIGZvY3Vzb3V0KGUpIHtcclxuICAgIGlmIChlLnJlbGF0ZWRUYXJnZXQgPT0gbnVsbCkge1xyXG4gICAgICAgIGN1cnJlbnRseUZvY3VzZWRFbGVtZW50ID0gbnVsbDtcclxuICAgICAgICBmb3IgKGxldCBmIG9mIHVwZGF0ZXJzKSB7XHJcbiAgICAgICAgICAgIGYoeyBjdXJyZW50OiBjdXJyZW50bHlGb2N1c2VkRWxlbWVudCwgbGFzdDogbGFzdEZvY3VzZWRFbGVtZW50LCB3aW5kb3dGb2N1c2VkIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIEp1c3Qgd2FpdCBmb3IgdGhlIGZvY3VzaW4gZXZlbnQuXHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZm9jdXNpbihlKSB7XHJcbiAgICBjdXJyZW50bHlGb2N1c2VkRWxlbWVudCA9IGxhc3RGb2N1c2VkRWxlbWVudCA9IGUudGFyZ2V0O1xyXG4gICAgZm9yIChsZXQgZiBvZiB1cGRhdGVycykge1xyXG4gICAgICAgIGYoeyBjdXJyZW50OiBjdXJyZW50bHlGb2N1c2VkRWxlbWVudCwgbGFzdDogbGFzdEZvY3VzZWRFbGVtZW50LCB3aW5kb3dGb2N1c2VkIH0pO1xyXG4gICAgfVxyXG59XHJcbmxldCB3aW5kb3dGb2N1c2VkID0gdHJ1ZTtcclxuZnVuY3Rpb24gd2luZG93Rm9jdXMoKSB7XHJcbiAgICB3aW5kb3dGb2N1c2VkID0gdHJ1ZTtcclxuICAgIGZvciAobGV0IGYgb2YgdXBkYXRlcnMpIHtcclxuICAgICAgICBmKHsgY3VycmVudDogY3VycmVudGx5Rm9jdXNlZEVsZW1lbnQsIGxhc3Q6IGxhc3RGb2N1c2VkRWxlbWVudCwgd2luZG93Rm9jdXNlZCB9KTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB3aW5kb3dCbHVyKCkge1xyXG4gICAgd2luZG93Rm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgZm9yIChsZXQgZiBvZiB1cGRhdGVycykge1xyXG4gICAgICAgIGYoeyBjdXJyZW50OiBjdXJyZW50bHlGb2N1c2VkRWxlbWVudCwgbGFzdDogbGFzdEZvY3VzZWRFbGVtZW50LCB3aW5kb3dGb2N1c2VkIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VBY3RpdmVFbGVtZW50KGZpbHRlcikge1xyXG4gICAgY29uc3QgW2ksIHNldEldID0gdXNlU3RhdGUoMCk7XHJcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IEYgPSAoaW5mbykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZmlsdGVyID09IG51bGwgfHwgZmlsdGVyKGluZm8pKVxyXG4gICAgICAgICAgICAgICAgc2V0SShpID0+ICsraSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAodXBkYXRlcnMuc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCBmb2N1c2luLCB7IHBhc3NpdmU6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCBmb2N1c291dCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHdpbmRvd0ZvY3VzLCB7IHBhc3NpdmU6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCB3aW5kb3dCbHVyLCB7IHBhc3NpdmU6IHRydWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHVwZGF0ZXJzLmFkZChGKTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICB1cGRhdGVycy5kZWxldGUoRik7XHJcbiAgICAgICAgICAgIGlmICh1cGRhdGVycy5zaXplID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCBmb2N1c2luKTtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCBmb2N1c291dCk7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHdpbmRvd0ZvY3VzKTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmx1clwiLCB3aW5kb3dCbHVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9LCBbZmlsdGVyXSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGFjdGl2ZUVsZW1lbnQ6IGN1cnJlbnRseUZvY3VzZWRFbGVtZW50LFxyXG4gICAgICAgIGxhc3RBY3RpdmVFbGVtZW50OiBsYXN0Rm9jdXNlZEVsZW1lbnQsXHJcbiAgICAgICAgZ2V0QWN0aXZlRWxlbWVudDogZ2V0Q3VycmVudGx5Rm9jdXNlZEVsZW1lbnQsXHJcbiAgICAgICAgZ2V0TGFzdEFjdGl2ZUVsZW1lbnQ6IGdldExhc3RGb2N1c2VkRWxlbWVudCxcclxuICAgICAgICB3aW5kb3dGb2N1c2VkXHJcbiAgICB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1hY3RpdmUtZWxlbWVudC5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50LCBGcmFnbWVudCB9IGZyb20gXCJwcmVhY3RcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIHVzZU1lcmdlZENoaWxkcmVuKGxoc1Byb3BzLCByaHNQcm9wcykge1xyXG4gICAgY29uc3QgbGhzID0gbGhzUHJvcHM/LmNoaWxkcmVuO1xyXG4gICAgY29uc3QgcmhzID0gcmhzUHJvcHM/LmNoaWxkcmVuO1xyXG4gICAgaWYgKGxocyA9PSBudWxsICYmIHJocyA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGxocyA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIHJocztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHJocyA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIGxocztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGxldCByZXQgPSBjcmVhdGVFbGVtZW50KEZyYWdtZW50LCB7fSwgbGhzLCByaHMpO1xyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLW1lcmdlZC1jaGlsZHJlbi5qcy5tYXAiLCJmdW5jdGlvbiB0b1ZhbChtaXgpIHtcblx0dmFyIGssIHksIHN0cj0nJztcblxuXHRpZiAodHlwZW9mIG1peCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG1peCA9PT0gJ251bWJlcicpIHtcblx0XHRzdHIgKz0gbWl4O1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBtaXggPT09ICdvYmplY3QnKSB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkobWl4KSkge1xuXHRcdFx0Zm9yIChrPTA7IGsgPCBtaXgubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0aWYgKG1peFtrXSkge1xuXHRcdFx0XHRcdGlmICh5ID0gdG9WYWwobWl4W2tdKSkge1xuXHRcdFx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0XHRcdHN0ciArPSB5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGsgaW4gbWl4KSB7XG5cdFx0XHRcdGlmIChtaXhba10pIHtcblx0XHRcdFx0XHRzdHIgJiYgKHN0ciArPSAnICcpO1xuXHRcdFx0XHRcdHN0ciArPSBrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHN0cjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuXHR2YXIgaT0wLCB0bXAsIHgsIHN0cj0nJztcblx0d2hpbGUgKGkgPCBhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0aWYgKHRtcCA9IGFyZ3VtZW50c1tpKytdKSB7XG5cdFx0XHRpZiAoeCA9IHRvVmFsKHRtcCkpIHtcblx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0c3RyICs9IHhcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHN0cjtcbn1cbiIsImltcG9ydCB7IGRlZmF1bHQgYXMgY2xzeCB9IGZyb20gXCJjbHN4XCI7XHJcbi8qKlxyXG4gKiBHaXZlbiB0d28gc2V0cyBvZiBwcm9wcywgbWVyZ2VzIHRoZWlyIGBjbGFzc2AgYW5kIGBjbGFzc05hbWVgIHByb3BlcnRpZXMuXHJcbiAqIER1cGxpY2F0ZSBjbGFzc2VzIGFyZSByZW1vdmVkIChvcmRlciBkb2Vzbid0IG1hdHRlciBhbnl3YXkpLlxyXG4gKlxyXG4gKiBAcGFyYW0gbGhzIENsYXNzZXMgb2YgdGhlIGZpcnN0IGNvbXBvbmVudFxyXG4gKiBAcGFyYW0gcmhzIENsYXNzZXMgb2YgdGhlIHNlY29uZCBjb21wb25lbnRcclxuICogQHJldHVybnMgQSBzdHJpbmcgcmVwcmVzZW50aW5nIGFsbCBjb21iaW5lZCBjbGFzc2VzIGZyb20gYm90aCBhcmd1bWVudHMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlTWVyZ2VkQ2xhc3NlcyhsaHMsIHJocykge1xyXG4gICAgLy8gTm90ZTogRm9yIHRoZSBzYWtlIG9mIGZvcndhcmQgY29tcGF0aWJpbGl0eSwgdGhpcyBmdW5jdGlvbiBpcyBsYWJlbGxlZCBhc1xyXG4gICAgLy8gYSBob29rLCBidXQgYXMgaXQgdXNlcyBubyBvdGhlciBob29rcyBpdCB0ZWNobmljYWxseSBpc24ndCBvbmUuXHJcbiAgICByZXR1cm4gbWVyZ2VDbGFzc2VzKGxocywgcmhzKTtcclxufVxyXG5mdW5jdGlvbiBtZXJnZUNsYXNzZXMobGhzLCByaHMpIHtcclxuICAgIGNvbnN0IGxoc0NsYXNzID0gbGhzPy5jbGFzcztcclxuICAgIGNvbnN0IGxoc0NsYXNzTmFtZSA9IGxocz8uY2xhc3NOYW1lO1xyXG4gICAgY29uc3QgcmhzQ2xhc3MgPSByaHM/LmNsYXNzO1xyXG4gICAgY29uc3QgcmhzQ2xhc3NOYW1lID0gcmhzPy5jbGFzc05hbWU7XHJcbiAgICBpZiAobGhzQ2xhc3MgfHwgcmhzQ2xhc3MgfHwgbGhzQ2xhc3NOYW1lIHx8IHJoc0NsYXNzTmFtZSkge1xyXG4gICAgICAgIGxldCBsaHNDbGFzc2VzID0gY2xzeChsaHNDbGFzcywgbGhzQ2xhc3NOYW1lKS5zcGxpdChcIiBcIik7XHJcbiAgICAgICAgbGV0IHJoc0NsYXNzZXMgPSBjbHN4KHJoc0NsYXNzLCByaHNDbGFzc05hbWUpLnNwbGl0KFwiIFwiKTtcclxuICAgICAgICBsZXQgYWxsQ2xhc3NlcyA9IG5ldyBTZXQoWy4uLkFycmF5LmZyb20obGhzQ2xhc3NlcyksIC4uLkFycmF5LmZyb20ocmhzQ2xhc3NlcyldKTtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShhbGxDbGFzc2VzKS5qb2luKFwiIFwiKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdHlwZXRlc3QoKSB7XHJcbiAgICBjb25zdCBjID0gW1xyXG4gICAgICAgIHVzZU1lcmdlZENsYXNzZXModW5kZWZpbmVkLCB1bmRlZmluZWQpLFxyXG4gICAgICAgIHVzZU1lcmdlZENsYXNzZXMoe30sIHVuZGVmaW5lZCksXHJcbiAgICAgICAgdXNlTWVyZ2VkQ2xhc3Nlcyh1bmRlZmluZWQsIHt9KSxcclxuICAgICAgICB1c2VNZXJnZWRDbGFzc2VzKHt9LCB7fSksXHJcbiAgICAgICAgdXNlTWVyZ2VkQ2xhc3Nlcyh7IGNsYXNzOiBcInN0cmluZ1wiIH0sIHt9KSxcclxuICAgICAgICB1c2VNZXJnZWRDbGFzc2VzKHsgY2xhc3M6IFwic3RyaW5nXCIgfSwgeyBjbGFzczogdW5kZWZpbmVkIH0pLFxyXG4gICAgICAgIHVzZU1lcmdlZENsYXNzZXMoeyBjbGFzczogdW5kZWZpbmVkIH0sIHsgY2xhc3M6IFwic3RyaW5nXCIgfSksXHJcbiAgICAgICAgdXNlTWVyZ2VkQ2xhc3Nlcyh7IGNsYXNzTmFtZTogXCJzdHJpbmdcIiB9LCB7IGNsYXNzTmFtZTogdW5kZWZpbmVkIH0pLFxyXG4gICAgICAgIHVzZU1lcmdlZENsYXNzZXMoeyBjbGFzc05hbWU6IHVuZGVmaW5lZCB9LCB7IGNsYXNzTmFtZTogXCJzdHJpbmdcIiB9KSxcclxuICAgICAgICB1c2VNZXJnZWRDbGFzc2VzKHsgY2xhc3M6IFwic3RyaW5nXCIgfSwgeyBjbGFzc05hbWU6IHVuZGVmaW5lZCB9KSxcclxuICAgICAgICB1c2VNZXJnZWRDbGFzc2VzKHsgY2xhc3NOYW1lOiB1bmRlZmluZWQgfSwgeyBjbGFzczogXCJzdHJpbmdcIiB9KSxcclxuICAgICAgICB1c2VNZXJnZWRDbGFzc2VzKHsgY2xhc3NOYW1lOiBcInN0cmluZ1wiIH0sIHsgY2xhc3M6IHVuZGVmaW5lZCB9KSxcclxuICAgICAgICB1c2VNZXJnZWRDbGFzc2VzKHsgY2xhc3M6IHVuZGVmaW5lZCB9LCB7IGNsYXNzTmFtZTogXCJzdHJpbmdcIiB9KSxcclxuICAgIF07XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgY1swXS5jb25jYXQoXCJcIik7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgY1sxXS5jb25jYXQoXCJcIik7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgY1syXS5jb25jYXQoXCJcIik7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgY1szXS5jb25jYXQoXCJcIik7XHJcbiAgICBjWzRdLmNvbmNhdChcIlwiKTtcclxuICAgIGNbNV0uY29uY2F0KFwiXCIpO1xyXG4gICAgY1s2XS5jb25jYXQoXCJcIik7XHJcbiAgICBjWzddLmNvbmNhdChcIlwiKTtcclxuICAgIGNbOF0uY29uY2F0KFwiXCIpO1xyXG4gICAgY1s5XS5jb25jYXQoXCJcIik7XHJcbiAgICBjWzEwXS5jb25jYXQoXCJcIik7XHJcbiAgICBjWzExXS5jb25jYXQoXCJcIik7XHJcbiAgICBjWzEyXS5jb25jYXQoXCJcIik7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgY1sxM107XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLW1lcmdlZC1jbGFzc2VzLmpzLm1hcCIsImltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5mdW5jdGlvbiBwcm9jZXNzUmVmKGluc3RhbmNlLCByZWYpIHtcclxuICAgIGlmICh0eXBlb2YgcmVmID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICByZWYoaW5zdGFuY2UpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocmVmICE9IG51bGwpIHtcclxuICAgICAgICByZWYuY3VycmVudCA9IGluc3RhbmNlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBDb21iaW5lcyB0d28gcmVmcyBpbnRvIG9uZS4gVGhpcyBhbGxvd3MgYSBjb21wb25lbnQgdG8gYm90aCB1c2UgaXRzIG93biByZWYgKmFuZCogZm9yd2FyZCBhIHJlZiB0aGF0IHdhcyBnaXZlbiB0byBpdC5cclxuICogQHBhcmFtIGxoc1xyXG4gKiBAcGFyYW0gcmhzXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlTWVyZ2VkUmVmcygpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAobGhzUHJvcHMsIHJoc1Byb3BzKSB7XHJcbiAgICAgICAgY29uc3QgbGhzID0gbGhzUHJvcHM/LnJlZjtcclxuICAgICAgICBjb25zdCByaHMgPSByaHNQcm9wcz8ucmVmO1xyXG4gICAgICAgIGlmIChsaHMgPT0gbnVsbCAmJiByaHMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsaHMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmhzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChyaHMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbGhzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IHJldCA9IHVzZUNhbGxiYWNrKChjdXJyZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzUmVmKGN1cnJlbnQsIGxocyk7XHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzUmVmKGN1cnJlbnQsIHJocyk7XHJcbiAgICAgICAgICAgIH0sIFtsaHMsIHJoc10pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuLypcclxuZnVuY3Rpb24gdHlwZXRlc3Q8UCBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPEhUTUxJbnB1dEVsZW1lbnQ+Pihwcm9wczogUCkge1xyXG5cclxuICAgIGNvbnN0IHJlZjogUmVmT2JqZWN0PEhUTUxJbnB1dEVsZW1lbnQ+ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFjY2VwdHNSZWYocmVmOiBSZWY8YW55PikgeyB9XHJcbiAgICBmdW5jdGlvbiBhY2NlcHRzT3B0aW9uYWxSZWYocmVmOiBSZWY8YW55PiB8IHVuZGVmaW5lZCkgeyB9XHJcblxyXG4gICAgY29uc3QgYyA9IFtcclxuICAgICAgICB1c2VNZXJnZWRSZWZzPEhUTUxJbnB1dEVsZW1lbnQ+KCkodW5kZWZpbmVkLCB1bmRlZmluZWQpLFxyXG4gICAgICAgIHVzZU1lcmdlZFJlZnM8SFRNTElucHV0RWxlbWVudD4oKSh7fSwgdW5kZWZpbmVkKSxcclxuICAgICAgICB1c2VNZXJnZWRSZWZzPEhUTUxJbnB1dEVsZW1lbnQ+KCkocHJvcHMsIHVuZGVmaW5lZCksXHJcbiAgICAgICAgdXNlTWVyZ2VkUmVmczxIVE1MSW5wdXRFbGVtZW50PigpKHVuZGVmaW5lZCwgcHJvcHMpLFxyXG4gICAgICAgIHVzZU1lcmdlZFJlZnM8SFRNTElucHV0RWxlbWVudD4oKShwcm9wcywgcHJvcHMpLFxyXG4gICAgICAgIHVzZU1lcmdlZFJlZnM8SFRNTElucHV0RWxlbWVudD4oKSh7IHJlZiB9LCBwcm9wcyksXHJcbiAgICAgICAgdXNlTWVyZ2VkUmVmczxIVE1MSW5wdXRFbGVtZW50PigpKHsgcmVmIH0sIHsgcmVmOiB1bmRlZmluZWQgfSksXHJcbiAgICAgICAgdXNlTWVyZ2VkUmVmczxIVE1MSW5wdXRFbGVtZW50PigpKHsgcmVmOiB1bmRlZmluZWQgfSwgeyByZWYgfSksXHJcbiAgICAgICAgdXNlTWVyZ2VkUmVmczxIVE1MSW5wdXRFbGVtZW50PigpKHsgcmVmIH0sIHsgcmVmIH0pLFxyXG4gICAgXSBhcyBjb25zdDtcclxuXHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgYWNjZXB0c1JlZihjWzBdKTtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICBhY2NlcHRzUmVmKGNbMV0pO1xyXG5cclxuICAgIGFjY2VwdHNPcHRpb25hbFJlZihjWzJdKTtcclxuICAgIGFjY2VwdHNPcHRpb25hbFJlZihjWzNdKTtcclxuICAgIGFjY2VwdHNPcHRpb25hbFJlZihjWzRdKTtcclxuXHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciBUT0RPXHJcbiAgICBhY2NlcHRzUmVmKGNbNV0pO1xyXG4gICAgYWNjZXB0c1JlZihjWzZdKTtcclxuICAgIGFjY2VwdHNSZWYoY1s3XSk7XHJcbiAgICBhY2NlcHRzUmVmKGNbOF0pO1xyXG59XHJcbiovXHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1tZXJnZWQtcmVmcy5qcy5tYXAiLCIvKipcclxuICogTWVyZ2VzIHR3byBzdHlsZSBvYmplY3RzLCByZXR1cm5pbmcgdGhlIHJlc3VsdC5cclxuICpcclxuICogQHBhcmFtIHN0eWxlIFRoZSB1c2VyLWdpdmVuIHN0eWxlIHByb3AgZm9yIHRoaXMgY29tcG9uZW50XHJcbiAqIEBwYXJhbSBvYmogVGhlIENTUyBwcm9wZXJ0aWVzIHlvdSB3YW50IGFkZGVkIHRvIHRoZSB1c2VyLWdpdmVuIHN0eWxlXHJcbiAqIEByZXR1cm5zIEEgQ1NTIG9iamVjdCBjb250YWluaW5nIHRoZSBwcm9wZXJ0aWVzIG9mIGJvdGggb2JqZWN0cy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VNZXJnZWRTdHlsZXMobGhzLCByaHMpIHtcclxuICAgIC8vIEVhc3kgY2FzZSwgd2hlbiB0aGVyZSBhcmUgbm8gc3R5bGVzIHRvIG1lcmdlIHJldHVybiBub3RoaW5nLlxyXG4gICAgaWYgKCFsaHMgJiYgIXJocylcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgaWYgKHR5cGVvZiBsaHMgIT0gdHlwZW9mIHJocykge1xyXG4gICAgICAgIC8vIEVhc3kgY2FzZXMsIHdoZW4gb25lIGlzIG51bGwgYW5kIHRoZSBvdGhlciBpc24ndC5cclxuICAgICAgICBpZiAobGhzICYmICFyaHMpXHJcbiAgICAgICAgICAgIHJldHVybiBsaHM7XHJcbiAgICAgICAgaWYgKCFsaHMgJiYgcmhzKVxyXG4gICAgICAgICAgICByZXR1cm4gcmhzO1xyXG4gICAgICAgIC8vIFRoZXkncmUgYm90aCBub24tbnVsbCBidXQgZGlmZmVyZW50IHR5cGVzLlxyXG4gICAgICAgIC8vIENvbnZlcnQgdGhlIHN0cmluZyB0eXBlIHRvIGFuIG9iamVjdCBiYWcgdHlwZSBhbmQgcnVuIGl0IGFnYWluLlxyXG4gICAgICAgIGlmIChsaHMgJiYgcmhzKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGhzID09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlTWVyZ2VkU3R5bGVzKHsgc3R5bGU6IE9iamVjdC5mcm9tRW50cmllcyhsaHMuc3BsaXQoXCI7XCIpLm1hcChzdGF0ZW1lbnQgPT4gc3RhdGVtZW50LnNwbGl0KFwiOlwiKSkpIH0sIHJocyk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmhzID09IFwic3RyaW5nXCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlTWVyZ2VkU3R5bGVzKGxocywgeyBzdHlsZTogT2JqZWN0LmZyb21FbnRyaWVzKGxocy5zcGxpdChcIjtcIikubWFwKHN0YXRlbWVudCA9PiBzdGF0ZW1lbnQuc3BsaXQoXCI6XCIpKSkgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIExvZ2ljPz8/XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIC8vIFRoZXkncmUgYm90aCBzdHJpbmdzLCBqdXN0IGNvbmNhdGVuYXRlIHRoZW0uXHJcbiAgICBpZiAodHlwZW9mIGxocyA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke2xoc307JHtyaHN9YDsgLy8gVE9ETzogSW1wcm92ZSB0aGUgdHlwaW5nIHRvIG1ha2UgdGhpcyBwb3NzaWJsZVxyXG4gICAgfVxyXG4gICAgLy8gVGhleSdyZSBib3RoIG9iamVjdHMsIGp1c3QgbWVyZ2UgdGhlbS5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgLi4uKGxocz8uc3R5bGUgPz8ge30pLFxyXG4gICAgICAgIC4uLihyaHM/LnN0eWxlID8/IHt9KVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBhY2NlcHRzU3RyaW5nT3JDc3NPclVuZGVmaW5lZCh1KSB7IH1cclxuZnVuY3Rpb24gYWNjZXB0c1N0cmluZ09yQ3NzKHN0cikgeyB9XHJcbmZ1bmN0aW9uIGFjY2VwdHNDc3MocHJvcCkgeyB9XHJcbmZ1bmN0aW9uIHR5cGV0ZXN0KHByb3BzKSB7XHJcbiAgICBjb25zdCBzdHlsZSA9IHt9O1xyXG4gICAgY29uc3QgYyA9IFtcclxuICAgICAgICB1c2VNZXJnZWRTdHlsZXModW5kZWZpbmVkLCB1bmRlZmluZWQpLFxyXG4gICAgICAgIHVzZU1lcmdlZFN0eWxlcyh7fSwgdW5kZWZpbmVkKSxcclxuICAgICAgICB1c2VNZXJnZWRTdHlsZXModW5kZWZpbmVkLCB7fSksXHJcbiAgICAgICAgdXNlTWVyZ2VkU3R5bGVzKHt9LCB7fSksXHJcbiAgICAgICAgdXNlTWVyZ2VkU3R5bGVzKHByb3BzLCB1bmRlZmluZWQpLFxyXG4gICAgICAgIHVzZU1lcmdlZFN0eWxlcyh1bmRlZmluZWQsIHByb3BzKSxcclxuICAgICAgICB1c2VNZXJnZWRTdHlsZXMocHJvcHMsIHByb3BzKSxcclxuICAgICAgICB1c2VNZXJnZWRTdHlsZXMoeyBzdHlsZSB9LCB7fSksXHJcbiAgICAgICAgdXNlTWVyZ2VkU3R5bGVzKHsgc3R5bGUgfSwgcHJvcHMpLFxyXG4gICAgICAgIHVzZU1lcmdlZFN0eWxlcyhwcm9wcywgeyBzdHlsZSB9KSxcclxuICAgICAgICB1c2VNZXJnZWRTdHlsZXMoeyBzdHlsZSB9LCB7IHN0eWxlIH0pLFxyXG4gICAgXTtcclxuICAgIC8vIFNhbml0eSBjaGVja3NcclxuICAgIGNbMF0gPT09IHVuZGVmaW5lZDtcclxuICAgIGNbMV0gPT09IHVuZGVmaW5lZDtcclxuICAgIGNbMl0gPT09IHVuZGVmaW5lZDtcclxuICAgIGNbM10gPT09IHVuZGVmaW5lZDtcclxuICAgIGNbNF0gPT09IHVuZGVmaW5lZDtcclxuICAgIGNbNV0gPT09IHVuZGVmaW5lZDtcclxuICAgIGNbNl0gPT09IHVuZGVmaW5lZDtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yIEJlY2F1c2UgYm90aCB3ZXJlIHVuZGVmaW5lZFxyXG4gICAgY1swXT8uYmFja2dyb3VuZENvbG9yO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgQmVjYXVzZSBcInN0eWxlXCIgd2FzIG5vdCBwcm92aWRlZCBhcyBhIHByb3BcclxuICAgIGNbMV0/LmJhY2tncm91bkNvbG9yO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgQmVjYXVzZSBcInN0eWxlXCIgd2FzIG5vdCBwcm92aWRlZCBhcyBhIHByb3BcclxuICAgIGNbMl0/LmJhY2tncm91bmRDb2xvcjtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yIEJlY2F1c2UgXCJzdHlsZVwiIHdhcyBub3QgcHJvdmlkZWQgYXMgYSBwcm9wXHJcbiAgICBjWzNdPy5iYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciBCZWNhdXNlIFwic3R5bGVcIiBtYXkgYmUgdW5kZWZpbmVkIGRlcGVuZGluZyBvbiBob3cgUCBleHRlbmRzIEhUTUxBdHRyaWJ1dGVzXHJcbiAgICBhY2NlcHRzU3RyaW5nT3JDc3MoY1s0XSk7XHJcbiAgICBhY2NlcHRzU3RyaW5nT3JDc3NPclVuZGVmaW5lZChjWzRdKTtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yIEJlY2F1c2UgXCJzdHlsZVwiIG1heSBiZSB1bmRlZmluZWQgZGVwZW5kaW5nIG9uIGhvdyBQIGV4dGVuZHMgSFRNTEF0dHJpYnV0ZXNcclxuICAgIGFjY2VwdHNTdHJpbmdPckNzcyhjWzVdKTtcclxuICAgIGFjY2VwdHNTdHJpbmdPckNzc09yVW5kZWZpbmVkKGNbNV0pO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgQmVjYXVzZSBcInN0eWxlXCIgbWF5IGJlIHVuZGVmaW5lZCBkZXBlbmRpbmcgb24gaG93IFAgZXh0ZW5kcyBIVE1MQXR0cmlidXRlc1xyXG4gICAgYWNjZXB0c1N0cmluZ09yQ3NzKGNbNl0pO1xyXG4gICAgYWNjZXB0c1N0cmluZ09yQ3NzT3JVbmRlZmluZWQoY1s2XSk7XHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE86IFRoaXMgc2hvdWxkIGJlIGFsbG93ZWRcclxuICAgIGFjY2VwdHNTdHJpbmdPckNzcyhjWzddKTtcclxuICAgIGFjY2VwdHNTdHJpbmdPckNzc09yVW5kZWZpbmVkKGNbN10pO1xyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBUT0RPOiBUaGlzIHNob3VsZCBiZSBhbGxvd2VkXHJcbiAgICBhY2NlcHRzU3RyaW5nT3JDc3MoY1s4XSk7XHJcbiAgICBhY2NlcHRzU3RyaW5nT3JDc3NPclVuZGVmaW5lZChjWzhdKTtcclxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVE9ETzogVGhpcyBzaG91bGQgYmUgYWxsb3dlZFxyXG4gICAgYWNjZXB0c1N0cmluZ09yQ3NzKGNbOV0pO1xyXG4gICAgYWNjZXB0c1N0cmluZ09yQ3NzT3JVbmRlZmluZWQoY1s5XSk7XHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE86IFRoaXMgc2hvdWxkIGJlIGFsbG93ZWRcclxuICAgIGFjY2VwdHNTdHJpbmdPckNzcyhjWzEwXSk7XHJcbiAgICBhY2NlcHRzU3RyaW5nT3JDc3NPclVuZGVmaW5lZChjWzEwXSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLW1lcmdlZC1zdHlsZXMuanMubWFwIiwiaW1wb3J0IHsgdXNlTWVyZ2VkQ2hpbGRyZW4gfSBmcm9tIFwiLi91c2UtbWVyZ2VkLWNoaWxkcmVuXCI7XHJcbmltcG9ydCB7IHVzZU1lcmdlZENsYXNzZXMgfSBmcm9tIFwiLi91c2UtbWVyZ2VkLWNsYXNzZXNcIjtcclxuaW1wb3J0IHsgdXNlTWVyZ2VkUmVmcyB9IGZyb20gXCIuL3VzZS1tZXJnZWQtcmVmc1wiO1xyXG5pbXBvcnQgeyB1c2VNZXJnZWRTdHlsZXMgfSBmcm9tIFwiLi91c2UtbWVyZ2VkLXN0eWxlc1wiO1xyXG5sZXQgbG9nID0gKHN0cikgPT4geyBkZWJ1Z2dlcjsgLyogSW50ZW50aW9uYWwgKi8gfTtcclxuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZUxvZ2dpbmdQcm9wQ29uZmxpY3RzKGxvZzIpIHtcclxuICAgIGxvZyA9IGxvZzI7XHJcbn1cclxuLyoqXHJcbiAqIEdpdmVuIHR3byBzZXRzIG9mIHByb3BzLCBtZXJnZXMgdGhlbSBhbmQgcmV0dXJucyB0aGUgcmVzdWx0LlxyXG4gKlxyXG4gKiBUaGUgaG9vayBpcyBhd2FyZSBvZiBhbmQgY2FuIGludGVsbGlnZW50bHkgbWVyZ2UgYGNsYXNzTmFtZWAsIGBjbGFzc2AsIGBzdHlsZWAsIGByZWZgLCBhbmQgYWxsIGV2ZW50IGhhbmRsZXJzLlxyXG4gKiBAcGFyYW0gbGhzMlxyXG4gKiBAcGFyYW0gcmhzMlxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZU1lcmdlZFByb3BzKCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChsaHMyLCByaHMyKSB7XHJcbiAgICAgICAgLy8gRmlyc3QsIHB1dCBpbiBhbGwgdGhlIHByb3BlcnRpZXMgdGhhdCBhcmUgZWFzeSB0byByZWFzb24gYWJvdXRcclxuICAgICAgICAvLyBhbmQgYWxsIGxocyBwcm9wcy4gV2UncmUgZ29pbmcgdG8gbWVyZ2UgaW4gcmhzIGp1c3QgYWZ0ZXIuXHJcbiAgICAgICAgY29uc3QgeyBjaGlsZHJlbjogbGhzQ2hpbGRyZW4sIGNsYXNzOiBsaHNDbGFzcywgY2xhc3NOYW1lOiBsaHNDbGFzc05hbWUsIHN0eWxlOiBsaHNTdHlsZSwgcmVmOiBsaHNSZWYsIC4uLmxocyB9ID0gbGhzMjtcclxuICAgICAgICBjb25zdCB7IGNoaWxkcmVuOiByaHNDaGlsZHJlbiwgY2xhc3M6IHJoc0NsYXNzLCBjbGFzc05hbWU6IHJoc0NsYXNzTmFtZSwgc3R5bGU6IHJoc1N0eWxlLCByZWY6IHJoc1JlZiwgLi4ucmhzIH0gPSByaHMyO1xyXG4gICAgICAgIGxldCByZXQgPSB7XHJcbiAgICAgICAgICAgIC4uLmxocyxcclxuICAgICAgICAgICAgcmVmOiB1c2VNZXJnZWRSZWZzKCkobGhzMiwgcmhzMiksXHJcbiAgICAgICAgICAgIHN0eWxlOiB1c2VNZXJnZWRTdHlsZXMobGhzMiwgcmhzMiksXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZTogdXNlTWVyZ2VkQ2xhc3NlcyhsaHMyLCByaHMyKSxcclxuICAgICAgICAgICAgY2hpbGRyZW46IHVzZU1lcmdlZENoaWxkcmVuKGxoczIsIHJoczIpXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBOb3csIGRvICpldmVyeXRoaW5nKiBlbHNlXHJcbiAgICAgICAgLy8gTWVyZ2UgZXZlcnkgcmVtYWluaW5nIGV4aXN0aW5nIGVudHJ5IGluIGxocyB3aXRoIHdoYXQgd2UndmUgYWxyZWFkeSBwdXQgaW4gcmV0LlxyXG4gICAgICAgIC8vY29uc3QgbGhzRW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGxocykgYXMgW2tleW9mIFQsIFRba2V5b2YgVF1dW107XHJcbiAgICAgICAgY29uc3QgcmhzRW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHJocyk7XHJcbiAgICAgICAgZm9yIChjb25zdCBbcmhzS2V5LCByaHNWYWx1ZV0gb2YgcmhzRW50cmllcykge1xyXG4gICAgICAgICAgICBjb25zdCBsaHNWYWx1ZSA9IGxoc1tyaHNLZXldO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGxoc1ZhbHVlID09PSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIHJoc1ZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoZXkncmUgYm90aCBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgbWVyZ2VkIChvciBvbmUncyBhIGZ1bmN0aW9uIGFuZCB0aGUgb3RoZXIncyBudWxsKS5cclxuICAgICAgICAgICAgICAgIC8vIE5vdCBhbiAqZWFzeSogY2FzZSwgYnV0IGEgd2VsbC1kZWZpbmVkIG9uZS5cclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlZCA9IG1lcmdlRnVuY3Rpb25zKGxoc1ZhbHVlLCByaHNWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXRbcmhzS2V5XSA9IG1lcmdlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFVoLi4ud2UncmUgaGVyZSBiZWNhdXNlIG9uZSBvZiB0aGVtJ3MgbnVsbCwgcmlnaHQ/XHJcbiAgICAgICAgICAgICAgICBpZiAobGhzVmFsdWUgPT0gbnVsbCAmJiByaHNWYWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJoc1ZhbHVlID09PSBudWxsICYmIGxoc1ZhbHVlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldFtyaHNLZXldID0gcmhzVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXRbcmhzS2V5XSA9IGxoc1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGxoc1ZhbHVlID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0W3Joc0tleV0gPSByaHNWYWx1ZTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJoc1ZhbHVlID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0W3Joc0tleV0gPSBsaHNWYWx1ZTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJoc1ZhbHVlID09IGxoc1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSSBtZWFuLCB0aGV5J3JlIHRoZSBzYW1lIHZhbHVlIGF0IGxlYXN0XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc28gd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZy5cclxuICAgICAgICAgICAgICAgICAgICAvLyBOb3QgcmVhbGx5IGlkZWFsIHRob3VnaC5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFVnaC5cclxuICAgICAgICAgICAgICAgICAgICAvLyBObyBnb29kIHN0cmF0ZWdpZXMgaGVyZSwganVzdCBsb2cgaXQgaWYgcmVxdWVzdGVkXHJcbiAgICAgICAgICAgICAgICAgICAgbG9nPy4oYENvdWxkIG5vdCBtZXJnZSBpbmNvbXBhdGlibGUgcHJvcCBcIiR7cmhzS2V5fVwiICh0eXBlOiAke3R5cGVvZiByaHNWYWx1ZX0sIHZhbHVlczogWyR7bGhzVmFsdWV9LCAke3Joc1ZhbHVlfV0pYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0W3Joc0tleV0gPSByaHNWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBtZXJnZUZ1bmN0aW9ucyhsaHMsIHJocykge1xyXG4gICAgaWYgKCFsaHMpXHJcbiAgICAgICAgcmV0dXJuIHJocztcclxuICAgIGlmICghcmhzKVxyXG4gICAgICAgIHJldHVybiBsaHM7XHJcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcclxuICAgICAgICBsZXQgbHYgPSBsaHM/LiguLi5hcmdzKTtcclxuICAgICAgICBsZXQgcnYgPSByaHM/LiguLi5hcmdzKTtcclxuICAgICAgICBpZiAobHYgaW5zdGFuY2VvZiBQcm9taXNlIHx8IHJ2IGluc3RhbmNlb2YgUHJvbWlzZSlcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtsdiwgcnZdKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZ2VuZXJpY0dldFRlc3QoKSB7XHJcbiAgICBjb25zdCB0MSA9IG51bGw7XHJcbiAgICBjb25zdCB0MiA9IG51bGw7XHJcbiAgICBjb25zdCB0MyA9IG51bGw7XHJcbiAgICBpZiAodDMuaWQgPT0gbnVsbCkge1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdDMuaWQuY29uY2F0KFwiXCIpO1xyXG4gICAgfVxyXG59XHJcbi8qXHJcbmZ1bmN0aW9uIHRlc3Q8UCBleHRlbmRzIGguSlNYLkhUTUxBdHRyaWJ1dGVzPEhUTUxJbnB1dEVsZW1lbnQ+Pihwcm9wczogUCkge1xyXG5cclxuICAgIGNvbnN0IGlkMDogR2VuZXJpY0dldDx7fSwgXCJpZFwiLCBzdHJpbmc+ID0gXCJcIjtcclxuICAgIGNvbnN0IGlkMzogR2VuZXJpY0dldDx7IGlkOiB1bmRlZmluZWQgfSwgXCJpZFwiLCBzdHJpbmc+ID0gdW5kZWZpbmVkO1xyXG4gICAgY29uc3QgaWQ0OiBHZW5lcmljR2V0PHsgaWQ6IHVuZGVmaW5lZCB9LCBcImlkXCIsIHN0cmluZz4gPSB1bmRlZmluZWQ7XHJcbiAgICBjb25zdCBpZDU6IEdlbmVyaWNHZXQ8eyBpZDogdW5kZWZpbmVkIH0sIFwiaWRcIiwgc3RyaW5nPiA9IHVuZGVmaW5lZDtcclxuICAgIGNvbnN0IGlkNjogR2VuZXJpY0dldDx7IGlkOiB1bmRlZmluZWQgfSwgXCJpZFwiLCBzdHJpbmc+ID0gdW5kZWZpbmVkO1xyXG4gICAgLy9jb25zdCBpZDI6IFppcFNpbmdsZTxzdHJpbmcgfCB1bmRlZmluZWQsIHN0cmluZyB8IHVuZGVmaW5lZD4gPSB1bmRlZmluZWQ7XHJcbiAgICBjb25zdCBpZDE6IFppcE9iamVjdDx7IGlkOiB1bmRlZmluZWQgfSwgeyBpZDogc3RyaW5nIH0+ID0geyBpZDogdW5kZWZpbmVkIH07XHJcblxyXG4gICAgdHlwZSBNMSA9IEdlbmVyaWNHZXQ8UCwgXCJzdHlsZVwiLCBzdHJpbmc+O1xyXG4gICAgdHlwZSBNMiA9IEdlbmVyaWNHZXQ8e30sIFwic3R5bGVcIiwgc3RyaW5nPjtcclxuICAgIGNvbnN0IG0xOiBNMSA9IFwiXCI7XHJcbiAgICBjb25zdCBtMjogTTEgPSB1bmRlZmluZWQ7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciAgICBCZWNhdXNlIG51bWJlciBpc24ndCBhc3NpZ25hYmxlIHRvIHN0cmluZ1xyXG4gICAgY29uc3QgbTM6IE0xID0gMDtcclxuXHJcbiAgICBjb25zdCBtNDogTTIgPSBcIlwiO1xyXG4gICAgY29uc3QgbTU6IE0yID0gdW5kZWZpbmVkO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgICAgQmVjYXVzZSBudW1iZXIgaXNuJ3QgYXNzaWduYWJsZSB0byBzdHJpbmdcclxuICAgIGNvbnN0IG02OiBNMiA9IDA7XHJcblxyXG4gICAgY29uc3QgcDE6IE1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQsIHt9LCB7IGlkOiBzdHJpbmcgfT4gPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHt9LCB7IGlkOiBcInN0cmluZ1wiIH0pO1xyXG4gICAgY29uc3QgcDI6IE1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQsIHsgaWQ6IHVuZGVmaW5lZCB9LCB7IGlkOiBzdHJpbmcgfT4gPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHsgaWQ6IHVuZGVmaW5lZCB9LCB7IGlkOiBcInN0cmluZ1wiIH0pO1xyXG4gICAgY29uc3QgcDM6IE1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQsIHsgaWQ6IHVuZGVmaW5lZCB9LCB7IGlkOiB1bmRlZmluZWQgfT4gPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHsgaWQ6IHVuZGVmaW5lZCB9LCB7IGlkOiB1bmRlZmluZWQgfSk7XHJcbiAgICBjb25zdCBwNDogTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudCwge30sIHt9PiA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkoe30sIHt9KTtcclxuICAgIGNvbnN0IHA1ID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKShwcm9wcywge30pO1xyXG4gICAgY29uc3QgcDYgPSB1c2VNZXJnZWRQcm9wczxIVE1MSW5wdXRFbGVtZW50PigpKHByb3BzLCB7IGlkOiB1bmRlZmluZWQgfSk7XHJcbiAgICBjb25zdCBwNyA9IHVzZU1lcmdlZFByb3BzPEhUTUxJbnB1dEVsZW1lbnQ+KCkocHJvcHMsIHsgaWQ6IFwic3RyaW5nXCIgfSk7XHJcblxyXG5cclxuICAgIHAxLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICBwMi5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgICAgaWQgY2FuJ3QgYmUgYW55dGhpbmcgYnV0IHVuZGVmaW5lZFxyXG4gICAgcDMuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yICAgIGlkIGNhbid0IGJlIGFueXRoaW5nIGJ1dCB1bmRlZmluZWRcclxuICAgIHA0LmlkPy5jb25jYXQoXCJcIik7XHJcblxyXG5cclxuICAgIHA1LmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICBwNi5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgcDcuaWQ/LmNvbmNhdChcIlwiKTtcclxuXHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciAgICBpZCBtdXN0IGNvbnRhaW4gdW5kZWZpbmVkXHJcbiAgICBwNS5pZC5jb25jYXQoXCJcIik7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciAgICBpZCBtdXN0IGNvbnRhaW4gdW5kZWZpbmVkXHJcbiAgICBwNi5pZC5jb25jYXQoXCJcIik7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciAgICBpZCBtdXN0IGNvbnRhaW4gdW5kZWZpbmVkXHJcbiAgICBwNy5pZC5jb25jYXQoXCJcIik7XHJcblxyXG5cclxuICAgIGlmIChwNS5hbGxvd0Z1bGxTY3JlZW4gPT09IHVuZGVmaW5lZCkge31cclxuICAgIGVsc2UgaWYgKHA1LmFsbG93RnVsbFNjcmVlbiA9PT0gZmFsc2UpIHt9XHJcbiAgICBlbHNlIGlmIChwNS5hbGxvd0Z1bGxTY3JlZW4gPT09IHRydWUpIHt9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBhY2NlcHRzTmV2ZXIocDUuYWxsb3dGdWxsU2NyZWVuKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgaWYgKHA2LmFsbG93RnVsbFNjcmVlbiA9PT0gdW5kZWZpbmVkKSB7fVxyXG4gICAgZWxzZSBpZiAocDYuYWxsb3dGdWxsU2NyZWVuID09PSBmYWxzZSkge31cclxuICAgIGVsc2UgaWYgKHA2LmFsbG93RnVsbFNjcmVlbiA9PT0gdHJ1ZSkge31cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGFjY2VwdHNOZXZlcihwNi5hbGxvd0Z1bGxTY3JlZW4pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBpZiAocDcuYWxsb3dGdWxsU2NyZWVuID09PSB1bmRlZmluZWQpIHt9XHJcbiAgICBlbHNlIGlmIChwNy5hbGxvd0Z1bGxTY3JlZW4gPT09IGZhbHNlKSB7fVxyXG4gICAgZWxzZSBpZiAocDcuYWxsb3dGdWxsU2NyZWVuID09PSB0cnVlKSB7fVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgYWNjZXB0c05ldmVyKHA3LmFsbG93RnVsbFNjcmVlbik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIE1ha2Ugc3VyZSBpdCB3b3JrcyByZWN1cnNpdmVseVxyXG4gICAgY29uc3QgcjFhID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKSh7fSwgcDEpO1xyXG4gICAgY29uc3QgcjFiID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKShwcm9wcywgcDEpO1xyXG4gICAgY29uc3QgcjJhID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKSh7fSwgcDIpO1xyXG4gICAgY29uc3QgcjJiID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKShwcm9wcywgcDIpO1xyXG4gICAgY29uc3QgcjNhID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKSh7fSwgcDMpO1xyXG4gICAgY29uc3QgcjNiID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKShwcm9wcywgcDMpO1xyXG4gICAgY29uc3QgcjRhID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKSh7fSwgcDQpO1xyXG4gICAgY29uc3QgcjRiID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKShwcm9wcywgcDQpO1xyXG4gICAgY29uc3QgcjVhID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKSh7fSwgcDUpO1xyXG4gICAgY29uc3QgcjViID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKShwcm9wcywgcDUpO1xyXG4gICAgY29uc3QgcjZhID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKSh7fSwgcDYpO1xyXG4gICAgY29uc3QgcjZiID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKShwcm9wcywgcDYpO1xyXG4gICAgY29uc3QgcjdhID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKSh7fSwgcDcpO1xyXG4gICAgY29uc3QgcjdiID0gdXNlTWVyZ2VkUHJvcHM8SFRNTElucHV0RWxlbWVudD4oKShwcm9wcywgcDcpO1xyXG5cclxuXHJcbiAgICByMWEuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIHIxYi5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgcjJhLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICByMmIuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgICAgaWQgY2FuJ3QgYmUgYW55dGhpbmcgYnV0IHVuZGVmaW5lZFxyXG4gICAgcjNhLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICByM2IuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yICAgIGlkIGNhbid0IGJlIGFueXRoaW5nIGJ1dCB1bmRlZmluZWRcclxuICAgIHI0YS5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgcjRiLmlkPy5jb25jYXQoXCJcIik7XHJcblxyXG5cclxuICAgIHI1YS5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgcjViLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICByNmEuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIHI2Yi5pZD8uY29uY2F0KFwiXCIpO1xyXG4gICAgcjdhLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICByN2IuaWQ/LmNvbmNhdChcIlwiKTtcclxuXHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciAgICBpZCBtdXN0IGNvbnRhaW4gdW5kZWZpbmVkXHJcbiAgICByNWEuaWQuY29uY2F0KFwiXCIpO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgICAgaWQgbXVzdCBjb250YWluIHVuZGVmaW5lZFxyXG4gICAgcjViLmlkLmNvbmNhdChcIlwiKTtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yICAgIGlkIG11c3QgY29udGFpbiB1bmRlZmluZWRcclxuICAgIHI2YS5pZC5jb25jYXQoXCJcIik7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciAgICBpZCBtdXN0IGNvbnRhaW4gdW5kZWZpbmVkXHJcbiAgICByNmIuaWQuY29uY2F0KFwiXCIpO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3IgICAgaWQgbXVzdCBjb250YWluIHVuZGVmaW5lZFxyXG4gICAgcjdhLmlkLmNvbmNhdChcIlwiKTtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yICAgIGlkIG11c3QgY29udGFpbiB1bmRlZmluZWRcclxuICAgIHI3Yi5pZC5jb25jYXQoXCJcIik7XHJcblxyXG5cclxuICAgIGlmIChyNWEuYWxsb3dGdWxsU2NyZWVuID09PSB1bmRlZmluZWQpIHt9XHJcbiAgICBlbHNlIGlmIChyNWEuYWxsb3dGdWxsU2NyZWVuID09PSBmYWxzZSkge31cclxuICAgIGVsc2UgaWYgKHI1YS5hbGxvd0Z1bGxTY3JlZW4gPT09IHRydWUpIHt9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBhY2NlcHRzTmV2ZXIocjVhLmFsbG93RnVsbFNjcmVlbik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGlmIChyNWIuYWxsb3dGdWxsU2NyZWVuID09PSB1bmRlZmluZWQpIHt9XHJcbiAgICBlbHNlIGlmIChyNWIuYWxsb3dGdWxsU2NyZWVuID09PSBmYWxzZSkge31cclxuICAgIGVsc2UgaWYgKHI1Yi5hbGxvd0Z1bGxTY3JlZW4gPT09IHRydWUpIHt9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBhY2NlcHRzTmV2ZXIocjViLmFsbG93RnVsbFNjcmVlbik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGlmIChyNmEuYWxsb3dGdWxsU2NyZWVuID09PSB1bmRlZmluZWQpIHt9XHJcbiAgICBlbHNlIGlmIChyNmEuYWxsb3dGdWxsU2NyZWVuID09PSBmYWxzZSkge31cclxuICAgIGVsc2UgaWYgKHI2YS5hbGxvd0Z1bGxTY3JlZW4gPT09IHRydWUpIHt9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBhY2NlcHRzTmV2ZXIocjZhLmFsbG93RnVsbFNjcmVlbik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGlmIChyNmIuYWxsb3dGdWxsU2NyZWVuID09PSB1bmRlZmluZWQpIHt9XHJcbiAgICBlbHNlIGlmIChyNmIuYWxsb3dGdWxsU2NyZWVuID09PSBmYWxzZSkge31cclxuICAgIGVsc2UgaWYgKHI2Yi5hbGxvd0Z1bGxTY3JlZW4gPT09IHRydWUpIHt9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBhY2NlcHRzTmV2ZXIocjZiLmFsbG93RnVsbFNjcmVlbik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGlmIChyN2EuYWxsb3dGdWxsU2NyZWVuID09PSB1bmRlZmluZWQpIHt9XHJcbiAgICBlbHNlIGlmIChyN2EuYWxsb3dGdWxsU2NyZWVuID09PSBmYWxzZSkge31cclxuICAgIGVsc2UgaWYgKHI3YS5hbGxvd0Z1bGxTY3JlZW4gPT09IHRydWUpIHt9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBhY2NlcHRzTmV2ZXIocjdhLmFsbG93RnVsbFNjcmVlbik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGlmIChyN2IuYWxsb3dGdWxsU2NyZWVuID09PSB1bmRlZmluZWQpIHt9XHJcbiAgICBlbHNlIGlmIChyN2IuYWxsb3dGdWxsU2NyZWVuID09PSBmYWxzZSkge31cclxuICAgIGVsc2UgaWYgKHI3Yi5hbGxvd0Z1bGxTY3JlZW4gPT09IHRydWUpIHt9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBhY2NlcHRzTmV2ZXIocjdiLmFsbG93RnVsbFNjcmVlbik7XHJcbiAgICB9XHJcblxyXG59XHJcbmZ1bmN0aW9uIGFjY2VwdHNOZXZlcihuOiBuZXZlcikge31cclxuKi8gXHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1tZXJnZWQtcHJvcHMuanMubWFwIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IHVzZU1lcmdlZFByb3BzIH0gZnJvbSBcIi4vdXNlLW1lcmdlZC1wcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCIuL3VzZS1zdGF0ZVwiO1xyXG4vKipcclxuICogQWxsb3dzIGFjY2Vzc2luZyB0aGUgZWxlbWVudCBhIHJlZiByZWZlcmVuY2VzIGFzIHNvb24gYXMgaXQgZG9lcyBzby5cclxuICogKlRoaXMgaG9vayBpdHNlbGYgcmV0dXJucyBhIGhvb2sqLS11c2VSZWZFbGVtZW50UHJvcHMgbW9kaWZpZXMgdGhlIHByb3BzIHRoYXQgeW91IHdlcmUgZ29pbmcgdG8gcGFzcyB0byBhbiBIVE1MRWxlbWVudCxcclxuICogYWRkaW5nIGEgUmVmQ2FsbGJhY2sgYW5kIG1lcmdpbmcgaXQgd2l0aCBhbnkgZXhpc3RpbmcgcmVmIHRoYXQgZXhpc3RlZCBvbiB0aGUgcHJvcHMuXHJcbiAqXHJcbiAqIERvbid0IGZvcmdldCB0byBwcm92aWRlIHRoZSBFbGVtZW50IGFzIHRoZSB0eXBlIGFyZ3VtZW50IVxyXG4gKlxyXG4gKiBAcmV0dXJucyBUaGUgZWxlbWVudCwgYW5kIHRoZSBzdWItaG9vayB0aGF0IG1ha2VzIGl0IHJldHJpZXZhYmxlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZkVsZW1lbnQoKSB7XHJcbiAgICAvLyBMZXQgdXMgc3RvcmUgdGhlIGFjdHVhbCAocmVmZXJlbmNlIHRvKSB0aGUgZWxlbWVudCB3ZSBjYXB0dXJlXHJcbiAgICBjb25zdCBbZWxlbWVudCwgc2V0RWxlbWVudCwgZ2V0RWxlbWVudF0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIC8vIENyZWF0ZSBhIFJlZkNhbGxiYWNrIHRoYXQncyBmaXJlZCB3aGVuIG1vdW50ZWQgXHJcbiAgICAvLyBhbmQgdGhhdCBub3RpZmllcyB1cyBvZiBvdXIgZWxlbWVudCB3aGVuIHdlIGhhdmUgaXRcclxuICAgIGNvbnN0IG15UmVmID0gdXNlQ2FsbGJhY2soKGUpID0+IHtcclxuICAgICAgICBpZiAoZSlcclxuICAgICAgICAgICAgc2V0RWxlbWVudCgoKSA9PiBlKTtcclxuICAgIH0sIFtdKTtcclxuICAgIGNvbnN0IHVzZVJlZkVsZW1lbnRQcm9wcyA9IHVzZUNhbGxiYWNrKChwcm9wcykgPT4gdXNlTWVyZ2VkUHJvcHMoKSh7IHJlZjogbXlSZWYgfSwgcHJvcHMpLCBbXSk7XHJcbiAgICAvLyBSZXR1cm4gYm90aCB0aGUgZWxlbWVudCBhbmQgdGhlIGhvb2sgdGhhdCBtb2RpZmllcyBcclxuICAgIC8vIHRoZSBwcm9wcyBhbmQgYWxsb3dzIHVzIHRvIGFjdHVhbGx5IGZpbmQgdGhlIGVsZW1lbnRcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlUmVmRWxlbWVudFByb3BzLFxyXG4gICAgICAgIGVsZW1lbnQsXHJcbiAgICAgICAgZ2V0RWxlbWVudFxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB0ZXN0KCkge1xyXG4gICAgZnVuY3Rpb24gZm9vKHByb3BzKSB7XHJcbiAgICAgICAgY29uc3QgeyBlbGVtZW50LCB1c2VSZWZFbGVtZW50UHJvcHMgfSA9IHVzZVJlZkVsZW1lbnQoKTtcclxuICAgICAgICBjb25zdCBwMSA9IHVzZVJlZkVsZW1lbnRQcm9wcyhwcm9wcyk7XHJcbiAgICAgICAgaWYgKHAxLnN0eWxlID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgcDEuc3R5bGUgPT09IFwic3RyaW5nXCIpIHsgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwMS5zdHlsZT8uYmFja2dyb3VuZENvbG9yO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtcmVmLWVsZW1lbnQuanMubWFwIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUxheW91dEVmZmVjdCwgdXNlTWVtbyB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgdXNlQWN0aXZlRWxlbWVudCB9IGZyb20gXCIuL3VzZS1hY3RpdmUtZWxlbWVudFwiO1xyXG5pbXBvcnQgeyB1c2VSZWZFbGVtZW50IH0gZnJvbSBcIi4vdXNlLXJlZi1lbGVtZW50XCI7XHJcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcIi4vdXNlLXN0YXRlXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VIYXNGb2N1cyh7fSA9IHt9KSB7XHJcbiAgICAvLyBUaGVzZSBhcmUgc2xpZ2h0bHkgcmVkdW5kYW50LCBidXQgYW55IHRpbWUgdGhlIGZvY3VzIGNoYW5nZXMsIHdlIG5lZWQgdG8ga25vdyBpZiBpdCdzIFwicmVsZXZhbnRcIiB0byB1cy5cclxuICAgIC8vIEl0J3MgXCJyZWxldmFudFwiIGlmIHRoZSBuZXdseS1mb2N1c2VkIGVsZW1lbnQgaXMgYSBjaGlsZCBvZiB1cyxcclxuICAgIC8vIE9SIGlmIHdlJ3JlIGZvY3VzZWQgYW5kIGZvY3VzIG1vdmVzIE9VVFNJREUgb2YgdXMgb3VyIG91ciBjaGlsZHJlbi5cclxuICAgIC8vIEJlY2F1c2Ugb2YgdGhhdCBzZWNvbmQgYml0LCB3ZSBuZWVkIHRvIGtlZXAgdHJhY2sgb2Ygd2hlcmUgdGhlIGZvY3VzIHdhcyB0aGUgbGFzdCB0aW1lIHdlIGNoZWNrZWQgZm9yIHRoZSBmaWx0ZXIuXHJcbiAgICBjb25zdCBbaGFzRm9jdXMsIHNldEhhc0ZvY3VzLCBnZXRIYXNGb2N1c10gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBjb25zdCBbaGFzTGFzdEZvY3VzLCBzZXRIYXNMYXN0Rm9jdXMsIGdldEhhc0xhc3RGb2N1c10gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBjb25zdCB7IGVsZW1lbnQsIGdldEVsZW1lbnQsIHVzZVJlZkVsZW1lbnRQcm9wcyB9ID0gdXNlUmVmRWxlbWVudCgpO1xyXG4gICAgY29uc3QgeyBhY3RpdmVFbGVtZW50LCBsYXN0QWN0aXZlRWxlbWVudCB9ID0gdXNlQWN0aXZlRWxlbWVudCh1c2VDYWxsYmFjaygoeyBjdXJyZW50LCBsYXN0LCB3aW5kb3dGb2N1c2VkIH0pID0+IHtcclxuICAgICAgICAvLyBLZWVwIGluIG1pbmQgdGhhdCBvbmNlIHdlIGdldCBvdXIgZWxlbWVudCwgZXZlbiBpZiB0aGUgaG9vayBhbmQgZmlsdGVyIGZ1bmN0aW9uc1xyXG4gICAgICAgIC8vIGRvbid0IHJlLXJ1biwgdGhlIGN1cnJlbnRseS1mb2N1c2VkIGVsZW1lbnQgd2lsbCBzdGlsbCBiZSByZXR1cm5lZCBiZWxvdywgYW5kLFxyXG4gICAgICAgIC8vIGV2ZW4gaWYgaXQncyBub3QgdXMgb3Igb25lIG9mIG91ciBjaGlsZHJlbiwgd2lsbCBzdGlsbCBiZSBzYWZlbHkgZmlsdGVyZWQgb3V0IGF0IHJlbmRlciB0aW1lLlxyXG4gICAgICAgIGxldCBlbGVtZW50ID0gZ2V0RWxlbWVudCgpO1xyXG4gICAgICAgIGlmICghZWxlbWVudClcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGxldCBoYXNGb2N1c05vdyA9IChlbGVtZW50LmNvbnRhaW5zKGN1cnJlbnQpIHx8IGVsZW1lbnQuY29udGFpbnMobGFzdCkpO1xyXG4gICAgICAgIGlmIChoYXNGb2N1c05vdykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBoYWRGb2N1c0JlZm9yZVRoaXMgPSAoZ2V0SGFzTGFzdEZvY3VzKCkgfHwgZ2V0SGFzRm9jdXMoKSk7XHJcbiAgICAgICAgICAgIGlmIChoYWRGb2N1c0JlZm9yZVRoaXMpIHtcclxuICAgICAgICAgICAgICAgIC8vIFJldHVybiB0cnVlIG9uY2UsIHNvIHRoYXQgdXNlQWN0aXZlRWxlbWVudCB3aWxsIHJldHVybiBvbmUgaW5zdGFuY2Ugb2YgYSBkaWZmZXJlbnQgZWxlbWVudCBoYXZpbmcgZm9jdXMuXHJcbiAgICAgICAgICAgICAgICAvLyBUaGVuLCBiYWNrIG91dHNpZGUgdGhpcyBmaWx0ZXIgZnVuY3Rpb24sIHdlJ2xsIGtub3cgdGhhdCB3ZSdyZSBubyBsb25nZXIgZm9jdXNlZC5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbXSkpO1xyXG4gICAgLy8gVGhlc2UgYXJlIHByaW1hcmlseSB1c2VkIGZvciBib29ra2VlcGluZyBkdXJpbmcgdGhlIGZpbHRlciBmdW5jdGlvbiBhYm92ZS5cclxuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7IHNldEhhc0ZvY3VzKGVsZW1lbnQ/LmNvbnRhaW5zKGFjdGl2ZUVsZW1lbnQpID8/IGZhbHNlKTsgfSwgW2VsZW1lbnQsIGFjdGl2ZUVsZW1lbnRdKTtcclxuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7IHNldEhhc0xhc3RGb2N1cyhlbGVtZW50Py5jb250YWlucyhsYXN0QWN0aXZlRWxlbWVudCkgPz8gZmFsc2UpOyB9LCBbZWxlbWVudCwgbGFzdEFjdGl2ZUVsZW1lbnRdKTtcclxuICAgIGNvbnN0IHVzZUhhc0ZvY3VzUHJvcHMgPSB1c2VDYWxsYmFjaygocHJvcHMpID0+IHsgcmV0dXJuIHVzZVJlZkVsZW1lbnRQcm9wcyhwcm9wcyk7IH0sIFt1c2VSZWZFbGVtZW50UHJvcHNdKTtcclxuICAgIGNvbnN0IGZvY3VzZWQgPSB1c2VNZW1vKCgpID0+IHsgcmV0dXJuIGVsZW1lbnQgPT0gYWN0aXZlRWxlbWVudDsgfSwgW2VsZW1lbnQsIGFjdGl2ZUVsZW1lbnRdKTtcclxuICAgIGNvbnN0IGZvY3VzZWRJbm5lciA9IHVzZU1lbW8oKCkgPT4geyByZXR1cm4gZWxlbWVudD8uY29udGFpbnMoYWN0aXZlRWxlbWVudCkgPz8gZmFsc2U7IH0sIFtlbGVtZW50LCBhY3RpdmVFbGVtZW50XSk7XHJcbiAgICBjb25zdCBsYXN0Rm9jdXNlZCA9IHVzZU1lbW8oKCkgPT4geyByZXR1cm4gZWxlbWVudCA9PSBsYXN0QWN0aXZlRWxlbWVudDsgfSwgW2VsZW1lbnQsIGxhc3RBY3RpdmVFbGVtZW50XSk7XHJcbiAgICBjb25zdCBsYXN0Rm9jdXNlZElubmVyID0gdXNlTWVtbygoKSA9PiB7IHJldHVybiBlbGVtZW50Py5jb250YWlucyhsYXN0QWN0aXZlRWxlbWVudCkgPz8gZmFsc2U7IH0sIFtlbGVtZW50LCBsYXN0QWN0aXZlRWxlbWVudF0pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VIYXNGb2N1c1Byb3BzLFxyXG4gICAgICAgIGZvY3VzZWQsXHJcbiAgICAgICAgZm9jdXNlZElubmVyLFxyXG4gICAgICAgIGxhc3RGb2N1c2VkLFxyXG4gICAgICAgIGxhc3RGb2N1c2VkSW5uZXJcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLWhhcy1mb2N1cy5qcy5tYXAiLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyB1c2VNZXJnZWRQcm9wcyB9IGZyb20gXCIuL3VzZS1tZXJnZWQtcHJvcHNcIjtcclxuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwiLi91c2Utc3RhdGVcIjtcclxuY29uc3QgVGFibGUgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Xy1cIjtcclxuZnVuY3Rpb24gYmFzZTY0KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gVGFibGVbdmFsdWVdO1xyXG59XHJcbmZ1bmN0aW9uIHJhbmRvbTZCaXRzKCkge1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDBiMTAwMDAwMCk7XHJcbn1cclxuZnVuY3Rpb24gcmFuZG9tNjRCaXRzKCkge1xyXG4gICAgcmV0dXJuIFtyYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpLCByYW5kb202Qml0cygpXTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyBhIHJhbmRvbWx5LWdlbmVyYXRlZCBJRCB3aXRoIGFuIG9wdGlvbmFsIHByZWZpeC5cclxuICogTm90ZSB0aGF0IGlmIHRoZSBwcmVmaXggaXMgKmV4cGxpY2l0bHkqIHNldCB0byBcIlwiLCB0aGVuXHJcbiAqIElEcyB0aGF0IGFyZSBub3QgdmFsaWQgdW5kZXIgSFRNTDQgbWF5IGJlIGdlbmVyYXRlZC4gT2ggbm8uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVSYW5kb21JZChwcmVmaXgpIHtcclxuICAgIHJldHVybiBgJHtwcmVmaXggPz8gXCJpZC1cIn0ke3JhbmRvbTY0Qml0cygpLm1hcChuID0+IGJhc2U2NChuKSkuam9pbihcIlwiKX1gO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgaG9vayB0aGF0IG1vZGlmaWVzIGEgc2V0IG9mIHByb3BzIHRvIHByb3ZpZGUgYSByYW5kb21seS1nZW5lcmF0ZWQgSUQgaWYgb25lIHdhcyBub3QgcHJvdmlkZWQuXHJcbiAqXHJcbiAqIElmIHlvdSdkIGxpa2UgdG8gdXNlIHRoZSBJRCBpbiBhIHByb3BlcnR5IHRoYXQncyAqbm90KiBuYW1lZCBgaWRgIChsaWtlIGBmb3JgIG9yIGBhcmlhLWxhYmVsbGVkYnlgIG9yIHdoYXRub3QpLCBgdXNlUmVmZXJlbmNlZElkUHJvcHNgIGlzIGFsc28gcHJvdmlkZWQuXHJcbiAqXHJcbiAqIEFuZCB0aGUgcmFuZG9tbHktZ2VuZXJhdGVkIGlkIGl0c2VsZiBpcyBhbHNvIHByb3ZpZGVkIGluIGNhc2UgeW91IHdhbnQgdG8gaGFuZGxlIHRoZSBsb2dpYyB5b3Vyc2VsZiB3aXRob3V0IGB1c2VNZXJnZWRQcm9wc2AuXHJcbiAqXHJcbiAqIFVubGlrZSBtb3N0IG90aGVyIGB1c2UqUHJvcHNgIGhvb2tzLCB0aGVzZSBhcmUgbW9zdGx5IHN0YWJsZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VSYW5kb21JZCh7IHByZWZpeCB9ID0ge30pIHtcclxuICAgIGNvbnN0IFtyYW5kb21JZCwgc2V0UmFuZG9tSWRdID0gdXNlU3RhdGUoKCkgPT4gZ2VuZXJhdGVSYW5kb21JZChwcmVmaXgpKTtcclxuICAgIGNvbnN0IFt3YXRjaFByZWZpeFVwZGF0ZXMsIHNldFdhdGNoUHJlZml4VXBkYXRlcywgZ2V0V2F0Y2hQcmVmaXhVcGRhdGVzXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgd2F0Y2hQcmVmaXhVcGRhdGVzID0gZ2V0V2F0Y2hQcmVmaXhVcGRhdGVzKCk7XHJcbiAgICAgICAgaWYgKHdhdGNoUHJlZml4VXBkYXRlcylcclxuICAgICAgICAgICAgc2V0UmFuZG9tSWQoKCkgPT4gZ2VuZXJhdGVSYW5kb21JZChwcmVmaXgpKTtcclxuICAgICAgICBzZXRXYXRjaFByZWZpeFVwZGF0ZXModHJ1ZSk7XHJcbiAgICB9LCBbcHJlZml4XSk7XHJcbiAgICAvLyBXaGF0ZXZlciBJRCB3YXMgbW9zdCByZWNlbnRseSB1c2VkIGJ5IHRoZSBhY3R1YWwgXCJpZFwiIHByb3AuXHJcbiAgICAvLyBVc2VkIHNvIHRoYXQgYW55IElELXJlZmVyZW5jaW5nIHByb3BzIGRvbid0IG5lZWQgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZS5cclxuICAgIC8vXHJcbiAgICAvLyBUT0RPOiBUaGlzIGRvZXMgbWVhbiB0aGF0IG9uIHRoZSBmaXJzdCByZW5kZXIsIGlmIGp1c3QgdGhlIElEIGlzIHByb3ZpZGVkLFxyXG4gICAgLy8gdGhlcmUgd2lsbCBiZSBhIHRlbXBvcmFyeSBtaXNtYXRjaCwgYnV0IGl0J3MgY29ycmVjdGVkIGJlZm9yZSByZW5kZXJpbmcgZmluaXNoZXMuXHJcbiAgICAvLyBJcyB0aGlzIG9rYXk/XHJcbiAgICBjb25zdCBbdXNlZElkLCBzZXRVc2VkSWQsIGdldFVzZWRJZF0gPSB1c2VTdGF0ZSh1bmRlZmluZWQpO1xyXG4gICAgY29uc3QgdXNlUmVmZXJlbmNlZElkUHJvcHMgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiB1c2VSZWZlcmVuY2VkSWRQcm9wcyhpZFByb3BOYW1lKSB7XHJcbiAgICAgICAgY29uc3QgcmV0ID0gZnVuY3Rpb24gKHsgW2lkUHJvcE5hbWVdOiBnaXZlbklkLCAuLi5wcm9wcyB9KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVzZWRJZDIgPSAoZ2l2ZW5JZCA/PyB1c2VkSWQgPz8gcmFuZG9tSWQgPz8gdW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgaWYgKGlkUHJvcE5hbWUgPT09IFwiaWRcIilcclxuICAgICAgICAgICAgICAgIHNldFVzZWRJZCh1c2VkSWQyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKCkoeyBbaWRQcm9wTmFtZV06IHVzZWRJZDIgfSwgcHJvcHMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH0sIFt1c2VkSWQsIHJhbmRvbUlkXSk7XHJcbiAgICBjb25zdCB1c2VSYW5kb21JZFByb3BzID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlUmFuZG9tSWRQcm9wcyhwKSB7XHJcbiAgICAgICAgcmV0dXJuIHVzZVJlZmVyZW5jZWRJZFByb3BzKFwiaWRcIikocCk7XHJcbiAgICB9LCBbdXNlUmVmZXJlbmNlZElkUHJvcHNdKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmFuZG9tSWQsXHJcbiAgICAgICAgaWQ6IHVzZWRJZCxcclxuICAgICAgICBnZXRJZDogZ2V0VXNlZElkLFxyXG4gICAgICAgIHVzZVJhbmRvbUlkUHJvcHMsXHJcbiAgICAgICAgdXNlUmVmZXJlbmNlZElkUHJvcHNcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gYWNjZXB0c1N0cmluZ09yQ3NzT3JVbmRlZmluZWQodSkgeyB9XHJcbmZ1bmN0aW9uIGFjY2VwdHNTdHJpbmdPckNzcyhzdHIpIHsgfVxyXG5mdW5jdGlvbiBhY2NlcHRzQ3NzKHByb3ApIHsgfVxyXG5mdW5jdGlvbiB0ZXN0KHByb3BzKSB7XHJcbiAgICBjb25zdCB7IGlkLCByYW5kb21JZCwgdXNlUmFuZG9tSWRQcm9wcywgdXNlUmVmZXJlbmNlZElkUHJvcHMgfSA9IHVzZVJhbmRvbUlkKCk7XHJcbiAgICAvL2NvbnN0IHAxYTogTWVyZ2VkUHJvcHM8eyBpZDogc3RyaW5nIH0sIHsgIH0+ID0gdXNlUmFuZG9tSWRQcm9wcyh7IGlkOiB1bmRlZmluZWQgfSlcclxuICAgIGNvbnN0IHAxYiA9IHVzZVJhbmRvbUlkUHJvcHMoeyAuLi5wcm9wcywgaWQ6IHVuZGVmaW5lZCB9KTtcclxuICAgIGNvbnN0IHAyYSA9IHVzZVJlZmVyZW5jZWRJZFByb3BzKFwiZm9yXCIpKHsgaWQ6IHVuZGVmaW5lZCB9KTtcclxuICAgIGNvbnN0IHAyYiA9IHVzZVJlZmVyZW5jZWRJZFByb3BzKFwiZm9yXCIpKHsgLi4ucHJvcHMsIGlkOiB1bmRlZmluZWQgfSk7XHJcbiAgICBjb25zdCBwMmMgPSB1c2VSZWZlcmVuY2VkSWRQcm9wcyhcImZvclwiKShwcm9wcyk7XHJcbiAgICBjb25zdCBwM2EgPSB1c2VSYW5kb21JZFByb3BzKHVzZVJlZmVyZW5jZWRJZFByb3BzKFwiZm9yXCIpKHsgaWQ6IHVuZGVmaW5lZCB9KSk7XHJcbiAgICBjb25zdCBwM2IgPSB1c2VSYW5kb21JZFByb3BzKHVzZVJlZmVyZW5jZWRJZFByb3BzKFwiZm9yXCIpKHsgLi4ucHJvcHMsIGlkOiB1bmRlZmluZWQgfSkpO1xyXG4gICAgY29uc3QgcDRhID0gdXNlUmVmZXJlbmNlZElkUHJvcHMoXCJmb3JcIikodXNlUmFuZG9tSWRQcm9wcyh7IGlkOiB1bmRlZmluZWQgfSkpO1xyXG4gICAgY29uc3QgcDRiID0gdXNlUmVmZXJlbmNlZElkUHJvcHMoXCJmb3JcIikocDFiKTtcclxuICAgIC8vcDFhLmlkO1xyXG4gICAgcDFiLmlkO1xyXG4gICAgcDJhW1wiZm9yXCJdO1xyXG4gICAgcDJiW1wiZm9yXCJdO1xyXG4gICAgcDJjW1wiZm9yXCJdO1xyXG4gICAgcDNhLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICBwM2IuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIHAzYVtcImZvclwiXT8uY29uY2F0KFwiXCIpO1xyXG4gICAgcDNiW1wiZm9yXCJdPy5jb25jYXQoXCJcIik7XHJcbiAgICBwNGFbXCJmb3JcIl0/LmNvbmNhdChcIlwiKTtcclxuICAgIHA0YltcImZvclwiXT8uY29uY2F0KFwiXCIpO1xyXG4gICAgcDRhLmlkPy5jb25jYXQoXCJcIik7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvciBUT0RPOiBJdCdzIGJlY2F1c2UgaXQgcmVzb2x2ZXMgdG8gXCJpZDogdW5kZWZpbmVkICYgc3RyaW5nXCIgLS0gdGhpcyBzaG91bGRuJ3QgaGFwcGVuXHJcbiAgICBwNGIuaWQ/LmNvbmNhdChcIlwiKTtcclxuICAgIGFjY2VwdHNTdHJpbmdPckNzc09yVW5kZWZpbmVkKHAxYi5zdHlsZSk7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgYWNjZXB0c1N0cmluZ09yQ3NzKHAxYi5zdHlsZSk7XHJcbiAgICAvLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgcDJhLnN0eWxlPy5iYWNrZ3JvdW5kQ29sb3I7XHJcbiAgICBhY2NlcHRzU3RyaW5nT3JDc3NPclVuZGVmaW5lZChwMmIuc3R5bGUpO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3JcclxuICAgIGFjY2VwdHNTdHJpbmdPckNzcyhwMmIuc3R5bGUpO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3JcclxuICAgIHAzYS5zdHlsZT8uYmFja2dyb3VuZENvbG9yO1xyXG4gICAgYWNjZXB0c1N0cmluZ09yQ3NzT3JVbmRlZmluZWQocDNiLnN0eWxlKTtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICBwNGEuc3R5bGUuYmFja2dyb3VuZENvbG9yO1xyXG4gICAgYWNjZXB0c1N0cmluZ09yQ3NzT3JVbmRlZmluZWQocDRiLnN0eWxlKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtcmFuZG9tLWlkLmpzLm1hcCIsImltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgdXNlUmVmRWxlbWVudCB9IGZyb20gXCIuL3VzZS1yZWYtZWxlbWVudFwiO1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCIuL3VzZS1zdGF0ZVwiO1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlRWxlbWVudFNpemUoeyBvYnNlcnZlQm94IH0gPSB7fSkge1xyXG4gICAgY29uc3QgeyBlbGVtZW50LCB1c2VSZWZFbGVtZW50UHJvcHMgfSA9IHVzZVJlZkVsZW1lbnQoKTtcclxuICAgIGNvbnN0IFtzaXplLCBzZXRTaXplLCBnZXRTaXplXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBjb25zdCBoYW5kbGVVcGRhdGUgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGNsaWVudFdpZHRoLCBzY3JvbGxXaWR0aCwgb2Zmc2V0V2lkdGgsIGNsaWVudEhlaWdodCwgc2Nyb2xsSGVpZ2h0LCBvZmZzZXRIZWlnaHQsIGNsaWVudExlZnQsIHNjcm9sbExlZnQsIG9mZnNldExlZnQsIGNsaWVudFRvcCwgc2Nyb2xsVG9wLCBvZmZzZXRUb3AgfSA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBzZXRTaXplKHsgY2xpZW50V2lkdGgsIHNjcm9sbFdpZHRoLCBvZmZzZXRXaWR0aCwgY2xpZW50SGVpZ2h0LCBzY3JvbGxIZWlnaHQsIG9mZnNldEhlaWdodCwgY2xpZW50TGVmdCwgc2Nyb2xsTGVmdCwgb2Zmc2V0TGVmdCwgY2xpZW50VG9wLCBzY3JvbGxUb3AsIG9mZnNldFRvcCB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKCEoXCJSZXNpemVPYnNlcnZlclwiIGluIHdpbmRvdykpIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgaGFuZGxlVXBkYXRlLCB7IHBhc3NpdmU6IHRydWUgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBoYW5kbGVVcGRhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHsgaGFuZGxlVXBkYXRlKCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50LCB7IGJveDogb2JzZXJ2ZUJveCB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBvYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LCBbZWxlbWVudCwgb2JzZXJ2ZUJveF0pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgIGVsZW1lbnRTaXplOiBzaXplLFxyXG4gICAgICAgIGdldEVsZW1lbnRTaXplOiBnZXRTaXplLFxyXG4gICAgICAgIHVzZUVsZW1lbnRTaXplUHJvcHM6IHVzZVJlZkVsZW1lbnRQcm9wc1xyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtZWxlbWVudC1zaXplLmpzLm1hcCIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VMYXlvdXRFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyKSB7XHJcbiAgICByZXR1cm4gKHN0clswXS50b1VwcGVyQ2FzZSgpICsgc3RyLnN1YnN0cigxKSk7XHJcbn1cclxuLyoqXHJcbiAqIEluc3BlY3RzIHRoZSBlbGVtZW50J3Mgc3R5bGUgYW5kIGRldGVybWluZXMgdGhlIGxvZ2ljYWwgZGlyZWN0aW9uIHRoYXQgdGV4dCBmbG93cy5cclxuICpcclxuICogQ2VydGFpbiBDU1MgcHJvcGVydGllcywgbGlrZSBgYmxvY2stc2l6ZWAsIHJlc3BlY3QgdGhlIGN1cnJlbnQgd3JpdGluZyBtb2RlIGFuZCB0ZXh0IGRpcmVjdGlvbi5cclxuICogQnV0IGB0cmFuc2Zvcm1gLCBgY2xpcGAsIGV0Yy4gZG9uJ3QuXHJcbiAqXHJcbiAqIFRoaXMgaXMgcHJvdmlkZWQgc28gdGhhdCBDU1MgcHJvcGVydGllcyBjYW4gY29uc2lzdGVudGx5IHVzZSB0aG9zZSBsb2dpY2FsIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXdyaXRpbmctbW9kZXMvI2xvZ2ljYWwtdG8tcGh5c2ljYWxcclxuICpcclxuICogQHJldHVybnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBmdW5jdGlvbnM6XHJcbiAqICogYGdldExvZ2ljYWxEaXJlY3Rpb25gOiByZXRyaWV2ZXMgYSBgTG9naWNhbERpcmVjdGlvbkluZm9gIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZWxlbWVudC4gKEZ1bmN0aW9uIGlzIGNvbnN0YW50IGJldHdlZW4gcmVuZGVycylcclxuICogKiBgY29udmVydEVsZW1lbnRTaXplYDogV2hlbiB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHVzZUVsZW1lbnRTaXplYCwgYWxsb3dzIHlvdSB0byByZXRyaWV2ZSB0aGUgbG9naWNhbCBzaXplIG9mIGFuIGVsZW1lbnQgaW5zdGVhZCBvZiB0aGUgcGh5c2ljYWwgc2l6ZS5cclxuICogKiBgY29udmVydFRvTG9naWNhbE9yaWVudGF0aW9uYDogQmFzZWQgb24gdGhlIGN1cnJlbnQgZGlyZWN0aW9uLCBjb252ZXJ0cyBcImhvcml6b250YWxcIiBvciBcInZlcnRpY2FsXCIgdG8gXCJpbmxpbmVcIiBvciBcImJsb2NrXCIuXHJcbiAqICogYGNvbnZlcnRUb1BoeXNpY2FsT3JpZW50YXRpb25gOiAgQmFzZWQgb24gdGhlIGN1cnJlbnQgZGlyZWN0aW9uLCBjb252ZXJ0cyBcImlubGluZVwiIG9yIFwiYmxvY2tcIiB0byBcImhvcml6b250YWxcIiBvciBcInZlcnRpY2FsXCIuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9naWNhbERpcmVjdGlvbihlbGVtZW50KSB7XHJcbiAgICBjb25zdCBbd3JpdGluZ01vZGUsIHNldFdyaXRpbmdNb2RlXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgW2RpcmVjdGlvbiwgc2V0RGlyZWN0aW9uXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgW3RleHRPcmllbnRhdGlvbiwgc2V0VGV4dE9yaWVudGF0aW9uXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3Qgd3JpdGluZ01vZGVSZWYgPSB1c2VSZWYod3JpdGluZ01vZGUpO1xyXG4gICAgY29uc3QgZGlyZWN0aW9uUmVmID0gdXNlUmVmKGRpcmVjdGlvbik7XHJcbiAgICBjb25zdCB0ZXh0T3JpZW50YXRpb25SZWYgPSB1c2VSZWYodGV4dE9yaWVudGF0aW9uKTtcclxuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7IHdyaXRpbmdNb2RlUmVmLmN1cnJlbnQgPSB3cml0aW5nTW9kZTsgfSwgW3dyaXRpbmdNb2RlXSk7XHJcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4geyBkaXJlY3Rpb25SZWYuY3VycmVudCA9IGRpcmVjdGlvbjsgfSwgW2RpcmVjdGlvbl0pO1xyXG4gICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHsgdGV4dE9yaWVudGF0aW9uUmVmLmN1cnJlbnQgPSB0ZXh0T3JpZW50YXRpb247IH0sIFt0ZXh0T3JpZW50YXRpb25dKTtcclxuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgY29tcHV0ZWRTdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcclxuICAgICAgICAgICAgY29uc3QgdyA9IGNvbXB1dGVkU3R5bGVzLndyaXRpbmdNb2RlO1xyXG4gICAgICAgICAgICBjb25zdCB0ID0gY29tcHV0ZWRTdHlsZXMudGV4dE9yaWVudGF0aW9uO1xyXG4gICAgICAgICAgICBjb25zdCBkID0gY29tcHV0ZWRTdHlsZXMuZGlyZWN0aW9uO1xyXG4gICAgICAgICAgICBzZXRXcml0aW5nTW9kZSh3IHx8IFwiaG9yaXpvbnRhbC10YlwiKTtcclxuICAgICAgICAgICAgc2V0RGlyZWN0aW9uKGQgfHwgXCJydGxcIik7XHJcbiAgICAgICAgICAgIHNldFRleHRPcmllbnRhdGlvbih0IHx8IFwibWl4ZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBnZXRMb2dpY2FsRGlyZWN0aW9uID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgICAgIGxldCB3cml0aW5nTW9kZSA9IHdyaXRpbmdNb2RlUmVmLmN1cnJlbnQ7XHJcbiAgICAgICAgbGV0IGRpcmVjdGlvbiA9IGRpcmVjdGlvblJlZi5jdXJyZW50O1xyXG4gICAgICAgIGxldCB0ZXh0T3JpZW50YXRpb24gPSB0ZXh0T3JpZW50YXRpb25SZWYuY3VycmVudDtcclxuICAgICAgICBpZiAoIXdyaXRpbmdNb2RlIHx8ICFkaXJlY3Rpb24gfHwgIXRleHRPcmllbnRhdGlvbilcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgaWYgKHRleHRPcmllbnRhdGlvbiA9PSBcInVwcmlnaHRcIilcclxuICAgICAgICAgICAgZGlyZWN0aW9uID0gXCJsdHJcIjtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAuLi5Xcml0aW5nTW9kZXNbd3JpdGluZ01vZGUgPz8gXCJob3Jpem9udGFsLXRiXCJdW2RpcmVjdGlvbiA/PyBcImx0clwiXVxyXG4gICAgICAgIH07XHJcbiAgICB9LCBbd3JpdGluZ01vZGVSZWYsIGRpcmVjdGlvblJlZiwgdGV4dE9yaWVudGF0aW9uUmVmXSk7XHJcbiAgICBjb25zdCBjb252ZXJ0VG9Mb2dpY2FsT3JpZW50YXRpb24gPSB1c2VDYWxsYmFjaygoZWxlbWVudE9yaWVudGF0aW9uLCBkaXJlY3Rpb24pID0+IHtcclxuICAgICAgICBkaXJlY3Rpb24gPz89IGdldExvZ2ljYWxEaXJlY3Rpb24oKTtcclxuICAgICAgICBpZiAoZGlyZWN0aW9uPy5pbmxpbmVPcmllbnRhdGlvbiA9PT0gZWxlbWVudE9yaWVudGF0aW9uKVxyXG4gICAgICAgICAgICByZXR1cm4gXCJpbmxpbmVcIjtcclxuICAgICAgICByZXR1cm4gXCJibG9ja1wiO1xyXG4gICAgfSwgW2dldExvZ2ljYWxEaXJlY3Rpb25dKTtcclxuICAgIGNvbnN0IGNvbnZlcnRUb1BoeXNpY2FsT3JpZW50YXRpb24gPSB1c2VDYWxsYmFjaygoZWxlbWVudE9yaWVudGF0aW9uLCBkaXJlY3Rpb24pID0+IHtcclxuICAgICAgICBkaXJlY3Rpb24gPz89IGdldExvZ2ljYWxEaXJlY3Rpb24oKTtcclxuICAgICAgICBpZiAoZWxlbWVudE9yaWVudGF0aW9uID09IFwiaW5saW5lXCIpIHtcclxuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbj8uaW5saW5lT3JpZW50YXRpb24gPT0gXCJob3Jpem9udGFsXCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJob3Jpem9udGFsXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBcInZlcnRpY2FsXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoZGlyZWN0aW9uPy5ibG9ja09yaWVudGF0aW9uID09IFwidmVydGljYWxcIilcclxuICAgICAgICAgICAgICAgIHJldHVybiBcInZlcnRpY2FsXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBcImhvcml6b250YWxcIjtcclxuICAgICAgICB9XHJcbiAgICB9LCBbZ2V0TG9naWNhbERpcmVjdGlvbl0pO1xyXG4gICAgY29uc3QgY29udmVydEVsZW1lbnRTaXplID0gdXNlQ2FsbGJhY2soKGVsZW1lbnRTaXplLCBkaXJlY3Rpb24pID0+IHtcclxuICAgICAgICBkaXJlY3Rpb24gPz89IGdldExvZ2ljYWxEaXJlY3Rpb24oKTtcclxuICAgICAgICBpZiAoZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgaW5saW5lU2l6ZSwgYmxvY2tTaXplLCBpbmxpbmVEaXJlY3Rpb24sIGJsb2NrRGlyZWN0aW9uIH0gPSBkaXJlY3Rpb247XHJcbiAgICAgICAgICAgIC8vIFNpemUgaXMgcmVsYXRpdmVseSBzaW1wbGVcclxuICAgICAgICAgICAgbGV0IGNsaWVudElubGluZVNpemUgPSBlbGVtZW50U2l6ZVtgY2xpZW50JHtjYXBpdGFsaXplKGlubGluZVNpemUpfWBdO1xyXG4gICAgICAgICAgICBsZXQgY2xpZW50QmxvY2tTaXplID0gZWxlbWVudFNpemVbYGNsaWVudCR7Y2FwaXRhbGl6ZShibG9ja1NpemUpfWBdO1xyXG4gICAgICAgICAgICBsZXQgb2Zmc2V0SW5saW5lU2l6ZSA9IGVsZW1lbnRTaXplW2BvZmZzZXQke2NhcGl0YWxpemUoaW5saW5lU2l6ZSl9YF07XHJcbiAgICAgICAgICAgIGxldCBvZmZzZXRCbG9ja1NpemUgPSBlbGVtZW50U2l6ZVtgb2Zmc2V0JHtjYXBpdGFsaXplKGJsb2NrU2l6ZSl9YF07XHJcbiAgICAgICAgICAgIGxldCBzY3JvbGxJbmxpbmVTaXplID0gZWxlbWVudFNpemVbYHNjcm9sbCR7Y2FwaXRhbGl6ZShpbmxpbmVTaXplKX1gXTtcclxuICAgICAgICAgICAgbGV0IHNjcm9sbEJsb2NrU2l6ZSA9IGVsZW1lbnRTaXplW2BzY3JvbGwke2NhcGl0YWxpemUoYmxvY2tTaXplKX1gXTtcclxuICAgICAgICAgICAgLy8gUG9zaXRpb24gcmVxdWlyZXMgdXMgdG8gc29tZXRpbWVzIHVzZSBvbmUgcHJvcGVydHkgKGxpa2UgYGxlZnRgKVxyXG4gICAgICAgICAgICAvLyBvciBzb21ldGltZXMgdHdvIChsaWtlIGBsZWZ0YCArIGB3aWR0aGApXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFBoeXNpY2FsTGVmdFRvcChkaXIpIHsgaWYgKGRpciA9PT0gXCJsdHJcIiB8fCBkaXIgPT0gXCJydGxcIilcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImxlZnRcIjsgcmV0dXJuIFwidG9wXCI7IH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UGh5c2ljYWxSaWdodEJvdHRvbShkaXIpIHsgaWYgKGRpciA9PT0gXCJydGxcIilcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIndpZHRoXCI7IGlmIChkaXIgPT09IFwiYnR0XCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJoZWlnaHRcIjsgcmV0dXJuIG51bGw7IH1cclxuICAgICAgICAgICAgY29uc3QgZjEgPSBnZXRQaHlzaWNhbExlZnRUb3AoaW5saW5lRGlyZWN0aW9uKTtcclxuICAgICAgICAgICAgY29uc3QgZjIgPSBnZXRQaHlzaWNhbFJpZ2h0Qm90dG9tKGlubGluZURpcmVjdGlvbik7XHJcbiAgICAgICAgICAgIGNvbnN0IGYzID0gZ2V0UGh5c2ljYWxMZWZ0VG9wKGJsb2NrRGlyZWN0aW9uKTtcclxuICAgICAgICAgICAgY29uc3QgZjQgPSBnZXRQaHlzaWNhbFJpZ2h0Qm90dG9tKGJsb2NrRGlyZWN0aW9uKTtcclxuICAgICAgICAgICAgbGV0IGNsaWVudElubGluZUluc2V0ID0gZWxlbWVudFNpemVbYGNsaWVudCR7Y2FwaXRhbGl6ZShmMSl9YF0gKyAoIWYyID8gMCA6IGVsZW1lbnRTaXplW2BjbGllbnQke2NhcGl0YWxpemUoZjIpfWBdKTtcclxuICAgICAgICAgICAgbGV0IHNjcm9sbElubGluZUluc2V0ID0gZWxlbWVudFNpemVbYHNjcm9sbCR7Y2FwaXRhbGl6ZShmMSl9YF0gKyAoIWYyID8gMCA6IGVsZW1lbnRTaXplW2BzY3JvbGwke2NhcGl0YWxpemUoZjIpfWBdKTtcclxuICAgICAgICAgICAgbGV0IG9mZnNldElubGluZUluc2V0ID0gZWxlbWVudFNpemVbYG9mZnNldCR7Y2FwaXRhbGl6ZShmMSl9YF0gKyAoIWYyID8gMCA6IGVsZW1lbnRTaXplW2BvZmZzZXQke2NhcGl0YWxpemUoZjIpfWBdKTtcclxuICAgICAgICAgICAgbGV0IGNsaWVudEJsb2NrSW5zZXQgPSBlbGVtZW50U2l6ZVtgY2xpZW50JHtjYXBpdGFsaXplKGYzKX1gXSArICghZjQgPyAwIDogZWxlbWVudFNpemVbYGNsaWVudCR7Y2FwaXRhbGl6ZShmNCl9YF0pO1xyXG4gICAgICAgICAgICBsZXQgc2Nyb2xsQmxvY2tJbnNldCA9IGVsZW1lbnRTaXplW2BzY3JvbGwke2NhcGl0YWxpemUoZjMpfWBdICsgKCFmNCA/IDAgOiBlbGVtZW50U2l6ZVtgc2Nyb2xsJHtjYXBpdGFsaXplKGY0KX1gXSk7XHJcbiAgICAgICAgICAgIGxldCBvZmZzZXRCbG9ja0luc2V0ID0gZWxlbWVudFNpemVbYG9mZnNldCR7Y2FwaXRhbGl6ZShmMyl9YF0gKyAoIWY0ID8gMCA6IGVsZW1lbnRTaXplW2BvZmZzZXQke2NhcGl0YWxpemUoZjQpfWBdKTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGNsaWVudElubGluZVNpemUsXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxJbmxpbmVTaXplLFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0SW5saW5lU2l6ZSxcclxuICAgICAgICAgICAgICAgIGNsaWVudEJsb2NrU2l6ZSxcclxuICAgICAgICAgICAgICAgIHNjcm9sbEJsb2NrU2l6ZSxcclxuICAgICAgICAgICAgICAgIG9mZnNldEJsb2NrU2l6ZSxcclxuICAgICAgICAgICAgICAgIGNsaWVudElubGluZUluc2V0LFxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsSW5saW5lSW5zZXQsXHJcbiAgICAgICAgICAgICAgICBvZmZzZXRJbmxpbmVJbnNldCxcclxuICAgICAgICAgICAgICAgIGNsaWVudEJsb2NrSW5zZXQsXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxCbG9ja0luc2V0LFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0QmxvY2tJbnNldCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9LCBbZ2V0TG9naWNhbERpcmVjdGlvbl0pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRMb2dpY2FsRGlyZWN0aW9uLFxyXG4gICAgICAgIGNvbnZlcnRFbGVtZW50U2l6ZSxcclxuICAgICAgICBjb252ZXJ0VG9Mb2dpY2FsT3JpZW50YXRpb24sXHJcbiAgICAgICAgY29udmVydFRvUGh5c2ljYWxPcmllbnRhdGlvblxyXG4gICAgfTtcclxufVxyXG47XHJcbmNvbnN0IEhvcml6b250YWxUYkx0ciA9IHtcclxuICAgIGlubGluZURpcmVjdGlvbjogXCJsdHJcIixcclxuICAgIGJsb2NrRGlyZWN0aW9uOiBcInR0YlwiLFxyXG4gICAgaW5saW5lT3JpZW50YXRpb246IFwiaG9yaXpvbnRhbFwiLFxyXG4gICAgYmxvY2tPcmllbnRhdGlvbjogXCJ2ZXJ0aWNhbFwiLFxyXG4gICAgaW5saW5lU2l6ZTogXCJ3aWR0aFwiLFxyXG4gICAgYmxvY2tTaXplOiBcImhlaWdodFwiLFxyXG4gICAgbGVmdFJpZ2h0RGlyZWN0aW9uOiBcImx0clwiLFxyXG4gICAgb3ZlclVuZGVyRGlyZWN0aW9uOiBcInR0YlwiXHJcbn07XHJcbmNvbnN0IEhvcml6b250YWxUYlJ0bCA9IHtcclxuICAgIC4uLkhvcml6b250YWxUYkx0cixcclxuICAgIGlubGluZURpcmVjdGlvbjogXCJydGxcIixcclxufTtcclxuY29uc3QgVmVydGljYWxSbEx0ciA9IHtcclxuICAgIGlubGluZURpcmVjdGlvbjogXCJ0dGJcIixcclxuICAgIGJsb2NrRGlyZWN0aW9uOiBcInJ0bFwiLFxyXG4gICAgaW5saW5lT3JpZW50YXRpb246IFwidmVydGljYWxcIixcclxuICAgIGJsb2NrT3JpZW50YXRpb246IFwiaG9yaXpvbnRhbFwiLFxyXG4gICAgaW5saW5lU2l6ZTogXCJoZWlnaHRcIixcclxuICAgIGJsb2NrU2l6ZTogXCJ3aWR0aFwiLFxyXG4gICAgbGVmdFJpZ2h0RGlyZWN0aW9uOiBcInR0YlwiLFxyXG4gICAgb3ZlclVuZGVyRGlyZWN0aW9uOiBcInJ0bFwiXHJcbn07XHJcbmNvbnN0IFZlcnRpY2FsUmxSdGwgPSB7XHJcbiAgICAuLi5WZXJ0aWNhbFJsTHRyLFxyXG4gICAgaW5saW5lRGlyZWN0aW9uOiBcImJ0dFwiXHJcbn07XHJcbmNvbnN0IFNpZGV3YXlzUmxMdHIgPSB7IC4uLlZlcnRpY2FsUmxMdHIgfTtcclxuY29uc3QgU2lkZXdheXNSbFJ0bCA9IHsgLi4uVmVydGljYWxSbFJ0bCB9O1xyXG5jb25zdCBWZXJ0aWNhbExyTHRyID0ge1xyXG4gICAgLi4uVmVydGljYWxSbEx0cixcclxuICAgIGJsb2NrRGlyZWN0aW9uOiBcImx0clwiLFxyXG59O1xyXG5jb25zdCBWZXJ0aWNhbExyUnRsID0ge1xyXG4gICAgLi4uVmVydGljYWxSbFJ0bCxcclxuICAgIGJsb2NrRGlyZWN0aW9uOiBcImx0clwiLFxyXG59O1xyXG5jb25zdCBTaWRld2F5c0x0THRyID0ge1xyXG4gICAgLi4uVmVydGljYWxMckx0cixcclxuICAgIGlubGluZURpcmVjdGlvbjogXCJidHRcIixcclxuICAgIGxlZnRSaWdodERpcmVjdGlvbjogXCJidHRcIixcclxuICAgIG92ZXJVbmRlckRpcmVjdGlvbjogXCJsdHJcIlxyXG59O1xyXG5jb25zdCBTaWRld2F5c0x0UnRsID0ge1xyXG4gICAgLi4uU2lkZXdheXNMdEx0cixcclxuICAgIGlubGluZURpcmVjdGlvbjogXCJ0dGJcIlxyXG59O1xyXG5jb25zdCBIb3Jpem9udGFsVGIgPSB7XHJcbiAgICBsdHI6IEhvcml6b250YWxUYkx0cixcclxuICAgIHJ0bDogSG9yaXpvbnRhbFRiUnRsXHJcbn07XHJcbmNvbnN0IFZlcnRpY2FsUmwgPSB7XHJcbiAgICBsdHI6IFZlcnRpY2FsUmxMdHIsXHJcbiAgICBydGw6IFZlcnRpY2FsUmxSdGxcclxufTtcclxuY29uc3QgVmVydGljYWxMciA9IHtcclxuICAgIGx0cjogVmVydGljYWxMckx0cixcclxuICAgIHJ0bDogVmVydGljYWxMclJ0bFxyXG59O1xyXG5jb25zdCBTaWRld2F5c1JsID0ge1xyXG4gICAgbHRyOiBTaWRld2F5c1JsTHRyLFxyXG4gICAgcnRsOiBTaWRld2F5c1JsUnRsXHJcbn07XHJcbmNvbnN0IFNpZGV3YXlzTHIgPSB7XHJcbiAgICBsdHI6IFNpZGV3YXlzTHRMdHIsXHJcbiAgICBydGw6IFNpZGV3YXlzTHRSdGxcclxufTtcclxuY29uc3QgV3JpdGluZ01vZGVzID0ge1xyXG4gICAgXCJob3Jpem9udGFsLXRiXCI6IEhvcml6b250YWxUYixcclxuICAgIFwidmVydGljYWwtbHJcIjogVmVydGljYWxMcixcclxuICAgIFwidmVydGljYWwtcmxcIjogVmVydGljYWxSbCxcclxuICAgIFwic2lkZXdheXMtbHJcIjogU2lkZXdheXNMcixcclxuICAgIFwic2lkZXdheXMtcmxcIjogU2lkZXdheXNSbFxyXG59O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtbG9naWNhbC1kaXJlY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgdXNlUmVmLCB1c2VJbXBlcmF0aXZlSGFuZGxlLCB1c2VDYWxsYmFjayB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuLyoqXHJcbiAqIEdpdmVuIGFuIGlucHV0IHZhbHVlLCByZXR1cm5zIGEgY29uc3RhbnQgZ2V0dGVyIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWRcclxuICogaW5zaWRlIG9mIGB1c2VFZmZlY3RgIGFuZCBmcmllbmRzIHdpdGhvdXQgaW5jbHVkaW5nIGl0IGluIHRoZSBkZXBlbmRlbmN5IGFycmF5LlxyXG4gKlxyXG4gKiBVc2Ugd2l0aCBjYXV0aW9uLCBhbmQgKipkbyBub3QgdXNlIHRoZSBnZXR0ZXIgaW4gdXNlTGF5b3V0RWZmZWN0ISEqKlxyXG4gKiBgc2V0U3RhdGVgJ3MgZ2V0dGVyIGRvZXMgbm90IGhhdmUgdGhpcyBwcm9ibGVtLCBidXQgdGhlbiB5b3UncmUgdXNpbmcgeW91ciBvd24gc3RhdGVcclxuICogaW5zdGVhZCBvZiBhbiBleGlzdGluZyB2YWx1ZSwgd2hpY2ggbWlnaHQgbm90IGFsd2F5cyBiZSBmZWFzaWJsZS5cclxuICpcclxuICogV2VpZ2ggeW91ciBvcHRpb25zLCBhbmQgaG9wZWZ1bGx5IG9uZSBvZiB0aGVtIGdldHMgdGhlIGpvYiBkb25lLlxyXG4gKlxyXG4gKiBAcGFyYW0gdmFsdWVcclxuICogQHJldHVybnNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VTdGFibGVHZXR0ZXIodmFsdWUpIHtcclxuICAgIGNvbnN0IHJlZiA9IHVzZVJlZih2YWx1ZSk7XHJcbiAgICB1c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgKCkgPT4gdmFsdWUpO1xyXG4gICAgcmV0dXJuIHVzZUNhbGxiYWNrKCgpID0+IHsgcmV0dXJuIHJlZi5jdXJyZW50OyB9LCBbXSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLXN0YWJsZS1nZXR0ZXIuanMubWFwIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IHVzZVN0YWJsZUdldHRlciB9IGZyb20gXCIuL3VzZS1zdGFibGUtZ2V0dGVyXCI7XHJcbi8qKlxyXG4gKiBBbHRlcm5hdGUgdXNlQ2FsbGJhY2soKSB3aGljaCBhbHdheXMgcmV0dXJucyB0aGUgc2FtZSAod3JhcHBlZCkgZnVuY3Rpb24gcmVmZXJlbmNlXHJcbiAqIHNvIHRoYXQgaXQgY2FuIGJlIGV4Y2x1ZGVkIGZyb20gdGhlIGRlcGVuZGVuY3kgYXJyYXlzIG9mIGB1c2VFZmZlY3RgIGFuZCBmcmllbmRzLlxyXG4gKlxyXG4gKiBETyBOT1QgVVNFIFRIRSBSRVNVTFQgSU4gdXNlTGF5b3V0RWZmZWN0ISFcclxuICpcclxuICogVE9ETzogSW52ZXN0aWdhdGUgb3B0aW9ucy5kaWZmZWQgaWYgdGhlIHVzZUxheW91dEVmZmVjdCBsaW1pdGF0aW9uIGJlY29tZXMgbGltaXRsZXNzbHkgbGltaXRpbmcuXHJcbiAqXHJcbiAqIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNDA5OSNpc3N1ZWNvbW1lbnQtNjU5Mjk4NDIyXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlU3RhYmxlQ2FsbGJhY2soZm4pIHtcclxuICAgIGNvbnN0IGN1cnJlbnRDYWxsYmFja0dldHRlciA9IHVzZVN0YWJsZUdldHRlcihmbik7XHJcbiAgICByZXR1cm4gdXNlQ2FsbGJhY2soKC4uLmFyZ3MpID0+IHtcclxuICAgICAgICBjb25zdCBjdXJyZW50RnVuYyA9IGN1cnJlbnRDYWxsYmFja0dldHRlcigpO1xyXG4gICAgICAgIGlmICghY3VycmVudEZ1bmMpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYWxsYmFjayByZXRyaWV2ZWQgZnJvbSB1c2VTdGFibGVDYWxsYmFjaygpIGNhbm5vdCBiZSBjYWxsZWQgZnJvbSB1c2VMYXlvdXRFZmZlY3QoKS4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRGdW5jKC4uLmFyZ3MpO1xyXG4gICAgfSwgW10pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1zdGFibGUtY2FsbGJhY2suanMubWFwIiwiaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0IGFzIHVzZUxheW91dEVmZmVjdE5hdGl2ZSwgdXNlUmVmIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG4vKipcclxuICogV3JhcCB0aGUgbmF0aXZlIGB1c2VMYXlvdXRFZmZlY3RgIHRvIGFkZCBhcmd1bWVudHNcclxuICogdGhhdCBhbGxvdyBhY2Nlc3NpbmcgdGhlIHByZXZpb3VzIHZhbHVlIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcclxuICogYXMgd2VsbCBhcyB0aGUgY2hhbmdlcyB0aGF0IGNhdXNlZCB0aGUgaG9vayB0byBiZSBjYWxsZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cclxuICpcclxuICogQHBhcmFtIGVmZmVjdFxyXG4gKiBAcGFyYW0gaW5wdXRzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlTGF5b3V0RWZmZWN0KGVmZmVjdCwgaW5wdXRzKSB7XHJcbiAgICBjb25zdCBwcmV2SW5wdXRzID0gdXNlUmVmKGlucHV0cyk7XHJcbiAgICBjb25zdCBlZmZlY3QyID0gKCkgPT4ge1xyXG4gICAgICAgIGxldCBjaGFuZ2VzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLm1heChwcmV2SW5wdXRzLmN1cnJlbnQubGVuZ3RoLCBpbnB1dHMubGVuZ3RoKTsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmIChwcmV2SW5wdXRzLmN1cnJlbnRbaV0gIT0gaW5wdXRzW2ldKVxyXG4gICAgICAgICAgICAgICAgY2hhbmdlc1tpXSA9IHsgZnJvbTogcHJldklucHV0cy5jdXJyZW50W2ldLCB0bzogaW5wdXRzW2ldIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVmZmVjdChwcmV2SW5wdXRzLmN1cnJlbnQsIGNoYW5nZXMpO1xyXG4gICAgICAgIHByZXZJbnB1dHMuY3VycmVudCA9IGlucHV0cztcclxuICAgIH07XHJcbiAgICB1c2VMYXlvdXRFZmZlY3ROYXRpdmUoZWZmZWN0MiwgaW5wdXRzKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtbGF5b3V0LWVmZmVjdC5qcy5tYXAiLCJpbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xyXG5pbXBvcnQgeyB1c2VTdGFibGVHZXR0ZXIgfSBmcm9tIFwiLi91c2Utc3RhYmxlLWdldHRlclwiO1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlVGltZW91dCh7IHRpbWVvdXQsIGNhbGxiYWNrLCB0cmlnZ2VySW5kZXggfSkge1xyXG4gICAgY29uc3Qgc3RhYmxlQ2FsbGJhY2sgPSB1c2VTdGFibGVDYWxsYmFjayhjYWxsYmFjayk7XHJcbiAgICBjb25zdCBnZXRUaW1lb3V0ID0gdXNlU3RhYmxlR2V0dGVyKHRpbWVvdXQpO1xyXG4gICAgY29uc3QgdGltZW91dElzTnVsbCA9ICh0aW1lb3V0ID09IG51bGwpO1xyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBjb25zdCB0aW1lb3V0ID0gZ2V0VGltZW91dCgpO1xyXG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHRpbWVvdXRJc051bGwgPT0gKHRpbWVvdXQgPT0gbnVsbCkpO1xyXG4gICAgICAgIGlmICh0aW1lb3V0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZSA9IHNldFRpbWVvdXQoc3RhYmxlQ2FsbGJhY2ssIHRpbWVvdXQpO1xyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4gY2xlYXJUaW1lb3V0KGhhbmRsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW3RyaWdnZXJJbmRleCwgdGltZW91dElzTnVsbF0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS10aW1lb3V0LmpzLm1hcCIsImltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xyXG5pbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tIFwiLi91c2UtbGF5b3V0LWVmZmVjdFwiO1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCIuL3VzZS1zdGF0ZVwiO1xyXG5pbXBvcnQgeyB1c2VUaW1lb3V0IH0gZnJvbSBcIi4vdXNlLXRpbWVvdXRcIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbi8qKlxyXG4gKiBHaXZlbiBhbiBhc3luY3Jvbm91cyBldmVudCBoYW5kbGVyLCByZXR1cm5zIGEgc3luY3Jvbm91cyBvbmUgdGhhdCB3b3JrcyBvbiB0aGUgRE9NLFxyXG4gKiBhbG9uZyB3aXRoIHNvbWUgb3RoZXIgaW5mb3JtYXRpb24gcmVsYXRlZCB0byB0aGUgY3VycmVudCBzdGF0ZS5cclxuICogRG9lcyBub3QgbW9kaWZ5IGFueSBwcm9wcy5cclxuICpcclxuICogVGhlIGhhbmRsZXIgaXMgYXV0b21hdGljYWxseSB0aHJvdHRsZWQgdG8gb25seSBydW4gb25lIGF0IGEgdGltZS5cclxuICogSWYgdGhlIGhhbmRsZXIgaXMgY2FsbGVkLCBhbmQgdGhlbiBiZWZvcmUgaXQgZmluaXNoZXMsIGlzIGNhbGxlZCBhZ2FpbixcclxuICogaXQgd2lsbCBiZSBwdXQgb24gaG9sZCB1bnRpbCB0aGUgY3VycmVudCBvbmUgZmluaXNoZXMsIGF0IHdoaWNoIHBvaW50XHJcbiAqIHRoZSBzZWNvbmQgb25lIHdpbGwgcnVuLiAgSWYgdGhlIGhhbmRsZXIgaXMgY2FsbGVkIGEgdGhpcmQgdGltZSBiZWZvcmVcclxuICogdGhlIGZpcnN0IGhhcyBmaW5pc2hlZCwgaXQgd2lsbCAqcmVwbGFjZSogdGhlIHNlY29uZCwgc28gb25seSB0aGUgbW9zdFxyXG4gKiByZWNlbnRseSBjYWxsZWQgaXRlcmF0aW9uIG9mIHRoZSBoYW5kbGVyIHdpbGwgcnVuLlxyXG4gKlxyXG4gKiBZb3UgbWF5IG9wdGlvbmFsbHkgKmFsc28qIHNwZWNpZnkgYSBkZWJvdW5jZSBwYXJhbWV0ZXIgdGhhdCB3YWl0cyB1bnRpbCB0aGVcclxuICogc3luY3Jvbm91cyBoYW5kbGVyIGhhcyBub3QgYmVlbiBjYWxsZWQgZm9yIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mXHJcbiAqIG1pbGxpc2Vjb25kcywgYXQgd2hpY2ggcG9pbnQgd2UgKmFjdHVhbGx5KiBydW4gdGhlIGFzeW5jcm9ub3VzIGhhbmRsZXJcclxuICogYWNjb3JkaW5nIHRvIHRoZSBsb2dpYyBpbiB0aGUgcHJldmlvdXMgcGFyYWdyYXBoLiBUaGlzIGlzIGluXHJcbiAqICphZGRpdGlvbiogdG8gdGhyb3R0bGluZyB0aGUgaGFuZGxlciwgYW5kIGRvZXMgbm90IHJlcGxhY2UgdGhhdCBiZWhhdmlvci5cclxuICpcclxuICogTm90ZSB0aGF0IHRoZSBwYXJhbWV0ZXJzIHRvIHRoZSBhc3luYyBoYW5kbGVyIGFyZSBzbGlnaHRseSBkaWZmZXJlbnQgdGhhblxyXG4gKiB0aGUgc3luYyBoYW5kbGVyICZuZGFzaDsgdGhlIGZpcnN0IGFyZ3VtZW50LCBhcyBkZWNpZGVkIGJ5IHlvdSB3aXRoIHRoZVxyXG4gKiBgY2FwdHVyZWAgcGFyYW1ldGVyIGZvciB0aGlzIGhvb2ssIGlzIHRoZSBcInNhdmVkXCIgaW5mb3JtYXRpb24gZnJvbSB0aGVcclxuICogZXZlbnQuICBGb3IgZXhhbXBsZSwgdGhlIGV2ZW50J3MgY3VycmVudFRhcmdldCdzIGB2YWx1ZWAsIHdoaWNoIG1heSBoYXZlXHJcbiAqIGNoYW5nZWQgYnkgdGhlIHRpbWUgdGhlIGhhbmRsZXIgaXMgKmFjdHVhbGx5KiBjYWxsZWQuICBUaGUgc2Vjb25kIGFyZ3VtZW50XHJcbiAqIGlzIHRoZSBvcmlnaW5hbCBldmVudCwgd2hpY2ggbWlnaHQgc3RpbGwgaGF2ZSBzb21lIHVzZWZ1bCBmaWVsZHMgb24gaXRcclxuICogbGlrZSBgbW91c2VYYCBvciBzb21ldGhpbmcsIGJ1dCBpcyBzdGFsZSBhdCBsZWFzdCBpbiByZWdhcmRzIHRvIHRoZVxyXG4gKiBlbGVtZW50IGl0IHJlZmVyZW5jZXMuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlQXN5bmNIYW5kbGVyKCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh7IGNhcHR1cmUsIGRlYm91bmNlIH0pIHtcclxuICAgICAgICAvLyBBbHdheXMgcmVwcmVzZW50cyB3aGF0ZXZlciBwcm9taXNlIGlzIGN1cnJlbnRseSBiZWluZyB3YWl0ZWQgb24sIG9yIG51bGwgaWYgbm9uZS5cclxuICAgICAgICBjb25zdCBbcHJvbWlzZSwgc2V0UHJvbWlzZSwgZ2V0UHJvbWlzZV0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgICAgICAvLyBLZWVwIHRyYWNrIG9mIGhvdyBtYW55IHRpbWVzIHdlJ3ZlIGFjdHVhbGx5IGNhbGxlZCB0aGUgYXN5bmMgaGFuZGxlclxyXG4gICAgICAgIGNvbnN0IFtydW5Db3VudCwgc2V0UnVuQ291bnRdID0gdXNlU3RhdGUoMCk7XHJcbiAgICAgICAgY29uc3QgW3Jlc29sdmVDb3VudCwgc2V0UmVzb2x2ZUNvdW50XSA9IHVzZVN0YXRlKDApO1xyXG4gICAgICAgIGNvbnN0IFtyZWplY3RDb3VudCwgc2V0UmVqZWN0Q291bnRdID0gdXNlU3RhdGUoMCk7XHJcbiAgICAgICAgLy8gSWYgd2UncmUgc2V0IHRvIHVzZSBhIGRlYm91bmNlLCB0aGVuIHdoZW4gdGhlIHRpbWVvdXQgZmluaXNoZXMsXHJcbiAgICAgICAgLy8gdGhlIHByb21pc2UgZnJvbSB0aGlzIHN0YXRlIG9iamVjdCBpcyB0cmFuc2ZlcnJlZCBvdmVyIHRvIGVpdGhlciBcclxuICAgICAgICAvLyB0aGUgY3VycmVudCBwcm9taXNlIG9yIHRoZSBwZW5kaW5nIHByb21pc2UuXHJcbiAgICAgICAgY29uc3QgW2RlYm91bmNlZFByb21pc2VTdGFydGVyLCBzZXREZWJvdW5jZWRQcm9taXNlU3RhcnRlciwgZ2V0RGVib3VuY2VkUHJvbWlzZVN0YXJ0ZXJdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICAgICAgLy8gV2hlbiB3ZSB3YW50IHRvIHN0YXJ0IGEgbmV3IHByb21pc2UsIHdlIHdvbid0IGFsbG93IGl0IHRvIHN0YXJ0IGlmIG9uZSBpcyBzdGlsbCBydW5uaW5nLlxyXG4gICAgICAgIC8vIEluIHRoYXQgY2FzZSwgd2Ugc3RvcmUgdGhlIHByb21pc2UgKG9yIHJhdGhlciwgYSB3YXkgdG8gc3RhcnQgdGhlIHByb21pc2UpIGluIHN0YXRlLlxyXG4gICAgICAgIGNvbnN0IFtwZW5kaW5nUHJvbWlzZVN0YXJ0ZXIsIHNldFBlbmRpbmdQcm9taXNlU3RhcnRlciwgZ2V0UGVuZGluZ1Byb21pc2VTdGFydGVyXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgICAgIC8vIFdlIG5lZWQgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGB1bmRlZmluZWRgIGFuZCBcIm5vIGVycm9yIGhhcyBiZWVuIHRocm93blwiLlxyXG4gICAgICAgIGNvbnN0IFtlcnJvciwgc2V0RXJyb3IsIGdldEVycm9yXSA9IHVzZVN0YXRlKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgY29uc3QgW2hhc0Vycm9yLCBzZXRIYXNFcnJvciwgZ2V0SGFzRXJyb3JdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgICAgIC8vIFNhbWUgdGhpbmcsIHdlIG5lZWQgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIFwibm90aGluZyBjYXB0dXJlZCB5ZXRcIiBhbmQgXCJgdW5kZWZpbmVkYCB3YXMgY2FwdHVyZWRcIlxyXG4gICAgICAgIGNvbnN0IFtjdXJyZW50Q2FwdHVyZSwgc2V0Q3VycmVudENhcHR1cmUsIGdldEN1cnJlbnRDYXB0dXJlXSA9IHVzZVN0YXRlKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgY29uc3QgW2hhc0NhcHR1cmUsIHNldEhhc0NhcHR1cmVdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgICAgIC8vIFdoZW4gdGhlIGRlYm91bmNlIHRpbWVyIGlzIHVwIChvciB3ZSBtYW51YWxseSByZXF1ZXN0IHRoZSBkZWJvdW5jZSB0byBlbmQpXHJcbiAgICAgICAgLy8gcnVuIHRoZSBub3JtYWwgXCJwbGVhc2UgY29uc2lkZXIgcnVubmluZyB0aGlzIHByb21pc2VcIiByb3V0aW5lIHRoYXQgd2Ugd291bGRcclxuICAgICAgICAvLyBoYXZlIGp1c3QgcnVuIGltbWVkaWF0ZWx5IGlmIHdlIHdlcmVuJ3QgZGVib3VuY2luZyBvdXIgcHJvbWlzZXMuXHJcbiAgICAgICAgY29uc3Qgb25EZWJvdW5jZVRpbWVVcCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGVib3VuY2VkUHJvbWlzZVN0YXJ0ZXIgPSBnZXREZWJvdW5jZWRQcm9taXNlU3RhcnRlcigpO1xyXG4gICAgICAgICAgICBpZiAoZGVib3VuY2VkUHJvbWlzZVN0YXJ0ZXIpXHJcbiAgICAgICAgICAgICAgICB3YW50VG9TdGFydEFOZXdQcm9taXNlKGRlYm91bmNlZFByb21pc2VTdGFydGVyKTtcclxuICAgICAgICAgICAgc2V0RGVib3VuY2VkUHJvbWlzZVN0YXJ0ZXIobnVsbCk7XHJcbiAgICAgICAgfSwgW3dhbnRUb1N0YXJ0QU5ld1Byb21pc2UsIHNldERlYm91bmNlZFByb21pc2VTdGFydGVyXSk7XHJcbiAgICAgICAgLy8gSGFuZGxlIHRoZSBkZWJvdW5jZS4gTG9naWNhbGx5IHRoaXMgaGFwcGVucyBiZWZvcmUgdGhlIG1haW4gc3RlcCBhcyBhIHNvcnQgb2Ygc3RlcCAwLlxyXG4gICAgICAgIC8vIFJlc2V0cyB0aGUgdGltZW91dCBhbnkgdGltZSB0aGUgaGFuZGxlciB3YXMgcmVxdWVzdGVkIHRvIGJlIGNhbGxlZCBhZ2FpblxyXG4gICAgICAgIC8vIGFuZCB3aGVuIGl0IGZpbmlzaGVzLCBhY3R1YWxseSBjYWxsIHRoZSBoYW5kbGVyIChvciBzZXQgaXQgYXMgdGhlIHBlbmRpbmcgcHJvbWlzZSlcclxuICAgICAgICB1c2VUaW1lb3V0KHtcclxuICAgICAgICAgICAgdGltZW91dDogZGVib3VuY2UgPz8gbnVsbCxcclxuICAgICAgICAgICAgY2FsbGJhY2s6IG9uRGVib3VuY2VUaW1lVXAsXHJcbiAgICAgICAgICAgIHRyaWdnZXJJbmRleDogZGVib3VuY2VkUHJvbWlzZVN0YXJ0ZXJcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBTZWUgaWYgd2Ugc2hvdWxkIHNldCBvdXIgY3VycmVudCBwcm9taXNlIHRvIGJlIHdoYXRldmVyIHRoZSBwZW5kaW5nIHByb21pc2UgaXNcclxuICAgICAgICAvLyAodXN1YWxseSBiZWNhdXNlIHRoZSBjdXJyZW50IHByb21pc2UgZmluaXNoZWQgYW5kIGJlY2FtZSBudWxsKS5cclxuICAgICAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBPdXIgY3VycmVudCBwcm9taXNlIGp1c3QgZmluaXNoZWQgYW5kIHRoZXJlJ3Mgb25lIHdhaXRpbmc/XHJcbiAgICAgICAgICAgIGlmIChwcm9taXNlID09IG51bGwgJiYgcGVuZGluZ1Byb21pc2VTdGFydGVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHdhbnRUb1N0YXJ0QU5ld1Byb21pc2UocGVuZGluZ1Byb21pc2VTdGFydGVyKTtcclxuICAgICAgICAgICAgICAgIHNldFBlbmRpbmdQcm9taXNlU3RhcnRlcihudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIFtwcm9taXNlLCBwZW5kaW5nUHJvbWlzZVN0YXJ0ZXJdKTtcclxuICAgICAgICAvLyBDYWxsZWQgYW55IHRpbWUgdGhlIGFzeW5jIGhhbmRsZXIgaXMgYWJvdXQgdG8gYmUgY2FsbGVkIGZvciB3aGF0ZXZlciByZWFzb24sXHJcbiAgICAgICAgLy8gZXhjZXB0IGZvciBkZWJvdW5jZSwgd2hpY2ggY29tZXMgZmlyc3QsIGFzIGEgc29ydCBvZiBcInN0ZXAgMFwiLlxyXG4gICAgICAgIC8vIEhhbmRsZXMgYWxsIHRoZSBuZWNlc3NhcnkgYm9pbGVycGxhdGUgcmVsYXRlZCB0byBjaG9vc2luZyB3aGV0aGVyIHRvXHJcbiAgICAgICAgLy8gcnVuIG9yIHNldCBhcyBwZW5kaW5nLCByZXNldHRpbmcgc3RhdGUgdmFyaWFibGVzLCBldGMuXHJcbiAgICAgICAgZnVuY3Rpb24gd2FudFRvU3RhcnRBTmV3UHJvbWlzZShzdGFydFByb21pc2UpIHtcclxuICAgICAgICAgICAgbGV0IGFscmVhZHlSdW5uaW5nUHJvbWlzZSA9IChnZXRQcm9taXNlKCkgIT0gbnVsbCk7XHJcbiAgICAgICAgICAgIC8vIEJvaWxlcnBsYXRlIHdyYXBwZXIgYXJvdW5kIHRoZSBnaXZlbiBwcm9taXNlIHN0YXJ0ZXJcclxuICAgICAgICAgICAgbGV0IHN0YXJ0UHJvbWlzZVdpdGhCb2lsZXJwbGF0ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFdoZW4gaXQgc3RhcnRzLCBub3RpZnkgdGhlIGNhbGxlclxyXG4gICAgICAgICAgICAgICAgc2V0UnVuQ291bnQociA9PiArK3IpO1xyXG4gICAgICAgICAgICAgICAgLy8gV2hlbiBpdCBjb21wbGV0ZXMsIG5vdGlmeSB0aGUgY2FsbGVyXHJcbiAgICAgICAgICAgICAgICAvLyBXaGVuIGl0IGZhaWxzLCBzYXZlIHRoZSBlcnJvciBhbmQgbm90aWZ5IHRoZSBjYWxsZXJcclxuICAgICAgICAgICAgICAgIC8vIFdoZW4gaXQgc2V0dGxlcywgcmVzZXQgb3VyIHN0YXRlIHNvIHdlIGNhbiBydW4gYSBwZW5kaW5nIHByb21pc2UgaWYgaXQgZXhpc3RzXHJcbiAgICAgICAgICAgICAgICBjb25zdCBvblRoZW4gPSAoKSA9PiB7IHNldFJlc29sdmVDb3VudChjID0+ICsrYyk7IH07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvbkNhdGNoID0gKGV4KSA9PiB7IHNldEVycm9yKGV4KTsgc2V0SGFzRXJyb3IodHJ1ZSk7IHNldFJlamVjdENvdW50KGMgPT4gKytjKTsgfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9uRmluYWxseSA9ICgpID0+IHsgc2V0UHJvbWlzZShudWxsKTsgfTtcclxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSB0aGUgc3BlY2lhbCBjYXNlIHdoZXJlIHRoZSBoYW5kbGVyIGlzIHN5bmNocm9ub3VzXHJcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBzdGFydFByb21pc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJdCdzIHN5bmNocm9ub3VzIGFuZCByZXR1cm5lZCBzdWNjZXNzZnVsbHkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEJhaWwgb3V0IGVhcmx5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvblRoZW4oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25GaW5hbGx5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5hc3NlcnQoXCJ0aGVuXCIgaW4gcmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEl0J3Mgc3luY2hyb25vdXMgKG9yIGFzeW5jaHJvbm91cyBidXQgZGlkbid0IGF3YWl0IGFueXRoaW5nIHlldCkgYW5kIHRocmV3IGFuIGVycm9yLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEJhaWwgb3V0IGVhcmx5LlxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2F0Y2goZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9uRmluYWxseSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIFRoZSBoYW5kbGVyIGlzIGFzeW5jaHJvbm91c1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChhc3luYyAoKSA9PiB7IGF3YWl0IHJlc3VsdDsgfSkoKS50aGVuKG9uVGhlbikuY2F0Y2gob25DYXRjaCkuZmluYWxseShvbkZpbmFsbHkpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAoIWFscmVhZHlSdW5uaW5nUHJvbWlzZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gU3RhcnQgdGhlIHByb21pc2UgaW1tZWRpYXRlbHksIGJlY2F1c2UgdGhlcmUgd2Fzbid0IG9uZSBydW5uaW5nIGFscmVhZHkuXHJcbiAgICAgICAgICAgICAgICBsZXQgbmV4dFByb21pc2UgPSBzdGFydFByb21pc2VXaXRoQm9pbGVycGxhdGUoKTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXh0UHJvbWlzZSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBIb2xkIG9uISBUaGUgaGFuZGxlciB3YXMgYWN0dWFsbHkgc3luY2hyb25vdXMsIGFuZCBhbHJlYWR5IGZpbmlzaGVkLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEJhaWwgb3V0IGVhcmx5LlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0RXJyb3IodW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRIYXNFcnJvcihmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0UHJvbWlzZShuZXh0UHJvbWlzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBEb24ndCBzdGFydCB0aGUgcHJvbWlzZSB5ZXQsIFxyXG4gICAgICAgICAgICAgICAgLy8gYW5kIGFsbG93IGl0IHRvIHN0YXJ0IGluIHRoZSBmdXR1cmUgaW5zdGVhZC5cclxuICAgICAgICAgICAgICAgIHNldFBlbmRpbmdQcm9taXNlU3RhcnRlcihfID0+IHN0YXJ0UHJvbWlzZVdpdGhCb2lsZXJwbGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHJldCA9IHtcclxuICAgICAgICAgICAgZ2V0U3luY0hhbmRsZXIsXHJcbiAgICAgICAgICAgIGdldEN1cnJlbnRDYXB0dXJlLFxyXG4gICAgICAgICAgICBjYWxsQ291bnQ6IHJ1bkNvdW50LFxyXG4gICAgICAgICAgICBjdXJyZW50Q2FwdHVyZSxcclxuICAgICAgICAgICAgaGFzQ2FwdHVyZSxcclxuICAgICAgICAgICAgcGVuZGluZzogKHByb21pc2UgIT0gbnVsbCksXHJcbiAgICAgICAgICAgIGhhc0Vycm9yLFxyXG4gICAgICAgICAgICBlcnJvcixcclxuICAgICAgICAgICAgZmx1c2hEZWJvdW5jZWRQcm9taXNlOiBvbkRlYm91bmNlVGltZVVwLFxyXG4gICAgICAgICAgICByZXNvbHZlQ291bnQsXHJcbiAgICAgICAgICAgIHJlamVjdENvdW50LFxyXG4gICAgICAgICAgICBzZXR0bGVDb3VudDogcmVqZWN0Q291bnQgKyByZXNvbHZlQ291bnRcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0U3luY0hhbmRsZXIoYXN5bmNIYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN5bmNIYW5kbGVyID0gdXNlU3RhYmxlQ2FsbGJhY2soZnVuY3Rpb24gc3luY0hhbmRsZXIoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhc3luY0hhbmRsZXIgPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIG1vc3Qgc2lnbmlmaWNhbnQgaW5mb3JtYXRpb24gZnJvbSB0aGUgZXZlbnQgYXQgdGhpcyB0aW1lLFxyXG4gICAgICAgICAgICAgICAgLy8gd2hpY2ggaXMgbmVjZXNzYXJ5IHNpbmNlIHRoZSBwcm9taXNlIGNvdWxkIGFjdHVhbGx5IGJlIGNhbGxlZCBtdWNoIGxhdGVyXHJcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBlbGVtZW50J3MgdmFsdWUgKGV0Yy4pIGhhcyBjaGFuZ2VkLlxyXG4gICAgICAgICAgICAgICAgY29uc3QgY2FwdHVyZWQgPSBjYXB0dXJlKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRDYXB0dXJlKGNhcHR1cmVkKTtcclxuICAgICAgICAgICAgICAgIHNldEhhc0NhcHR1cmUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydFByb21pc2UgPSAoKSA9PiBhc3luY0hhbmRsZXIoY2FwdHVyZWQsIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIGlmIChkZWJvdW5jZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FudFRvU3RhcnRBTmV3UHJvbWlzZShzdGFydFByb21pc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0RGVib3VuY2VkUHJvbWlzZVN0YXJ0ZXIoXyA9PiBzdGFydFByb21pc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGFzeW5jSGFuZGxlciA9PSBudWxsID8gdW5kZWZpbmVkIDogc3luY0hhbmRsZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtYXN5bmMtaGFuZGxlci5qcy5tYXAiLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyB1c2VNZXJnZWRQcm9wcyB9IGZyb20gXCIuL3VzZS1tZXJnZWQtcHJvcHNcIjtcclxuaW1wb3J0IHsgdXNlU3RhYmxlQ2FsbGJhY2sgfSBmcm9tIFwiLi91c2Utc3RhYmxlLWNhbGxiYWNrXCI7XHJcbi8qKlxyXG4gKiBBbGxvd3MgYXR0YWNoaW5nIGFuIGV2ZW50IGhhbmRsZXIgdG8gYW55ICpub24tUHJlYWN0KiBlbGVtZW50LCBhbmQgcmVtb3ZpbmcgaXQgd2hlbiB0aGUgY29tcG9uZW50IHVzaW5nIHRoZSBob29rIHVubW91bnRzLiBUaGUgY2FsbGJhY2sgZG9lcyBub3QgbmVlZCB0byBiZSBzdGFibGUgYWNyb3NzIHJlbmRlcnMuXHJcbiAqXHJcbiAqIER1ZSB0byB0eXBpbmcgbGltaXRhdGlvbnMsIHRoaXMgZnVuY3Rpb24gbXVzdCBiZSBjYWxsZWQgbGlrZSB0aGlzOlxyXG4gKlxyXG4gKiBgdXNlRXZlbnRIYW5kbGVyKGVsZW1lbnQsIFwiaW5wdXRcIik8SW5wdXRFdmVudD4oZSA9PiB7fSlgXHJcbiAqXHJcbiAqIFRoZSB0eXBlIGFyZ3VtZW50IGlzIG9wdGlvbmFsLCBidXQgbmFycm93cyBkb3duIHRoZSB0eXBlIGZyb20gXCJhIHVuaW9uIG9mIGFsbCBldmVudHNcIiB0byB3aGF0ZXZlciB5b3Ugc3BlY2lmeSwgYW5kIGVycm9ycyBpZiBpdCBkb2Vzbid0IGV4aXN0LlxyXG4gKlxyXG4gKiBUaGVyZSBpcyBhIHNlcGFyYXRlIHZlcnNpb24gdGhhdCBhdHRhY2hlcyBldmVudCBoYW5kbGVycyB0byBhIHNldCBvZiBwcm9wcy5cclxuICogSXQgdGFrZXMgZGlmZmVyZW50IGV2ZW50IHN0cmluZyB0eXBlcyAob25FdmVudCB2cyBvbmV2ZW50KS5cclxuICpcclxuICogQHBhcmFtIHRhcmdldCBBICpub24tUHJlYWN0KiBub2RlIHRvIGF0dGFjaCB0aGUgZXZlbnQgdG8uXHJcbiAqIEByZXR1cm5zXHJcbiAqICpcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VHbG9iYWxIYW5kbGVyKHRhcmdldCwgdHlwZSwgaGFuZGxlciwgb3B0aW9ucykge1xyXG4gICAgLy8gTm90ZSB0byBzZWxmOiBUaGUgdHlwaW5nIGRvZXNuJ3QgaW1wcm92ZSBldmVuIGlmIHRoaXMgaXMgc3BsaXQgdXAgaW50byBhIHN1Yi1mdW5jdGlvbi5cclxuICAgIC8vIE5vIG1hdHRlciB3aGF0LCBpdCBzZWVtcyBpbXBvc3NpYmxlIHRvIGdldCB0aGUgaGFuZGxlcidzIGV2ZW50IG9iamVjdCB0eXBlZCBwZXJmZWN0bHkuXHJcbiAgICAvLyBJdCBzZWVtcyBsaWtlIGl0J3MgZ3VhcmFudGVlZCB0byBhbHdheXMgYmUgYSB1bmlvbiBvZiBhbGwgYXZhaWxhYmxlIHR1cGVzLlxyXG4gICAgLy8gQWdhaW4sIG5vIG1hdHRlciB3aGF0IGNvbWJpbmF0aW9uIG9mIHN1Yi0gb3Igc3ViLXN1Yi1mdW5jdGlvbnMgdXNlZC5cclxuICAgIGNvbnN0IHN0YWJsZUhhbmRsZXIgPSB1c2VTdGFibGVDYWxsYmFjayhoYW5kbGVyID8/ICgoKSA9PiB7IH0pKTtcclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgc3RhYmxlSGFuZGxlciwgb3B0aW9ucyk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIHN0YWJsZUhhbmRsZXIsIG9wdGlvbnMpO1xyXG4gICAgfSwgW3RhcmdldCwgdHlwZSwgc3RhYmxlSGFuZGxlcl0pO1xyXG59XHJcbi8qKlxyXG4gKiBBbiBhbHRlcm5hdGl2ZSB3YXkgdG8gYWRkIGFuIGV2ZW50IGhhbmRsZXIgdG8gYW4gZWxlbWVudC4gVXNlZnVsIHByaW1hcmlseSB3aGVuIGludGVncmF0aW5nIDNyZCBwYXJ0eSBsaWJyYXJpZXMgdGhhdCBleHBlY3QgYSBnZW5lcmljIFwiYWRkIGV2ZW50IGhhbmRsZXJcIiBmdW5jdGlvbi5cclxuICpcclxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWxsb3dzIHlvdSB0byBtb2RpZnkgYSBzZXQgb2YgcHJvcHMgdG8gYXBwbHkgdGhpcyBoYW5kbGVyLlxyXG4gKlxyXG4gKiBGb3IgdHlwaW5nIHJlYXNvbnMsIHRoaXMgZnVuY3Rpb24gaXMgc3BsaXQgaW50byB0d28uICBVc2FnZSBpcyBsaWtlIHRoZSBmb2xsb3dpbmc6XHJcbiAqXHJcbiAqIGBgYFxyXG4gKiBjb25zdCB7IHVzZUxvY2FsRXZlbnRIYW5kbGVyUHJvcHMgfSA9IHVzZUxvY2FsRXZlbnRIYW5kbGVyPEhUTUxEaXZFbGVtZW50PigpKFwib25Nb3VzZURvd25cIiwgZSA9PiB7ICB9KTtcclxuICogY29uc3QgZGl2UHJvcHMgPSB1c2VMb2NhbEV2ZW50SGFuZGxlclByb3BzKHByb3BzKTtcclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9jYWxIYW5kbGVyKCkge1xyXG4gICAgcmV0dXJuIHVzZUNhbGxiYWNrKCh0eXBlLCBoYW5kbGVyKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3RhYmxlSGFuZGxlciA9IHVzZVN0YWJsZUNhbGxiYWNrKGhhbmRsZXIpO1xyXG4gICAgICAgIGNvbnN0IHVzZUxvY2FsRXZlbnRIYW5kbGVyUHJvcHMgPSB1c2VDYWxsYmFjaygocHJvcHMpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKCkoeyBbdHlwZV06IHN0YWJsZUhhbmRsZXIgfSwgcHJvcHMpO1xyXG4gICAgICAgIH0sIFt0eXBlXSk7XHJcbiAgICAgICAgcmV0dXJuIHsgdXNlTG9jYWxFdmVudEhhbmRsZXJQcm9wcyB9O1xyXG4gICAgfSwgW10pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1ldmVudC1oYW5kbGVyLmpzLm1hcCIsImltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgdXNlU3RhYmxlQ2FsbGJhY2sgfSBmcm9tIFwiLi91c2Utc3RhYmxlLWNhbGxiYWNrXCI7XHJcbmltcG9ydCB7IHVzZVN0YWJsZUdldHRlciB9IGZyb20gXCIuL3VzZS1zdGFibGUtZ2V0dGVyXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VJbnRlcnZhbCh7IGludGVydmFsLCBjYWxsYmFjayB9KSB7XHJcbiAgICAvLyBHZXQgYSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2l2ZW4gY2FsbGJhY2sgdGhhdCdzIHN0YWJsZVxyXG4gICAgY29uc3Qgc3RhYmxlQ2FsbGJhY2sgPSB1c2VTdGFibGVDYWxsYmFjayhjYWxsYmFjayk7XHJcbiAgICBjb25zdCBnZXRJbnRlcnZhbCA9IHVzZVN0YWJsZUdldHRlcihpbnRlcnZhbCk7XHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGxldCBpbnRlcnZhbCA9IGdldEludGVydmFsKCk7XHJcbiAgICAgICAgbGV0IGxhc3REZWxheVVzZWQgPSBpbnRlcnZhbDtcclxuICAgICAgICBpZiAoaW50ZXJ2YWwgPT0gbnVsbClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIC8vIEdldCBhIHdyYXBwZXIgYXJvdW5kIHRoZSB3cmFwcGVyIGFyb3VuZCB0aGUgY2FsbGJhY2tcclxuICAgICAgICAvLyB0aGF0IGNsZWFycyBhbmQgcmVzZXRzIHRoZSBpbnRlcnZhbCBpZiBpdCBjaGFuZ2VzLlxyXG4gICAgICAgIGNvbnN0IGFkanVzdGFibGVDYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICAgICAgc3RhYmxlQ2FsbGJhY2soKTtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudEludGVydmFsID0gZ2V0SW50ZXJ2YWwoKTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRJbnRlcnZhbCAhPSBsYXN0RGVsYXlVc2VkKSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGhhbmRsZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEludGVydmFsICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlID0gc2V0SW50ZXJ2YWwoYWRqdXN0YWJsZUNhbGxiYWNrLCBsYXN0RGVsYXlVc2VkID0gY3VycmVudEludGVydmFsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGV0IGhhbmRsZSA9IHNldEludGVydmFsKGFkanVzdGFibGVDYWxsYmFjaywgaW50ZXJ2YWwpO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGhhbmRsZSk7XHJcbiAgICB9LCBbXSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLWludGVydmFsLmpzLm1hcCIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IHVzZUxheW91dEVmZmVjdCB9IGZyb20gXCIuL3VzZS1sYXlvdXQtZWZmZWN0XCI7XHJcbmltcG9ydCB7IHVzZVJlZkVsZW1lbnQgfSBmcm9tIFwiLi91c2UtcmVmLWVsZW1lbnRcIjtcclxuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwiLi91c2Utc3RhdGVcIjtcclxuLyoqXHJcbiAqIEFsbG93cyBhIHBhcmVudCBjb21wb25lbnQgdG8gYWNjZXNzIGluZm9ybWF0aW9uIGFib3V0IGNlcnRhaW5cclxuICogY2hpbGQgY29tcG9uZW50cyBvbmNlIHRoZXkgaGF2ZSByZW5kZXJlZC5cclxuICpcclxuICogVGhpcyBob29rIGlzIHNsaWdodGx5IG1vcmUgY29tcGxpY2F0ZWQgaW4gdGhhdCBpdCByZXR1cm5zIGJvdGggYVxyXG4gKiBwcm9wLW1vZGlmeWluZyBob29rLCBidXQgYWxzbyBhIGhvb2sgdGhhdCBlYWNoIGNoaWxkIHdpbGwgbmVlZFxyXG4gKiB0byB1c2U6IGB1c2VNYW5hZ2VkQ2hpbGRgLiAgSXQncyBzdGFibGUgYWNyb3NzIHJlbmRlcnMsIHNvIGp1c3RcclxuICogdG9zcyBpdCBpbnRvIGEgYENvbnRleHRgIHNvIHRoZSBjaGlsZHJlbiBjYW4gaGF2ZSBhY2Nlc3MgdG8gaXQuXHJcbiAqIFRoaXMgZnVuY3Rpb24gcmVnaXN0ZXJzIHRoZSBjaGlsZCB3aXRoIHRoZSBwYXJlbnQgYW5kIHByb3ZpZGVzXHJcbiAqIGl0IHdpdGggYW55IHJlcXVlc3RlZCBpbmZvcm1hdGlvbiwgYnV0IGRvZXNuJ3QgZG8gYW55dGhpbmcgZWxzZVxyXG4gKiB1bnRpbCBpdCB1bm1vdW50cyBhbmQgcmV0cmFjdHMgdGhhdCBpbmZvcm1hdGlvbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VDaGlsZE1hbmFnZXIoKSB7XHJcbiAgICAvLyBUaGlzIGlzIGJsaW5kbHkgdXBkYXRlZCBhbnkgdGltZSBhIGNoaWxkIG1vdW50cyBvciB1bm1vdW50cyBpdHNlbGYuXHJcbiAgICAvLyBVc2VkIHRvIG1ha2Ugc3VyZSB0aGF0IGFueSB0aW1lIHRoZSBhcnJheSBvZiBtYW5hZ2VkIGNoaWxkcmVuIHVwZGF0ZXMsXHJcbiAgICAvLyB3ZSBhbHNvIHJlLXJlbmRlci5cclxuICAgIGNvbnN0IFtjaGlsZFVwZGF0ZUluZGV4LCBzZXRDaGlsZFVwZGF0ZUluZGV4XSA9IHVzZVN0YXRlKDApO1xyXG4gICAgY29uc3QgW3RvdGFsQ2hpbGRyZW5Nb3VudGVkLCBzZXRUb3RhbENoaWxkcmVuTW91bnRlZCwgZ2V0VG90YWxDaGlsZHJlbk1vdW50ZWRdID0gdXNlU3RhdGUoMCk7XHJcbiAgICBjb25zdCBbdG90YWxDaGlsZHJlblVub3VudGVkLCBzZXRUb3RhbENoaWxkcmVuVW5vdW50ZWQsIGdldFRvdGFsQ2hpbGRyZW5Vbm91bnRlZF0gPSB1c2VTdGF0ZSgwKTtcclxuICAgIGNvbnN0IGNoaWxkcmVuQ3VycmVudGx5TW91bnRlZCA9IHRvdGFsQ2hpbGRyZW5Nb3VudGVkIC0gdG90YWxDaGlsZHJlblVub3VudGVkO1xyXG4gICAgY29uc3QgbWFuYWdlZENoaWxkcmVuID0gdXNlUmVmKFtdIC8qKiBUT0RPOiBBbnkgcHJvYmxlbXMgY2F1c2VkIGJ5IHVzaW5nIGFuIGFycmF5IHdoZW4gaXQgc2hvdWxkIGJlIGFuIG9iamVjdD8gKi8pO1xyXG4gICAgY29uc3QgbW91bnRlZENoaWxkcmVuID0gdXNlUmVmKFtdKTtcclxuICAgIGNvbnN0IG1vdW50T3JkZXIgPSB1c2VSZWYobmV3IE1hcCgpKTtcclxuICAgIGNvbnN0IGluZGljZXNCeUVsZW1lbnQgPSB1c2VSZWYobmV3IE1hcCgpKTtcclxuICAgIGNvbnN0IGdldE1vdW50SW5kZXggPSB1c2VDYWxsYmFjaygoaW5kZXgpID0+IHsgcmV0dXJuIG1vdW50T3JkZXIuY3VycmVudC5nZXQoaW5kZXgpOyB9LCBbXSk7XHJcbiAgICBjb25zdCB1c2VNYW5hZ2VkQ2hpbGQgPSB1c2VDYWxsYmFjaygoaW5mbykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgZWxlbWVudCwgZ2V0RWxlbWVudCwgdXNlUmVmRWxlbWVudFByb3BzIH0gPSB1c2VSZWZFbGVtZW50KCk7XHJcbiAgICAgICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgbGV0IGluZGV4ID0gZ2V0VG90YWxDaGlsZHJlbk1vdW50ZWQoKTtcclxuICAgICAgICAgICAgbW91bnRPcmRlci5jdXJyZW50LnNldChpbmZvLmluZGV4LCBpbmRleCk7XHJcbiAgICAgICAgICAgIG1vdW50ZWRDaGlsZHJlbi5jdXJyZW50W2luZGV4XSA9IGluZm87XHJcbiAgICAgICAgICAgIHNldFRvdGFsQ2hpbGRyZW5Nb3VudGVkKHQgPT4gKyt0KTtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHsgbW91bnRPcmRlci5jdXJyZW50LmRlbGV0ZShpbmZvLmluZGV4KTsgbW91bnRlZENoaWxkcmVuLmN1cnJlbnRbaW5kZXhdID0gbnVsbDsgc2V0VG90YWxDaGlsZHJlblVub3VudGVkKHQgPT4gKyt0KTsgfTtcclxuICAgICAgICB9LCBbaW5mby5pbmRleF0pO1xyXG4gICAgICAgIC8vIEFzIHNvb24gYXMgdGhlIGNvbXBvbmVudCBtb3VudHMsIG5vdGlmeSB0aGUgcGFyZW50IGFuZCByZXF1ZXN0IGEgcmVyZW5kZXIuXHJcbiAgICAgICAgdXNlTGF5b3V0RWZmZWN0KChbcHJldkVsZW1lbnQsIHByZXZJbmRleF0sIGNoYW5nZXMpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGluZGljZXNCeUVsZW1lbnQuY3VycmVudC5zZXQoZWxlbWVudCwgaW5mby5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobWFuYWdlZENoaWxkcmVuLmN1cnJlbnRbaW5mby5pbmRleF0gIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5hc3NlcnQoaW5mby5pbmRleCA9PSB1bmRlZmluZWQsIFwiVHdvIGNoaWxkcmVuIHdpdGggdGhlIHNhbWUgaW5kZXggd2VyZSBhZGRlZCwgd2hpY2ggbWF5IHJlc3VsdCBpbiB1bmV4cGVjdGVkIGJlaGF2aW9yLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWJ1Z2dlcjsgLy8gSW50ZW50aW9uYWxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNldENoaWxkVXBkYXRlSW5kZXgoYyA9PiArK2MpO1xyXG4gICAgICAgICAgICAgICAgbWFuYWdlZENoaWxkcmVuLmN1cnJlbnRbaW5mby5pbmRleF0gPSB7IC4uLmluZm8gfTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0Q2hpbGRVcGRhdGVJbmRleChjID0+ICsrYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1hbmFnZWRDaGlsZHJlbi5jdXJyZW50W2luZm8uaW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGljZXNCeUVsZW1lbnQuY3VycmVudC5kZWxldGUoZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgW2VsZW1lbnQsIGluZm8uaW5kZXhdKTtcclxuICAgICAgICAvLyBBbnkgdGltZSBvdXIgY2hpbGQgcHJvcHMgY2hhbmdlLCBtYWtlIHRoYXQgaW5mb3JtYXRpb24gYXZhaWxhYmxlIGdlbmVyYWxseS5cclxuICAgICAgICAvLyAqRG9uJ3QgcmUtcmVuZGVyKiwgb3RoZXJ3aXNlIHdlJ2QgYmUgc3R1Y2sgaW4gYW5cclxuICAgICAgICAvLyBpbmZpbml0ZSBsb29wIGV2ZXJ5IHRpbWUgYW4gYW5vbnltb3VzIGZ1bmN0aW9uIGlzIHBhc3NlZC5cclxuICAgICAgICAvLyBJdCBjb21lcyBpbiBmcm9tIHRoZSBwcm9wcyBzbyB0aGUgY2hpbGQgd2FzIGFscmVhZHkgdXBkYXRlZCBieSBpdCAtLVxyXG4gICAgICAgIC8vIHdlIGRvbid0IG5lZWQgdGhlIHBhcmVudCB0byByZS1yZW5kZXIgZXZlcnkgc2luZ2xlIGNoaWxkIGFueSB0aW1lXHJcbiAgICAgICAgLy8gXCJvbkNsaWNrXCIgdXBkYXRlcyBvciB3aGF0ZXZlci4gIFRoZSByZWxldmFudCBjaGlsZCBhbHJlYWR5IGtub3dzLFxyXG4gICAgICAgIC8vIGFuZCB0aGF0J3Mgd2hhdCBtYXR0ZXJzLlxyXG4gICAgICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChtYW5hZ2VkQ2hpbGRyZW4uY3VycmVudFtpbmZvLmluZGV4XSAhPSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICBtYW5hZ2VkQ2hpbGRyZW4uY3VycmVudFtpbmZvLmluZGV4XSA9IHsgLi4uaW5mbyB9O1xyXG4gICAgICAgIH0sIFsuLi5PYmplY3QuZW50cmllcyhpbmZvKS5mbGF0KCldKTtcclxuICAgICAgICByZXR1cm4geyBlbGVtZW50LCBnZXRFbGVtZW50LCB1c2VNYW5hZ2VkQ2hpbGRQcm9wczogdXNlUmVmRWxlbWVudFByb3BzIH07XHJcbiAgICB9LCBbXSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVzZU1hbmFnZWRDaGlsZCxcclxuICAgICAgICBjaGlsZENvdW50OiBjaGlsZHJlbkN1cnJlbnRseU1vdW50ZWQsXHJcbiAgICAgICAgbWFuYWdlZENoaWxkcmVuOiBtYW5hZ2VkQ2hpbGRyZW4uY3VycmVudCxcclxuICAgICAgICBtb3VudGVkQ2hpbGRyZW46IG1vdW50ZWRDaGlsZHJlbi5jdXJyZW50LFxyXG4gICAgICAgIGluZGljZXNCeUVsZW1lbnQ6IGluZGljZXNCeUVsZW1lbnQuY3VycmVudCxcclxuICAgICAgICB0b3RhbENoaWxkcmVuTW91bnRlZCxcclxuICAgICAgICB0b3RhbENoaWxkcmVuVW5vdW50ZWQsXHJcbiAgICAgICAgZ2V0TW91bnRJbmRleFxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogSGVscGVyIGZ1bmN0aW9uIGZvciBsZXR0aW5nIGNoaWxkcmVuIGtub3cgd2hlbiB0aGV5IGFyZSBvciBhcmUgbm90IHRoZVxyXG4gKiBjdXJyZW50IHNlbGVjdGVkL2V4cGFuZGVkL2ZvY3VzZWQvd2hhdGV2ZXIgY2hpbGQuXHJcbiAqXHJcbiAqIEF1dG9tYXRpY2FsbHkgaGFuZGxlcyB3aGVuIGNoaWxkcmVuIGFyZSBtb3VudGVkICYgdW5tb3VudGVkIGFuZCBzdWNoLlxyXG4gKlxyXG4gKiBAcGFyYW0gYWN0aXZhdGVkSW5kZXggV2hhdCBpbmRleCB0aGUgY3VycmVudCBzZWxlY3RlZCAoZXRjLikgY2hpbGQgaXNcclxuICogQHBhcmFtIGxlbmd0aCBIb3cgbWFueSBjaGlsZHJlbiBleGlzdCAoYXMgbWFuYWdlZENoaWxkcmVuLmxlbmd0aClcclxuICogQHBhcmFtIHNldEZsYWcgQSBmdW5jdGlvbiB0aGF0IHByb2JhYmx5IGxvb2tzIGxpa2UgKGksIGZsYWcpID0+IG1hbmFnZWRDaGlsZHJlbltpXS5zZXRBY3RpdmUoZmxhZylcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VDaGlsZEZsYWcoYWN0aXZhdGVkSW5kZXgsIGxlbmd0aCwgc2V0RmxhZykge1xyXG4gICAgY29uc3QgW3ByZXZBY3RpdmF0ZWRJbmRleCwgc2V0UHJldkFjdGl2YXRlZEluZGV4LCBnZXRQcmV2QWN0aXZhdGVkSW5kZXhdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbcHJldkNoaWxkQ291bnQsIHNldFByZXZDaGlsZENvdW50LCBnZXRQcmV2Q2hpbGRDb3VudF0gPSB1c2VTdGF0ZShsZW5ndGgpO1xyXG4gICAgLy8gQW55IHRpbWUgdGhlIG51bWJlciBvZiBjb21wb25lbnRzIGNoYW5nZXMsXHJcbiAgICAvLyByZXNldCBhbnkgaW5pdGlhbCwgcG9zc2libHkgaW5jb3JyZWN0IHN0YXRlIHRoZXkgbWlnaHQgaGF2ZSBoYWQsIGp1c3QgaW4gY2FzZS5cclxuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gTWF0aC5zaWduKGxlbmd0aCAtIGdldFByZXZDaGlsZENvdW50KCkpO1xyXG4gICAgICAgIGlmIChkaXJlY3Rpb24gIT09IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGdldFByZXZDaGlsZENvdW50KCkgPz8gMDsgaSAhPSBsZW5ndGg7IGkgKz0gZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRGbGFnKGksIGkgPT09IGFjdGl2YXRlZEluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXRQcmV2Q2hpbGRDb3VudChsZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIFtzZXRGbGFnLCBhY3RpdmF0ZWRJbmRleCwgbGVuZ3RoXSk7XHJcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIC8vIERlYWN0aXZhdGUgdGhlIHByZXZpb3VzbHkgYWN0aXZhdGVkIGNvbXBvbmVudFxyXG4gICAgICAgIGNvbnN0IHByZXZBY3RpdmF0ZWRJbmRleCA9IGdldFByZXZBY3RpdmF0ZWRJbmRleCgpO1xyXG4gICAgICAgIGlmIChwcmV2QWN0aXZhdGVkSW5kZXggIT0gYWN0aXZhdGVkSW5kZXgpIHtcclxuICAgICAgICAgICAgaWYgKHByZXZBY3RpdmF0ZWRJbmRleCAhPSBudWxsICYmIHByZXZBY3RpdmF0ZWRJbmRleCA+PSAwICYmIHByZXZBY3RpdmF0ZWRJbmRleCA8IGxlbmd0aClcclxuICAgICAgICAgICAgICAgIHNldEZsYWcocHJldkFjdGl2YXRlZEluZGV4LCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFjdGl2YXRlIHRoZSBjdXJyZW50IGNvbXBvbmVudFxyXG4gICAgICAgIGlmIChhY3RpdmF0ZWRJbmRleCAhPSBudWxsICYmIGFjdGl2YXRlZEluZGV4ID49IDAgJiYgYWN0aXZhdGVkSW5kZXggPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgc2V0RmxhZyhhY3RpdmF0ZWRJbmRleCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHNldFByZXZBY3RpdmF0ZWRJbmRleChhY3RpdmF0ZWRJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW3NldEZsYWcsIGFjdGl2YXRlZEluZGV4LCBsZW5ndGhdKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtY2hpbGQtbWFuYWdlci5qcy5tYXAiLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IHVzZU1lcmdlZFByb3BzIH0gZnJvbSBcIi4vdXNlLW1lcmdlZC1wcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCIuL3VzZS1zdGF0ZVwiO1xyXG5pbXBvcnQgeyB1c2VDaGlsZE1hbmFnZXIsIHVzZUNoaWxkRmxhZyB9IGZyb20gXCIuL3VzZS1jaGlsZC1tYW5hZ2VyXCI7XHJcbmltcG9ydCB7IHVzZVN0YWJsZUdldHRlciB9IGZyb20gXCIuL3VzZS1zdGFibGUtZ2V0dGVyXCI7XHJcbi8qKlxyXG4gKiBJbXBsZW1lbnRzIGEgcm92aW5nIHRhYmluZGV4IHN5c3RlbSB3aGVyZSBvbmx5IG9uZSBcImZvY3VzYWJsZVwiXHJcbiAqIGNvbXBvbmVudCBpbiBhIHNldCBpcyBhYmxlIHRvIHJlY2VpdmUgYSB0YWIgZm9jdXMuICpXaGljaCpcclxuICogb2YgdGhvc2UgZWxlbWVudHMgcmVjZWl2ZXMgZm9jdXMgaXMgZGV0ZXJtaW5lZCBieSB5b3UsIGJ1dCBpdCdzXHJcbiAqIHJlY29tbWVuZGVkIHRvIG9mZmxvYWQgdGhhdCBsb2dpYyB0aGVuIHRvIGFub3RoZXIgaG9vaywgbGlrZVxyXG4gKiBgdXNlTGluZWFyTmF2aWdhdGlvbmAsIHdoaWNoIGxldHMgeW91IGNoYW5nZSB0aGUgdGFiYmFibGVcclxuICogZWxlbWVudCB3aXRoIHRoZSBhcnJvdyBrZXlzLCBgdXNlVHlwZWFoZWFkTmF2aWdhdGlvbmAsIHdoaWNoXHJcbiAqIGxldHMgeW91IGNoYW5nZSB0aGUgdGFiYmFibGUgaW5kZXggd2l0aCB0eXBlYWhlYWQsIG9yXHJcbiAqIGB1c2VMaXN0TmF2aWdhdGlvbmAgaWYgeW91IGp1c3Qgd2FudCBldmVyeXRoaW5nIGJ1bmRsZWQgdG9nZXRoZXIuXHJcbiAqXHJcbiAqIE5vdGUgdGhhdCB0aGUgY2hpbGQgaG9vayByZXR1cm5lZCBieSB0aGlzIGZ1bmN0aW9uIG11c3QgYmUgdXNlZFxyXG4gKiBieSBldmVyeSBjaGlsZCB0aGF0IHVzZXMgdGhpcyByb3ZpbmcgdGFiaW5kZXggbG9naWMuICBUaGVcclxuICogcHJvcC1tb2RpZnlpbmcgaG9vayAqdGhhdCogaG9vayByZXR1cm5zIHNob3VsZCB0aGVuIGJlIHVzZWRcclxuICogb24gdGhlIGNoaWxkJ3MgZWxlbWVudCwgYXMgd2VsbCBhcyBhbnkgb3RoZXIgZWxlbWVudHMgeW91J2QgbGlrZVxyXG4gKiB0byBiZSBleHBsaWNpdGx5IG1hZGUgdW50YWJiYWJsZSB0b28uXHJcbiAqXHJcbiAqIGBmb2N1c09uQ2hhbmdlYCBzaG91bGQgYmUgc2V0IHRvIHRydWUgaWYgZm9jdXMgaXNcclxuICogY29udGFpbmVkIHdpdGhpbiB3aGF0ZXZlciBlbGVtZW50IGNvbnRhaW5zIHRoZSByb3ZpbmcgdGFiIGluZGV4LlxyXG4gKiBHZW5lcmFsbHkgYXMgc2ltcGxlIGFzIHRoZSBmb2xsb3dpbmc6XHJcbiAqIGBgYFxyXG4gKiBjb25zdCB7IGZvY3VzZWQsIGZvY3VzZWRJbm5lciwgdXNlSGFzRm9jdXNQcm9wcyB9ID0gdXNlSGFzRm9jdXM8UGFyZW50RWxlbWVudD4oKTtcclxuICogY29uc3QgZm9jdXNPbkNoYW5nZSA9IChmb2N1c2VkSW5uZXIgIT0gZmFsc2UpO1xyXG4gKiBgYGBcclxuICogSXQncyBub3QgaW5jbHVkZWQgaGVyZSBiZWNhdXNlIGB1c2VSb3ZpbmdUYWJJbmRleGAgZG9lc24ndCBrbm93XHJcbiAqIGFueXRoaW5nIGFib3V0IHRoZSBjb250YWluZXIgZWxlbWVudCwgb25seSBjaGlsZHJlbiBlbGVtZW50cy5cclxuICogQW5kIGp1c3QgYXMgd2VsbCEgQ2hpbGRyZW4gc2hvdWxkIGJlIGFsbG93ZWQgYXQgdGhlIHJvb3QsXHJcbiAqIHJlZ2FyZGxlc3Mgb2YgaWYgaXQncyB0aGUgd2hvbGUgYXBwIG9yIGp1c3QgYSBnaXZlbiBjb21wb25lbnQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlUm92aW5nVGFiSW5kZXgoeyBmb2N1c09uQ2hhbmdlOiBmb2MsIHRhYmJhYmxlSW5kZXggfSkge1xyXG4gICAgY29uc3QgW3JlcmVuZGVyQW5kRm9jdXMsIHNldFJlcmVuZGVyQW5kRm9jdXNdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBnZXRGb2N1c09uQ2hhbmdlID0gdXNlU3RhYmxlR2V0dGVyKGZvYyk7XHJcbiAgICBjb25zdCBnZXRUYWJiYWJsZUluZGV4ID0gdXNlU3RhYmxlR2V0dGVyKHRhYmJhYmxlSW5kZXgpO1xyXG4gICAgY29uc3QgcHJldlRhYmJhYmxlID0gdXNlUmVmKC1JbmZpbml0eSk7XHJcbiAgICAvLyBDYWxsIHRoZSBob29rIHRoYXQgYWxsb3dzIHVzIHRvIGNvbGxlY3QgaW5mb3JtYXRpb24gZnJvbSBjaGlsZHJlbiB3aG8gcHJvdmlkZSBpdFxyXG4gICAgY29uc3QgeyBtYW5hZ2VkQ2hpbGRyZW4sIGNoaWxkQ291bnQsIHVzZU1hbmFnZWRDaGlsZCwgaW5kaWNlc0J5RWxlbWVudCwgLi4ucmVzdCB9ID0gdXNlQ2hpbGRNYW5hZ2VyKCk7XHJcbiAgICAvLyBBbnkgdGltZSB0aGUgdGFiYmFibGUgaW5kZXggY2hhbmdlcyxcclxuICAgIC8vIG5vdGlmeSB0aGUgcHJldmlvdXMgY2hpbGQgdGhhdCBpdCdzIG5vIGxvbmdlciB0YWJiYWJsZSxcclxuICAgIC8vIGFuZCBub3RpZnkgdGhlIG5leHQgY2hpbGQgdGhhdCBpcyBhbGxvd2VkIHRvIGJlIHRhYmJlZCB0by5cclxuICAgIHVzZUNoaWxkRmxhZyh0YWJiYWJsZUluZGV4LCBjaGlsZENvdW50LCAoaW5kZXgsIHRhYmJhYmxlKSA9PiB7XHJcbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpXHJcbiAgICAgICAgICAgIG1hbmFnZWRDaGlsZHJlbltpbmRleF0/LnNldFRhYmJhYmxlKHRhYmJhYmxlKTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgZm9jdXNTZWxmID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgICAgIGlmICh0YWJiYWJsZUluZGV4ICE9IG51bGwpXHJcbiAgICAgICAgICAgIG1hbmFnZWRDaGlsZHJlblt0YWJiYWJsZUluZGV4XS5zZXRUYWJiYWJsZSh0cnVlKTtcclxuICAgIH0sIFt0YWJiYWJsZUluZGV4XSk7XHJcbiAgICBjb25zdCB1c2VSb3ZpbmdUYWJJbmRleENoaWxkID0gdXNlQ2FsbGJhY2soKGluZm8pID0+IHtcclxuICAgICAgICBjb25zdCBbcnJhZkluZGV4LCBzZXRScmFmSW5kZXhdID0gdXNlU3RhdGUoMSk7XHJcbiAgICAgICAgY29uc3QgcmVyZW5kZXJBbmRGb2N1cyA9IHVzZUNhbGxiYWNrKCgpID0+IHsgc2V0UnJhZkluZGV4KGkgPT4gKytpKTsgfSwgW10pO1xyXG4gICAgICAgIGxldCBuZXdJbmZvID0ge1xyXG4gICAgICAgICAgICAuLi5pbmZvLFxyXG4gICAgICAgICAgICByZXJlbmRlckFuZEZvY3VzLFxyXG4gICAgICAgICAgICBzZXRUYWJiYWJsZTogdXNlQ2FsbGJhY2soKHRhYmJhYmxlKSA9PiB7IHNldFRhYmJhYmxlKHRhYmJhYmxlKTsgfSwgW10pXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCB7IGVsZW1lbnQsIGdldEVsZW1lbnQsIHVzZU1hbmFnZWRDaGlsZFByb3BzIH0gPSB1c2VNYW5hZ2VkQ2hpbGQobmV3SW5mbyk7XHJcbiAgICAgICAgLy8gVE9ETzogVXNpbmcgZ2V0VGFiYmFibGVJbmRleCBkdXJpbmcgcmVuZGVyIHBoYXNlIG9uIG1vdW50XHJcbiAgICAgICAgY29uc3QgW3RhYmJhYmxlLCBzZXRUYWJiYWJsZV0gPSB1c2VTdGF0ZShnZXRUYWJiYWJsZUluZGV4KCkgPT0gaW5mby5pbmRleCk7XHJcbiAgICAgICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgdGFiYmFibGUpIHtcclxuICAgICAgICAgICAgICAgIHNldFJlcmVuZGVyQW5kRm9jdXMoXyA9PiByZXJlbmRlckFuZEZvY3VzKTtcclxuICAgICAgICAgICAgICAgIGlmIChnZXRGb2N1c09uQ2hhbmdlKCkgJiYgXCJmb2N1c1wiIGluIGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgW2VsZW1lbnQsIHRhYmJhYmxlLCBycmFmSW5kZXhdKTtcclxuICAgICAgICBmdW5jdGlvbiB1c2VSb3ZpbmdUYWJJbmRleFNpYmxpbmdQcm9wcyh7IHRhYkluZGV4LCAuLi5wcm9wcyB9KSB7XHJcbiAgICAgICAgICAgIGlmICh0YWJJbmRleCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFiYmFibGUpXHJcbiAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHRhYkluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKCkoeyB0YWJJbmRleCB9LCBwcm9wcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHVzZVJvdmluZ1RhYkluZGV4Q2hpbGRQcm9wcyh7IHRhYkluZGV4LCAuLi5wcm9wcyB9KSB7XHJcbiAgICAgICAgICAgIGlmICh0YWJJbmRleCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFiYmFibGUpXHJcbiAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHRhYkluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKCkodXNlTWFuYWdlZENoaWxkUHJvcHMoeyB0YWJJbmRleCB9KSwgcHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICA7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdXNlUm92aW5nVGFiSW5kZXhDaGlsZFByb3BzLFxyXG4gICAgICAgICAgICB1c2VSb3ZpbmdUYWJJbmRleFNpYmxpbmdQcm9wcyxcclxuICAgICAgICAgICAgdGFiYmFibGVcclxuICAgICAgICB9O1xyXG4gICAgfSwgW3VzZU1hbmFnZWRDaGlsZF0pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VSb3ZpbmdUYWJJbmRleENoaWxkLFxyXG4gICAgICAgIGNoaWxkQ291bnQsXHJcbiAgICAgICAgbWFuYWdlZENoaWxkcmVuLFxyXG4gICAgICAgIGluZGljZXNCeUVsZW1lbnQsXHJcbiAgICAgICAgZm9jdXNDdXJyZW50OiByZXJlbmRlckFuZEZvY3VzLFxyXG4gICAgICAgIC4uLnJlc3RcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLXJvdmluZy10YWJpbmRleC5qcy5tYXAiLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IHVzZVJlZkVsZW1lbnQgfSBmcm9tIFwiLi91c2UtcmVmLWVsZW1lbnRcIjtcclxuaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSBcIi4vdXNlLWxheW91dC1lZmZlY3RcIjtcclxuaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwiLi91c2UtbWVyZ2VkLXByb3BzXCI7XHJcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcIi4vdXNlLXN0YXRlXCI7XHJcbmltcG9ydCB7IHVzZVRpbWVvdXQgfSBmcm9tIFwiLi91c2UtdGltZW91dFwiO1xyXG5pbXBvcnQgeyB1c2VMb2dpY2FsRGlyZWN0aW9uIH0gZnJvbSBcIi4vdXNlLWxvZ2ljYWwtZGlyZWN0aW9uXCI7XHJcbmltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcIi4vdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xyXG4vKipcclxuICogV2hlbiB1c2VkIGluIHRhbmRlbSB3aXRoIGB1c2VSb3ZpbmdUYWJJbmRleGAsIGFsbG93cyBjb250cm9sIG9mXHJcbiAqIHRoZSB0YWJiYWJsZSBpbmRleCB3aXRoIHRoZSBhcnJvdyBrZXlzLlxyXG4gKlxyXG4gKiBAc2VlIHVzZUxpc3ROYXZpZ2F0aW9uLCB3aGljaCBwYWNrYWdlcyBldmVyeXRoaW5nIHVwIHRvZ2V0aGVyLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUxpbmVhck5hdmlnYXRpb24oeyBnZXRJbmRleCwgc2V0SW5kZXgsIG1hbmFnZWRDaGlsZHJlbiwgbmF2aWdhdGlvbkRpcmVjdGlvbiB9KSB7XHJcbiAgICBuYXZpZ2F0aW9uRGlyZWN0aW9uID8/PSBcImVpdGhlclwiO1xyXG4gICAgY29uc3QgaW5kZXggPSBnZXRJbmRleCgpO1xyXG4gICAgY29uc3QgY2hpbGRDb3VudCA9IG1hbmFnZWRDaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAvLyBNYWtlIHN1cmUgdGhlIHRhYmJhYmxlIGluZGV4IG5ldmVyIGVzY2FwZXMgdGhlIGJvdW5kcyBvZiBhbGwgYXZhaWxhYmxlIGNoaWxkcmVuXHJcbiAgICAvLyBUT0RPOiBLZWVwIHRyYWNrIG9mIHRoZSBvcmlnaW5hbCBpbmRleCBhbmQga2VlcCBpdCwgYXQgbGVhc3QgdW50aWwga2V5Ym9hcmQgbmF2aWdhdGlvbi5cclxuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKGluZGV4ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgIHNldEluZGV4KDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoaWxkQ291bnQgPiAwICYmIGluZGV4ID49IGNoaWxkQ291bnQpIHtcclxuICAgICAgICAgICAgICAgIHNldEluZGV4KGNoaWxkQ291bnQgLSAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sIFtpbmRleCwgY2hpbGRDb3VudF0pO1xyXG4gICAgLy8gVGhlc2UgYWxsb3cgdXMgdG8gbWFuaXB1bGF0ZSB3aGF0IG91ciBjdXJyZW50IHRhYmJhYmxlIGNoaWxkIGlzLlxyXG4gICAgY29uc3QgbmF2aWdhdGVUb0luZGV4ID0gdXNlQ2FsbGJhY2soKGluZGV4KSA9PiB7IHNldEluZGV4KGluZGV4IDwgMCA/IChtYW5hZ2VkQ2hpbGRyZW4ubGVuZ3RoICsgaW5kZXgpIDogaW5kZXgpOyB9LCBbXSk7XHJcbiAgICBjb25zdCBuYXZpZ2F0ZVRvTmV4dCA9IHVzZUNhbGxiYWNrKCgpID0+IHsgc2V0SW5kZXgoKGkpID0+IGkgPT09IG51bGwgPyBudWxsIDogKytpKTsgfSwgW10pO1xyXG4gICAgY29uc3QgbmF2aWdhdGVUb1ByZXYgPSB1c2VDYWxsYmFjaygoKSA9PiB7IHNldEluZGV4KChpKSA9PiBpID09PSBudWxsID8gbnVsbCA6IC0taSk7IH0sIFtdKTtcclxuICAgIGNvbnN0IG5hdmlnYXRlVG9TdGFydCA9IHVzZUNhbGxiYWNrKCgpID0+IHsgbmF2aWdhdGVUb0luZGV4KDApOyB9LCBbbmF2aWdhdGVUb0luZGV4XSk7XHJcbiAgICBjb25zdCBuYXZpZ2F0ZVRvRW5kID0gdXNlQ2FsbGJhY2soKCkgPT4geyBuYXZpZ2F0ZVRvSW5kZXgoLTEpOyB9LCBbbmF2aWdhdGVUb0luZGV4XSk7XHJcbiAgICBjb25zdCB1c2VMaW5lYXJOYXZpZ2F0aW9uQ2hpbGQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyB1c2VSZWZFbGVtZW50UHJvcHMsIGVsZW1lbnQgfSA9IHVzZVJlZkVsZW1lbnQoKTtcclxuICAgICAgICAvLyBQcmVmZXIgdGhlIHBhcmVudCBlbGVtZW50J3MgZGlyZWN0aW9uIHNvIHRoYXQgd2UncmUgbm90IGNhbGxpbmcgZ2V0Q29tcHV0ZWRTdHlsZVxyXG4gICAgICAgIC8vIG9uIGV2ZXJ5IHNpbmdsZSBpbmRpdmlkdWFsIGNoaWxkLCB3aGljaCBpcyBsaWtlbHkgcmVkdW5kYW50LlxyXG4gICAgICAgIC8vIFRPRE86IERvZXMgdXNlTG9naWNhbERpcmVjdGlvbiBuZWVkIHRvIGhvbGQgYSBwZXItcmVuZGVyICYgcGVyLWVsZW1lbnQgY2FjaGUgdG8gbWFrZSB0aGlzIHdvcms/XHJcbiAgICAgICAgLy8gT3IgZG9lcyB0aGUgYnJvd3NlciBhdXRvbWF0aWNhbGx5IGNhY2hlIHRoZSBjb21wdXRhdGlvbnMgdW50aWwgc29tZXRoaW5nIGNoYW5nZXM/XHJcbiAgICAgICAgLy8gR2l2ZW4gdGhhdCB0aGUgdmFsdWVzIGFyZSBsaXZlLCBpdCBzZWVtcyBsaWtlIGl0IHNob3VsZCBiZSB0aGUgbGF0dGVyLi4uXHJcbiAgICAgICAgY29uc3QgeyBjb252ZXJ0RWxlbWVudFNpemUsIGdldExvZ2ljYWxEaXJlY3Rpb24gfSA9IHVzZUxvZ2ljYWxEaXJlY3Rpb24oZWxlbWVudD8ucGFyZW50RWxlbWVudCA/PyBlbGVtZW50KTtcclxuICAgICAgICBjb25zdCB1c2VMaW5lYXJOYXZpZ2F0aW9uQ2hpbGRQcm9wcyA9IChwcm9wcykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBvbktleURvd24gPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gTm90IGhhbmRsZWQgYnkgdHlwZWFoZWFkIChpLmUuIGFzc3VtZSB0aGlzIGlzIGEga2V5Ym9hcmQgc2hvcnRjdXQpXHJcbiAgICAgICAgICAgICAgICBpZiAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbmZvID0gZ2V0TG9naWNhbERpcmVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGFsbG93c0Jsb2NrTmF2aWdhdGlvbiA9IChuYXZpZ2F0aW9uRGlyZWN0aW9uID09IFwiYmxvY2tcIiB8fCBuYXZpZ2F0aW9uRGlyZWN0aW9uID09IFwiZWl0aGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGFsbG93c0lubGluZU5hdmlnYXRpb24gPSAobmF2aWdhdGlvbkRpcmVjdGlvbiA9PSBcImlubGluZVwiIHx8IG5hdmlnYXRpb25EaXJlY3Rpb24gPT0gXCJlaXRoZXJcIik7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUua2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkFycm93VXBcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9wTmFtZSA9IChpbmZvPy5ibG9ja09yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIgPyBcImJsb2NrRGlyZWN0aW9uXCIgOiBcImlubGluZURpcmVjdGlvblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uQWxsb3dlZCA9IChpbmZvPy5ibG9ja09yaWVudGF0aW9uID09PSBcInZlcnRpY2FsXCIgPyBhbGxvd3NCbG9ja05hdmlnYXRpb24gOiBhbGxvd3NJbmxpbmVOYXZpZ2F0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbkFsbG93ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvPy5bcHJvcE5hbWVdID09PSBcImJ0dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGVUb05leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRlVG9QcmV2KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQXJyb3dEb3duXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcE5hbWUgPSAoaW5mbz8uYmxvY2tPcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiID8gXCJibG9ja0RpcmVjdGlvblwiIDogXCJpbmxpbmVEaXJlY3Rpb25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbkFsbG93ZWQgPSAoaW5mbz8uYmxvY2tPcmllbnRhdGlvbiA9PT0gXCJ2ZXJ0aWNhbFwiID8gYWxsb3dzQmxvY2tOYXZpZ2F0aW9uIDogYWxsb3dzSW5saW5lTmF2aWdhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb25BbGxvd2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mbz8uW3Byb3BOYW1lXSA9PT0gXCJidHRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRlVG9QcmV2KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0ZVRvTmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkFycm93TGVmdFwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3BOYW1lID0gKGluZm8/LmlubGluZU9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIiA/IFwiaW5saW5lRGlyZWN0aW9uXCIgOiBcImJsb2NrRGlyZWN0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3Rpb25BbGxvd2VkID0gKGluZm8/LmlubGluZU9yaWVudGF0aW9uID09PSBcImhvcml6b250YWxcIiA/IGFsbG93c0lubGluZU5hdmlnYXRpb24gOiBhbGxvd3NCbG9ja05hdmlnYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uQWxsb3dlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8/Lltwcm9wTmFtZV0gPT09IFwicnRsXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0ZVRvTmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGVUb1ByZXYoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJBcnJvd1JpZ2h0XCI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcE5hbWUgPSAoaW5mbz8uaW5saW5lT3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiID8gXCJpbmxpbmVEaXJlY3Rpb25cIiA6IFwiYmxvY2tEaXJlY3Rpb25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbkFsbG93ZWQgPSAoaW5mbz8uaW5saW5lT3JpZW50YXRpb24gPT09IFwiaG9yaXpvbnRhbFwiID8gYWxsb3dzSW5saW5lTmF2aWdhdGlvbiA6IGFsbG93c0Jsb2NrTmF2aWdhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb25BbGxvd2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mbz8uW3Byb3BOYW1lXSA9PT0gXCJydGxcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRlVG9QcmV2KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0ZVRvTmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiSG9tZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0ZVRvU3RhcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiRW5kXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRlVG9FbmQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZVJlZkVsZW1lbnRQcm9wcyh1c2VNZXJnZWRQcm9wcygpKHsgb25LZXlEb3duIH0sIHByb3BzKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB1c2VMaW5lYXJOYXZpZ2F0aW9uQ2hpbGRQcm9wc1xyXG4gICAgICAgIH07XHJcbiAgICB9LCBbbmF2aWdhdGlvbkRpcmVjdGlvbiwgbmF2aWdhdGVUb05leHQsIG5hdmlnYXRlVG9QcmV2LCBuYXZpZ2F0ZVRvU3RhcnQsIG5hdmlnYXRlVG9FbmRdKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlTGluZWFyTmF2aWdhdGlvbkNoaWxkLFxyXG4gICAgICAgIG5hdmlnYXRlVG9JbmRleCxcclxuICAgICAgICBuYXZpZ2F0ZVRvTmV4dCxcclxuICAgICAgICBuYXZpZ2F0ZVRvUHJldixcclxuICAgICAgICBuYXZpZ2F0ZVRvU3RhcnQsXHJcbiAgICAgICAgbmF2aWdhdGVUb0VuZCxcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIEFsbG93cyBmb3IgdGhlIHNlbGVjdGlvbiBvZiBhIG1hbmFnZWQgY2hpbGQgYnkgdHlwaW5nIHRoZSBnaXZlbiB0ZXh0IGFzc29jaWF0ZWQgd2l0aCBpdC5cclxuICpcclxuICogQHNlZSB1c2VMaXN0TmF2aWdhdGlvbiwgd2hpY2ggcGFja2FnZXMgZXZlcnl0aGluZyB1cCB0b2dldGhlci5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uKHsgY29sbGF0b3IsIGdldEluZGV4LCB0eXBlYWhlYWRUaW1lb3V0LCBzZXRJbmRleCB9KSB7XHJcbiAgICAvLyBGb3IgdHlwZWFoZWFkLCBrZWVwIHRyYWNrIG9mIHdoYXQgb3VyIGN1cnJlbnQgXCJzZWFyY2hcIiBzdHJpbmcgaXMgKGlmIHdlIGhhdmUgb25lKVxyXG4gICAgLy8gYW5kIGFsc28gY2xlYXIgaXQgZXZlcnkgMTAwMCBtcyBzaW5jZSB0aGUgbGFzdCB0aW1lIGl0IGNoYW5nZWQuXHJcbiAgICAvLyBOZXh0LCBrZWVwIGEgbWFwcGluZyBvZiB0eXBlYWhlYWQgdmFsdWVzIHRvIGluZGljZXMgZm9yIGZhc3RlciBzZWFyY2hpbmcuXHJcbiAgICAvLyBBbmQsIGZvciB0aGUgdXNlcidzIHNha2UsIGxldCB0aGVtIGtub3cgd2hlbiB0aGVpciB0eXBlYWhlYWQgY2FuJ3QgbWF0Y2ggYW55dGhpbmcgYW55bW9yZVxyXG4gICAgY29uc3QgW2N1cnJlbnRUeXBlYWhlYWQsIHNldEN1cnJlbnRUeXBlYWhlYWQsIGdldEN1cnJlbnRUeXBlYWhlYWRdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICB1c2VUaW1lb3V0KHsgdGltZW91dDogdHlwZWFoZWFkVGltZW91dCA/PyAxMDAwLCBjYWxsYmFjazogKCkgPT4geyBzZXRDdXJyZW50VHlwZWFoZWFkKG51bGwpOyBzZXRJbnZhbGlkVHlwZWFoZWFkKG51bGwpOyB9LCB0cmlnZ2VySW5kZXg6IGN1cnJlbnRUeXBlYWhlYWQgfSk7XHJcbiAgICBjb25zdCBzb3J0ZWRUeXBlYWhlYWRJbmZvID0gdXNlUmVmKFtdKTtcclxuICAgIGNvbnN0IFtpbnZhbGlkVHlwZWFoZWFkLCBzZXRJbnZhbGlkVHlwZWFoZWFkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIC8vIEhhbmRsZSB0eXBlYWhlYWQgZm9yIGlucHV0IG1ldGhvZCBlZGl0b3JzIGFzIHdlbGxcclxuICAgIC8vIEVzc2VudGlhbGx5LCB3aGVuIGFjdGl2ZSwgaWdub3JlIGZ1cnRoZXIga2V5cyBcclxuICAgIC8vIGJlY2F1c2Ugd2UncmUgd2FpdGluZyBmb3IgYSBDb21wb3NpdGlvbkVuZCBldmVudFxyXG4gICAgY29uc3QgW2ltZUFjdGl2ZSwgc2V0SW1lQWN0aXZlLCBnZXRJbWVBY3RpdmVdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgLy8gQmVjYXVzZSBjb21wb3NpdGlvbiBldmVudHMgZmlyZSAqYWZ0ZXIqIGtleWRvd24gZXZlbnRzIFxyXG4gICAgLy8gKGJ1dCB3aXRoaW4gdGhlIHNhbWUgdGFzaywgd2hpY2gsIFRPRE8sIGNvdWxkIGJlIGJyb3dzZXItZGVwZW5kZW50KSxcclxuICAgIC8vIHdlIGNhbiB1c2UgdGhpcyB0byBrZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50IHdlJ3JlIGxpc3RlbmluZyBmb3Igb24gdGhlIGZpcnN0IGtleWRvd24uXHJcbiAgICBjb25zdCBbbmV4dFR5cGVhaGVhZENoYXIsIHNldE5leHRUeXBlYWhlYWRDaGFyXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAobmV4dFR5cGVhaGVhZENoYXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgc2V0Q3VycmVudFR5cGVhaGVhZCh0eXBlYWhlYWQgPT4gKCh0eXBlYWhlYWQgPz8gXCJcIikgKyBuZXh0VHlwZWFoZWFkQ2hhcikpO1xyXG4gICAgICAgICAgICBzZXROZXh0VHlwZWFoZWFkQ2hhcihudWxsKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbbmV4dFR5cGVhaGVhZENoYXJdKTtcclxuICAgIGNvbnN0IGNvbXBhcmF0b3IgPSB1c2VTdGFibGVDYWxsYmFjaygobGhzLCByaHMpID0+IHtcclxuICAgICAgICBsZXQgY29tcGFyZTtcclxuICAgICAgICBpZiAodHlwZW9mIGxocyA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgcmhzLnRleHQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgLy8gRm9yIHRoZSBwdXJwb3NlcyBvZiB0eXBlYWhlYWQsIG9ubHkgY29tcGFyZSBhIHN0cmluZyBvZiB0aGUgc2FtZSBzaXplIGFzIG91ciBjdXJyZW50bHkgdHlwZWQgc3RyaW5nLlxyXG4gICAgICAgICAgICAvLyBCeSBub3JtYWxpemluZyB0aGVtIGZpcnN0LCB3ZSBlbnN1cmUgdGhpcyBieXRlLWJ5LWJ5dGUgaGFuZGxpbmcgb2YgcmF3IGNoYXJhY3RlciBkYXRhIHdvcmtzIG91dCBva2F5LlxyXG4gICAgICAgICAgICBsZXQgc2FmZUxocyA9IGxocy5ub3JtYWxpemUoXCJORkRcIik7XHJcbiAgICAgICAgICAgIGxldCBzYWZlUmhzID0gcmhzLnRleHQubm9ybWFsaXplKFwiTkZEXCIpLnN1YnN0cigwLCBzYWZlTGhzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGlmIChjb2xsYXRvcilcclxuICAgICAgICAgICAgICAgIGNvbXBhcmUgPSBjb2xsYXRvci5jb21wYXJlKHNhZmVMaHMsIHNhZmVSaHMpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBjb21wYXJlID0gc2FmZUxocy50b0xvd2VyQ2FzZSgpLmxvY2FsZUNvbXBhcmUoc2FmZVJocy50b0xvd2VyQ2FzZSgpID8/IFwiXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gY29tcGFyZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGxocyAtIHJocztcclxuICAgIH0pO1xyXG4gICAgLy8gSGFuZGxlIGNoYW5nZXMgaW4gdHlwZWFoZWFkIHRoYXQgY2F1c2UgY2hhbmdlcyB0byB0aGUgdGFiYmFibGUgaW5kZXhcclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRUeXBlYWhlYWQgJiYgc29ydGVkVHlwZWFoZWFkSW5mby5jdXJyZW50Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsZXQgc29ydGVkVHlwZWFoZWFkSW5kZXggPSBiaW5hcnlTZWFyY2goc29ydGVkVHlwZWFoZWFkSW5mby5jdXJyZW50LCBjdXJyZW50VHlwZWFoZWFkLCBjb21wYXJhdG9yKTtcclxuICAgICAgICAgICAgaWYgKHNvcnRlZFR5cGVhaGVhZEluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhlIHVzZXIgaGFzIHR5cGVkIGFuIGVudHJ5IHRoYXQgZG9lc24ndCBleGlzdCBpbiB0aGUgbGlzdFxyXG4gICAgICAgICAgICAgICAgLy8gKG9yIG1vcmUgc3BlY2lmaWNhbGx5IFwiZm9yIHdoaWNoIHRoZXJlIGlzIG5vIGVudHJ5IHRoYXQgc3RhcnRzIHdpdGggdGhhdCBpbnB1dFwiKVxyXG4gICAgICAgICAgICAgICAgc2V0SW52YWxpZFR5cGVhaGVhZCh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNldEludmFsaWRUeXBlYWhlYWQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICAgV2Uga25vdyByb3VnaGx5IHdoZXJlLCBpbiB0aGUgc29ydGVkIGFycmF5IG9mIHN0cmluZ3MsIG91ciBuZXh0IHR5cGVhaGVhZCBsb2NhdGlvbiBpcy5cclxuICAgICAgICAgICAgICAgICAgQnV0IHJvdWdobHkgaXNuJ3QgZ29vZCBlbm91Z2ggaWYgdGhlcmUgYXJlIG11bHRpcGxlIG1hdGNoZXMuXHJcbiAgICAgICAgICAgICAgICAgIFRvIGNvbnZlcnQgb3VyIHNvcnRlZCBpbmRleCB0byB0aGUgdW5zb3J0ZWQgaW5kZXggd2UgbmVlZCwgd2UgaGF2ZSB0byBmaW5kIHRoZSBmaXJzdFxyXG4gICAgICAgICAgICAgICAgICBlbGVtZW50IHRoYXQgbWF0Y2hlcyB1cyAqYW5kKiAoaWYgYW55IHN1Y2ggZXhpc3QpIGlzICphZnRlciogb3VyIGN1cnJlbnQgc2VsZWN0aW9uLlxyXG5cclxuICAgICAgICAgICAgICAgICAgSW4gb3RoZXIgd29yZHMsIHRoZSBvbmx5IHdheSB0eXBlYWhlYWQgbW92ZXMgYmFja3dhcmRzIHJlbGF0aXZlIHRvIG91ciBjdXJyZW50XHJcbiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uIGlzIGlmIHRoZSBvbmx5IG90aGVyIG9wdGlvbiBpcyBiZWhpbmQgdXMuXHJcblxyXG4gICAgICAgICAgICAgICAgICBJdCdzIG5vdCBzcGVjaWZpZWQgaW4gV0FJLUFSSUEgd2hhdCB0byBkbyBpbiB0aGF0IGNhc2UuICBJIHN1cHBvc2Ugd3JhcCBiYWNrIHRvIHRoZSBzdGFydD9cclxuICAgICAgICAgICAgICAgICAgVGhvdWdoIHRoZXJlJ3MgYWxzbyBhIGNhc2UgZm9yIGp1c3QgZ29pbmcgdXB3YXJkcyB0byB0aGUgbmVhcmVzdCB0byBwcmV2ZW50IGp1bXBpbmVzcy5cclxuICAgICAgICAgICAgICAgICAgQnV0IGlmIHlvdSdyZSBhbHJlYWR5IGRvaW5nIHR5cGVhaGVhZCBvbiBhbiB1bnNvcnRlZCBsaXN0LCBsaWtlLCBqdW1waW5lc3MgY2FuJ3QgYmUgYXZvaWRlZC5cclxuICAgICAgICAgICAgICAgICAgSSBkdW5uby4gR29pbmcgYmFjayB0byB0aGUgc3RhcnQgaXMgdGhlIHNpbXBsaXN0IHRob3VnaC5cclxuXHJcbiAgICAgICAgICAgICAgICAgIEJhc2ljYWxseSB3aGF0IHRoaXMgZG9lczogU3RhcnRpbmcgZnJvbSB3aGVyZSB3ZSBmb3VuZCBvdXJzZWx2ZXMgYWZ0ZXIgb3VyIGJpbmFyeSBzZWFyY2gsXHJcbiAgICAgICAgICAgICAgICAgIHNjYW4gYmFja3dhcmRzIGFuZCBmb3J3YXJkcyB0aHJvdWdoIGFsbCBhZGphY2VudCBlbnRyaWVzIHRoYXQgYWxzbyBjb21wYXJlIGVxdWFsbHkgc28gdGhhdFxyXG4gICAgICAgICAgICAgICAgICB3ZSBjYW4gZmluZCB0aGUgb25lIHdob3NlIGB1bnNvcnRlZEluZGV4YCBpcyB0aGUgbG93ZXN0IGFtb25nc3QgYWxsIG90aGVyIGVxdWFsIHN0cmluZ3NcclxuICAgICAgICAgICAgICAgICAgKGFuZCBhbHNvIHRoZSBsb3dlc3QgYHVuc29ydGVkSW5kZXhgIHlhZGRhIHlhZGRhIGV4Y2VwdCB0aGF0IGl0IGNvbWVzIGFmdGVyIHVzKS5cclxuXHJcbiAgICAgICAgICAgICAgICAgIFRPRE86IFRoZSBiaW5hcnkgc2VhcmNoIHN0YXJ0cyB0aGlzIG9mZiB3aXRoIGEgc29saWQgTyhsb2cgbiksIGJ1dCBvbmUtY2hhcmFjdGVyXHJcbiAgICAgICAgICAgICAgICAgIHNlYXJjaGVzIGFyZSwgdGhhbmtzIHRvIHBpZ2VvbmhvbGUgcHJpbmNpcGFsLCBldmVudHVhbGx5IGd1YXJhbnRlZWQgdG8gYmVjb21lXHJcbiAgICAgICAgICAgICAgICAgIE8obipsb2cgbikuIFRoaXMgaXMgYW5ub3lpbmcgYnV0IHByb2JhYmx5IG5vdCBlYXNpbHkgc29sdmFibGU/IFRoZXJlIGNvdWxkIGJlIGFuXHJcbiAgICAgICAgICAgICAgICAgIGV4Y2VwdGlvbiBmb3Igb25lLWNoYXJhY3RlciBzdHJpbmdzLCBidXQgdGhhdCdzIGp1c3Qga2lja2luZyB0aGUgY2FuIGRvd25cclxuICAgICAgICAgICAgICAgICAgdGhlIHJvYWQuIE1heWJlIG9uZSBvciB0d28gY2hhcmFjdGVycyB3b3VsZCBiZSBnb29kIGVub3VnaCB0aG91Z2guXHJcbiAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgLy8gVGhlc2UgYXJlIHVzZWQgdG8ga2VlcCB0cmFjayBvZiB0aGUgY2FuZGlkYXRlcycgcG9zaXRpb25zIGluIGJvdGggb3VyIHNvcnRlZCBhcnJheSBhbmQgdGhlIHVuc29ydGVkIERPTS5cclxuICAgICAgICAgICAgICAgIGxldCBsb3dlc3RVbnNvcnRlZEluZGV4QWxsID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGxldCBsb3dlc3RTb3J0ZWRJbmRleEFsbCA9IHNvcnRlZFR5cGVhaGVhZEluZGV4O1xyXG4gICAgICAgICAgICAgICAgLy8gVGhlc2UgdHdvIGFyZSBvbmx5IHNldCBmb3IgZWxlbWVudHMgdGhhdCBhcmUgYWhlYWQgb2YgdXMsIGJ1dCB0aGUgcHJpbmNpcGxlJ3MgdGhlIHNhbWUgb3RoZXJ3aXNlXHJcbiAgICAgICAgICAgICAgICBsZXQgbG93ZXN0VW5zb3J0ZWRJbmRleE5leHQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgbGV0IGxvd2VzdFNvcnRlZEluZGV4TmV4dCA9IHNvcnRlZFR5cGVhaGVhZEluZGV4O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlQmVzdEZpdCA9ICh1KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxvd2VzdFVuc29ydGVkSW5kZXhBbGwgPT0gbnVsbCB8fCB1IDwgbG93ZXN0VW5zb3J0ZWRJbmRleEFsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dlc3RVbnNvcnRlZEluZGV4QWxsID0gdTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXN0U29ydGVkSW5kZXhBbGwgPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKGxvd2VzdFVuc29ydGVkSW5kZXhOZXh0ID09IG51bGwgfHwgdSA8IGxvd2VzdFVuc29ydGVkSW5kZXhOZXh0KSAmJiB1ID4gKGdldEluZGV4KCkgPz8gLUluZmluaXR5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dlc3RVbnNvcnRlZEluZGV4TmV4dCA9IHU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvd2VzdFNvcnRlZEluZGV4TmV4dCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGxldCBpID0gc29ydGVkVHlwZWFoZWFkSW5kZXg7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaSA+PSAwICYmIGNvbXBhcmF0b3IoY3VycmVudFR5cGVhaGVhZCwgc29ydGVkVHlwZWFoZWFkSW5mby5jdXJyZW50W2ldKSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQmVzdEZpdChzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnRbaV0udW5zb3J0ZWRJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLS1pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaSA9IHNvcnRlZFR5cGVhaGVhZEluZGV4O1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnQubGVuZ3RoICYmIGNvbXBhcmF0b3IoY3VycmVudFR5cGVhaGVhZCwgc29ydGVkVHlwZWFoZWFkSW5mby5jdXJyZW50W2ldKSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQmVzdEZpdChzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnRbaV0udW5zb3J0ZWRJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGxvd2VzdFVuc29ydGVkSW5kZXhOZXh0ICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHNldEluZGV4KHNvcnRlZFR5cGVhaGVhZEluZm8uY3VycmVudFtsb3dlc3RTb3J0ZWRJbmRleE5leHRdLnVuc29ydGVkSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobG93ZXN0VW5zb3J0ZWRJbmRleEFsbCAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBzZXRJbmRleChzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnRbbG93ZXN0U29ydGVkSW5kZXhBbGxdLnVuc29ydGVkSW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW2N1cnJlbnRUeXBlYWhlYWRdKTtcclxuICAgIGNvbnN0IHVzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZCA9IHVzZUNhbGxiYWNrKCh7IHRleHQsIC4uLmkgfSkgPT4ge1xyXG4gICAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBGaW5kIHdoZXJlIHRvIGluc2VydCB0aGlzIGl0ZW0uXHJcbiAgICAgICAgICAgICAgICAvLyBCZWNhdXNlIGFsbCBpbmRleCB2YWx1ZXMgc2hvdWxkIGJlIHVuaXF1ZSwgdGhlIHJldHVybmVkIHNvcnRlZEluZGV4XHJcbiAgICAgICAgICAgICAgICAvLyBzaG91bGQgYWx3YXlzIHJlZmVyIHRvIGEgbmV3IGxvY2F0aW9uIChpLmUuIGJlIG5lZ2F0aXZlKSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGxldCBzb3J0ZWRJbmRleCA9IGJpbmFyeVNlYXJjaChzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnQsIHRleHQsIGNvbXBhcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5hc3NlcnQoc29ydGVkSW5kZXggPCAwKTtcclxuICAgICAgICAgICAgICAgIGlmIChzb3J0ZWRJbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnQuc3BsaWNlKC1zb3J0ZWRJbmRleCAtIDEsIDAsIHsgdGV4dCwgdW5zb3J0ZWRJbmRleDogaS5pbmRleCB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB1bm1vdW50aW5nLCBmaW5kIHdoZXJlIHdlIHdlcmUgYW5kIHJlbW92ZSBvdXJzZWx2ZXMuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQWdhaW4sIHdlIHNob3VsZCBhbHdheXMgZmluZCBvdXJzZWx2ZXMgYmVjYXVzZSB0aGVyZSBzaG91bGQgYmUgbm8gZHVwbGljYXRlIHZhbHVlcyBpZiBlYWNoIGluZGV4IGlzIHVuaXF1ZS5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgc29ydGVkSW5kZXggPSBiaW5hcnlTZWFyY2goc29ydGVkVHlwZWFoZWFkSW5mby5jdXJyZW50LCB0ZXh0LCBjb21wYXJhdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmFzc2VydChzb3J0ZWRJbmRleCA+PSAwKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc29ydGVkSW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3J0ZWRUeXBlYWhlYWRJbmZvLmN1cnJlbnQuc3BsaWNlKHNvcnRlZEluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgW3RleHRdKTtcclxuICAgICAgICBjb25zdCB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uQ2hpbGRQcm9wcyA9IGZ1bmN0aW9uICh7IC4uLnByb3BzIH0pIHtcclxuICAgICAgICAgICAgY29uc3QgeyB1c2VSZWZFbGVtZW50UHJvcHMsIGVsZW1lbnQgfSA9IHVzZVJlZkVsZW1lbnQoKTtcclxuICAgICAgICAgICAgY29uc3Qgb25Db21wb3NpdGlvblN0YXJ0ID0gKGUpID0+IHsgc2V0SW1lQWN0aXZlKHRydWUpOyB9O1xyXG4gICAgICAgICAgICBjb25zdCBvbkNvbXBvc2l0aW9uRW5kID0gKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHNldE5leHRUeXBlYWhlYWRDaGFyKGUuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBzZXRJbWVBY3RpdmUoZmFsc2UpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCBvbktleURvd24gPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW1lQWN0aXZlID0gZ2V0SW1lQWN0aXZlKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQga2V5ID0gZS5rZXk7XHJcbiAgICAgICAgICAgICAgICAvLyBOb3QgaGFuZGxlZCBieSB0eXBlYWhlYWQgKGkuZS4gYXNzdW1lIHRoaXMgaXMgYSBrZXlib2FyZCBzaG9ydGN1dClcclxuICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGlmICghaW1lQWN0aXZlICYmIGUua2V5ID09PSBcIkJhY2tzcGFjZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBsYXN0IGNoYXJhY3RlciBpbiBhIHdheSB0aGF0IGRvZXNuJ3Qgc3BsaXQgVVRGLTE2IHN1cnJvZ2F0ZXMuXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0Q3VycmVudFR5cGVhaGVhZCh0ID0+IHQgPT09IG51bGwgPyBudWxsIDogWy4uLnRdLnJldmVyc2UoKS5zbGljZSgxKS5yZXZlcnNlKCkuam9pbihcIlwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gVGhlIGtleSBwcm9wZXJ0eSByZXByZXNlbnRzIHRoZSB0eXBlZCBjaGFyYWN0ZXIgT1IgdGhlIFwibmFtZWQga2V5IGF0dHJpYnV0ZVwiIG9mIHRoZSBrZXkgcHJlc3NlZC5cclxuICAgICAgICAgICAgICAgIC8vIFRoZXJlJ3Mgbm8gZGVmaW5pdGUgd2F5IHRvIHRlbGwgdGhlIGRpZmZlcmVuY2UsIGJ1dCBmb3IgYWxsIGludGVudHMgYW5kIHB1cnBvc2VzXHJcbiAgICAgICAgICAgICAgICAvLyB0aGVyZSBhcmUgbm8gb25lLWNoYXJhY3RlciBuYW1lcywgYW5kIHRoZXJlIGFyZSBubyBub24tQVNDSUktYWxwaGEgbmFtZXMuXHJcbiAgICAgICAgICAgICAgICAvLyBUaHVzLCBhbnkgb25lLWNoYXJhY3RlciBvciBub24tQVNDSUkgdmFsdWUgZm9yIGBrZXlgIGlzICphbG1vc3QgY2VydGFpbmx5KiBhIHR5cGVkIGNoYXJhY3Rlci5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzQ2hhcmFjdGVyS2V5ID0gKGtleS5sZW5ndGggPT09IDEgfHwgIS9eW0EtWmEtel0vLnRlc3Qoa2V5KSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNDaGFyYWN0ZXJLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09IFwiIFwiICYmIChnZXRDdXJyZW50VHlwZWFoZWFkKCkgPz8gXCJcIikudHJpbSgpLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGRvIGFueXRoaW5nIGJlY2F1c2UgYSBzcGFjZWJhciBjYW4ndCBldmVyIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpbml0aWF0ZSBhIHR5cGVhaGVhZCwgb25seSBjb250aW51ZSBvbmUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIChTcGVjaWZpY2FsbHksIGxldCB0aGUgZXZlbnQgY29udGludWUgcHJvcGFnYXRpb24gaW4gdGhpcyBjYXNlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3RlOiBXb24ndCBiZSB0cnVlIGZvciB0aGUgZmlyc3Qga2V5ZG93blxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBidXQgd2lsbCBiZSBvdmVyd3JpdHRlbiBiZWZvcmUgdXNlTGF5b3V0RWZmZWN0IGlzIGNhbGxlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBhY3R1YWxseSBhcHBseSB0aGUgY2hhbmdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW1lQWN0aXZlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0TmV4dFR5cGVhaGVhZENoYXIoa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VNZXJnZWRQcm9wcygpKHVzZVJlZkVsZW1lbnRQcm9wcyh7IG9uS2V5RG93biwgb25Db21wb3NpdGlvblN0YXJ0LCBvbkNvbXBvc2l0aW9uRW5kLCB9KSwgcHJvcHMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkUHJvcHNcclxuICAgICAgICB9O1xyXG4gICAgfSwgW10pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uQ2hpbGQsXHJcbiAgICAgICAgY3VycmVudFR5cGVhaGVhZCxcclxuICAgICAgICBpbnZhbGlkVHlwZWFoZWFkLFxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogWW91ciB1c3VhbCBiaW5hcnkgc2VhcmNoIGltcGxlbWVudGF0aW9uLlxyXG4gKlxyXG4gKiBJdCdzIHVzZWQgaGVyZSB0byBxdWlja2x5IGZpbmQgYSBnb29kIHNwb3QgdG8gc3RhcnQgc2VhcmNoaW5nIGZvciBvdXIgbmV4dCB0eXBlYWhlYWQgY2FuZGlkYXRlLlxyXG4gKiBAcGFyYW0gYXJyYXkgVGhlIGFycmF5IHRvIHNlYXJjaCB0aHJvdWdoXHJcbiAqIEBwYXJhbSB3YW50ZWQgVGhlIHZhbHVlIHlvdSdkIGxpa2UgdG8gZmluZFxyXG4gKiBAcGFyYW0gY29tcGFyYXRvciBDb21wYXJlcyBgd2FudGVkYCB3aXRoIHRoZSBjdXJyZW50IHZhbHVlIGluIGBhcnJheWBcclxuICogQHJldHVybnMgQSBub24tbmVnYXRpdmUgdmFsdWUgaWYgYHdhbnRlZGAgd2FzIGZvdW5kLCBhbmQgYSBuZWdhdGl2ZSBudW1iZXIgaWYgbm90LlxyXG4gKiBUaGUgYWJzb2x1dGUgdmFsdWUgb2YgdGhpcyBudW1iZXIsIG1pbnVzIG9uZSwgaXMgd2hlcmUgYHdhbnRlZGAgKndvdWxkKiBiZSBmb3VuZCBpZiBpdCAqd2FzKiBpbiBgYXJyYXlgXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYmluYXJ5U2VhcmNoKGFycmF5LCB3YW50ZWQsIGNvbXBhcmF0b3IpIHtcclxuICAgIHZhciBmaXJzdEluZGV4ID0gMDtcclxuICAgIHZhciBsYXN0SW5kZXggPSBhcnJheS5sZW5ndGggLSAxO1xyXG4gICAgd2hpbGUgKGZpcnN0SW5kZXggPD0gbGFzdEluZGV4KSB7XHJcbiAgICAgICAgdmFyIHRlc3RJbmRleCA9IChsYXN0SW5kZXggKyBmaXJzdEluZGV4KSA+PiAxO1xyXG4gICAgICAgIHZhciBjb21wYXJpc29uUmVzdWx0ID0gY29tcGFyYXRvcih3YW50ZWQsIGFycmF5W3Rlc3RJbmRleF0pO1xyXG4gICAgICAgIGlmIChjb21wYXJpc29uUmVzdWx0ID4gMCkge1xyXG4gICAgICAgICAgICBmaXJzdEluZGV4ID0gdGVzdEluZGV4ICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY29tcGFyaXNvblJlc3VsdCA8IDApIHtcclxuICAgICAgICAgICAgbGFzdEluZGV4ID0gdGVzdEluZGV4IC0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXN0SW5kZXg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIC1maXJzdEluZGV4IC0gMTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2Uta2V5Ym9hcmQtbmF2aWdhdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwiLi91c2UtbWVyZ2VkLXByb3BzXCI7XHJcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcIi4vdXNlLXN0YXRlXCI7XHJcbmltcG9ydCB7IHVzZVJvdmluZ1RhYkluZGV4IH0gZnJvbSBcIi4vdXNlLXJvdmluZy10YWJpbmRleFwiO1xyXG5pbXBvcnQgeyB1c2VMaW5lYXJOYXZpZ2F0aW9uLCB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uIH0gZnJvbSBcIi4vdXNlLWtleWJvYXJkLW5hdmlnYXRpb25cIjtcclxuLyoqXHJcbiAqXHJcbiAqIFRPRE86IFRoaXMgdGFibGUgd2FzIHNjcmFwcGVkIHdoZW4gdGhpcyB3YXMgY2hhbmdlZCB0byBqdXN0IGFjY2VwdCBhIGNvbGxhdG9yIGRpcmVjdGx5LFxyXG4gKiBidXQgaXQncyBub3QgYmFkIGZvciBhIGNvbGxhdGlvbiBjcmFzaCBjb3Vyc2UgYW5kIEkgbWlnaHQgdXNlIGl0IGFnYWluLlxyXG4gKiBFdmVuIGp1c3QgYXMgYSBcInRoaXMgaXMgd2h5IGl0J3MgaW1wb3J0YW50IGFuZCBnb29kIHRvIHVzZSB0aGVzZSB0aGluZ3NcIiB0aGluZy5cclxuICpcclxuICogfExhbmcufFRhcmdldHxVc2VyIGlucHV0fGBiYXNlYHxgYWNjZW50YHxgY2FzZWB8YHZhcmlhbnRgfFxyXG4gKiB8LS0tLXwtLS0tfC0tLS18LS0tLXwtLS0tfC0tLS18LS0tLXxcclxuICogfEVOfEhpfEhpfOKchXzinIV84pyFfOKchXxcclxuICogfEVOfEhpfO+8qO+9iXzinIV84pyFfOKchXzinYx8XHJcbiAqIHxFTnxIaXxoaXzinIV84pyFfOKdjHzinYx8XHJcbiAqIHxFTnxIaXxIw6984pyFfOKdjHzinYx84p2MfFxyXG4gKiB8RU58SGl8QnllfOKdjHzinYx84p2MfOKdjHxcclxuICogfERBfMOlfGFhfOKchXzinIV84pyFfOKdjHxcclxuICogfERBfMOlfEFBfOKchXzinIV84p2MfOKdjHxcclxuICogfERBfMOlfEFhfOKchXzinIV84p2MfOKdjHxcclxuICogfEVOfMOlfGFhfOKdjHzinYx84p2MfOKdjHxcclxuICogfERBfMOlfGFBfOKdjHzinYx84p2MfOKdjHxcclxuICogfEVOfMOlfGF84pyFfOKchXzinYx84p2MfFxyXG4gKiB8REF8w6V8YXzinIV84pyFfOKdjHzinYx8XHJcbiAqIHxKUHzvqqp8552AfOKchXzinIV84pyFfOKchXxcclxuICogfEpQfOOCq3zvvbZ84pyFfOKchXzinIV84pyFfFxyXG4gKiB8SlB844KrfOOBi3zinIV84pyFfOKchXzinYx8XHJcbiAqIHxKUHzjgqt844O1fOKchXzinIV84pyFfOKdjHxcclxuICogfEpQfOOCq3zji5V84pyFfOKchXzinYx84p2MfFxyXG4gKiB8SlB844KrfOOCrHzinIV84p2MfOKdjHzinYx8XHJcbiAqIHxKUHzjgqt85YqbfOKdjHzinYx84p2MfOKdjHxcclxuICogfFpIfOe0hXznuqJ84p2MfOKdjHzinYx84p2MfFxyXG4gKlxyXG4gKlxyXG4gKiAoTm90ZSB0byBzZWxmOiBBdCBzb21lIHBvaW50LCB0aGlzIGZpbGUgd2lsbCBwcm9iYWJseSBiZSBub3JtYWxpemVkXHJcbiAqIGJ5IHNvbWVib2R5IGFuZCDvqqogd2lsbCB0dXJuIGJhY2sgaW50byDnnYAuKVxyXG4gKlxyXG4gKi9cclxuY29uc3QgZHVtbXkgPSBudWxsO1xyXG4vKipcclxuICogSW1wbGVtZW50cyBwcm9wZXIga2V5Ym9hcmQgbmF2aWdhdGlvbiBmb3IgY29tcG9uZW50cyBsaWtlIGxpc3Rib3hlcywgYnV0dG9uIGdyb3VwcywgbWVudXMsIGV0Yy5cclxuICpcclxuICogSW4gdGhlIGRvY3VtZW50IG9yZGVyLCB0aGVyZSB3aWxsIGJlIG9ubHkgb25lIFwiZm9jdXNlZFwiIG9yIFwidGFiYmFibGVcIiBlbGVtZW50LCBtYWtpbmcgaXQgYWN0IG1vcmUgbGlrZSBvbmUgY29tcGxldGUgdW5pdCBpbiBjb21wYXJpc29uIHRvIGV2ZXJ5dGhpbmcgYXJvdW5kIGl0LlxyXG4gKiBOYXZpZ2F0aW5nIGZvcndhcmRzL2JhY2t3YXJkcyBjYW4gYmUgZG9uZSB3aXRoIHRoZSBhcnJvdyBrZXlzLCBIb21lL0VuZCBrZXlzLCBvciBhbnkgYW55IHRleHQgZm9yIHR5cGVhaGVhZCB0byBmb2N1cyB0aGUgbmV4dCBpdGVtIHRoYXQgbWF0Y2hlcy5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VMaXN0TmF2aWdhdGlvbih7IGluaXRpYWxJbmRleCwgZm9jdXNPbkNoYW5nZSwgY29sbGF0b3IsIGtleU5hdmlnYXRpb24gfSkge1xyXG4gICAga2V5TmF2aWdhdGlvbiA/Pz0gXCJlaXRoZXJcIjtcclxuICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhyZWUgdGhpbmdzIHJlbGF0ZWQgdG8gdGhlIGN1cnJlbnRseSB0YWJiYWJsZSBlbGVtZW50J3MgaW5kZXg6XHJcbiAgICAvLyBXaGF0IGl0IGlzLCBhbmQgd2hldGhlciwgd2hlbiB3ZSByZW5kZXIgdGhpcyBjb21wb25lbnQgYW5kIGl0J3MgY2hhbmdlZCwgdG8gYWxzbyBmb2N1cyB0aGUgZWxlbWVudCB0aGF0IHdhcyBtYWRlIHRhYmJhYmxlLlxyXG4gICAgY29uc3QgW3RhYmJhYmxlSW5kZXgsIHNldFRhYmJhYmxlSW5kZXgsIGdldFRhYmJhYmxlSW5kZXhdID0gdXNlU3RhdGUoaW5pdGlhbEluZGV4ID09PSB1bmRlZmluZWQgPyAwIDogaW5pdGlhbEluZGV4KTtcclxuICAgIGNvbnN0IHNldEluZGV4ID0gdXNlQ2FsbGJhY2soKGluZGV4KSA9PiB7XHJcbiAgICAgICAgc2V0VGFiYmFibGVJbmRleChpbmRleCk7XHJcbiAgICB9LCBbXSk7XHJcbiAgICBjb25zdCB7IG1hbmFnZWRDaGlsZHJlbiwgaW5kaWNlc0J5RWxlbWVudCwgdXNlUm92aW5nVGFiSW5kZXhDaGlsZCwgZm9jdXNDdXJyZW50LCAuLi5yZXN0IH0gPSB1c2VSb3ZpbmdUYWJJbmRleCh7IGZvY3VzT25DaGFuZ2UsIHRhYmJhYmxlSW5kZXggfSk7XHJcbiAgICBjb25zdCB7IGN1cnJlbnRUeXBlYWhlYWQsIGludmFsaWRUeXBlYWhlYWQsIHVzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZCB9ID0gdXNlVHlwZWFoZWFkTmF2aWdhdGlvbih7IGNvbGxhdG9yLCBnZXRJbmRleDogZ2V0VGFiYmFibGVJbmRleCwgc2V0SW5kZXgsIHR5cGVhaGVhZFRpbWVvdXQ6IDEwMDAgfSk7XHJcbiAgICBjb25zdCB7IG5hdmlnYXRlVG9FbmQsIG5hdmlnYXRlVG9JbmRleCwgbmF2aWdhdGVUb05leHQsIG5hdmlnYXRlVG9QcmV2LCBuYXZpZ2F0ZVRvU3RhcnQsIHVzZUxpbmVhck5hdmlnYXRpb25DaGlsZCB9ID0gdXNlTGluZWFyTmF2aWdhdGlvbih7IG5hdmlnYXRpb25EaXJlY3Rpb246IGtleU5hdmlnYXRpb24sIGdldEluZGV4OiBnZXRUYWJiYWJsZUluZGV4LCBzZXRJbmRleCwgbWFuYWdlZENoaWxkcmVuIH0pO1xyXG4gICAgY29uc3QgdXNlTGlzdE5hdmlnYXRpb25DaGlsZCA9IHVzZUNhbGxiYWNrKChpbmZvKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyB1c2VUeXBlYWhlYWROYXZpZ2F0aW9uQ2hpbGRQcm9wcyB9ID0gdXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkKGluZm8pO1xyXG4gICAgICAgIGNvbnN0IHsgdXNlTGluZWFyTmF2aWdhdGlvbkNoaWxkUHJvcHMgfSA9IHVzZUxpbmVhck5hdmlnYXRpb25DaGlsZCgpO1xyXG4gICAgICAgIGNvbnN0IHsgdXNlUm92aW5nVGFiSW5kZXhDaGlsZFByb3BzLCB1c2VSb3ZpbmdUYWJJbmRleFNpYmxpbmdQcm9wcywgdGFiYmFibGUgfSA9IHVzZVJvdmluZ1RhYkluZGV4Q2hpbGQoaW5mbyk7XHJcbiAgICAgICAgY29uc3QgdXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzID0gZnVuY3Rpb24gKHsgLi4ucHJvcHMgfSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHMoKSh1c2VSb3ZpbmdUYWJJbmRleENoaWxkUHJvcHModXNlVHlwZWFoZWFkTmF2aWdhdGlvbkNoaWxkUHJvcHModXNlTGluZWFyTmF2aWdhdGlvbkNoaWxkUHJvcHMoeyBvbkNsaWNrOiByb3ZlVG9TZWxmIH0pKSksIHByb3BzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHJvdmVUb1NlbGYgPSB1c2VDYWxsYmFjaygoKSA9PiB7IG5hdmlnYXRlVG9JbmRleChpbmZvLmluZGV4KTsgfSwgW10pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQcm9wcyxcclxuICAgICAgICAgICAgdXNlTGlzdE5hdmlnYXRpb25TaWJsaW5nUHJvcHM6IHVzZVJvdmluZ1RhYkluZGV4U2libGluZ1Byb3BzLFxyXG4gICAgICAgICAgICB0YWJiYWJsZSxcclxuICAgICAgICAgICAgLy9yb3ZlVG9TZWxmLFxyXG4gICAgICAgICAgICAvL2VsZW1lbnRcclxuICAgICAgICB9O1xyXG4gICAgfSwgW3VzZVR5cGVhaGVhZE5hdmlnYXRpb25DaGlsZCwgdXNlTGluZWFyTmF2aWdhdGlvbkNoaWxkLCB1c2VSb3ZpbmdUYWJJbmRleENoaWxkLCBuYXZpZ2F0ZVRvSW5kZXhdKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlTGlzdE5hdmlnYXRpb25DaGlsZCxcclxuICAgICAgICBjdXJyZW50VHlwZWFoZWFkLFxyXG4gICAgICAgIGludmFsaWRUeXBlYWhlYWQsXHJcbiAgICAgICAgdGFiYmFibGVJbmRleCxcclxuICAgICAgICBzZXRUYWJiYWJsZUluZGV4LFxyXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbixcclxuICAgICAgICBpbmRpY2VzQnlFbGVtZW50LFxyXG4gICAgICAgIG5hdmlnYXRlVG9JbmRleCxcclxuICAgICAgICBuYXZpZ2F0ZVRvTmV4dCxcclxuICAgICAgICBuYXZpZ2F0ZVRvUHJldixcclxuICAgICAgICBuYXZpZ2F0ZVRvU3RhcnQsXHJcbiAgICAgICAgbmF2aWdhdGVUb0VuZCxcclxuICAgICAgICBmb2N1c0N1cnJlbnQsXHJcbiAgICAgICAgLi4ucmVzdFxyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtbGlzdC1uYXZpZ2F0aW9uLmpzLm1hcCIsIi8qIVxuKiB0YWJiYWJsZSA1LjIuMVxuKiBAbGljZW5zZSBNSVQsIGh0dHBzOi8vZ2l0aHViLmNvbS9mb2N1cy10cmFwL3RhYmJhYmxlL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiovXG52YXIgY2FuZGlkYXRlU2VsZWN0b3JzID0gWydpbnB1dCcsICdzZWxlY3QnLCAndGV4dGFyZWEnLCAnYVtocmVmXScsICdidXR0b24nLCAnW3RhYmluZGV4XScsICdhdWRpb1tjb250cm9sc10nLCAndmlkZW9bY29udHJvbHNdJywgJ1tjb250ZW50ZWRpdGFibGVdOm5vdChbY29udGVudGVkaXRhYmxlPVwiZmFsc2VcIl0pJywgJ2RldGFpbHM+c3VtbWFyeTpmaXJzdC1vZi10eXBlJywgJ2RldGFpbHMnXTtcbnZhciBjYW5kaWRhdGVTZWxlY3RvciA9IC8qICNfX1BVUkVfXyAqL2NhbmRpZGF0ZVNlbGVjdG9ycy5qb2luKCcsJyk7XG52YXIgbWF0Y2hlcyA9IHR5cGVvZiBFbGVtZW50ID09PSAndW5kZWZpbmVkJyA/IGZ1bmN0aW9uICgpIHt9IDogRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyB8fCBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XG5cbnZhciBnZXRDYW5kaWRhdGVzID0gZnVuY3Rpb24gZ2V0Q2FuZGlkYXRlcyhlbCwgaW5jbHVkZUNvbnRhaW5lciwgZmlsdGVyKSB7XG4gIHZhciBjYW5kaWRhdGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2FuZGlkYXRlU2VsZWN0b3IpKTtcblxuICBpZiAoaW5jbHVkZUNvbnRhaW5lciAmJiBtYXRjaGVzLmNhbGwoZWwsIGNhbmRpZGF0ZVNlbGVjdG9yKSkge1xuICAgIGNhbmRpZGF0ZXMudW5zaGlmdChlbCk7XG4gIH1cblxuICBjYW5kaWRhdGVzID0gY2FuZGlkYXRlcy5maWx0ZXIoZmlsdGVyKTtcbiAgcmV0dXJuIGNhbmRpZGF0ZXM7XG59O1xuXG52YXIgaXNDb250ZW50RWRpdGFibGUgPSBmdW5jdGlvbiBpc0NvbnRlbnRFZGl0YWJsZShub2RlKSB7XG4gIHJldHVybiBub2RlLmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnO1xufTtcblxudmFyIGdldFRhYmluZGV4ID0gZnVuY3Rpb24gZ2V0VGFiaW5kZXgobm9kZSkge1xuICB2YXIgdGFiaW5kZXhBdHRyID0gcGFyc2VJbnQobm9kZS5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JyksIDEwKTtcblxuICBpZiAoIWlzTmFOKHRhYmluZGV4QXR0cikpIHtcbiAgICByZXR1cm4gdGFiaW5kZXhBdHRyO1xuICB9IC8vIEJyb3dzZXJzIGRvIG5vdCByZXR1cm4gYHRhYkluZGV4YCBjb3JyZWN0bHkgZm9yIGNvbnRlbnRFZGl0YWJsZSBub2RlcztcbiAgLy8gc28gaWYgdGhleSBkb24ndCBoYXZlIGEgdGFiaW5kZXggYXR0cmlidXRlIHNwZWNpZmljYWxseSBzZXQsIGFzc3VtZSBpdCdzIDAuXG5cblxuICBpZiAoaXNDb250ZW50RWRpdGFibGUobm9kZSkpIHtcbiAgICByZXR1cm4gMDtcbiAgfSAvLyBpbiBDaHJvbWUsIDxkZXRhaWxzLz4sIDxhdWRpbyBjb250cm9scy8+IGFuZCA8dmlkZW8gY29udHJvbHMvPiBlbGVtZW50cyBnZXQgYSBkZWZhdWx0XG4gIC8vICBgdGFiSW5kZXhgIG9mIC0xIHdoZW4gdGhlICd0YWJpbmRleCcgYXR0cmlidXRlIGlzbid0IHNwZWNpZmllZCBpbiB0aGUgRE9NLFxuICAvLyAgeWV0IHRoZXkgYXJlIHN0aWxsIHBhcnQgb2YgdGhlIHJlZ3VsYXIgdGFiIG9yZGVyOyBpbiBGRiwgdGhleSBnZXQgYSBkZWZhdWx0XG4gIC8vICBgdGFiSW5kZXhgIG9mIDA7IHNpbmNlIENocm9tZSBzdGlsbCBwdXRzIHRob3NlIGVsZW1lbnRzIGluIHRoZSByZWd1bGFyIHRhYlxuICAvLyAgb3JkZXIsIGNvbnNpZGVyIHRoZWlyIHRhYiBpbmRleCB0byBiZSAwLlxuXG5cbiAgaWYgKChub2RlLm5vZGVOYW1lID09PSAnQVVESU8nIHx8IG5vZGUubm9kZU5hbWUgPT09ICdWSURFTycgfHwgbm9kZS5ub2RlTmFtZSA9PT0gJ0RFVEFJTFMnKSAmJiBub2RlLmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKSA9PT0gbnVsbCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIG5vZGUudGFiSW5kZXg7XG59O1xuXG52YXIgc29ydE9yZGVyZWRUYWJiYWJsZXMgPSBmdW5jdGlvbiBzb3J0T3JkZXJlZFRhYmJhYmxlcyhhLCBiKSB7XG4gIHJldHVybiBhLnRhYkluZGV4ID09PSBiLnRhYkluZGV4ID8gYS5kb2N1bWVudE9yZGVyIC0gYi5kb2N1bWVudE9yZGVyIDogYS50YWJJbmRleCAtIGIudGFiSW5kZXg7XG59O1xuXG52YXIgaXNJbnB1dCA9IGZ1bmN0aW9uIGlzSW5wdXQobm9kZSkge1xuICByZXR1cm4gbm9kZS50YWdOYW1lID09PSAnSU5QVVQnO1xufTtcblxudmFyIGlzSGlkZGVuSW5wdXQgPSBmdW5jdGlvbiBpc0hpZGRlbklucHV0KG5vZGUpIHtcbiAgcmV0dXJuIGlzSW5wdXQobm9kZSkgJiYgbm9kZS50eXBlID09PSAnaGlkZGVuJztcbn07XG5cbnZhciBpc0RldGFpbHNXaXRoU3VtbWFyeSA9IGZ1bmN0aW9uIGlzRGV0YWlsc1dpdGhTdW1tYXJ5KG5vZGUpIHtcbiAgdmFyIHIgPSBub2RlLnRhZ05hbWUgPT09ICdERVRBSUxTJyAmJiBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkobm9kZS5jaGlsZHJlbikuc29tZShmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQudGFnTmFtZSA9PT0gJ1NVTU1BUlknO1xuICB9KTtcbiAgcmV0dXJuIHI7XG59O1xuXG52YXIgZ2V0Q2hlY2tlZFJhZGlvID0gZnVuY3Rpb24gZ2V0Q2hlY2tlZFJhZGlvKG5vZGVzLCBmb3JtKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobm9kZXNbaV0uY2hlY2tlZCAmJiBub2Rlc1tpXS5mb3JtID09PSBmb3JtKSB7XG4gICAgICByZXR1cm4gbm9kZXNbaV07XG4gICAgfVxuICB9XG59O1xuXG52YXIgaXNUYWJiYWJsZVJhZGlvID0gZnVuY3Rpb24gaXNUYWJiYWJsZVJhZGlvKG5vZGUpIHtcbiAgaWYgKCFub2RlLm5hbWUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciByYWRpb1Njb3BlID0gbm9kZS5mb3JtIHx8IG5vZGUub3duZXJEb2N1bWVudDtcblxuICB2YXIgcXVlcnlSYWRpb3MgPSBmdW5jdGlvbiBxdWVyeVJhZGlvcyhuYW1lKSB7XG4gICAgcmV0dXJuIHJhZGlvU2NvcGUucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT1cInJhZGlvXCJdW25hbWU9XCInICsgbmFtZSArICdcIl0nKTtcbiAgfTtcblxuICB2YXIgcmFkaW9TZXQ7XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuQ1NTICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LkNTUy5lc2NhcGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByYWRpb1NldCA9IHF1ZXJ5UmFkaW9zKHdpbmRvdy5DU1MuZXNjYXBlKG5vZGUubmFtZSkpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICByYWRpb1NldCA9IHF1ZXJ5UmFkaW9zKG5vZGUubmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS5lcnJvcignTG9va3MgbGlrZSB5b3UgaGF2ZSBhIHJhZGlvIGJ1dHRvbiB3aXRoIGEgbmFtZSBhdHRyaWJ1dGUgY29udGFpbmluZyBpbnZhbGlkIENTUyBzZWxlY3RvciBjaGFyYWN0ZXJzIGFuZCBuZWVkIHRoZSBDU1MuZXNjYXBlIHBvbHlmaWxsOiAlcycsIGVyci5tZXNzYWdlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICB2YXIgY2hlY2tlZCA9IGdldENoZWNrZWRSYWRpbyhyYWRpb1NldCwgbm9kZS5mb3JtKTtcbiAgcmV0dXJuICFjaGVja2VkIHx8IGNoZWNrZWQgPT09IG5vZGU7XG59O1xuXG52YXIgaXNSYWRpbyA9IGZ1bmN0aW9uIGlzUmFkaW8obm9kZSkge1xuICByZXR1cm4gaXNJbnB1dChub2RlKSAmJiBub2RlLnR5cGUgPT09ICdyYWRpbyc7XG59O1xuXG52YXIgaXNOb25UYWJiYWJsZVJhZGlvID0gZnVuY3Rpb24gaXNOb25UYWJiYWJsZVJhZGlvKG5vZGUpIHtcbiAgcmV0dXJuIGlzUmFkaW8obm9kZSkgJiYgIWlzVGFiYmFibGVSYWRpbyhub2RlKTtcbn07XG5cbnZhciBpc0hpZGRlbiA9IGZ1bmN0aW9uIGlzSGlkZGVuKG5vZGUsIGRpc3BsYXlDaGVjaykge1xuICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShub2RlKS52aXNpYmlsaXR5ID09PSAnaGlkZGVuJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIGlzRGlyZWN0U3VtbWFyeSA9IG1hdGNoZXMuY2FsbChub2RlLCAnZGV0YWlscz5zdW1tYXJ5OmZpcnN0LW9mLXR5cGUnKTtcbiAgdmFyIG5vZGVVbmRlckRldGFpbHMgPSBpc0RpcmVjdFN1bW1hcnkgPyBub2RlLnBhcmVudEVsZW1lbnQgOiBub2RlO1xuXG4gIGlmIChtYXRjaGVzLmNhbGwobm9kZVVuZGVyRGV0YWlscywgJ2RldGFpbHM6bm90KFtvcGVuXSkgKicpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoIWRpc3BsYXlDaGVjayB8fCBkaXNwbGF5Q2hlY2sgPT09ICdmdWxsJykge1xuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShub2RlKS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKGRpc3BsYXlDaGVjayA9PT0gJ25vbi16ZXJvLWFyZWEnKSB7XG4gICAgdmFyIF9ub2RlJGdldEJvdW5kaW5nQ2xpZSA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgIHdpZHRoID0gX25vZGUkZ2V0Qm91bmRpbmdDbGllLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfbm9kZSRnZXRCb3VuZGluZ0NsaWUuaGVpZ2h0O1xuXG4gICAgcmV0dXJuIHdpZHRoID09PSAwICYmIGhlaWdodCA9PT0gMDtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07IC8vIGZvcm0gZmllbGRzIChuZXN0ZWQpIGluc2lkZSBhIGRpc2FibGVkIGZpZWxkc2V0IGFyZSBub3QgZm9jdXNhYmxlL3RhYmJhYmxlXG4vLyAgdW5sZXNzIHRoZXkgYXJlIGluIHRoZSBfZmlyc3RfIDxsZWdlbmQ+IGVsZW1lbnQgb2YgdGhlIHRvcC1tb3N0IGRpc2FibGVkXG4vLyAgZmllbGRzZXRcblxuXG52YXIgaXNEaXNhYmxlZEZyb21GaWVsZHNldCA9IGZ1bmN0aW9uIGlzRGlzYWJsZWRGcm9tRmllbGRzZXQobm9kZSkge1xuICBpZiAoaXNJbnB1dChub2RlKSB8fCBub2RlLnRhZ05hbWUgPT09ICdTRUxFQ1QnIHx8IG5vZGUudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyB8fCBub2RlLnRhZ05hbWUgPT09ICdCVVRUT04nKSB7XG4gICAgdmFyIHBhcmVudE5vZGUgPSBub2RlLnBhcmVudEVsZW1lbnQ7XG5cbiAgICB3aGlsZSAocGFyZW50Tm9kZSkge1xuICAgICAgaWYgKHBhcmVudE5vZGUudGFnTmFtZSA9PT0gJ0ZJRUxEU0VUJyAmJiBwYXJlbnROb2RlLmRpc2FibGVkKSB7XG4gICAgICAgIC8vIGxvb2sgZm9yIHRoZSBmaXJzdCA8bGVnZW5kPiBhcyBhbiBpbW1lZGlhdGUgY2hpbGQgb2YgdGhlIGRpc2FibGVkXG4gICAgICAgIC8vICA8ZmllbGRzZXQ+OiBpZiB0aGUgbm9kZSBpcyBpbiB0aGF0IGxlZ2VuZCwgaXQnbGwgYmUgZW5hYmxlZCBldmVuXG4gICAgICAgIC8vICB0aG91Z2ggdGhlIGZpZWxkc2V0IGlzIGRpc2FibGVkOyBvdGhlcndpc2UsIHRoZSBub2RlIGlzIGluIGFcbiAgICAgICAgLy8gIHNlY29uZGFyeS9zdWJzZXF1ZW50IGxlZ2VuZCwgb3Igc29tZXdoZXJlIGVsc2Ugd2l0aGluIHRoZSBmaWVsZHNldFxuICAgICAgICAvLyAgKGhvd2V2ZXIgZGVlcCBuZXN0ZWQpIGFuZCBpdCdsbCBiZSBkaXNhYmxlZFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmVudE5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgY2hpbGQgPSBwYXJlbnROb2RlLmNoaWxkcmVuLml0ZW0oaSk7XG5cbiAgICAgICAgICBpZiAoY2hpbGQudGFnTmFtZSA9PT0gJ0xFR0VORCcpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5jb250YWlucyhub2RlKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9IC8vIHRoZSBub2RlIGlzbid0IGluIHRoZSBmaXJzdCBsZWdlbmQgKGluIGRvYyBvcmRlciksIHNvIG5vIG1hdHRlclxuICAgICAgICAgICAgLy8gIHdoZXJlIGl0IGlzIG5vdywgaXQnbGwgYmUgZGlzYWJsZWRcblxuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gdGhlIG5vZGUgaXNuJ3QgaW4gYSBsZWdlbmQsIHNvIG5vIG1hdHRlciB3aGVyZSBpdCBpcyBub3csIGl0J2xsIGJlIGRpc2FibGVkXG5cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50RWxlbWVudDtcbiAgICB9XG4gIH0gLy8gZWxzZSwgbm9kZSdzIHRhYmJhYmxlL2ZvY3VzYWJsZSBzdGF0ZSBzaG91bGQgbm90IGJlIGFmZmVjdGVkIGJ5IGEgZmllbGRzZXQnc1xuICAvLyAgZW5hYmxlZC9kaXNhYmxlZCBzdGF0ZVxuXG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxudmFyIGlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUgPSBmdW5jdGlvbiBpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlKG9wdGlvbnMsIG5vZGUpIHtcbiAgaWYgKG5vZGUuZGlzYWJsZWQgfHwgaXNIaWRkZW5JbnB1dChub2RlKSB8fCBpc0hpZGRlbihub2RlLCBvcHRpb25zLmRpc3BsYXlDaGVjaykgfHwgLy8gRm9yIGEgZGV0YWlscyBlbGVtZW50IHdpdGggYSBzdW1tYXJ5LCB0aGUgc3VtbWFyeSBlbGVtZW50IGdldHMgdGhlIGZvY3VzXG4gIGlzRGV0YWlsc1dpdGhTdW1tYXJ5KG5vZGUpIHx8IGlzRGlzYWJsZWRGcm9tRmllbGRzZXQobm9kZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnZhciBpc05vZGVNYXRjaGluZ1NlbGVjdG9yVGFiYmFibGUgPSBmdW5jdGlvbiBpc05vZGVNYXRjaGluZ1NlbGVjdG9yVGFiYmFibGUob3B0aW9ucywgbm9kZSkge1xuICBpZiAoIWlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUob3B0aW9ucywgbm9kZSkgfHwgaXNOb25UYWJiYWJsZVJhZGlvKG5vZGUpIHx8IGdldFRhYmluZGV4KG5vZGUpIDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxudmFyIHRhYmJhYmxlID0gZnVuY3Rpb24gdGFiYmFibGUoZWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciByZWd1bGFyVGFiYmFibGVzID0gW107XG4gIHZhciBvcmRlcmVkVGFiYmFibGVzID0gW107XG4gIHZhciBjYW5kaWRhdGVzID0gZ2V0Q2FuZGlkYXRlcyhlbCwgb3B0aW9ucy5pbmNsdWRlQ29udGFpbmVyLCBpc05vZGVNYXRjaGluZ1NlbGVjdG9yVGFiYmFibGUuYmluZChudWxsLCBvcHRpb25zKSk7XG4gIGNhbmRpZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoY2FuZGlkYXRlLCBpKSB7XG4gICAgdmFyIGNhbmRpZGF0ZVRhYmluZGV4ID0gZ2V0VGFiaW5kZXgoY2FuZGlkYXRlKTtcblxuICAgIGlmIChjYW5kaWRhdGVUYWJpbmRleCA9PT0gMCkge1xuICAgICAgcmVndWxhclRhYmJhYmxlcy5wdXNoKGNhbmRpZGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9yZGVyZWRUYWJiYWJsZXMucHVzaCh7XG4gICAgICAgIGRvY3VtZW50T3JkZXI6IGksXG4gICAgICAgIHRhYkluZGV4OiBjYW5kaWRhdGVUYWJpbmRleCxcbiAgICAgICAgbm9kZTogY2FuZGlkYXRlXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICB2YXIgdGFiYmFibGVOb2RlcyA9IG9yZGVyZWRUYWJiYWJsZXMuc29ydChzb3J0T3JkZXJlZFRhYmJhYmxlcykubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGEubm9kZTtcbiAgfSkuY29uY2F0KHJlZ3VsYXJUYWJiYWJsZXMpO1xuICByZXR1cm4gdGFiYmFibGVOb2Rlcztcbn07XG5cbnZhciBmb2N1c2FibGUgPSBmdW5jdGlvbiBmb2N1c2FibGUoZWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBjYW5kaWRhdGVzID0gZ2V0Q2FuZGlkYXRlcyhlbCwgb3B0aW9ucy5pbmNsdWRlQ29udGFpbmVyLCBpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlLmJpbmQobnVsbCwgb3B0aW9ucykpO1xuICByZXR1cm4gY2FuZGlkYXRlcztcbn07XG5cbnZhciBpc1RhYmJhYmxlID0gZnVuY3Rpb24gaXNUYWJiYWJsZShub2RlLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmICghbm9kZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gbm9kZSBwcm92aWRlZCcpO1xuICB9XG5cbiAgaWYgKG1hdGNoZXMuY2FsbChub2RlLCBjYW5kaWRhdGVTZWxlY3RvcikgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzTm9kZU1hdGNoaW5nU2VsZWN0b3JUYWJiYWJsZShvcHRpb25zLCBub2RlKTtcbn07XG5cbnZhciBmb2N1c2FibGVDYW5kaWRhdGVTZWxlY3RvciA9IC8qICNfX1BVUkVfXyAqL2NhbmRpZGF0ZVNlbGVjdG9ycy5jb25jYXQoJ2lmcmFtZScpLmpvaW4oJywnKTtcblxudmFyIGlzRm9jdXNhYmxlID0gZnVuY3Rpb24gaXNGb2N1c2FibGUobm9kZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZiAoIW5vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG5vZGUgcHJvdmlkZWQnKTtcbiAgfVxuXG4gIGlmIChtYXRjaGVzLmNhbGwobm9kZSwgZm9jdXNhYmxlQ2FuZGlkYXRlU2VsZWN0b3IpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlKG9wdGlvbnMsIG5vZGUpO1xufTtcblxuZXhwb3J0IHsgZm9jdXNhYmxlLCBpc0ZvY3VzYWJsZSwgaXNUYWJiYWJsZSwgdGFiYmFibGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbS5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4oKCkgPT4ge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIC8qIFN5bWJvbHMgZm9yIHByaXZhdGUgcHJvcGVydGllcyAqL1xuICAgIGNvbnN0IF9ibG9ja2luZ0VsZW1lbnRzID0gU3ltYm9sKCk7XG4gICAgY29uc3QgX2FscmVhZHlJbmVydEVsZW1lbnRzID0gU3ltYm9sKCk7XG4gICAgY29uc3QgX3RvcEVsUGFyZW50cyA9IFN5bWJvbCgpO1xuICAgIGNvbnN0IF9zaWJsaW5nc1RvUmVzdG9yZSA9IFN5bWJvbCgpO1xuICAgIGNvbnN0IF9wYXJlbnRNTyA9IFN5bWJvbCgpO1xuICAgIC8qIFN5bWJvbHMgZm9yIHByaXZhdGUgc3RhdGljIG1ldGhvZHMgKi9cbiAgICBjb25zdCBfdG9wQ2hhbmdlZCA9IFN5bWJvbCgpO1xuICAgIGNvbnN0IF9zd2FwSW5lcnRlZFNpYmxpbmcgPSBTeW1ib2woKTtcbiAgICBjb25zdCBfaW5lcnRTaWJsaW5ncyA9IFN5bWJvbCgpO1xuICAgIGNvbnN0IF9yZXN0b3JlSW5lcnRlZFNpYmxpbmdzID0gU3ltYm9sKCk7XG4gICAgY29uc3QgX2dldFBhcmVudHMgPSBTeW1ib2woKTtcbiAgICBjb25zdCBfZ2V0RGlzdHJpYnV0ZWRDaGlsZHJlbiA9IFN5bWJvbCgpO1xuICAgIGNvbnN0IF9pc0luZXJ0YWJsZSA9IFN5bWJvbCgpO1xuICAgIGNvbnN0IF9oYW5kbGVNdXRhdGlvbnMgPSBTeW1ib2woKTtcbiAgICBjbGFzcyBCbG9ja2luZ0VsZW1lbnRzSW1wbCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgYmxvY2tpbmcgZWxlbWVudHMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXNbX2FdID0gW107XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFVzZWQgdG8ga2VlcCB0cmFjayBvZiB0aGUgcGFyZW50cyBvZiB0aGUgdG9wIGVsZW1lbnQsIGZyb20gdGhlIGVsZW1lbnRcbiAgICAgICAgICAgICAqIGl0c2VsZiB1cCB0byBib2R5LiBXaGVuIHRvcCBjaGFuZ2VzLCB0aGUgb2xkIHRvcCBtaWdodCBoYXZlIGJlZW4gcmVtb3ZlZFxuICAgICAgICAgICAgICogZnJvbSB0aGUgZG9jdW1lbnQsIHNvIHdlIG5lZWQgdG8gbWVtb2l6ZSB0aGUgaW5lcnRlZCBwYXJlbnRzJyBzaWJsaW5nc1xuICAgICAgICAgICAgICogaW4gb3JkZXIgdG8gcmVzdG9yZSB0aGVpciBpbmVydGVuZXNzIHdoZW4gdG9wIGNoYW5nZXMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXNbX2JdID0gW107XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVsZW1lbnRzIHRoYXQgYXJlIGFscmVhZHkgaW5lcnQgYmVmb3JlIHRoZSBmaXJzdCBibG9ja2luZyBlbGVtZW50IGlzXG4gICAgICAgICAgICAgKiBwdXNoZWQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXNbX2NdID0gbmV3IFNldCgpO1xuICAgICAgICB9XG4gICAgICAgIGRlc3RydWN0b3IoKSB7XG4gICAgICAgICAgICAvLyBSZXN0b3JlIG9yaWdpbmFsIGluZXJ0bmVzcy5cbiAgICAgICAgICAgIHRoaXNbX3Jlc3RvcmVJbmVydGVkU2libGluZ3NdKHRoaXNbX3RvcEVsUGFyZW50c10pO1xuICAgICAgICAgICAgLy8gTm90ZSB3ZSBkb24ndCB3YW50IHRvIG1ha2UgdGhlc2UgcHJvcGVydGllcyBudWxsYWJsZSBvbiB0aGUgY2xhc3MsXG4gICAgICAgICAgICAvLyBzaW5jZSB0aGVuIHdlJ2QgbmVlZCBub24tbnVsbCBjYXN0cyBpbiBtYW55IHBsYWNlcy4gQ2FsbGluZyBhIG1ldGhvZCBvblxuICAgICAgICAgICAgLy8gYSBCbG9ja2luZ0VsZW1lbnRzIGluc3RhbmNlIGFmdGVyIGNhbGxpbmcgZGVzdHJ1Y3RvciB3aWxsIHJlc3VsdCBpbiBhblxuICAgICAgICAgICAgLy8gZXhjZXB0aW9uLlxuICAgICAgICAgICAgY29uc3QgbnVsbGFibGUgPSB0aGlzO1xuICAgICAgICAgICAgbnVsbGFibGVbX2Jsb2NraW5nRWxlbWVudHNdID0gbnVsbDtcbiAgICAgICAgICAgIG51bGxhYmxlW190b3BFbFBhcmVudHNdID0gbnVsbDtcbiAgICAgICAgICAgIG51bGxhYmxlW19hbHJlYWR5SW5lcnRFbGVtZW50c10gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGdldCB0b3AoKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtcyA9IHRoaXNbX2Jsb2NraW5nRWxlbWVudHNdO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1zW2VsZW1zLmxlbmd0aCAtIDFdIHx8IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcHVzaChlbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAoIWVsZW1lbnQgfHwgZWxlbWVudCA9PT0gdGhpcy50b3ApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZW1vdmUgaXQgZnJvbSB0aGUgc3RhY2ssIHdlJ2xsIGJyaW5nIGl0IHRvIHRoZSB0b3AuXG4gICAgICAgICAgICB0aGlzLnJlbW92ZShlbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXNbX3RvcENoYW5nZWRdKGVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpc1tfYmxvY2tpbmdFbGVtZW50c10ucHVzaChlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZW1vdmUoZWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgaSA9IHRoaXNbX2Jsb2NraW5nRWxlbWVudHNdLmluZGV4T2YoZWxlbWVudCk7XG4gICAgICAgICAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzW19ibG9ja2luZ0VsZW1lbnRzXS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAvLyBUb3AgY2hhbmdlZCBvbmx5IGlmIHRoZSByZW1vdmVkIGVsZW1lbnQgd2FzIHRoZSB0b3AgZWxlbWVudC5cbiAgICAgICAgICAgIGlmIChpID09PSB0aGlzW19ibG9ja2luZ0VsZW1lbnRzXS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzW190b3BDaGFuZ2VkXSh0aGlzLnRvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBwb3AoKSB7XG4gICAgICAgICAgICBjb25zdCB0b3AgPSB0aGlzLnRvcDtcbiAgICAgICAgICAgIHRvcCAmJiB0aGlzLnJlbW92ZSh0b3ApO1xuICAgICAgICAgICAgcmV0dXJuIHRvcDtcbiAgICAgICAgfVxuICAgICAgICBoYXMoZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbX2Jsb2NraW5nRWxlbWVudHNdLmluZGV4T2YoZWxlbWVudCkgIT09IC0xO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIGBpbmVydGAgdG8gYWxsIGRvY3VtZW50IGVsZW1lbnRzIGV4Y2VwdCB0aGUgbmV3IHRvcCBlbGVtZW50LCBpdHNcbiAgICAgICAgICogcGFyZW50cywgYW5kIGl0cyBkaXN0cmlidXRlZCBjb250ZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgWyhfYSA9IF9ibG9ja2luZ0VsZW1lbnRzLCBfYiA9IF90b3BFbFBhcmVudHMsIF9jID0gX2FscmVhZHlJbmVydEVsZW1lbnRzLCBfdG9wQ2hhbmdlZCldKG5ld1RvcCkge1xuICAgICAgICAgICAgY29uc3QgdG9LZWVwSW5lcnQgPSB0aGlzW19hbHJlYWR5SW5lcnRFbGVtZW50c107XG4gICAgICAgICAgICBjb25zdCBvbGRQYXJlbnRzID0gdGhpc1tfdG9wRWxQYXJlbnRzXTtcbiAgICAgICAgICAgIC8vIE5vIG5ldyB0b3AsIHJlc2V0IG9sZCB0b3AgaWYgYW55LlxuICAgICAgICAgICAgaWYgKCFuZXdUb3ApIHtcbiAgICAgICAgICAgICAgICB0aGlzW19yZXN0b3JlSW5lcnRlZFNpYmxpbmdzXShvbGRQYXJlbnRzKTtcbiAgICAgICAgICAgICAgICB0b0tlZXBJbmVydC5jbGVhcigpO1xuICAgICAgICAgICAgICAgIHRoaXNbX3RvcEVsUGFyZW50c10gPSBbXTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuZXdQYXJlbnRzID0gdGhpc1tfZ2V0UGFyZW50c10obmV3VG9wKTtcbiAgICAgICAgICAgIC8vIE5ldyB0b3AgaXMgbm90IGNvbnRhaW5lZCBpbiB0aGUgbWFpbiBkb2N1bWVudCFcbiAgICAgICAgICAgIGlmIChuZXdQYXJlbnRzW25ld1BhcmVudHMubGVuZ3RoIC0gMV0ucGFyZW50Tm9kZSAhPT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdOb24tY29ubmVjdGVkIGVsZW1lbnQgY2Fubm90IGJlIGEgYmxvY2tpbmcgZWxlbWVudCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2FzdCBoZXJlIGJlY2F1c2Ugd2Uga25vdyB3ZSdsbCBjYWxsIF9pbmVydFNpYmxpbmdzIG9uIG5ld1BhcmVudHNcbiAgICAgICAgICAgIC8vIGJlbG93LlxuICAgICAgICAgICAgdGhpc1tfdG9wRWxQYXJlbnRzXSA9IG5ld1BhcmVudHM7XG4gICAgICAgICAgICBjb25zdCB0b1NraXAgPSB0aGlzW19nZXREaXN0cmlidXRlZENoaWxkcmVuXShuZXdUb3ApO1xuICAgICAgICAgICAgLy8gTm8gcHJldmlvdXMgdG9wIGVsZW1lbnQuXG4gICAgICAgICAgICBpZiAoIW9sZFBhcmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpc1tfaW5lcnRTaWJsaW5nc10obmV3UGFyZW50cywgdG9Ta2lwLCB0b0tlZXBJbmVydCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGkgPSBvbGRQYXJlbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBsZXQgaiA9IG5ld1BhcmVudHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIC8vIEZpbmQgY29tbW9uIHBhcmVudC4gSW5kZXggMCBpcyB0aGUgZWxlbWVudCBpdHNlbGYgKHNvIHN0b3AgYmVmb3JlIGl0KS5cbiAgICAgICAgICAgIHdoaWxlIChpID4gMCAmJiBqID4gMCAmJiBvbGRQYXJlbnRzW2ldID09PSBuZXdQYXJlbnRzW2pdKSB7XG4gICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHVwIHRoZSBwYXJlbnRzIHRyZWUgdGhlcmUgYXJlIDIgZWxlbWVudHMgdGhhdCBhcmUgc2libGluZ3MsIHN3YXBcbiAgICAgICAgICAgIC8vIHRoZSBpbmVydGVkIHNpYmxpbmcuXG4gICAgICAgICAgICBpZiAob2xkUGFyZW50c1tpXSAhPT0gbmV3UGFyZW50c1tqXSkge1xuICAgICAgICAgICAgICAgIHRoaXNbX3N3YXBJbmVydGVkU2libGluZ10ob2xkUGFyZW50c1tpXSwgbmV3UGFyZW50c1tqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZXN0b3JlIG9sZCBwYXJlbnRzIHNpYmxpbmdzIGluZXJ0bmVzcy5cbiAgICAgICAgICAgIGkgPiAwICYmIHRoaXNbX3Jlc3RvcmVJbmVydGVkU2libGluZ3NdKG9sZFBhcmVudHMuc2xpY2UoMCwgaSkpO1xuICAgICAgICAgICAgLy8gTWFrZSBuZXcgcGFyZW50cyBzaWJsaW5ncyBpbmVydC5cbiAgICAgICAgICAgIGogPiAwICYmIHRoaXNbX2luZXJ0U2libGluZ3NdKG5ld1BhcmVudHMuc2xpY2UoMCwgaiksIHRvU2tpcCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFN3YXBzIGluZXJ0bmVzcyBiZXR3ZWVuIHR3byBzaWJsaW5nIGVsZW1lbnRzLlxuICAgICAgICAgKiBTZXRzIHRoZSBwcm9wZXJ0eSBgaW5lcnRgIG92ZXIgdGhlIGF0dHJpYnV0ZSBzaW5jZSB0aGUgaW5lcnQgc3BlY1xuICAgICAgICAgKiBkb2Vzbid0IHNwZWNpZnkgaWYgaXQgc2hvdWxkIGJlIHJlZmxlY3RlZC5cbiAgICAgICAgICogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW50ZXJhY3Rpb24uaHRtbCNpbmVydFxuICAgICAgICAgKi9cbiAgICAgICAgW19zd2FwSW5lcnRlZFNpYmxpbmddKG9sZEluZXJ0LCBuZXdJbmVydCkge1xuICAgICAgICAgICAgY29uc3Qgc2libGluZ3NUb1Jlc3RvcmUgPSBvbGRJbmVydFtfc2libGluZ3NUb1Jlc3RvcmVdO1xuICAgICAgICAgICAgLy8gb2xkSW5lcnQgaXMgbm90IGNvbnRhaW5lZCBpbiBzaWJsaW5ncyB0byByZXN0b3JlLCBzbyB3ZSBoYXZlIHRvIGNoZWNrXG4gICAgICAgICAgICAvLyBpZiBpdCdzIGluZXJ0YWJsZSBhbmQgaWYgYWxyZWFkeSBpbmVydC5cbiAgICAgICAgICAgIGlmICh0aGlzW19pc0luZXJ0YWJsZV0ob2xkSW5lcnQpICYmICFvbGRJbmVydC5pbmVydCkge1xuICAgICAgICAgICAgICAgIG9sZEluZXJ0LmluZXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzaWJsaW5nc1RvUmVzdG9yZS5hZGQob2xkSW5lcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgbmV3SW5lcnQgd2FzIGFscmVhZHkgYmV0d2VlbiB0aGUgc2libGluZ3MgdG8gcmVzdG9yZSwgaXQgbWVhbnMgaXQgaXNcbiAgICAgICAgICAgIC8vIGluZXJ0YWJsZSBhbmQgbXVzdCBiZSByZXN0b3JlZC5cbiAgICAgICAgICAgIGlmIChzaWJsaW5nc1RvUmVzdG9yZS5oYXMobmV3SW5lcnQpKSB7XG4gICAgICAgICAgICAgICAgbmV3SW5lcnQuaW5lcnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzaWJsaW5nc1RvUmVzdG9yZS5kZWxldGUobmV3SW5lcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3SW5lcnRbX3BhcmVudE1PXSA9IG9sZEluZXJ0W19wYXJlbnRNT107XG4gICAgICAgICAgICBuZXdJbmVydFtfc2libGluZ3NUb1Jlc3RvcmVdID0gc2libGluZ3NUb1Jlc3RvcmU7XG4gICAgICAgICAgICBvbGRJbmVydFtfcGFyZW50TU9dID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgb2xkSW5lcnRbX3NpYmxpbmdzVG9SZXN0b3JlXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzdG9yZXMgb3JpZ2luYWwgaW5lcnRuZXNzIHRvIHRoZSBzaWJsaW5ncyBvZiB0aGUgZWxlbWVudHMuXG4gICAgICAgICAqIFNldHMgdGhlIHByb3BlcnR5IGBpbmVydGAgb3ZlciB0aGUgYXR0cmlidXRlIHNpbmNlIHRoZSBpbmVydCBzcGVjXG4gICAgICAgICAqIGRvZXNuJ3Qgc3BlY2lmeSBpZiBpdCBzaG91bGQgYmUgcmVmbGVjdGVkLlxuICAgICAgICAgKiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbnRlcmFjdGlvbi5odG1sI2luZXJ0XG4gICAgICAgICAqL1xuICAgICAgICBbX3Jlc3RvcmVJbmVydGVkU2libGluZ3NdKGVsZW1lbnRzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtbyA9IGVsZW1lbnRbX3BhcmVudE1PXTtcbiAgICAgICAgICAgICAgICBtby5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgZWxlbWVudFtfcGFyZW50TU9dID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpYmxpbmdzID0gZWxlbWVudFtfc2libGluZ3NUb1Jlc3RvcmVdO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc2libGluZyBvZiBzaWJsaW5ncykge1xuICAgICAgICAgICAgICAgICAgICBzaWJsaW5nLmluZXJ0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsZW1lbnRbX3NpYmxpbmdzVG9SZXN0b3JlXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogSW5lcnRzIHRoZSBzaWJsaW5ncyBvZiB0aGUgZWxlbWVudHMgZXhjZXB0IHRoZSBlbGVtZW50cyB0byBza2lwLiBTdG9yZXNcbiAgICAgICAgICogdGhlIGluZXJ0ZWQgc2libGluZ3MgaW50byB0aGUgZWxlbWVudCdzIHN5bWJvbCBgX3NpYmxpbmdzVG9SZXN0b3JlYC5cbiAgICAgICAgICogUGFzcyBgdG9LZWVwSW5lcnRgIHRvIGNvbGxlY3QgdGhlIGFscmVhZHkgaW5lcnQgZWxlbWVudHMuXG4gICAgICAgICAqIFNldHMgdGhlIHByb3BlcnR5IGBpbmVydGAgb3ZlciB0aGUgYXR0cmlidXRlIHNpbmNlIHRoZSBpbmVydCBzcGVjXG4gICAgICAgICAqIGRvZXNuJ3Qgc3BlY2lmeSBpZiBpdCBzaG91bGQgYmUgcmVmbGVjdGVkLlxuICAgICAgICAgKiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbnRlcmFjdGlvbi5odG1sI2luZXJ0XG4gICAgICAgICAqL1xuICAgICAgICBbX2luZXJ0U2libGluZ3NdKGVsZW1lbnRzLCB0b1NraXAsIHRvS2VlcEluZXJ0KSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICAvLyBBc3N1bWUgZWxlbWVudCBpcyBub3QgYSBEb2N1bWVudCwgc28gaXQgbXVzdCBoYXZlIGEgcGFyZW50Tm9kZS5cbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBwYXJlbnQuY2hpbGRyZW47XG4gICAgICAgICAgICAgICAgY29uc3QgaW5lcnRlZFNpYmxpbmdzID0gbmV3IFNldCgpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2libGluZyA9IGNoaWxkcmVuW2pdO1xuICAgICAgICAgICAgICAgICAgICAvLyBTa2lwIHRoZSBpbnB1dCBlbGVtZW50LCBpZiBub3QgaW5lcnRhYmxlIG9yIHRvIGJlIHNraXBwZWQuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaWJsaW5nID09PSBlbGVtZW50IHx8ICF0aGlzW19pc0luZXJ0YWJsZV0oc2libGluZykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICh0b1NraXAgJiYgdG9Ta2lwLmhhcyhzaWJsaW5nKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFNob3VsZCBiZSBjb2xsZWN0ZWQgc2luY2UgYWxyZWFkeSBpbmVydGVkLlxuICAgICAgICAgICAgICAgICAgICBpZiAodG9LZWVwSW5lcnQgJiYgc2libGluZy5pbmVydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9LZWVwSW5lcnQuYWRkKHNpYmxpbmcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2libGluZy5pbmVydCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmVydGVkU2libGluZ3MuYWRkKHNpYmxpbmcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFN0b3JlIHRoZSBzaWJsaW5ncyB0aGF0IHdlcmUgaW5lcnRlZC5cbiAgICAgICAgICAgICAgICBlbGVtZW50W19zaWJsaW5nc1RvUmVzdG9yZV0gPSBpbmVydGVkU2libGluZ3M7XG4gICAgICAgICAgICAgICAgLy8gT2JzZXJ2ZSBvbmx5IGltbWVkaWF0ZSBjaGlsZHJlbiBtdXRhdGlvbnMgb24gdGhlIHBhcmVudC5cbiAgICAgICAgICAgICAgICBjb25zdCBtbyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXNbX2hhbmRsZU11dGF0aW9uc10uYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgZWxlbWVudFtfcGFyZW50TU9dID0gbW87XG4gICAgICAgICAgICAgICAgbGV0IHBhcmVudFRvT2JzZXJ2ZSA9IHBhcmVudDtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSdyZSB1c2luZyB0aGUgU2hhZHlET00gcG9seWZpbGwsIHRoZW4gb3VyIHBhcmVudCBjb3VsZCBiZSBhXG4gICAgICAgICAgICAgICAgLy8gc2hhZHkgcm9vdCwgd2hpY2ggaXMgYW4gb2JqZWN0IHRoYXQgYWN0cyBsaWtlIGEgU2hhZG93Um9vdCwgYnV0IGlzbid0XG4gICAgICAgICAgICAgICAgLy8gYWN0dWFsbHkgYSBub2RlIGluIHRoZSByZWFsIERPTS4gT2JzZXJ2ZSB0aGUgcmVhbCBET00gcGFyZW50IGluc3RlYWQuXG4gICAgICAgICAgICAgICAgY29uc3QgbWF5YmVTaGFkeVJvb3QgPSBwYXJlbnRUb09ic2VydmU7XG4gICAgICAgICAgICAgICAgaWYgKG1heWJlU2hhZHlSb290Ll9fc2hhZHkgJiYgbWF5YmVTaGFkeVJvb3QuaG9zdCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRUb09ic2VydmUgPSBtYXliZVNoYWR5Um9vdC5ob3N0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtby5vYnNlcnZlKHBhcmVudFRvT2JzZXJ2ZSwge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZXMgbmV3bHkgYWRkZWQvcmVtb3ZlZCBub2RlcyBieSB0b2dnbGluZyB0aGVpciBpbmVydG5lc3MuXG4gICAgICAgICAqIEl0IGFsc28gY2hlY2tzIGlmIHRoZSBjdXJyZW50IHRvcCBCbG9ja2luZyBFbGVtZW50IGhhcyBiZWVuIHJlbW92ZWQsXG4gICAgICAgICAqIG5vdGlmeWluZyBhbmQgcmVtb3ZpbmcgaXQuXG4gICAgICAgICAqL1xuICAgICAgICBbX2hhbmRsZU11dGF0aW9uc10obXV0YXRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRzID0gdGhpc1tfdG9wRWxQYXJlbnRzXTtcbiAgICAgICAgICAgIGNvbnN0IHRvS2VlcEluZXJ0ID0gdGhpc1tfYWxyZWFkeUluZXJ0RWxlbWVudHNdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBtdXRhdGlvbiBvZiBtdXRhdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdGFyZ2V0IGlzIGEgc2hhZG93Um9vdCwgZ2V0IGl0cyBob3N0IGFzIHdlIHNraXAgc2hhZG93Um9vdHMgd2hlblxuICAgICAgICAgICAgICAgIC8vIGNvbXB1dGluZyBfdG9wRWxQYXJlbnRzLlxuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IG11dGF0aW9uLnRhcmdldC5ob3N0IHx8IG11dGF0aW9uLnRhcmdldDtcbiAgICAgICAgICAgICAgICBjb25zdCBpZHggPSB0YXJnZXQgPT09IGRvY3VtZW50LmJvZHkgP1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRzLmxlbmd0aCA6XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudHMuaW5kZXhPZih0YXJnZXQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZXJ0ZWRDaGlsZCA9IHBhcmVudHNbaWR4IC0gMV07XG4gICAgICAgICAgICAgICAgY29uc3QgaW5lcnRlZFNpYmxpbmdzID0gaW5lcnRlZENoaWxkW19zaWJsaW5nc1RvUmVzdG9yZV07XG4gICAgICAgICAgICAgICAgLy8gVG8gcmVzdG9yZS5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG11dGF0aW9uLnJlbW92ZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaWJsaW5nID0gbXV0YXRpb24ucmVtb3ZlZE5vZGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2libGluZyA9PT0gaW5lcnRlZENoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ0RldGVjdGVkIHJlbW92YWwgb2YgdGhlIHRvcCBCbG9ja2luZyBFbGVtZW50LicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5lcnRlZFNpYmxpbmdzLmhhcyhzaWJsaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2libGluZy5pbmVydCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5lcnRlZFNpYmxpbmdzLmRlbGV0ZShzaWJsaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUbyBpbmVydC5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG11dGF0aW9uLmFkZGVkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2libGluZyA9IG11dGF0aW9uLmFkZGVkTm9kZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpc1tfaXNJbmVydGFibGVdKHNpYmxpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodG9LZWVwSW5lcnQgJiYgc2libGluZy5pbmVydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9LZWVwSW5lcnQuYWRkKHNpYmxpbmcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2libGluZy5pbmVydCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmVydGVkU2libGluZ3MuYWRkKHNpYmxpbmcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIGlmIHRoZSBlbGVtZW50IGlzIGluZXJ0YWJsZS5cbiAgICAgICAgICovXG4gICAgICAgIFtfaXNJbmVydGFibGVdKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZSA9PT0gL14oc3R5bGV8dGVtcGxhdGV8c2NyaXB0KSQvLnRlc3QoZWxlbWVudC5sb2NhbE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIG5ld1BhcmVudHMgb2YgYW4gZWxlbWVudCwgc3RhcnRpbmcgZnJvbSBlbGVtZW50XG4gICAgICAgICAqIChpbmNsdWRlZCkgdXAgdG8gYGRvY3VtZW50LmJvZHlgIChleGNsdWRlZCkuXG4gICAgICAgICAqL1xuICAgICAgICBbX2dldFBhcmVudHNdKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudHMgPSBbXTtcbiAgICAgICAgICAgIGxldCBjdXJyZW50ID0gZWxlbWVudDtcbiAgICAgICAgICAgIC8vIFN0b3AgdG8gYm9keS5cbiAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnQgIT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgICAgICAvLyBTa2lwIHNoYWRvdyByb290cy5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50cy5wdXNoKGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBTaGFkb3dEb20gdjFcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5hc3NpZ25lZFNsb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ29sbGVjdCBzbG90cyBmcm9tIGRlZXBlc3Qgc2xvdCB0byB0b3AuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ID0gY3VycmVudC5hc3NpZ25lZFNsb3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudHMucHVzaChjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBDb250aW51ZSB0aGUgc2VhcmNoIG9uIHRoZSB0b3Agc2xvdC5cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHBhcmVudHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnROb2RlIHx8XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuaG9zdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJlbnRzO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBkaXN0cmlidXRlZCBjaGlsZHJlbiBvZiB0aGUgZWxlbWVudCdzIHNoYWRvdyByb290LlxuICAgICAgICAgKiBSZXR1cm5zIG51bGwgaWYgdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIGEgc2hhZG93IHJvb3QuXG4gICAgICAgICAqL1xuICAgICAgICBbX2dldERpc3RyaWJ1dGVkQ2hpbGRyZW5dKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHNoYWRvd1Jvb3QgPSBlbGVtZW50LnNoYWRvd1Jvb3Q7XG4gICAgICAgICAgICBpZiAoIXNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgIGxldCBpO1xuICAgICAgICAgICAgbGV0IGo7XG4gICAgICAgICAgICBsZXQgbm9kZXM7XG4gICAgICAgICAgICBjb25zdCBzbG90cyA9IHNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvckFsbCgnc2xvdCcpO1xuICAgICAgICAgICAgaWYgKHNsb3RzLmxlbmd0aCAmJiBzbG90c1swXS5hc3NpZ25lZE5vZGVzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNsb3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzID0gc2xvdHNbaV0uYXNzaWduZWROb2Rlcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbGF0dGVuOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IG5vZGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZXNbal0ubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFkZChub2Rlc1tqXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gTm8gbmVlZCB0byBzZWFyY2ggZm9yIDxjb250ZW50Pi5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZG9jdW1lbnQuJGJsb2NraW5nRWxlbWVudHMgPVxuICAgICAgICBuZXcgQmxvY2tpbmdFbGVtZW50c0ltcGwoKTtcbn0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ibG9ja2luZy1lbGVtZW50cy5qcy5tYXAiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoJ2luZXJ0JywgZmFjdG9yeSkgOlxuICAoZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuICAvKipcbiAgICogVGhpcyB3b3JrIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBXM0MgU29mdHdhcmUgYW5kIERvY3VtZW50IExpY2Vuc2VcbiAgICogKGh0dHA6Ly93d3cudzMub3JnL0NvbnNvcnRpdW0vTGVnYWwvMjAxNS9jb3B5cmlnaHQtc29mdHdhcmUtYW5kLWRvY3VtZW50KS5cbiAgICovXG5cbiAgKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBSZXR1cm4gZWFybHkgaWYgd2UncmUgbm90IHJ1bm5pbmcgaW5zaWRlIG9mIHRoZSBicm93c2VyLlxuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENvbnZlbmllbmNlIGZ1bmN0aW9uIGZvciBjb252ZXJ0aW5nIE5vZGVMaXN0cy5cbiAgICAvKiogQHR5cGUge3R5cGVvZiBBcnJheS5wcm90b3R5cGUuc2xpY2V9ICovXG4gICAgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4gICAgLyoqXG4gICAgICogSUUgaGFzIGEgbm9uLXN0YW5kYXJkIG5hbWUgZm9yIFwibWF0Y2hlc1wiLlxuICAgICAqIEB0eXBlIHt0eXBlb2YgRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlc31cbiAgICAgKi9cbiAgICB2YXIgbWF0Y2hlcyA9IEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgfHwgRWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3I7XG5cbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICB2YXIgX2ZvY3VzYWJsZUVsZW1lbnRzU3RyaW5nID0gWydhW2hyZWZdJywgJ2FyZWFbaHJlZl0nLCAnaW5wdXQ6bm90KFtkaXNhYmxlZF0pJywgJ3NlbGVjdDpub3QoW2Rpc2FibGVkXSknLCAndGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pJywgJ2J1dHRvbjpub3QoW2Rpc2FibGVkXSknLCAnZGV0YWlscycsICdzdW1tYXJ5JywgJ2lmcmFtZScsICdvYmplY3QnLCAnZW1iZWQnLCAnW2NvbnRlbnRlZGl0YWJsZV0nXS5qb2luKCcsJyk7XG5cbiAgICAvKipcbiAgICAgKiBgSW5lcnRSb290YCBtYW5hZ2VzIGEgc2luZ2xlIGluZXJ0IHN1YnRyZWUsIGkuZS4gYSBET00gc3VidHJlZSB3aG9zZSByb290IGVsZW1lbnQgaGFzIGFuIGBpbmVydGBcbiAgICAgKiBhdHRyaWJ1dGUuXG4gICAgICpcbiAgICAgKiBJdHMgbWFpbiBmdW5jdGlvbnMgYXJlOlxuICAgICAqXG4gICAgICogLSB0byBjcmVhdGUgYW5kIG1haW50YWluIGEgc2V0IG9mIG1hbmFnZWQgYEluZXJ0Tm9kZWBzLCBpbmNsdWRpbmcgd2hlbiBtdXRhdGlvbnMgb2NjdXIgaW4gdGhlXG4gICAgICogICBzdWJ0cmVlLiBUaGUgYG1ha2VTdWJ0cmVlVW5mb2N1c2FibGUoKWAgbWV0aG9kIGhhbmRsZXMgY29sbGVjdGluZyBgSW5lcnROb2RlYHMgdmlhIHJlZ2lzdGVyaW5nXG4gICAgICogICBlYWNoIGZvY3VzYWJsZSBub2RlIGluIHRoZSBzdWJ0cmVlIHdpdGggdGhlIHNpbmdsZXRvbiBgSW5lcnRNYW5hZ2VyYCB3aGljaCBtYW5hZ2VzIGFsbCBrbm93blxuICAgICAqICAgZm9jdXNhYmxlIG5vZGVzIHdpdGhpbiBpbmVydCBzdWJ0cmVlcy4gYEluZXJ0TWFuYWdlcmAgZW5zdXJlcyB0aGF0IGEgc2luZ2xlIGBJbmVydE5vZGVgXG4gICAgICogICBpbnN0YW5jZSBleGlzdHMgZm9yIGVhY2ggZm9jdXNhYmxlIG5vZGUgd2hpY2ggaGFzIGF0IGxlYXN0IG9uZSBpbmVydCByb290IGFzIGFuIGFuY2VzdG9yLlxuICAgICAqXG4gICAgICogLSB0byBub3RpZnkgYWxsIG1hbmFnZWQgYEluZXJ0Tm9kZWBzIHdoZW4gdGhpcyBzdWJ0cmVlIHN0b3BzIGJlaW5nIGluZXJ0IChpLmUuIHdoZW4gdGhlIGBpbmVydGBcbiAgICAgKiAgIGF0dHJpYnV0ZSBpcyByZW1vdmVkIGZyb20gdGhlIHJvb3Qgbm9kZSkuIFRoaXMgaXMgaGFuZGxlZCBpbiB0aGUgZGVzdHJ1Y3Rvciwgd2hpY2ggY2FsbHMgdGhlXG4gICAgICogICBgZGVyZWdpc3RlcmAgbWV0aG9kIG9uIGBJbmVydE1hbmFnZXJgIGZvciBlYWNoIG1hbmFnZWQgaW5lcnQgbm9kZS5cbiAgICAgKi9cblxuICAgIHZhciBJbmVydFJvb3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7IUVsZW1lbnR9IHJvb3RFbGVtZW50IFRoZSBFbGVtZW50IGF0IHRoZSByb290IG9mIHRoZSBpbmVydCBzdWJ0cmVlLlxuICAgICAgICogQHBhcmFtIHshSW5lcnRNYW5hZ2VyfSBpbmVydE1hbmFnZXIgVGhlIGdsb2JhbCBzaW5nbGV0b24gSW5lcnRNYW5hZ2VyIG9iamVjdC5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gSW5lcnRSb290KHJvb3RFbGVtZW50LCBpbmVydE1hbmFnZXIpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEluZXJ0Um9vdCk7XG5cbiAgICAgICAgLyoqIEB0eXBlIHshSW5lcnRNYW5hZ2VyfSAqL1xuICAgICAgICB0aGlzLl9pbmVydE1hbmFnZXIgPSBpbmVydE1hbmFnZXI7XG5cbiAgICAgICAgLyoqIEB0eXBlIHshRWxlbWVudH0gKi9cbiAgICAgICAgdGhpcy5fcm9vdEVsZW1lbnQgPSByb290RWxlbWVudDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUgeyFTZXQ8IUluZXJ0Tm9kZT59XG4gICAgICAgICAqIEFsbCBtYW5hZ2VkIGZvY3VzYWJsZSBub2RlcyBpbiB0aGlzIEluZXJ0Um9vdCdzIHN1YnRyZWUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9tYW5hZ2VkTm9kZXMgPSBuZXcgU2V0KCk7XG5cbiAgICAgICAgLy8gTWFrZSB0aGUgc3VidHJlZSBoaWRkZW4gZnJvbSBhc3Npc3RpdmUgdGVjaG5vbG9neVxuICAgICAgICBpZiAodGhpcy5fcm9vdEVsZW1lbnQuaGFzQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpKSB7XG4gICAgICAgICAgLyoqIEB0eXBlIHs/c3RyaW5nfSAqL1xuICAgICAgICAgIHRoaXMuX3NhdmVkQXJpYUhpZGRlbiA9IHRoaXMuX3Jvb3RFbGVtZW50LmdldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9zYXZlZEFyaWFIaWRkZW4gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Jvb3RFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAgIC8vIE1ha2UgYWxsIGZvY3VzYWJsZSBlbGVtZW50cyBpbiB0aGUgc3VidHJlZSB1bmZvY3VzYWJsZSBhbmQgYWRkIHRoZW0gdG8gX21hbmFnZWROb2Rlc1xuICAgICAgICB0aGlzLl9tYWtlU3VidHJlZVVuZm9jdXNhYmxlKHRoaXMuX3Jvb3RFbGVtZW50KTtcblxuICAgICAgICAvLyBXYXRjaCBmb3I6XG4gICAgICAgIC8vIC0gYW55IGFkZGl0aW9ucyBpbiB0aGUgc3VidHJlZTogbWFrZSB0aGVtIHVuZm9jdXNhYmxlIHRvb1xuICAgICAgICAvLyAtIGFueSByZW1vdmFscyBmcm9tIHRoZSBzdWJ0cmVlOiByZW1vdmUgdGhlbSBmcm9tIHRoaXMgaW5lcnQgcm9vdCdzIG1hbmFnZWQgbm9kZXNcbiAgICAgICAgLy8gLSBhdHRyaWJ1dGUgY2hhbmdlczogaWYgYHRhYmluZGV4YCBpcyBhZGRlZCwgb3IgcmVtb3ZlZCBmcm9tIGFuIGludHJpbnNpY2FsbHkgZm9jdXNhYmxlXG4gICAgICAgIC8vICAgZWxlbWVudCwgbWFrZSB0aGF0IG5vZGUgYSBtYW5hZ2VkIG5vZGUuXG4gICAgICAgIHRoaXMuX29ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIodGhpcy5fb25NdXRhdGlvbi5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLl9yb290RWxlbWVudCwgeyBhdHRyaWJ1dGVzOiB0cnVlLCBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQ2FsbCB0aGlzIHdoZW5ldmVyIHRoaXMgb2JqZWN0IGlzIGFib3V0IHRvIGJlY29tZSBvYnNvbGV0ZS4gIFRoaXMgdW53aW5kcyBhbGwgb2YgdGhlIHN0YXRlXG4gICAgICAgKiBzdG9yZWQgaW4gdGhpcyBvYmplY3QgYW5kIHVwZGF0ZXMgdGhlIHN0YXRlIG9mIGFsbCBvZiB0aGUgbWFuYWdlZCBub2Rlcy5cbiAgICAgICAqL1xuXG5cbiAgICAgIF9jcmVhdGVDbGFzcyhJbmVydFJvb3QsIFt7XG4gICAgICAgIGtleTogJ2Rlc3RydWN0b3InLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJ1Y3RvcigpIHtcbiAgICAgICAgICB0aGlzLl9vYnNlcnZlci5kaXNjb25uZWN0KCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fcm9vdEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zYXZlZEFyaWFIaWRkZW4gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdGhpcy5fcm9vdEVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRoaXMuX3NhdmVkQXJpYUhpZGRlbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9yb290RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fbWFuYWdlZE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKGluZXJ0Tm9kZSkge1xuICAgICAgICAgICAgdGhpcy5fdW5tYW5hZ2VOb2RlKGluZXJ0Tm9kZS5ub2RlKTtcbiAgICAgICAgICB9LCB0aGlzKTtcblxuICAgICAgICAgIC8vIE5vdGUgd2UgY2FzdCB0aGUgbnVsbHMgdG8gdGhlIEFOWSB0eXBlIGhlcmUgYmVjYXVzZTpcbiAgICAgICAgICAvLyAxKSBXZSB3YW50IHRoZSBjbGFzcyBwcm9wZXJ0aWVzIHRvIGJlIGRlY2xhcmVkIGFzIG5vbi1udWxsLCBvciBlbHNlIHdlXG4gICAgICAgICAgLy8gICAgbmVlZCBldmVuIG1vcmUgY2FzdHMgdGhyb3VnaG91dCB0aGlzIGNvZGUuIEFsbCBiZXRzIGFyZSBvZmYgaWYgYW5cbiAgICAgICAgICAvLyAgICBpbnN0YW5jZSBoYXMgYmVlbiBkZXN0cm95ZWQgYW5kIGEgbWV0aG9kIGlzIGNhbGxlZC5cbiAgICAgICAgICAvLyAyKSBXZSBkb24ndCB3YW50IHRvIGNhc3QgXCJ0aGlzXCIsIGJlY2F1c2Ugd2Ugd2FudCB0eXBlLWF3YXJlIG9wdGltaXphdGlvbnNcbiAgICAgICAgICAvLyAgICB0byBrbm93IHdoaWNoIHByb3BlcnRpZXMgd2UncmUgc2V0dGluZy5cbiAgICAgICAgICB0aGlzLl9vYnNlcnZlciA9IC8qKiBAdHlwZSB7P30gKi9udWxsO1xuICAgICAgICAgIHRoaXMuX3Jvb3RFbGVtZW50ID0gLyoqIEB0eXBlIHs/fSAqL251bGw7XG4gICAgICAgICAgdGhpcy5fbWFuYWdlZE5vZGVzID0gLyoqIEB0eXBlIHs/fSAqL251bGw7XG4gICAgICAgICAgdGhpcy5faW5lcnRNYW5hZ2VyID0gLyoqIEB0eXBlIHs/fSAqL251bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQHJldHVybiB7IVNldDwhSW5lcnROb2RlPn0gQSBjb3B5IG9mIHRoaXMgSW5lcnRSb290J3MgbWFuYWdlZCBub2RlcyBzZXQuXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ19tYWtlU3VidHJlZVVuZm9jdXNhYmxlJyxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0geyFOb2RlfSBzdGFydE5vZGVcbiAgICAgICAgICovXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfbWFrZVN1YnRyZWVVbmZvY3VzYWJsZShzdGFydE5vZGUpIHtcbiAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgIGNvbXBvc2VkVHJlZVdhbGsoc3RhcnROb2RlLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5fdmlzaXROb2RlKG5vZGUpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXG4gICAgICAgICAgaWYgKCFkb2N1bWVudC5ib2R5LmNvbnRhaW5zKHN0YXJ0Tm9kZSkpIHtcbiAgICAgICAgICAgIC8vIHN0YXJ0Tm9kZSBtYXkgYmUgaW4gc2hhZG93IERPTSwgc28gZmluZCBpdHMgbmVhcmVzdCBzaGFkb3dSb290IHRvIGdldCB0aGUgYWN0aXZlRWxlbWVudC5cbiAgICAgICAgICAgIHZhciBub2RlID0gc3RhcnROb2RlO1xuICAgICAgICAgICAgLyoqIEB0eXBlIHshU2hhZG93Um9vdHx1bmRlZmluZWR9ICovXG4gICAgICAgICAgICB2YXIgcm9vdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgICByb290ID0gLyoqIEB0eXBlIHshU2hhZG93Um9vdH0gKi9ub2RlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocm9vdCkge1xuICAgICAgICAgICAgICBhY3RpdmVFbGVtZW50ID0gcm9vdC5hY3RpdmVFbGVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhcnROb2RlLmNvbnRhaW5zKGFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgICAgICBhY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICAgICAgICAgIC8vIEluIElFMTEsIGlmIGFuIGVsZW1lbnQgaXMgYWxyZWFkeSBmb2N1c2VkLCBhbmQgdGhlbiBzZXQgdG8gdGFiaW5kZXg9LTFcbiAgICAgICAgICAgIC8vIGNhbGxpbmcgYmx1cigpIHdpbGwgbm90IGFjdHVhbGx5IG1vdmUgdGhlIGZvY3VzLlxuICAgICAgICAgICAgLy8gVG8gd29yayBhcm91bmQgdGhpcyB3ZSBjYWxsIGZvY3VzKCkgb24gdGhlIGJvZHkgaW5zdGVhZC5cbiAgICAgICAgICAgIGlmIChhY3RpdmVFbGVtZW50ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQHBhcmFtIHshTm9kZX0gbm9kZVxuICAgICAgICAgKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdfdmlzaXROb2RlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF92aXNpdE5vZGUobm9kZSkge1xuICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZWxlbWVudCA9IC8qKiBAdHlwZSB7IUVsZW1lbnR9ICovbm9kZTtcblxuICAgICAgICAgIC8vIElmIGEgZGVzY2VuZGFudCBpbmVydCByb290IGJlY29tZXMgdW4taW5lcnQsIGl0cyBkZXNjZW5kYW50cyB3aWxsIHN0aWxsIGJlIGluZXJ0IGJlY2F1c2Ugb2ZcbiAgICAgICAgICAvLyB0aGlzIGluZXJ0IHJvb3QsIHNvIGFsbCBvZiBpdHMgbWFuYWdlZCBub2RlcyBuZWVkIHRvIGJlIGFkb3B0ZWQgYnkgdGhpcyBJbmVydFJvb3QuXG4gICAgICAgICAgaWYgKGVsZW1lbnQgIT09IHRoaXMuX3Jvb3RFbGVtZW50ICYmIGVsZW1lbnQuaGFzQXR0cmlidXRlKCdpbmVydCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9hZG9wdEluZXJ0Um9vdChlbGVtZW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobWF0Y2hlcy5jYWxsKGVsZW1lbnQsIF9mb2N1c2FibGVFbGVtZW50c1N0cmluZykgfHwgZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3RhYmluZGV4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX21hbmFnZU5vZGUoZWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlZ2lzdGVyIHRoZSBnaXZlbiBub2RlIHdpdGggdGhpcyBJbmVydFJvb3QgYW5kIHdpdGggSW5lcnRNYW5hZ2VyLlxuICAgICAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ19tYW5hZ2VOb2RlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9tYW5hZ2VOb2RlKG5vZGUpIHtcbiAgICAgICAgICB2YXIgaW5lcnROb2RlID0gdGhpcy5faW5lcnRNYW5hZ2VyLnJlZ2lzdGVyKG5vZGUsIHRoaXMpO1xuICAgICAgICAgIHRoaXMuX21hbmFnZWROb2Rlcy5hZGQoaW5lcnROb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVbnJlZ2lzdGVyIHRoZSBnaXZlbiBub2RlIHdpdGggdGhpcyBJbmVydFJvb3QgYW5kIHdpdGggSW5lcnRNYW5hZ2VyLlxuICAgICAgICAgKiBAcGFyYW0geyFOb2RlfSBub2RlXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ191bm1hbmFnZU5vZGUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3VubWFuYWdlTm9kZShub2RlKSB7XG4gICAgICAgICAgdmFyIGluZXJ0Tm9kZSA9IHRoaXMuX2luZXJ0TWFuYWdlci5kZXJlZ2lzdGVyKG5vZGUsIHRoaXMpO1xuICAgICAgICAgIGlmIChpbmVydE5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX21hbmFnZWROb2Rlc1snZGVsZXRlJ10oaW5lcnROb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogVW5yZWdpc3RlciB0aGUgZW50aXJlIHN1YnRyZWUgc3RhcnRpbmcgYXQgYHN0YXJ0Tm9kZWAuXG4gICAgICAgICAqIEBwYXJhbSB7IU5vZGV9IHN0YXJ0Tm9kZVxuICAgICAgICAgKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdfdW5tYW5hZ2VTdWJ0cmVlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF91bm1hbmFnZVN1YnRyZWUoc3RhcnROb2RlKSB7XG4gICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgICBjb21wb3NlZFRyZWVXYWxrKHN0YXJ0Tm9kZSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczMuX3VubWFuYWdlTm9kZShub2RlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiBhIGRlc2NlbmRhbnQgbm9kZSBpcyBmb3VuZCB3aXRoIGFuIGBpbmVydGAgYXR0cmlidXRlLCBhZG9wdCBpdHMgbWFuYWdlZCBub2Rlcy5cbiAgICAgICAgICogQHBhcmFtIHshRWxlbWVudH0gbm9kZVxuICAgICAgICAgKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdfYWRvcHRJbmVydFJvb3QnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2Fkb3B0SW5lcnRSb290KG5vZGUpIHtcbiAgICAgICAgICB2YXIgaW5lcnRTdWJyb290ID0gdGhpcy5faW5lcnRNYW5hZ2VyLmdldEluZXJ0Um9vdChub2RlKTtcblxuICAgICAgICAgIC8vIER1cmluZyBpbml0aWFsaXNhdGlvbiB0aGlzIGluZXJ0IHJvb3QgbWF5IG5vdCBoYXZlIGJlZW4gcmVnaXN0ZXJlZCB5ZXQsXG4gICAgICAgICAgLy8gc28gcmVnaXN0ZXIgaXQgbm93IGlmIG5lZWQgYmUuXG4gICAgICAgICAgaWYgKCFpbmVydFN1YnJvb3QpIHtcbiAgICAgICAgICAgIHRoaXMuX2luZXJ0TWFuYWdlci5zZXRJbmVydChub2RlLCB0cnVlKTtcbiAgICAgICAgICAgIGluZXJ0U3Vicm9vdCA9IHRoaXMuX2luZXJ0TWFuYWdlci5nZXRJbmVydFJvb3Qobm9kZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW5lcnRTdWJyb290Lm1hbmFnZWROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChzYXZlZEluZXJ0Tm9kZSkge1xuICAgICAgICAgICAgdGhpcy5fbWFuYWdlTm9kZShzYXZlZEluZXJ0Tm9kZS5ub2RlKTtcbiAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsYmFjayB1c2VkIHdoZW4gbXV0YXRpb24gb2JzZXJ2ZXIgZGV0ZWN0cyBzdWJ0cmVlIGFkZGl0aW9ucywgcmVtb3ZhbHMsIG9yIGF0dHJpYnV0ZSBjaGFuZ2VzLlxuICAgICAgICAgKiBAcGFyYW0geyFBcnJheTwhTXV0YXRpb25SZWNvcmQ+fSByZWNvcmRzXG4gICAgICAgICAqIEBwYXJhbSB7IU11dGF0aW9uT2JzZXJ2ZXJ9IHNlbGZcbiAgICAgICAgICovXG5cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnX29uTXV0YXRpb24nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX29uTXV0YXRpb24ocmVjb3Jkcywgc2VsZikge1xuICAgICAgICAgIHJlY29yZHMuZm9yRWFjaChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gLyoqIEB0eXBlIHshRWxlbWVudH0gKi9yZWNvcmQudGFyZ2V0O1xuICAgICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSAnY2hpbGRMaXN0Jykge1xuICAgICAgICAgICAgICAvLyBNYW5hZ2UgYWRkZWQgbm9kZXNcbiAgICAgICAgICAgICAgc2xpY2UuY2FsbChyZWNvcmQuYWRkZWROb2RlcykuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21ha2VTdWJ0cmVlVW5mb2N1c2FibGUobm9kZSk7XG4gICAgICAgICAgICAgIH0sIHRoaXMpO1xuXG4gICAgICAgICAgICAgIC8vIFVuLW1hbmFnZSByZW1vdmVkIG5vZGVzXG4gICAgICAgICAgICAgIHNsaWNlLmNhbGwocmVjb3JkLnJlbW92ZWROb2RlcykuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VubWFuYWdlU3VidHJlZShub2RlKTtcbiAgICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSAnYXR0cmlidXRlcycpIHtcbiAgICAgICAgICAgICAgaWYgKHJlY29yZC5hdHRyaWJ1dGVOYW1lID09PSAndGFiaW5kZXgnKSB7XG4gICAgICAgICAgICAgICAgLy8gUmUtaW5pdGlhbGlzZSBpbmVydCBub2RlIGlmIHRhYmluZGV4IGNoYW5nZXNcbiAgICAgICAgICAgICAgICB0aGlzLl9tYW5hZ2VOb2RlKHRhcmdldCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ICE9PSB0aGlzLl9yb290RWxlbWVudCAmJiByZWNvcmQuYXR0cmlidXRlTmFtZSA9PT0gJ2luZXJ0JyAmJiB0YXJnZXQuaGFzQXR0cmlidXRlKCdpbmVydCcpKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgYSBuZXcgaW5lcnQgcm9vdCBpcyBhZGRlZCwgYWRvcHQgaXRzIG1hbmFnZWQgbm9kZXMgYW5kIG1ha2Ugc3VyZSBpdCBrbm93cyBhYm91dCB0aGVcbiAgICAgICAgICAgICAgICAvLyBhbHJlYWR5IG1hbmFnZWQgbm9kZXMgZnJvbSB0aGlzIGluZXJ0IHN1YnJvb3QuXG4gICAgICAgICAgICAgICAgdGhpcy5fYWRvcHRJbmVydFJvb3QodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB2YXIgaW5lcnRTdWJyb290ID0gdGhpcy5faW5lcnRNYW5hZ2VyLmdldEluZXJ0Um9vdCh0YXJnZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21hbmFnZWROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChtYW5hZ2VkTm9kZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldC5jb250YWlucyhtYW5hZ2VkTm9kZS5ub2RlKSkge1xuICAgICAgICAgICAgICAgICAgICBpbmVydFN1YnJvb3QuX21hbmFnZU5vZGUobWFuYWdlZE5vZGUubm9kZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdtYW5hZ2VkTm9kZXMnLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFNldCh0aGlzLl9tYW5hZ2VkTm9kZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEByZXR1cm4ge2Jvb2xlYW59ICovXG5cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFzU2F2ZWRBcmlhSGlkZGVuJyxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3NhdmVkQXJpYUhpZGRlbiAhPT0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBAcGFyYW0gez9zdHJpbmd9IGFyaWFIaWRkZW4gKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdzYXZlZEFyaWFIaWRkZW4nLFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChhcmlhSGlkZGVuKSB7XG4gICAgICAgICAgdGhpcy5fc2F2ZWRBcmlhSGlkZGVuID0gYXJpYUhpZGRlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKiBAcmV0dXJuIHs/c3RyaW5nfSAqL1xuICAgICAgICAsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9zYXZlZEFyaWFIaWRkZW47XG4gICAgICAgIH1cbiAgICAgIH1dKTtcblxuICAgICAgcmV0dXJuIEluZXJ0Um9vdDtcbiAgICB9KCk7XG5cbiAgICAvKipcbiAgICAgKiBgSW5lcnROb2RlYCBpbml0aWFsaXNlcyBhbmQgbWFuYWdlcyBhIHNpbmdsZSBpbmVydCBub2RlLlxuICAgICAqIEEgbm9kZSBpcyBpbmVydCBpZiBpdCBpcyBhIGRlc2NlbmRhbnQgb2Ygb25lIG9yIG1vcmUgaW5lcnQgcm9vdCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIE9uIGNvbnN0cnVjdGlvbiwgYEluZXJ0Tm9kZWAgc2F2ZXMgdGhlIGV4aXN0aW5nIGB0YWJpbmRleGAgdmFsdWUgZm9yIHRoZSBub2RlLCBpZiBhbnksIGFuZFxuICAgICAqIGVpdGhlciByZW1vdmVzIHRoZSBgdGFiaW5kZXhgIGF0dHJpYnV0ZSBvciBzZXRzIGl0IHRvIGAtMWAsIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBlbGVtZW50XG4gICAgICogaXMgaW50cmluc2ljYWxseSBmb2N1c2FibGUgb3Igbm90LlxuICAgICAqXG4gICAgICogYEluZXJ0Tm9kZWAgbWFpbnRhaW5zIGEgc2V0IG9mIGBJbmVydFJvb3RgcyB3aGljaCBhcmUgZGVzY2VuZGFudHMgb2YgdGhpcyBgSW5lcnROb2RlYC4gV2hlbiBhblxuICAgICAqIGBJbmVydFJvb3RgIGlzIGRlc3Ryb3llZCwgYW5kIGNhbGxzIGBJbmVydE1hbmFnZXIuZGVyZWdpc3RlcigpYCwgdGhlIGBJbmVydE1hbmFnZXJgIG5vdGlmaWVzIHRoZVxuICAgICAqIGBJbmVydE5vZGVgIHZpYSBgcmVtb3ZlSW5lcnRSb290KClgLCB3aGljaCBpbiB0dXJuIGRlc3Ryb3lzIHRoZSBgSW5lcnROb2RlYCBpZiBubyBgSW5lcnRSb290YHNcbiAgICAgKiByZW1haW4gaW4gdGhlIHNldC4gT24gZGVzdHJ1Y3Rpb24sIGBJbmVydE5vZGVgIHJlaW5zdGF0ZXMgdGhlIHN0b3JlZCBgdGFiaW5kZXhgIGlmIG9uZSBleGlzdHMsXG4gICAgICogb3IgcmVtb3ZlcyB0aGUgYHRhYmluZGV4YCBhdHRyaWJ1dGUgaWYgdGhlIGVsZW1lbnQgaXMgaW50cmluc2ljYWxseSBmb2N1c2FibGUuXG4gICAgICovXG5cblxuICAgIHZhciBJbmVydE5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGUgQSBmb2N1c2FibGUgZWxlbWVudCB0byBiZSBtYWRlIGluZXJ0LlxuICAgICAgICogQHBhcmFtIHshSW5lcnRSb290fSBpbmVydFJvb3QgVGhlIGluZXJ0IHJvb3QgZWxlbWVudCBhc3NvY2lhdGVkIHdpdGggdGhpcyBpbmVydCBub2RlLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiBJbmVydE5vZGUobm9kZSwgaW5lcnRSb290KSB7XG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbmVydE5vZGUpO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7IU5vZGV9ICovXG4gICAgICAgIHRoaXMuX25vZGUgPSBub2RlO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgICAgICAgdGhpcy5fb3ZlcnJvZGVGb2N1c01ldGhvZCA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7IVNldDwhSW5lcnRSb290Pn0gVGhlIHNldCBvZiBkZXNjZW5kYW50IGluZXJ0IHJvb3RzLlxuICAgICAgICAgKiAgICBJZiBhbmQgb25seSBpZiB0aGlzIHNldCBiZWNvbWVzIGVtcHR5LCB0aGlzIG5vZGUgaXMgbm8gbG9uZ2VyIGluZXJ0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5faW5lcnRSb290cyA9IG5ldyBTZXQoW2luZXJ0Um9vdF0pO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7P251bWJlcn0gKi9cbiAgICAgICAgdGhpcy5fc2F2ZWRUYWJJbmRleCA9IG51bGw7XG5cbiAgICAgICAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICAgICAgICB0aGlzLl9kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAgICAgICAvLyBTYXZlIGFueSBwcmlvciB0YWJpbmRleCBpbmZvIGFuZCBtYWtlIHRoaXMgbm9kZSB1bnRhYmJhYmxlXG4gICAgICAgIHRoaXMuZW5zdXJlVW50YWJiYWJsZSgpO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIENhbGwgdGhpcyB3aGVuZXZlciB0aGlzIG9iamVjdCBpcyBhYm91dCB0byBiZWNvbWUgb2Jzb2xldGUuXG4gICAgICAgKiBUaGlzIG1ha2VzIHRoZSBtYW5hZ2VkIG5vZGUgZm9jdXNhYmxlIGFnYWluIGFuZCBkZWxldGVzIGFsbCBvZiB0aGUgcHJldmlvdXNseSBzdG9yZWQgc3RhdGUuXG4gICAgICAgKi9cblxuXG4gICAgICBfY3JlYXRlQ2xhc3MoSW5lcnROb2RlLCBbe1xuICAgICAgICBrZXk6ICdkZXN0cnVjdG9yJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3RydWN0b3IoKSB7XG4gICAgICAgICAgdGhpcy5fdGhyb3dJZkRlc3Ryb3llZCgpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuX25vZGUgJiYgdGhpcy5fbm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gLyoqIEB0eXBlIHshRWxlbWVudH0gKi90aGlzLl9ub2RlO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3NhdmVkVGFiSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgdGhpcy5fc2F2ZWRUYWJJbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgndGFiaW5kZXgnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXNlIGBkZWxldGVgIHRvIHJlc3RvcmUgbmF0aXZlIGZvY3VzIG1ldGhvZC5cbiAgICAgICAgICAgIGlmICh0aGlzLl9vdmVycm9kZUZvY3VzTWV0aG9kKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBlbGVtZW50LmZvY3VzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFNlZSBub3RlIGluIEluZXJ0Um9vdC5kZXN0cnVjdG9yIGZvciB3aHkgd2UgY2FzdCB0aGVzZSBudWxscyB0byBBTlkuXG4gICAgICAgICAgdGhpcy5fbm9kZSA9IC8qKiBAdHlwZSB7P30gKi9udWxsO1xuICAgICAgICAgIHRoaXMuX2luZXJ0Um9vdHMgPSAvKiogQHR5cGUgez99ICovbnVsbDtcbiAgICAgICAgICB0aGlzLl9kZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtib29sZWFufSBXaGV0aGVyIHRoaXMgb2JqZWN0IGlzIG9ic29sZXRlIGJlY2F1c2UgdGhlIG1hbmFnZWQgbm9kZSBpcyBubyBsb25nZXIgaW5lcnQuXG4gICAgICAgICAqIElmIHRoZSBvYmplY3QgaGFzIGJlZW4gZGVzdHJveWVkLCBhbnkgYXR0ZW1wdCB0byBhY2Nlc3MgaXQgd2lsbCBjYXVzZSBhbiBleGNlcHRpb24uXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ190aHJvd0lmRGVzdHJveWVkJyxcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaHJvdyBpZiB1c2VyIHRyaWVzIHRvIGFjY2VzcyBkZXN0cm95ZWQgSW5lcnROb2RlLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF90aHJvd0lmRGVzdHJveWVkKCkge1xuICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGRlc3Ryb3llZCBJbmVydE5vZGUnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKiogQHJldHVybiB7Ym9vbGVhbn0gKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdlbnN1cmVVbnRhYmJhYmxlJyxcblxuXG4gICAgICAgIC8qKiBTYXZlIHRoZSBleGlzdGluZyB0YWJpbmRleCB2YWx1ZSBhbmQgbWFrZSB0aGUgbm9kZSB1bnRhYmJhYmxlIGFuZCB1bmZvY3VzYWJsZSAqL1xuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZW5zdXJlVW50YWJiYWJsZSgpIHtcbiAgICAgICAgICBpZiAodGhpcy5ub2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZWxlbWVudCA9IC8qKiBAdHlwZSB7IUVsZW1lbnR9ICovdGhpcy5ub2RlO1xuICAgICAgICAgIGlmIChtYXRjaGVzLmNhbGwoZWxlbWVudCwgX2ZvY3VzYWJsZUVsZW1lbnRzU3RyaW5nKSkge1xuICAgICAgICAgICAgaWYgKCAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi9lbGVtZW50LnRhYkluZGV4ID09PSAtMSAmJiB0aGlzLmhhc1NhdmVkVGFiSW5kZXgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3RhYmluZGV4JykpIHtcbiAgICAgICAgICAgICAgdGhpcy5fc2F2ZWRUYWJJbmRleCA9IC8qKiBAdHlwZSB7IUhUTUxFbGVtZW50fSAqL2VsZW1lbnQudGFiSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgICBlbGVtZW50LmZvY3VzID0gZnVuY3Rpb24gKCkge307XG4gICAgICAgICAgICAgIHRoaXMuX292ZXJyb2RlRm9jdXNNZXRob2QgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ3RhYmluZGV4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX3NhdmVkVGFiSW5kZXggPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi9lbGVtZW50LnRhYkluZGV4O1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3RhYmluZGV4Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFkZCBhbm90aGVyIGluZXJ0IHJvb3QgdG8gdGhpcyBpbmVydCBub2RlJ3Mgc2V0IG9mIG1hbmFnaW5nIGluZXJ0IHJvb3RzLlxuICAgICAgICAgKiBAcGFyYW0geyFJbmVydFJvb3R9IGluZXJ0Um9vdFxuICAgICAgICAgKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdhZGRJbmVydFJvb3QnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkSW5lcnRSb290KGluZXJ0Um9vdCkge1xuICAgICAgICAgIHRoaXMuX3Rocm93SWZEZXN0cm95ZWQoKTtcbiAgICAgICAgICB0aGlzLl9pbmVydFJvb3RzLmFkZChpbmVydFJvb3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZSB0aGUgZ2l2ZW4gaW5lcnQgcm9vdCBmcm9tIHRoaXMgaW5lcnQgbm9kZSdzIHNldCBvZiBtYW5hZ2luZyBpbmVydCByb290cy5cbiAgICAgICAgICogSWYgdGhlIHNldCBvZiBtYW5hZ2luZyBpbmVydCByb290cyBiZWNvbWVzIGVtcHR5LCB0aGlzIG5vZGUgaXMgbm8gbG9uZ2VyIGluZXJ0LFxuICAgICAgICAgKiBzbyB0aGUgb2JqZWN0IHNob3VsZCBiZSBkZXN0cm95ZWQuXG4gICAgICAgICAqIEBwYXJhbSB7IUluZXJ0Um9vdH0gaW5lcnRSb290XG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3JlbW92ZUluZXJ0Um9vdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVJbmVydFJvb3QoaW5lcnRSb290KSB7XG4gICAgICAgICAgdGhpcy5fdGhyb3dJZkRlc3Ryb3llZCgpO1xuICAgICAgICAgIHRoaXMuX2luZXJ0Um9vdHNbJ2RlbGV0ZSddKGluZXJ0Um9vdCk7XG4gICAgICAgICAgaWYgKHRoaXMuX2luZXJ0Um9vdHMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kZXN0cnVjdG9yKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2Rlc3Ryb3llZCcsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiAoLyoqIEB0eXBlIHshSW5lcnROb2RlfSAqL3RoaXMuX2Rlc3Ryb3llZFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnaGFzU2F2ZWRUYWJJbmRleCcsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9zYXZlZFRhYkluZGV4ICE9PSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEByZXR1cm4geyFOb2RlfSAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ25vZGUnLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICB0aGlzLl90aHJvd0lmRGVzdHJveWVkKCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX25vZGU7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogQHBhcmFtIHs/bnVtYmVyfSB0YWJJbmRleCAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ3NhdmVkVGFiSW5kZXgnLFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh0YWJJbmRleCkge1xuICAgICAgICAgIHRoaXMuX3Rocm93SWZEZXN0cm95ZWQoKTtcbiAgICAgICAgICB0aGlzLl9zYXZlZFRhYkluZGV4ID0gdGFiSW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogQHJldHVybiB7P251bWJlcn0gKi9cbiAgICAgICAgLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICB0aGlzLl90aHJvd0lmRGVzdHJveWVkKCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3NhdmVkVGFiSW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1dKTtcblxuICAgICAgcmV0dXJuIEluZXJ0Tm9kZTtcbiAgICB9KCk7XG5cbiAgICAvKipcbiAgICAgKiBJbmVydE1hbmFnZXIgaXMgYSBwZXItZG9jdW1lbnQgc2luZ2xldG9uIG9iamVjdCB3aGljaCBtYW5hZ2VzIGFsbCBpbmVydCByb290cyBhbmQgbm9kZXMuXG4gICAgICpcbiAgICAgKiBXaGVuIGFuIGVsZW1lbnQgYmVjb21lcyBhbiBpbmVydCByb290IGJ5IGhhdmluZyBhbiBgaW5lcnRgIGF0dHJpYnV0ZSBzZXQgYW5kL29yIGl0cyBgaW5lcnRgXG4gICAgICogcHJvcGVydHkgc2V0IHRvIGB0cnVlYCwgdGhlIGBzZXRJbmVydGAgbWV0aG9kIGNyZWF0ZXMgYW4gYEluZXJ0Um9vdGAgb2JqZWN0IGZvciB0aGUgZWxlbWVudC5cbiAgICAgKiBUaGUgYEluZXJ0Um9vdGAgaW4gdHVybiByZWdpc3RlcnMgaXRzZWxmIGFzIG1hbmFnaW5nIGFsbCBvZiB0aGUgZWxlbWVudCdzIGZvY3VzYWJsZSBkZXNjZW5kYW50XG4gICAgICogbm9kZXMgdmlhIHRoZSBgcmVnaXN0ZXIoKWAgbWV0aG9kLiBUaGUgYEluZXJ0TWFuYWdlcmAgZW5zdXJlcyB0aGF0IGEgc2luZ2xlIGBJbmVydE5vZGVgIGluc3RhbmNlXG4gICAgICogaXMgY3JlYXRlZCBmb3IgZWFjaCBzdWNoIG5vZGUsIHZpYSB0aGUgYF9tYW5hZ2VkTm9kZXNgIG1hcC5cbiAgICAgKi9cblxuXG4gICAgdmFyIEluZXJ0TWFuYWdlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHshRG9jdW1lbnR9IGRvY3VtZW50XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIEluZXJ0TWFuYWdlcihkb2N1bWVudCkge1xuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5lcnRNYW5hZ2VyKTtcblxuICAgICAgICBpZiAoIWRvY3VtZW50KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHJlcXVpcmVkIGFyZ3VtZW50OyBJbmVydE1hbmFnZXIgbmVlZHMgdG8gd3JhcCBhIGRvY3VtZW50LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqIEB0eXBlIHshRG9jdW1lbnR9ICovXG4gICAgICAgIHRoaXMuX2RvY3VtZW50ID0gZG9jdW1lbnQ7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbCBtYW5hZ2VkIG5vZGVzIGtub3duIHRvIHRoaXMgSW5lcnRNYW5hZ2VyLiBJbiBhIG1hcCB0byBhbGxvdyBsb29raW5nIHVwIGJ5IE5vZGUuXG4gICAgICAgICAqIEB0eXBlIHshTWFwPCFOb2RlLCAhSW5lcnROb2RlPn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX21hbmFnZWROb2RlcyA9IG5ldyBNYXAoKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWxsIGluZXJ0IHJvb3RzIGtub3duIHRvIHRoaXMgSW5lcnRNYW5hZ2VyLiBJbiBhIG1hcCB0byBhbGxvdyBsb29raW5nIHVwIGJ5IE5vZGUuXG4gICAgICAgICAqIEB0eXBlIHshTWFwPCFOb2RlLCAhSW5lcnRSb290Pn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2luZXJ0Um9vdHMgPSBuZXcgTWFwKCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9ic2VydmVyIGZvciBtdXRhdGlvbnMgb24gYGRvY3VtZW50LmJvZHlgLlxuICAgICAgICAgKiBAdHlwZSB7IU11dGF0aW9uT2JzZXJ2ZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMuX3dhdGNoRm9ySW5lcnQuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgLy8gQWRkIGluZXJ0IHN0eWxlLlxuICAgICAgICBhZGRJbmVydFN0eWxlKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuXG4gICAgICAgIC8vIFdhaXQgZm9yIGRvY3VtZW50IHRvIGJlIGxvYWRlZC5cbiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCB0aGlzLl9vbkRvY3VtZW50TG9hZGVkLmJpbmQodGhpcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX29uRG9jdW1lbnRMb2FkZWQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFNldCB3aGV0aGVyIHRoZSBnaXZlbiBlbGVtZW50IHNob3VsZCBiZSBhbiBpbmVydCByb290IG9yIG5vdC5cbiAgICAgICAqIEBwYXJhbSB7IUVsZW1lbnR9IHJvb3RcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5lcnRcbiAgICAgICAqL1xuXG5cbiAgICAgIF9jcmVhdGVDbGFzcyhJbmVydE1hbmFnZXIsIFt7XG4gICAgICAgIGtleTogJ3NldEluZXJ0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEluZXJ0KHJvb3QsIGluZXJ0KSB7XG4gICAgICAgICAgaWYgKGluZXJ0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faW5lcnRSb290cy5oYXMocm9vdCkpIHtcbiAgICAgICAgICAgICAgLy8gZWxlbWVudCBpcyBhbHJlYWR5IGluZXJ0XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGluZXJ0Um9vdCA9IG5ldyBJbmVydFJvb3Qocm9vdCwgdGhpcyk7XG4gICAgICAgICAgICByb290LnNldEF0dHJpYnV0ZSgnaW5lcnQnLCAnJyk7XG4gICAgICAgICAgICB0aGlzLl9pbmVydFJvb3RzLnNldChyb290LCBpbmVydFJvb3QpO1xuICAgICAgICAgICAgLy8gSWYgbm90IGNvbnRhaW5lZCBpbiB0aGUgZG9jdW1lbnQsIGl0IG11c3QgYmUgaW4gYSBzaGFkb3dSb290LlxuICAgICAgICAgICAgLy8gRW5zdXJlIGluZXJ0IHN0eWxlcyBhcmUgYWRkZWQgdGhlcmUuXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2RvY3VtZW50LmJvZHkuY29udGFpbnMocm9vdCkpIHtcbiAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IHJvb3QucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQubm9kZVR5cGUgPT09IDExKSB7XG4gICAgICAgICAgICAgICAgICBhZGRJbmVydFN0eWxlKHBhcmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5faW5lcnRSb290cy5oYXMocm9vdCkpIHtcbiAgICAgICAgICAgICAgLy8gZWxlbWVudCBpcyBhbHJlYWR5IG5vbi1pbmVydFxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBfaW5lcnRSb290ID0gdGhpcy5faW5lcnRSb290cy5nZXQocm9vdCk7XG4gICAgICAgICAgICBfaW5lcnRSb290LmRlc3RydWN0b3IoKTtcbiAgICAgICAgICAgIHRoaXMuX2luZXJ0Um9vdHNbJ2RlbGV0ZSddKHJvb3QpO1xuICAgICAgICAgICAgcm9vdC5yZW1vdmVBdHRyaWJ1dGUoJ2luZXJ0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUgSW5lcnRSb290IG9iamVjdCBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBpbmVydCByb290IGVsZW1lbnQsIGlmIGFueS5cbiAgICAgICAgICogQHBhcmFtIHshTm9kZX0gZWxlbWVudFxuICAgICAgICAgKiBAcmV0dXJuIHshSW5lcnRSb290fHVuZGVmaW5lZH1cbiAgICAgICAgICovXG5cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0SW5lcnRSb290JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEluZXJ0Um9vdChlbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2luZXJ0Um9vdHMuZ2V0KGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlZ2lzdGVyIHRoZSBnaXZlbiBJbmVydFJvb3QgYXMgbWFuYWdpbmcgdGhlIGdpdmVuIG5vZGUuXG4gICAgICAgICAqIEluIHRoZSBjYXNlIHdoZXJlIHRoZSBub2RlIGhhcyBhIHByZXZpb3VzbHkgZXhpc3RpbmcgaW5lcnQgcm9vdCwgdGhpcyBpbmVydCByb290IHdpbGxcbiAgICAgICAgICogYmUgYWRkZWQgdG8gaXRzIHNldCBvZiBpbmVydCByb290cy5cbiAgICAgICAgICogQHBhcmFtIHshTm9kZX0gbm9kZVxuICAgICAgICAgKiBAcGFyYW0geyFJbmVydFJvb3R9IGluZXJ0Um9vdFxuICAgICAgICAgKiBAcmV0dXJuIHshSW5lcnROb2RlfSBpbmVydE5vZGVcbiAgICAgICAgICovXG5cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVnaXN0ZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXIobm9kZSwgaW5lcnRSb290KSB7XG4gICAgICAgICAgdmFyIGluZXJ0Tm9kZSA9IHRoaXMuX21hbmFnZWROb2Rlcy5nZXQobm9kZSk7XG4gICAgICAgICAgaWYgKGluZXJ0Tm9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBub2RlIHdhcyBhbHJlYWR5IGluIGFuIGluZXJ0IHN1YnRyZWVcbiAgICAgICAgICAgIGluZXJ0Tm9kZS5hZGRJbmVydFJvb3QoaW5lcnRSb290KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5lcnROb2RlID0gbmV3IEluZXJ0Tm9kZShub2RlLCBpbmVydFJvb3QpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX21hbmFnZWROb2Rlcy5zZXQobm9kZSwgaW5lcnROb2RlKTtcblxuICAgICAgICAgIHJldHVybiBpbmVydE5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRGUtcmVnaXN0ZXIgdGhlIGdpdmVuIEluZXJ0Um9vdCBhcyBtYW5hZ2luZyB0aGUgZ2l2ZW4gaW5lcnQgbm9kZS5cbiAgICAgICAgICogUmVtb3ZlcyB0aGUgaW5lcnQgcm9vdCBmcm9tIHRoZSBJbmVydE5vZGUncyBzZXQgb2YgbWFuYWdpbmcgaW5lcnQgcm9vdHMsIGFuZCByZW1vdmUgdGhlIGluZXJ0XG4gICAgICAgICAqIG5vZGUgZnJvbSB0aGUgSW5lcnRNYW5hZ2VyJ3Mgc2V0IG9mIG1hbmFnZWQgbm9kZXMgaWYgaXQgaXMgZGVzdHJveWVkLlxuICAgICAgICAgKiBJZiB0aGUgbm9kZSBpcyBub3QgY3VycmVudGx5IG1hbmFnZWQsIHRoaXMgaXMgZXNzZW50aWFsbHkgYSBuby1vcC5cbiAgICAgICAgICogQHBhcmFtIHshTm9kZX0gbm9kZVxuICAgICAgICAgKiBAcGFyYW0geyFJbmVydFJvb3R9IGluZXJ0Um9vdFxuICAgICAgICAgKiBAcmV0dXJuIHs/SW5lcnROb2RlfSBUaGUgcG90ZW50aWFsbHkgZGVzdHJveWVkIEluZXJ0Tm9kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBub2RlLCBpZiBhbnkuXG4gICAgICAgICAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIGtleTogJ2RlcmVnaXN0ZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGVyZWdpc3Rlcihub2RlLCBpbmVydFJvb3QpIHtcbiAgICAgICAgICB2YXIgaW5lcnROb2RlID0gdGhpcy5fbWFuYWdlZE5vZGVzLmdldChub2RlKTtcbiAgICAgICAgICBpZiAoIWluZXJ0Tm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW5lcnROb2RlLnJlbW92ZUluZXJ0Um9vdChpbmVydFJvb3QpO1xuICAgICAgICAgIGlmIChpbmVydE5vZGUuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICB0aGlzLl9tYW5hZ2VkTm9kZXNbJ2RlbGV0ZSddKG5vZGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBpbmVydE5vZGU7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGJhY2sgdXNlZCB3aGVuIGRvY3VtZW50IGhhcyBmaW5pc2hlZCBsb2FkaW5nLlxuICAgICAgICAgKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdfb25Eb2N1bWVudExvYWRlZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Eb2N1bWVudExvYWRlZCgpIHtcbiAgICAgICAgICAvLyBGaW5kIGFsbCBpbmVydCByb290cyBpbiBkb2N1bWVudCBhbmQgbWFrZSB0aGVtIGFjdHVhbGx5IGluZXJ0LlxuICAgICAgICAgIHZhciBpbmVydEVsZW1lbnRzID0gc2xpY2UuY2FsbCh0aGlzLl9kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbaW5lcnRdJykpO1xuICAgICAgICAgIGluZXJ0RWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoaW5lcnRFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnNldEluZXJ0KGluZXJ0RWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgICAgfSwgdGhpcyk7XG5cbiAgICAgICAgICAvLyBDb21tZW50IHRoaXMgb3V0IHRvIHVzZSBwcm9ncmFtbWF0aWMgQVBJIG9ubHkuXG4gICAgICAgICAgdGhpcy5fb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLl9kb2N1bWVudC5ib2R5IHx8IHRoaXMuX2RvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgeyBhdHRyaWJ1dGVzOiB0cnVlLCBzdWJ0cmVlOiB0cnVlLCBjaGlsZExpc3Q6IHRydWUgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGJhY2sgdXNlZCB3aGVuIG11dGF0aW9uIG9ic2VydmVyIGRldGVjdHMgYXR0cmlidXRlIGNoYW5nZXMuXG4gICAgICAgICAqIEBwYXJhbSB7IUFycmF5PCFNdXRhdGlvblJlY29yZD59IHJlY29yZHNcbiAgICAgICAgICogQHBhcmFtIHshTXV0YXRpb25PYnNlcnZlcn0gc2VsZlxuICAgICAgICAgKi9cblxuICAgICAgfSwge1xuICAgICAgICBrZXk6ICdfd2F0Y2hGb3JJbmVydCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfd2F0Y2hGb3JJbmVydChyZWNvcmRzLCBzZWxmKSB7XG4gICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICByZWNvcmRzLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICAgICAgc3dpdGNoIChyZWNvcmQudHlwZSkge1xuICAgICAgICAgICAgICBjYXNlICdjaGlsZExpc3QnOlxuICAgICAgICAgICAgICAgIHNsaWNlLmNhbGwocmVjb3JkLmFkZGVkTm9kZXMpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIgaW5lcnRFbGVtZW50cyA9IHNsaWNlLmNhbGwobm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbaW5lcnRdJykpO1xuICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMuY2FsbChub2RlLCAnW2luZXJ0XScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZXJ0RWxlbWVudHMudW5zaGlmdChub2RlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGluZXJ0RWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoaW5lcnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0SW5lcnQoaW5lcnRFbGVtZW50LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgIH0sIF90aGlzKTtcbiAgICAgICAgICAgICAgICB9LCBfdGhpcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ2F0dHJpYnV0ZXMnOlxuICAgICAgICAgICAgICAgIGlmIChyZWNvcmQuYXR0cmlidXRlTmFtZSAhPT0gJ2luZXJ0Jykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gLyoqIEB0eXBlIHshRWxlbWVudH0gKi9yZWNvcmQudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHZhciBpbmVydCA9IHRhcmdldC5oYXNBdHRyaWJ1dGUoJ2luZXJ0Jyk7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0SW5lcnQodGFyZ2V0LCBpbmVydCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1dKTtcblxuICAgICAgcmV0dXJuIEluZXJ0TWFuYWdlcjtcbiAgICB9KCk7XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSB3YWxrIHRoZSBjb21wb3NlZCB0cmVlIGZyb20gfG5vZGV8LlxuICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcbiAgICAgKiBAcGFyYW0geyhmdW5jdGlvbiAoIUVsZW1lbnQpKT19IGNhbGxiYWNrIENhbGxiYWNrIHRvIGJlIGNhbGxlZCBmb3IgZWFjaCBlbGVtZW50IHRyYXZlcnNlZCxcbiAgICAgKiAgICAgYmVmb3JlIGRlc2NlbmRpbmcgaW50byBjaGlsZCBub2Rlcy5cbiAgICAgKiBAcGFyYW0gez9TaGFkb3dSb290PX0gc2hhZG93Um9vdEFuY2VzdG9yIFRoZSBuZWFyZXN0IFNoYWRvd1Jvb3QgYW5jZXN0b3IsIGlmIGFueS5cbiAgICAgKi9cblxuXG4gICAgZnVuY3Rpb24gY29tcG9zZWRUcmVlV2Fsayhub2RlLCBjYWxsYmFjaywgc2hhZG93Um9vdEFuY2VzdG9yKSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IC8qKiBAdHlwZSB7IUVsZW1lbnR9ICovbm9kZTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2soZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZXNjZW5kIGludG8gbm9kZTpcbiAgICAgICAgLy8gSWYgaXQgaGFzIGEgU2hhZG93Um9vdCwgaWdub3JlIGFsbCBjaGlsZCBlbGVtZW50cyAtIHRoZXNlIHdpbGwgYmUgcGlja2VkXG4gICAgICAgIC8vIHVwIGJ5IHRoZSA8Y29udGVudD4gb3IgPHNoYWRvdz4gZWxlbWVudHMuIERlc2NlbmQgc3RyYWlnaHQgaW50byB0aGVcbiAgICAgICAgLy8gU2hhZG93Um9vdC5cbiAgICAgICAgdmFyIHNoYWRvd1Jvb3QgPSAvKiogQHR5cGUgeyFIVE1MRWxlbWVudH0gKi9lbGVtZW50LnNoYWRvd1Jvb3Q7XG4gICAgICAgIGlmIChzaGFkb3dSb290KSB7XG4gICAgICAgICAgY29tcG9zZWRUcmVlV2FsayhzaGFkb3dSb290LCBjYWxsYmFjaywgc2hhZG93Um9vdCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgaXQgaXMgYSA8Y29udGVudD4gZWxlbWVudCwgZGVzY2VuZCBpbnRvIGRpc3RyaWJ1dGVkIGVsZW1lbnRzIC0gdGhlc2VcbiAgICAgICAgLy8gYXJlIGVsZW1lbnRzIGZyb20gb3V0c2lkZSB0aGUgc2hhZG93IHJvb3Qgd2hpY2ggYXJlIHJlbmRlcmVkIGluc2lkZSB0aGVcbiAgICAgICAgLy8gc2hhZG93IERPTS5cbiAgICAgICAgaWYgKGVsZW1lbnQubG9jYWxOYW1lID09ICdjb250ZW50Jykge1xuICAgICAgICAgIHZhciBjb250ZW50ID0gLyoqIEB0eXBlIHshSFRNTENvbnRlbnRFbGVtZW50fSAqL2VsZW1lbnQ7XG4gICAgICAgICAgLy8gVmVyaWZpZXMgaWYgU2hhZG93RG9tIHYwIGlzIHN1cHBvcnRlZC5cbiAgICAgICAgICB2YXIgZGlzdHJpYnV0ZWROb2RlcyA9IGNvbnRlbnQuZ2V0RGlzdHJpYnV0ZWROb2RlcyA/IGNvbnRlbnQuZ2V0RGlzdHJpYnV0ZWROb2RlcygpIDogW107XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXN0cmlidXRlZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb21wb3NlZFRyZWVXYWxrKGRpc3RyaWJ1dGVkTm9kZXNbaV0sIGNhbGxiYWNrLCBzaGFkb3dSb290QW5jZXN0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBpdCBpcyBhIDxzbG90PiBlbGVtZW50LCBkZXNjZW5kIGludG8gYXNzaWduZWQgbm9kZXMgLSB0aGVzZVxuICAgICAgICAvLyBhcmUgZWxlbWVudHMgZnJvbSBvdXRzaWRlIHRoZSBzaGFkb3cgcm9vdCB3aGljaCBhcmUgcmVuZGVyZWQgaW5zaWRlIHRoZVxuICAgICAgICAvLyBzaGFkb3cgRE9NLlxuICAgICAgICBpZiAoZWxlbWVudC5sb2NhbE5hbWUgPT0gJ3Nsb3QnKSB7XG4gICAgICAgICAgdmFyIHNsb3QgPSAvKiogQHR5cGUgeyFIVE1MU2xvdEVsZW1lbnR9ICovZWxlbWVudDtcbiAgICAgICAgICAvLyBWZXJpZnkgaWYgU2hhZG93RG9tIHYxIGlzIHN1cHBvcnRlZC5cbiAgICAgICAgICB2YXIgX2Rpc3RyaWJ1dGVkTm9kZXMgPSBzbG90LmFzc2lnbmVkTm9kZXMgPyBzbG90LmFzc2lnbmVkTm9kZXMoeyBmbGF0dGVuOiB0cnVlIH0pIDogW107XG4gICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IF9kaXN0cmlidXRlZE5vZGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgY29tcG9zZWRUcmVlV2FsayhfZGlzdHJpYnV0ZWROb2Rlc1tfaV0sIGNhbGxiYWNrLCBzaGFkb3dSb290QW5jZXN0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgaXQgaXMgbmVpdGhlciB0aGUgcGFyZW50IG9mIGEgU2hhZG93Um9vdCwgYSA8Y29udGVudD4gZWxlbWVudCwgYSA8c2xvdD5cbiAgICAgIC8vIGVsZW1lbnQsIG5vciBhIDxzaGFkb3c+IGVsZW1lbnQgcmVjdXJzZSBub3JtYWxseS5cbiAgICAgIHZhciBjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICAgIHdoaWxlIChjaGlsZCAhPSBudWxsKSB7XG4gICAgICAgIGNvbXBvc2VkVHJlZVdhbGsoY2hpbGQsIGNhbGxiYWNrLCBzaGFkb3dSb290QW5jZXN0b3IpO1xuICAgICAgICBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBzdHlsZSBlbGVtZW50IHRvIHRoZSBub2RlIGNvbnRhaW5pbmcgdGhlIGluZXJ0IHNwZWNpZmljIHN0eWxlc1xuICAgICAqIEBwYXJhbSB7IU5vZGV9IG5vZGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRJbmVydFN0eWxlKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLnF1ZXJ5U2VsZWN0b3IoJ3N0eWxlI2luZXJ0LXN0eWxlLCBsaW5rI2luZXJ0LXN0eWxlJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnaWQnLCAnaW5lcnQtc3R5bGUnKTtcbiAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gJ1xcbicgKyAnW2luZXJ0XSB7XFxuJyArICcgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbicgKyAnICBjdXJzb3I6IGRlZmF1bHQ7XFxuJyArICd9XFxuJyArICdcXG4nICsgJ1tpbmVydF0sIFtpbmVydF0gKiB7XFxuJyArICcgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuJyArICcgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuJyArICcgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXG4nICsgJyAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuJyArICd9XFxuJztcbiAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgIH1cblxuICAgIGlmICghRWxlbWVudC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkoJ2luZXJ0JykpIHtcbiAgICAgIC8qKiBAdHlwZSB7IUluZXJ0TWFuYWdlcn0gKi9cbiAgICAgIHZhciBpbmVydE1hbmFnZXIgPSBuZXcgSW5lcnRNYW5hZ2VyKGRvY3VtZW50KTtcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVsZW1lbnQucHJvdG90eXBlLCAnaW5lcnQnLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIC8qKiBAdGhpcyB7IUVsZW1lbnR9ICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmhhc0F0dHJpYnV0ZSgnaW5lcnQnKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqIEB0aGlzIHshRWxlbWVudH0gKi9cbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoaW5lcnQpIHtcbiAgICAgICAgICBpbmVydE1hbmFnZXIuc2V0SW5lcnQodGhpcywgaW5lcnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pKCk7XG5cbn0pKSk7XG4iLCJpbXBvcnQgXCJibG9ja2luZy1lbGVtZW50c1wiO1xyXG5pbXBvcnQgeyB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCBcIndpY2ctaW5lcnRcIjtcclxuY29uc3QgYmxvY2tpbmdFbGVtZW50cyA9IGRvY3VtZW50LiRibG9ja2luZ0VsZW1lbnRzO1xyXG4vKipcclxuICogQWxsb3dzIGFuIGVsZW1lbnQgdG8gdHJhcCBmb2N1cyBieSBhcHBseWluZyB0aGUgXCJpbmVydFwiIGF0dHJpYnV0ZSB0byBhbGwgc2libGluZywgYXVudCwgYW5kIHVuY2xlIG5vZGVzLlxyXG4gKlxyXG4gKiBBdXRvbWF0aWNhbGx5IGhhbmRsZXMgY29uc2VjdXRpdmUgY2FsbHMgd2l0aCBhIGxvb3NlbHkgYXBwbGllZCBzdGFjayBvcGVyYXRpb25cclxuICogKHNwZWNpZmljYWxseSB2aWEgYGJsb2NraW5nRWxlbWVudHNgLCB3aXRoIGEgc21hbGwgcG9seWZpbGwgYmVjYXVzZSBJJ20gbm90IHN1cmUgaG93IGxvbmdcclxuICogaXQnbGwgdGFrZSB0byBmaW5kIGl0cyB3YXkgaW50byB0aGUgc3BlYywgaWYgZXZlcilcclxuICogQHBhcmFtIHRhcmdldFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUJsb2NraW5nRWxlbWVudCh0YXJnZXQpIHtcclxuICAgIC8qKlxyXG4gICAgICogUHVzaC9wb3AgdGhlIGVsZW1lbnQgZnJvbSB0aGUgYmxvY2tpbmdFbGVtZW50cyBzdGFjay5cclxuICAgICAqL1xyXG4gICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIGJsb2NraW5nRWxlbWVudHMucHVzaCh0YXJnZXQpO1xyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYmxvY2tpbmdFbGVtZW50cy5yZW1vdmUodGFyZ2V0KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbdGFyZ2V0XSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRvcEVsZW1lbnQoKSB7XHJcbiAgICByZXR1cm4gYmxvY2tpbmdFbGVtZW50cy50b3A7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLWJsb2NraW5nLWVsZW1lbnQuanMubWFwIiwiaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyBpc0ZvY3VzYWJsZSB9IGZyb20gXCJ0YWJiYWJsZVwiO1xyXG5pbXBvcnQgeyB1c2VBY3RpdmVFbGVtZW50IH0gZnJvbSBcIi4vdXNlLWFjdGl2ZS1lbGVtZW50XCI7XHJcbmltcG9ydCB7IGdldFRvcEVsZW1lbnQsIHVzZUJsb2NraW5nRWxlbWVudCB9IGZyb20gXCIuL3VzZS1ibG9ja2luZy1lbGVtZW50XCI7XHJcbmltcG9ydCB7IHVzZU1lcmdlZFByb3BzIH0gZnJvbSBcIi4vdXNlLW1lcmdlZC1wcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VSZWZFbGVtZW50IH0gZnJvbSBcIi4vdXNlLXJlZi1lbGVtZW50XCI7XHJcbmNvbnN0IGVsZW1lbnRzVG9SZXN0b3JlRm9jdXNUbyA9IG5ldyBNYXAoKTtcclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUZvY3VzVHJhcCh7IHRyYXBBY3RpdmUgfSkge1xyXG4gICAgY29uc3QgeyBlbGVtZW50LCB1c2VSZWZFbGVtZW50UHJvcHMsIGdldEVsZW1lbnQgfSA9IHVzZVJlZkVsZW1lbnQoKTtcclxuICAgIGNvbnN0IHsgZ2V0TGFzdEFjdGl2ZUVsZW1lbnQgfSA9IHVzZUFjdGl2ZUVsZW1lbnQoKTtcclxuICAgIC8vIFdoZW4gdGhlIHRyYXAgYmVjb21lcyBhY3RpdmUsIGJlZm9yZSB3ZSBsZXQgdGhlIGJsb2NraW5nRWxlbWVudHMgaG9vayBydW4sXHJcbiAgICAvLyBrZWVwIHRyYWNrIG9mIHdoYXRldmVyJ3MgY3VycmVudGx5IGZvY3VzZWQgYW5kIHNhdmUgaXQuXHJcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmICh0cmFwQWN0aXZlICYmIGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgLy8gU2F2ZSB0aGUgY3VycmVudGx5IGZvY3VzZWQgZWxlbWVudFxyXG4gICAgICAgICAgICAvLyB0byB3aGF0ZXZlcidzIGN1cnJlbnRseSBhdCB0aGUgdG9wIG9mIHRoZSBzdGFja1xyXG4gICAgICAgICAgICBlbGVtZW50c1RvUmVzdG9yZUZvY3VzVG8uc2V0KGdldFRvcEVsZW1lbnQoKSwgZ2V0TGFzdEFjdGl2ZUVsZW1lbnQoKSA/PyBkb2N1bWVudC5ib2R5KTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbdHJhcEFjdGl2ZSwgZWxlbWVudF0pO1xyXG4gICAgdXNlQmxvY2tpbmdFbGVtZW50KHRyYXBBY3RpdmUgPyBlbGVtZW50IDogbnVsbCk7XHJcbiAgICAvKipcclxuICAgICAqIEFueSB0aW1lIHdlIGFjdGl2YXRlIG9yIGRlYWN0aXZhdGUgdGhlIHRyYXAsXHJcbiAgICAgKiBjaGFuZ2UgZm9jdXMgdG8gc29tZXRoaW5nIGVsc2UgKHNvbWV0aGluZyBpblxyXG4gICAgICogdGhlIHRyYXAgaWYgaXQncyBhY3RpdmUsIG9yIHdoYXRldmVyIHdlJ3ZlXHJcbiAgICAgKiB0cmFja2VkIGluIGVsZW1lbnRzVG9SZXN0b3JlRm9jdXNUbyBpZiBub3QpXHJcbiAgICAgKi9cclxuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRyYXBBY3RpdmUgJiYgZWxlbWVudCkge1xyXG4gICAgICAgICAgICBsZXQgcmFmSGFuZGxlID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IFRoaXMgZXh0cmEgcXVldWVNaWNyb3Rhc2sgaXMgbmVlZGVkIGZvclxyXG4gICAgICAgICAgICAgICAgLy8gLi4ucmVhc29ucz9cclxuICAgICAgICAgICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBmaW5kRmlyc3RGb2N1c2FibGUoZWxlbWVudCk/LmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFmSGFuZGxlID0gMDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyYWZIYW5kbGUpXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmSGFuZGxlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAvLyBSZXN0b3JlIHRoZSBmb2N1cyB0byB0aGUgZWxlbWVudFxyXG4gICAgICAgICAgICAvLyB0aGF0IGhhcyByZXR1cm5lZCB0byB0aGUgdG9wIG9mIHRoZSBzdGFja1xyXG4gICAgICAgICAgICBsZXQgcmFmSGFuZGxlID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50c1RvUmVzdG9yZUZvY3VzVG8uZ2V0KGdldFRvcEVsZW1lbnQoKSk/LmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFmSGFuZGxlID0gMDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyYWZIYW5kbGUpXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmSGFuZGxlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbdHJhcEFjdGl2ZSwgZWxlbWVudF0pO1xyXG4gICAgY29uc3QgdXNlRm9jdXNUcmFwUHJvcHMgPSAoKHByb3BzKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKCkoeyBcImFyaWEtbW9kYWxcIjogdHJhcEFjdGl2ZSA/IFwidHJ1ZVwiIDogdW5kZWZpbmVkIH0sIHVzZVJlZkVsZW1lbnRQcm9wcyhwcm9wcykpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVzZUZvY3VzVHJhcFByb3BzLFxyXG4gICAgICAgIGVsZW1lbnQsXHJcbiAgICAgICAgZ2V0RWxlbWVudFxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnQgY29udGFpbmVkIHdpdGhpbiB0aGUgZ2l2ZW4gbm9kZSwgb3IgbnVsbCBpZiBub25lIGFyZSBmb3VuZC5cclxuICogQHBhcmFtIGVsZW1lbnRcclxuICogQHJldHVybnNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5kRmlyc3RGb2N1c2FibGUoZWxlbWVudCkge1xyXG4gICAgY29uc3QgdHJlZVdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoZWxlbWVudCwgTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQsIHsgYWNjZXB0Tm9kZTogKG5vZGUpID0+IChub2RlIGluc3RhbmNlb2YgRWxlbWVudCAmJiBpc0ZvY3VzYWJsZShub2RlKSA/IE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVCA6IE5vZGVGaWx0ZXIuRklMVEVSX1NLSVApIH0pO1xyXG4gICAgY29uc3QgZmlyc3RGb2N1c2FibGUgPSB0cmVlV2Fsa2VyLmZpcnN0Q2hpbGQoKTtcclxuICAgIHJldHVybiBmaXJzdEZvY3VzYWJsZTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtZm9jdXMtdHJhcC5qcy5tYXAiLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyB1c2VIYXNGb2N1cyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1oYXMtZm9jdXNcIjtcclxuaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtbWVyZ2VkLXByb3BzXCI7XHJcbmltcG9ydCB7IHVzZVJhbmRvbUlkIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLXJhbmRvbS1pZFwiO1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1zdGF0ZVwiO1xyXG5pbXBvcnQgeyB1c2VUaW1lb3V0IH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUFyaWFUb29sdGlwKHsgbW91c2VvdmVyRGVsYXkgfSkge1xyXG4gICAgbW91c2VvdmVyRGVsYXkgPz89IDQwMDtcclxuICAgIGNvbnN0IFtvcGVuLCBzZXRPcGVuLCBnZXRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFtoYXNBbnlNb3VzZW92ZXIsIHNldEhhc0FueU1vdXNlb3Zlcl0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICAvL2NvbnN0IFttb3VzZW92ZXJJc1ZhbGlkLCBzZXRNb3VzZW92ZXJJc1ZhbGlkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IHsgdXNlUmFuZG9tSWRQcm9wczogdXNlVG9vbHRpcElkUHJvcHMsIHVzZVJlZmVyZW5jZWRJZFByb3BzOiB1c2VUb29sdGlwSWRSZWZlcmVuY2luZ1Byb3BzIH0gPSB1c2VSYW5kb21JZCh7IHByZWZpeDogXCJhcmlhLXRvb2x0aXAtXCIgfSk7XHJcbiAgICBjb25zdCB7IGZvY3VzZWRJbm5lcjogdHJpZ2dlckZvY3VzZWQsIHVzZUhhc0ZvY3VzUHJvcHMgfSA9IHVzZUhhc0ZvY3VzKCk7XHJcbiAgICBjb25zdCBbdHJpZ2dlckhhc01vdXNlb3Zlciwgc2V0VHJpZ2dlckhhc01vdXNlb3Zlcl0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBjb25zdCBbdG9vbHRpcEhhc01vdXNlb3Zlciwgc2V0VG9vbHRpcEhhc01vdXNlb3Zlcl0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICB1c2VUaW1lb3V0KHtcclxuICAgICAgICB0aW1lb3V0OiBtb3VzZW92ZXJEZWxheSxcclxuICAgICAgICB0cmlnZ2VySW5kZXg6ICgrdHJpZ2dlckhhc01vdXNlb3ZlciArICt0b29sdGlwSGFzTW91c2VvdmVyKSxcclxuICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodHJpZ2dlckhhc01vdXNlb3ZlciB8fCB0b29sdGlwSGFzTW91c2VvdmVyKVxyXG4gICAgICAgICAgICAgICAgc2V0SGFzQW55TW91c2VvdmVyKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdXNlVGltZW91dCh7XHJcbiAgICAgICAgdGltZW91dDogNTAsXHJcbiAgICAgICAgdHJpZ2dlckluZGV4OiAoK3RyaWdnZXJIYXNNb3VzZW92ZXIgKyArdG9vbHRpcEhhc01vdXNlb3ZlciksXHJcbiAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0cmlnZ2VySGFzTW91c2VvdmVyICYmICF0b29sdGlwSGFzTW91c2VvdmVyKVxyXG4gICAgICAgICAgICAgICAgc2V0SGFzQW55TW91c2VvdmVyKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgc2V0T3BlbihoYXNBbnlNb3VzZW92ZXIgfHwgdHJpZ2dlckZvY3VzZWQpO1xyXG4gICAgfSwgW2hhc0FueU1vdXNlb3ZlciwgdHJpZ2dlckZvY3VzZWRdKTtcclxuICAgIGNvbnN0IHVzZVRvb2x0aXBUcmlnZ2VyID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlVG9vbHRpcFRyaWdnZXIoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gb25Qb2ludGVyRW50ZXIoZSkge1xyXG4gICAgICAgICAgICBzZXRUcmlnZ2VySGFzTW91c2VvdmVyKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBvblBvaW50ZXJMZWF2ZShlKSB7XHJcbiAgICAgICAgICAgIHNldFRyaWdnZXJIYXNNb3VzZW92ZXIoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiB1c2VUb29sdGlwVHJpZ2dlclByb3BzKHsgLi4ucHJvcHMgfSkge1xyXG4gICAgICAgICAgICAvLyBOb3RlOiBUaG91Z2ggaXQncyBpbXBvcnRhbnQgdG8gbWFrZSBzdXJlIHRoYXQgZm9jdXNpbmcgYWN0aXZhdGVzIGEgdG9vbHRpcCxcclxuICAgICAgICAgICAgLy8gaXQncyBwZXJmZWN0bHkgcmVhc29uYWJsZSB0aGF0IGEgY2hpbGQgZWxlbWVudCB3aWxsIGJlIHRoZSBvbmUgdGhhdCdzIGZvY3VzZWQsXHJcbiAgICAgICAgICAgIC8vIG5vdCB0aGlzIG9uZSwgc28gd2UgZG9uJ3Qgc2V0IHRhYkluZGV4PTBcclxuICAgICAgICAgICAgcmV0dXJuIHVzZVRvb2x0aXBJZFJlZmVyZW5jaW5nUHJvcHMoXCJhcmlhLWRlc2NyaWJlZGJ5XCIpKHVzZU1lcmdlZFByb3BzKCkoeyBvblBvaW50ZXJFbnRlciwgb25Qb2ludGVyTGVhdmUgfSwgdXNlSGFzRm9jdXNQcm9wcyhwcm9wcykpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdXNlVG9vbHRpcFRyaWdnZXJQcm9wcyB9O1xyXG4gICAgfSwgW3VzZVRvb2x0aXBJZFJlZmVyZW5jaW5nUHJvcHNdKTtcclxuICAgIGNvbnN0IHVzZVRvb2x0aXAgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiB1c2VUb29sdGlwKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIG9uUG9pbnRlckVudGVyKGUpIHtcclxuICAgICAgICAgICAgc2V0VG9vbHRpcEhhc01vdXNlb3Zlcih0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gb25Qb2ludGVyTGVhdmUoZSkge1xyXG4gICAgICAgICAgICBzZXRUb29sdGlwSGFzTW91c2VvdmVyKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gdXNlVG9vbHRpcFByb3BzKHsgLi4ucHJvcHMgfSkge1xyXG4gICAgICAgICAgICBwcm9wcy5yb2xlID0gXCJ0b29sdGlwXCI7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VUb29sdGlwSWRQcm9wcyh1c2VNZXJnZWRQcm9wcygpKHsgb25Qb2ludGVyRW50ZXIsIG9uUG9pbnRlckxlYXZlIH0sIHByb3BzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IHVzZVRvb2x0aXBQcm9wcyB9O1xyXG4gICAgfSwgW3VzZVRvb2x0aXBJZFByb3BzXSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVzZVRvb2x0aXAsXHJcbiAgICAgICAgdXNlVG9vbHRpcFRyaWdnZXIsXHJcbiAgICAgICAgaXNPcGVuOiBvcGVuLFxyXG4gICAgICAgIGdldElzT3BlbjogZ2V0T3BlblxyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtdG9vbHRpcC5qcy5tYXAiLCJpbXBvcnR7dXNlU3RhdGUgYXMgbix1c2VSZWR1Y2VyIGFzIHQsdXNlRWZmZWN0IGFzIGUsdXNlTGF5b3V0RWZmZWN0IGFzIHIsdXNlUmVmIGFzIHUsdXNlSW1wZXJhdGl2ZUhhbmRsZSBhcyBvLHVzZU1lbW8gYXMgaSx1c2VDYWxsYmFjayBhcyBsLHVzZUNvbnRleHQgYXMgZix1c2VEZWJ1Z1ZhbHVlIGFzIGN9ZnJvbVwicHJlYWN0L2hvb2tzXCI7ZXhwb3J0KmZyb21cInByZWFjdC9ob29rc1wiO2ltcG9ydHtDb21wb25lbnQgYXMgYSxjcmVhdGVFbGVtZW50IGFzIHMsb3B0aW9ucyBhcyBoLHRvQ2hpbGRBcnJheSBhcyB2LEZyYWdtZW50IGFzIGQscmVuZGVyIGFzIHAsaHlkcmF0ZSBhcyBtLGNsb25lRWxlbWVudCBhcyB5LGNyZWF0ZVJlZiBhcyBiLGNyZWF0ZUNvbnRleHQgYXMgX31mcm9tXCJwcmVhY3RcIjtleHBvcnR7Y3JlYXRlRWxlbWVudCxjcmVhdGVDb250ZXh0LGNyZWF0ZVJlZixGcmFnbWVudCxDb21wb25lbnR9ZnJvbVwicHJlYWN0XCI7ZnVuY3Rpb24gUyhuLHQpe2Zvcih2YXIgZSBpbiB0KW5bZV09dFtlXTtyZXR1cm4gbn1mdW5jdGlvbiBDKG4sdCl7Zm9yKHZhciBlIGluIG4paWYoXCJfX3NvdXJjZVwiIT09ZSYmIShlIGluIHQpKXJldHVybiEwO2Zvcih2YXIgciBpbiB0KWlmKFwiX19zb3VyY2VcIiE9PXImJm5bcl0hPT10W3JdKXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uIEUobil7dGhpcy5wcm9wcz1ufWZ1bmN0aW9uIGcobix0KXtmdW5jdGlvbiBlKG4pe3ZhciBlPXRoaXMucHJvcHMucmVmLHI9ZT09bi5yZWY7cmV0dXJuIXImJmUmJihlLmNhbGw/ZShudWxsKTplLmN1cnJlbnQ9bnVsbCksdD8hdCh0aGlzLnByb3BzLG4pfHwhcjpDKHRoaXMucHJvcHMsbil9ZnVuY3Rpb24gcih0KXtyZXR1cm4gdGhpcy5zaG91bGRDb21wb25lbnRVcGRhdGU9ZSxzKG4sdCl9cmV0dXJuIHIuZGlzcGxheU5hbWU9XCJNZW1vKFwiKyhuLmRpc3BsYXlOYW1lfHxuLm5hbWUpK1wiKVwiLHIucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9ITAsci5fX2Y9ITAscn0oRS5wcm90b3R5cGU9bmV3IGEpLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwLEUucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZT1mdW5jdGlvbihuLHQpe3JldHVybiBDKHRoaXMucHJvcHMsbil8fEModGhpcy5zdGF0ZSx0KX07dmFyIHc9aC5fX2I7aC5fX2I9ZnVuY3Rpb24obil7bi50eXBlJiZuLnR5cGUuX19mJiZuLnJlZiYmKG4ucHJvcHMucmVmPW4ucmVmLG4ucmVmPW51bGwpLHcmJncobil9O3ZhciBSPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3ImJlN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKXx8MzkxMTtmdW5jdGlvbiB4KG4pe2Z1bmN0aW9uIHQodCxlKXt2YXIgcj1TKHt9LHQpO3JldHVybiBkZWxldGUgci5yZWYsbihyLChlPXQucmVmfHxlKSYmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxcImN1cnJlbnRcImluIGUpP2U6bnVsbCl9cmV0dXJuIHQuJCR0eXBlb2Y9Uix0LnJlbmRlcj10LHQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9dC5fX2Y9ITAsdC5kaXNwbGF5TmFtZT1cIkZvcndhcmRSZWYoXCIrKG4uZGlzcGxheU5hbWV8fG4ubmFtZSkrXCIpXCIsdH12YXIgTj1mdW5jdGlvbihuLHQpe3JldHVybiBudWxsPT1uP251bGw6dih2KG4pLm1hcCh0KSl9LGs9e21hcDpOLGZvckVhY2g6Tixjb3VudDpmdW5jdGlvbihuKXtyZXR1cm4gbj92KG4pLmxlbmd0aDowfSxvbmx5OmZ1bmN0aW9uKG4pe3ZhciB0PXYobik7aWYoMSE9PXQubGVuZ3RoKXRocm93XCJDaGlsZHJlbi5vbmx5XCI7cmV0dXJuIHRbMF19LHRvQXJyYXk6dn0sQT1oLl9fZTtoLl9fZT1mdW5jdGlvbihuLHQsZSl7aWYobi50aGVuKWZvcih2YXIgcix1PXQ7dT11Ll9fOylpZigocj11Ll9fYykmJnIuX19jKXJldHVybiBudWxsPT10Ll9fZSYmKHQuX19lPWUuX19lLHQuX19rPWUuX19rKSxyLl9fYyhuLHQpO0Eobix0LGUpfTt2YXIgTz1oLnVubW91bnQ7ZnVuY3Rpb24gTCgpe3RoaXMuX191PTAsdGhpcy50PW51bGwsdGhpcy5fX2I9bnVsbH1mdW5jdGlvbiBVKG4pe3ZhciB0PW4uX18uX19jO3JldHVybiB0JiZ0Ll9fZSYmdC5fX2Uobil9ZnVuY3Rpb24gRihuKXt2YXIgdCxlLHI7ZnVuY3Rpb24gdSh1KXtpZih0fHwodD1uKCkpLnRoZW4oZnVuY3Rpb24obil7ZT1uLmRlZmF1bHR8fG59LGZ1bmN0aW9uKG4pe3I9bn0pLHIpdGhyb3cgcjtpZighZSl0aHJvdyB0O3JldHVybiBzKGUsdSl9cmV0dXJuIHUuZGlzcGxheU5hbWU9XCJMYXp5XCIsdS5fX2Y9ITAsdX1mdW5jdGlvbiBNKCl7dGhpcy51PW51bGwsdGhpcy5vPW51bGx9aC51bm1vdW50PWZ1bmN0aW9uKG4pe3ZhciB0PW4uX19jO3QmJnQuX19SJiZ0Ll9fUigpLHQmJiEwPT09bi5fX2gmJihuLnR5cGU9bnVsbCksTyYmTyhuKX0sKEwucHJvdG90eXBlPW5ldyBhKS5fX2M9ZnVuY3Rpb24obix0KXt2YXIgZT10Ll9fYyxyPXRoaXM7bnVsbD09ci50JiYoci50PVtdKSxyLnQucHVzaChlKTt2YXIgdT1VKHIuX192KSxvPSExLGk9ZnVuY3Rpb24oKXtvfHwobz0hMCxlLl9fUj1udWxsLHU/dShsKTpsKCkpfTtlLl9fUj1pO3ZhciBsPWZ1bmN0aW9uKCl7aWYoIS0tci5fX3Upe2lmKHIuc3RhdGUuX19lKXt2YXIgbj1yLnN0YXRlLl9fZTtyLl9fdi5fX2tbMF09ZnVuY3Rpb24gbih0LGUscil7cmV0dXJuIHQmJih0Ll9fdj1udWxsLHQuX19rPXQuX19rJiZ0Ll9fay5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIG4odCxlLHIpfSksdC5fX2MmJnQuX19jLl9fUD09PWUmJih0Ll9fZSYmci5pbnNlcnRCZWZvcmUodC5fX2UsdC5fX2QpLHQuX19jLl9fZT0hMCx0Ll9fYy5fX1A9cikpLHR9KG4sbi5fX2MuX19QLG4uX19jLl9fTyl9dmFyIHQ7Zm9yKHIuc2V0U3RhdGUoe19fZTpyLl9fYj1udWxsfSk7dD1yLnQucG9wKCk7KXQuZm9yY2VVcGRhdGUoKX19LGY9ITA9PT10Ll9faDtyLl9fdSsrfHxmfHxyLnNldFN0YXRlKHtfX2U6ci5fX2I9ci5fX3YuX19rWzBdfSksbi50aGVuKGksaSl9LEwucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uKCl7dGhpcy50PVtdfSxMLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24obix0KXtpZih0aGlzLl9fYil7aWYodGhpcy5fX3YuX19rKXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHI9dGhpcy5fX3YuX19rWzBdLl9fYzt0aGlzLl9fdi5fX2tbMF09ZnVuY3Rpb24gbih0LGUscil7cmV0dXJuIHQmJih0Ll9fYyYmdC5fX2MuX19IJiYodC5fX2MuX19ILl9fLmZvckVhY2goZnVuY3Rpb24obil7XCJmdW5jdGlvblwiPT10eXBlb2Ygbi5fX2MmJm4uX19jKCl9KSx0Ll9fYy5fX0g9bnVsbCksbnVsbCE9KHQ9Uyh7fSx0KSkuX19jJiYodC5fX2MuX19QPT09ciYmKHQuX19jLl9fUD1lKSx0Ll9fYz1udWxsKSx0Ll9faz10Ll9fayYmdC5fX2subWFwKGZ1bmN0aW9uKHQpe3JldHVybiBuKHQsZSxyKX0pKSx0fSh0aGlzLl9fYixlLHIuX19PPXIuX19QKX10aGlzLl9fYj1udWxsfXZhciB1PXQuX19lJiZzKGQsbnVsbCxuLmZhbGxiYWNrKTtyZXR1cm4gdSYmKHUuX19oPW51bGwpLFtzKGQsbnVsbCx0Ll9fZT9udWxsOm4uY2hpbGRyZW4pLHVdfTt2YXIgVD1mdW5jdGlvbihuLHQsZSl7aWYoKytlWzFdPT09ZVswXSYmbi5vLmRlbGV0ZSh0KSxuLnByb3BzLnJldmVhbE9yZGVyJiYoXCJ0XCIhPT1uLnByb3BzLnJldmVhbE9yZGVyWzBdfHwhbi5vLnNpemUpKWZvcihlPW4udTtlOyl7Zm9yKDtlLmxlbmd0aD4zOyllLnBvcCgpKCk7aWYoZVsxXTxlWzBdKWJyZWFrO24udT1lPWVbMl19fTtmdW5jdGlvbiBEKG4pe3JldHVybiB0aGlzLmdldENoaWxkQ29udGV4dD1mdW5jdGlvbigpe3JldHVybiBuLmNvbnRleHR9LG4uY2hpbGRyZW59ZnVuY3Rpb24gSShuKXt2YXIgdD10aGlzLGU9bi5pO3QuY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24oKXtwKG51bGwsdC5sKSx0Lmw9bnVsbCx0Lmk9bnVsbH0sdC5pJiZ0LmkhPT1lJiZ0LmNvbXBvbmVudFdpbGxVbm1vdW50KCksbi5fX3Y/KHQubHx8KHQuaT1lLHQubD17bm9kZVR5cGU6MSxwYXJlbnROb2RlOmUsY2hpbGROb2RlczpbXSxhcHBlbmRDaGlsZDpmdW5jdGlvbihuKXt0aGlzLmNoaWxkTm9kZXMucHVzaChuKSx0LmkuYXBwZW5kQ2hpbGQobil9LGluc2VydEJlZm9yZTpmdW5jdGlvbihuLGUpe3RoaXMuY2hpbGROb2Rlcy5wdXNoKG4pLHQuaS5hcHBlbmRDaGlsZChuKX0scmVtb3ZlQ2hpbGQ6ZnVuY3Rpb24obil7dGhpcy5jaGlsZE5vZGVzLnNwbGljZSh0aGlzLmNoaWxkTm9kZXMuaW5kZXhPZihuKT4+PjEsMSksdC5pLnJlbW92ZUNoaWxkKG4pfX0pLHAocyhELHtjb250ZXh0OnQuY29udGV4dH0sbi5fX3YpLHQubCkpOnQubCYmdC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWZ1bmN0aW9uIFcobix0KXtyZXR1cm4gcyhJLHtfX3Y6bixpOnR9KX0oTS5wcm90b3R5cGU9bmV3IGEpLl9fZT1mdW5jdGlvbihuKXt2YXIgdD10aGlzLGU9VSh0Ll9fdikscj10Lm8uZ2V0KG4pO3JldHVybiByWzBdKyssZnVuY3Rpb24odSl7dmFyIG89ZnVuY3Rpb24oKXt0LnByb3BzLnJldmVhbE9yZGVyPyhyLnB1c2godSksVCh0LG4scikpOnUoKX07ZT9lKG8pOm8oKX19LE0ucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihuKXt0aGlzLnU9bnVsbCx0aGlzLm89bmV3IE1hcDt2YXIgdD12KG4uY2hpbGRyZW4pO24ucmV2ZWFsT3JkZXImJlwiYlwiPT09bi5yZXZlYWxPcmRlclswXSYmdC5yZXZlcnNlKCk7Zm9yKHZhciBlPXQubGVuZ3RoO2UtLTspdGhpcy5vLnNldCh0W2VdLHRoaXMudT1bMSwwLHRoaXMudV0pO3JldHVybiBuLmNoaWxkcmVufSxNLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGU9TS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQ9ZnVuY3Rpb24oKXt2YXIgbj10aGlzO3RoaXMuby5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7VChuLGUsdCl9KX07dmFyIGo9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvciYmU3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIil8fDYwMTAzLFA9L14oPzphY2NlbnR8YWxpZ25tZW50fGFyYWJpY3xiYXNlbGluZXxjYXB8Y2xpcCg/IVBhdGhVKXxjb2xvcnxmaWxsfGZsb29kfGZvbnR8Z2x5cGgoPyFSKXxob3JpenxtYXJrZXIoPyFIfFd8VSl8b3ZlcmxpbmV8cGFpbnR8c3RvcHxzdHJpa2V0aHJvdWdofHN0cm9rZXx0ZXh0KD8hTCl8dW5kZXJsaW5lfHVuaWNvZGV8dW5pdHN8dnx2ZWN0b3J8dmVydHx3b3JkfHdyaXRpbmd8eCg/IUMpKVtBLVpdLyxWPWZ1bmN0aW9uKG4pe3JldHVybihcInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sKCk/L2ZpbHxjaGV8cmFkL2k6L2ZpbHxjaGV8cmEvaSkudGVzdChuKX07ZnVuY3Rpb24geihuLHQsZSl7cmV0dXJuIG51bGw9PXQuX19rJiYodC50ZXh0Q29udGVudD1cIlwiKSxwKG4sdCksXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmZSgpLG4/bi5fX2M6bnVsbH1mdW5jdGlvbiBCKG4sdCxlKXtyZXR1cm4gbShuLHQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUoKSxuP24uX19jOm51bGx9YS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fSxbXCJjb21wb25lbnRXaWxsTW91bnRcIixcImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNcIixcImNvbXBvbmVudFdpbGxVcGRhdGVcIl0uZm9yRWFjaChmdW5jdGlvbihuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoYS5wcm90b3R5cGUsbix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzW1wiVU5TQUZFX1wiK25dfSxzZXQ6ZnVuY3Rpb24odCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsbix7Y29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOnR9KX19KX0pO3ZhciBIPWguZXZlbnQ7ZnVuY3Rpb24gWigpe31mdW5jdGlvbiBZKCl7cmV0dXJuIHRoaXMuY2FuY2VsQnViYmxlfWZ1bmN0aW9uICQoKXtyZXR1cm4gdGhpcy5kZWZhdWx0UHJldmVudGVkfWguZXZlbnQ9ZnVuY3Rpb24obil7cmV0dXJuIEgmJihuPUgobikpLG4ucGVyc2lzdD1aLG4uaXNQcm9wYWdhdGlvblN0b3BwZWQ9WSxuLmlzRGVmYXVsdFByZXZlbnRlZD0kLG4ubmF0aXZlRXZlbnQ9bn07dmFyIHEsRz17Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNsYXNzfX0sSj1oLnZub2RlO2gudm5vZGU9ZnVuY3Rpb24obil7dmFyIHQ9bi50eXBlLGU9bi5wcm9wcyxyPWU7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2Zvcih2YXIgdSBpbiByPXt9LGUpe3ZhciBvPWVbdV07XCJ2YWx1ZVwiPT09dSYmXCJkZWZhdWx0VmFsdWVcImluIGUmJm51bGw9PW98fChcImRlZmF1bHRWYWx1ZVwiPT09dSYmXCJ2YWx1ZVwiaW4gZSYmbnVsbD09ZS52YWx1ZT91PVwidmFsdWVcIjpcImRvd25sb2FkXCI9PT11JiYhMD09PW8/bz1cIlwiOi9vbmRvdWJsZWNsaWNrL2kudGVzdCh1KT91PVwib25kYmxjbGlja1wiOi9eb25jaGFuZ2UodGV4dGFyZWF8aW5wdXQpL2kudGVzdCh1K3QpJiYhVihlLnR5cGUpP3U9XCJvbmlucHV0XCI6L15vbihBbml8VHJhfFRvdXxCZWZvcmVJbnApLy50ZXN0KHUpP3U9dS50b0xvd2VyQ2FzZSgpOlAudGVzdCh1KT91PXUucmVwbGFjZSgvW0EtWjAtOV0vLFwiLSQmXCIpLnRvTG93ZXJDYXNlKCk6bnVsbD09PW8mJihvPXZvaWQgMCksclt1XT1vKX1cInNlbGVjdFwiPT10JiZyLm11bHRpcGxlJiZBcnJheS5pc0FycmF5KHIudmFsdWUpJiYoci52YWx1ZT12KGUuY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24obil7bi5wcm9wcy5zZWxlY3RlZD0tMSE9ci52YWx1ZS5pbmRleE9mKG4ucHJvcHMudmFsdWUpfSkpLFwic2VsZWN0XCI9PXQmJm51bGwhPXIuZGVmYXVsdFZhbHVlJiYoci52YWx1ZT12KGUuY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24obil7bi5wcm9wcy5zZWxlY3RlZD1yLm11bHRpcGxlPy0xIT1yLmRlZmF1bHRWYWx1ZS5pbmRleE9mKG4ucHJvcHMudmFsdWUpOnIuZGVmYXVsdFZhbHVlPT1uLnByb3BzLnZhbHVlfSkpLG4ucHJvcHM9cn10JiZlLmNsYXNzIT1lLmNsYXNzTmFtZSYmKEcuZW51bWVyYWJsZT1cImNsYXNzTmFtZVwiaW4gZSxudWxsIT1lLmNsYXNzTmFtZSYmKHIuY2xhc3M9ZS5jbGFzc05hbWUpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiY2xhc3NOYW1lXCIsRykpLG4uJCR0eXBlb2Y9aixKJiZKKG4pfTt2YXIgSz1oLl9fcjtoLl9fcj1mdW5jdGlvbihuKXtLJiZLKG4pLHE9bi5fX2N9O3ZhciBRPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOntjdXJyZW50OntyZWFkQ29udGV4dDpmdW5jdGlvbihuKXtyZXR1cm4gcS5fX25bbi5fX2NdLnByb3BzLnZhbHVlfX19fSxYPVwiMTcuMC4yXCI7ZnVuY3Rpb24gbm4obil7cmV0dXJuIHMuYmluZChudWxsLG4pfWZ1bmN0aW9uIHRuKG4pe3JldHVybiEhbiYmbi4kJHR5cGVvZj09PWp9ZnVuY3Rpb24gZW4obil7cmV0dXJuIHRuKG4pP3kuYXBwbHkobnVsbCxhcmd1bWVudHMpOm59ZnVuY3Rpb24gcm4obil7cmV0dXJuISFuLl9fayYmKHAobnVsbCxuKSwhMCl9ZnVuY3Rpb24gdW4obil7cmV0dXJuIG4mJihuLmJhc2V8fDE9PT1uLm5vZGVUeXBlJiZuKXx8bnVsbH12YXIgb249ZnVuY3Rpb24obix0KXtyZXR1cm4gbih0KX0sbG49ZnVuY3Rpb24obix0KXtyZXR1cm4gbih0KX0sZm49ZDtleHBvcnQgZGVmYXVsdHt1c2VTdGF0ZTpuLHVzZVJlZHVjZXI6dCx1c2VFZmZlY3Q6ZSx1c2VMYXlvdXRFZmZlY3Q6cix1c2VSZWY6dSx1c2VJbXBlcmF0aXZlSGFuZGxlOm8sdXNlTWVtbzppLHVzZUNhbGxiYWNrOmwsdXNlQ29udGV4dDpmLHVzZURlYnVnVmFsdWU6Yyx2ZXJzaW9uOlwiMTcuMC4yXCIsQ2hpbGRyZW46ayxyZW5kZXI6eixoeWRyYXRlOkIsdW5tb3VudENvbXBvbmVudEF0Tm9kZTpybixjcmVhdGVQb3J0YWw6VyxjcmVhdGVFbGVtZW50OnMsY3JlYXRlQ29udGV4dDpfLGNyZWF0ZUZhY3Rvcnk6bm4sY2xvbmVFbGVtZW50OmVuLGNyZWF0ZVJlZjpiLEZyYWdtZW50OmQsaXNWYWxpZEVsZW1lbnQ6dG4sZmluZERPTU5vZGU6dW4sQ29tcG9uZW50OmEsUHVyZUNvbXBvbmVudDpFLG1lbW86Zyxmb3J3YXJkUmVmOngsZmx1c2hTeW5jOmxuLHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOm9uLFN0cmljdE1vZGU6ZCxTdXNwZW5zZTpMLFN1c3BlbnNlTGlzdDpNLGxhenk6RixfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDpRfTtleHBvcnR7WCBhcyB2ZXJzaW9uLGsgYXMgQ2hpbGRyZW4seiBhcyByZW5kZXIsQiBhcyBoeWRyYXRlLHJuIGFzIHVubW91bnRDb21wb25lbnRBdE5vZGUsVyBhcyBjcmVhdGVQb3J0YWwsbm4gYXMgY3JlYXRlRmFjdG9yeSxlbiBhcyBjbG9uZUVsZW1lbnQsdG4gYXMgaXNWYWxpZEVsZW1lbnQsdW4gYXMgZmluZERPTU5vZGUsRSBhcyBQdXJlQ29tcG9uZW50LGcgYXMgbWVtbyx4IGFzIGZvcndhcmRSZWYsbG4gYXMgZmx1c2hTeW5jLG9uIGFzIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzLGZuIGFzIFN0cmljdE1vZGUsTCBhcyBTdXNwZW5zZSxNIGFzIFN1c3BlbnNlTGlzdCxGIGFzIGxhenksUSBhcyBfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wYXQubW9kdWxlLmpzLm1hcFxuIiwiaW1wb3J0IHsgZm9yd2FyZFJlZiB9IGZyb20gXCJwcmVhY3QvY29tcGF0XCI7XHJcbi8qKlxyXG4gKiBTaG9ydGN1dCBmb3IgcHJlYWN0L2NvbXBhdCdzIGBmb3J3YXJkUmVmYCB0aGF0IGF1dG8tYXNzdW1lcyBzb21lIHRoaW5ncyB0aGF0IGFyZSB1c2VmdWwgZm9yIGZvcndhcmRpbmcgcmVmcyB0byBgSFRNTEVsZW1lbnRzYCBzcGVjaWZpY2FsbHkuXHJcbiAqIE5hbWVseSBpdCBpbnZvbHZlcyBkZS1ndW5raW5nIHRoZSB0eXBlIHN5c3RlbSBieSBsZXR0aW5nIHVzIHJldHVybiAqZ2VuZXJpYyogZnVuY3Rpb24gYW5kIHBsYXlpbmcgbmljZSB3aXRoIFJlYWN0LiBJbiBhbGwgb3RoZXIgcmVzcGVjdHMsIGl0IGFjdHMgbGlrZSBgZm9yd2FyZFJlZmAuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZEVsZW1lbnRSZWYoQ29tcG9uZW50KSB7XHJcbiAgICBjb25zdCBGb3J3YXJkZWRDb21wb25lbnQgPSBmb3J3YXJkUmVmKENvbXBvbmVudCk7XHJcbiAgICByZXR1cm4gRm9yd2FyZGVkQ29tcG9uZW50O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcndhcmQtZWxlbWVudC1yZWYuanMubWFwIiwiaW1wb3J0IHsgZGVmYXVsdCBhcyBjbHN4IH0gZnJvbSBcImNsc3hcIjtcclxuaW1wb3J0IHsgY2xvbmVFbGVtZW50IH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VMb2dpY2FsRGlyZWN0aW9uIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLWxvZ2ljYWwtZGlyZWN0aW9uXCI7XHJcbmltcG9ydCB7IHVzZU1lcmdlZFByb3BzIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLW1lcmdlZC1wcm9wc1wiO1xyXG4vL2ltcG9ydCB7IG1lcmdlU3R5bGVzIH0gZnJvbSBcIi4vbWVyZ2Utc3R5bGVcIjtcclxuaW1wb3J0IHsgdXNlUmVmRWxlbWVudCB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1yZWYtZWxlbWVudFwiO1xyXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlTGF5b3V0RWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyBmb3J3YXJkRWxlbWVudFJlZiB9IGZyb20gXCIuL2ZvcndhcmQtZWxlbWVudC1yZWZcIjtcclxuZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKGNsYXNzQmFzZSwgb3BlbiwgcGhhc2UpIHtcclxuICAgIGlmIChwaGFzZSlcclxuICAgICAgICByZXR1cm4gYCR7Y2xhc3NCYXNlIHx8IFwidHJhbnNpdGlvblwifS0ke29wZW59LSR7cGhhc2V9YDtcclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gYCR7Y2xhc3NCYXNlIHx8IFwidHJhbnNpdGlvblwifS0ke29wZW59YDtcclxufVxyXG5sZXQgZHVtbXk7XHJcbmZ1bmN0aW9uIGZvcmNlUmVmbG93KGUpIHtcclxuICAgIC8vIFRyeSByZWFsbHkgaGFyZCB0byBtYWtlIHN1cmUgdGhpcyBpc24ndCBvcHRpbWl6ZWQgb3V0IGJ5IGFueXRoaW5nLlxyXG4gICAgLy8gV2UgbmVlZCBpdCBmb3IgaXRzIGRvY3VtZW50IHJlZmxvdyBzaWRlIGVmZmVjdC5cclxuICAgIGR1bW15ID0gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIHJldHVybiBlO1xyXG59XHJcbi8qKlxyXG4gKiBBIGhvb2sgdGhhdCBhZGRzICYgcmVtb3ZlcyBjbGFzcyBuYW1lcyBpbiBhIHdheSB0aGF0IGZhY2lsaXRhdGVzIHByb3BlciB0cmFuc2l0aW9ucy5cclxuICpcclxuICogVGhlIGZpcnN0IGFyZ3VtZW50IGNvbnRhaW5zIHRoZSBwcm9wcyByZWxhdGVkIGRpcmVjdGx5IHRvIHRoZSB0cmFuc2l0aW9uLlxyXG4gKlxyXG4gKiBUaGUgc2Vjb25kIGFyZ3VtZW50IGNvbnRhaW5zIGFueSBvdGhlciBwcm9wcyB5b3UgbWlnaHQgd2FudCBtZXJnZWQgaW50byB0aGUgZmluYWwgcHJvZHVjdCAodGhlc2UgYXJlIG5vdCByZWFkIG9yIG1hbmlwdWxhdGVkIG9yIGFueXRoaW5nIC0tIGl0J3MgcHVyZWx5IHNob3J0aGFuZCBhbmQgY2FuIGJlIG9taXR0ZWQgd2l0aCBge31gIGFuZCB0aGVuIHlvdXIgb3duIGB1c2VNZXJnZWRQcm9wc2ApLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNyZWF0ZVRyYW5zaXRpb25hYmxlUHJvcHMoeyBtZWFzdXJlLCBhbmltYXRlT25Nb3VudCwgY2xhc3NCYXNlLCBvblRyYW5zaXRpb25VcGRhdGUsIGV4aXRWaXNpYmlsaXR5LCBkdXJhdGlvbiwgb3BlbiwgcmVmIH0sIG90aGVyUHJvcHMpIHtcclxuICAgIGNsYXNzQmFzZSA/Pz0gXCJ0cmFuc2l0aW9uXCI7XHJcbiAgICBjb25zdCB7IGVsZW1lbnQsIHVzZVJlZkVsZW1lbnRQcm9wcyB9ID0gdXNlUmVmRWxlbWVudCgpO1xyXG4gICAgY29uc3QgW3BoYXNlLCBzZXRQaGFzZV0gPSB1c2VTdGF0ZShhbmltYXRlT25Nb3VudCA/IFwiaW5pdFwiIDogbnVsbCk7XHJcbiAgICBjb25zdCBbZGlyZWN0aW9uLCBzZXREaXJlY3Rpb25dID0gdXNlU3RhdGUob3BlbiA9PSBudWxsID8gbnVsbCA6IG9wZW4gPyBcImVudGVyXCIgOiBcImV4aXRcIik7XHJcbiAgICBjb25zdCBbc3VyZmFjZVdpZHRoLCBzZXRTdXJmYWNlV2lkdGhdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbc3VyZmFjZUhlaWdodCwgc2V0U3VyZmFjZUhlaWdodF0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IFtzdXJmYWNlWCwgc2V0U3VyZmFjZVhdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbc3VyZmFjZVksIHNldFN1cmZhY2VZXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgW3RyYW5zaXRpb25pbmdXaWR0aCwgc2V0VHJhbnNpdGlvbmluZ1dpZHRoXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgW3RyYW5zaXRpb25pbmdIZWlnaHQsIHNldFRyYW5zaXRpb25pbmdIZWlnaHRdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbdHJhbnNpdGlvbmluZ1gsIHNldFRyYW5zaXRpb25pbmdYXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgW3RyYW5zaXRpb25pbmdZLCBzZXRUcmFuc2l0aW9uaW5nWV0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IHsgZ2V0TG9naWNhbERpcmVjdGlvbiB9ID0gdXNlTG9naWNhbERpcmVjdGlvbihlbGVtZW50KTtcclxuICAgIGNvbnN0IGxvZ2ljYWxEaXJlY3Rpb24gPSBnZXRMb2dpY2FsRGlyZWN0aW9uKCk7XHJcbiAgICBjb25zdCBvblRyYW5zaXRpb25VcGRhdGVSZWYgPSB1c2VSZWYob25UcmFuc2l0aW9uVXBkYXRlKTtcclxuICAgIGNvbnN0IHBoYXNlUmVmID0gdXNlUmVmKHBoYXNlKTtcclxuICAgIGNvbnN0IGRpcmVjdGlvblJlZiA9IHVzZVJlZihkaXJlY3Rpb24pO1xyXG4gICAgY29uc3QgZHVyYXRpb25SZWYgPSB1c2VSZWYoZHVyYXRpb24pO1xyXG4gICAgY29uc3QgdG9vRWFybHlUaW1lb3V0UmVmID0gdXNlUmVmKG51bGwpO1xyXG4gICAgY29uc3QgdG9vRWFybHlWYWx1ZVJlZiA9IHVzZVJlZih0cnVlKTtcclxuICAgIGNvbnN0IHRvb0xhdGVUaW1lb3V0UmVmID0gdXNlUmVmKG51bGwpO1xyXG4gICAgY29uc3Qgb25UcmFuc2l0aW9uRW5kID0gdXNlQ2FsbGJhY2soKGUpID0+IHtcclxuICAgICAgICBpZiAoZS50YXJnZXQgPT09IGVsZW1lbnQgJiYgdG9vRWFybHlWYWx1ZVJlZi5jdXJyZW50ID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHNldFBoYXNlKFwiZmluYWxpemVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW2VsZW1lbnRdKTtcclxuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7IG9uVHJhbnNpdGlvblVwZGF0ZVJlZi5jdXJyZW50ID0gb25UcmFuc2l0aW9uVXBkYXRlOyB9LCBbb25UcmFuc2l0aW9uVXBkYXRlXSk7XHJcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4geyBwaGFzZVJlZi5jdXJyZW50ID0gcGhhc2U7IH0sIFtwaGFzZV0pO1xyXG4gICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHsgZGlyZWN0aW9uUmVmLmN1cnJlbnQgPSBkaXJlY3Rpb247IH0sIFtkaXJlY3Rpb25dKTtcclxuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7IGR1cmF0aW9uUmVmLmN1cnJlbnQgPSBkdXJhdGlvbjsgfSwgW2R1cmF0aW9uXSk7XHJcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmIChkaXJlY3Rpb24gJiYgcGhhc2UpXHJcbiAgICAgICAgICAgIG9uVHJhbnNpdGlvblVwZGF0ZVJlZi5jdXJyZW50Py4oZGlyZWN0aW9uLCBwaGFzZSk7XHJcbiAgICB9LCBbZGlyZWN0aW9uLCBwaGFzZV0pO1xyXG4gICAgLy8gRXZlcnkgdGltZSB0aGUgcGhhc2UgY2hhbmdlcyB0byBcInRyYW5zaXRpb25cIiwgYWRkIG91ciB0cmFuc2l0aW9uIHRpbWVvdXQgdGltZW91dHNcclxuICAgIC8vIHRvIGNhdGNoIGFueSB0aW1lIG9uVHJhbnNpdGlvbkVuZCBmYWlscyB0byByZXBvcnQgZm9yIHdoYXRldmVyIHJlYXNvbiB0byBiZSBzYWZlXHJcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmIChwaGFzZSA9PSBcInRyYW5zaXRpb25cIikge1xyXG4gICAgICAgICAgICBjb25zdCB0aW1lb3V0RHVyYXRpb24gPSBkdXJhdGlvblJlZi5jdXJyZW50ID8/IDEwMDA7XHJcbiAgICAgICAgICAgIHRvb0Vhcmx5VGltZW91dFJlZi5jdXJyZW50ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdG9vRWFybHlWYWx1ZVJlZi5jdXJyZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0b29FYXJseVRpbWVvdXRSZWYuY3VycmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgIH0sIDUwKTtcclxuICAgICAgICAgICAgdG9vTGF0ZVRpbWVvdXRSZWYuY3VycmVudCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRvb0Vhcmx5VmFsdWVSZWYuY3VycmVudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0b29MYXRlVGltZW91dFJlZi5jdXJyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHNldFBoYXNlKFwiZmluYWxpemVcIik7XHJcbiAgICAgICAgICAgIH0sIHRpbWVvdXREdXJhdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0b29FYXJseVRpbWVvdXRSZWYuY3VycmVudClcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0b29FYXJseVRpbWVvdXRSZWYuY3VycmVudCk7XHJcbiAgICAgICAgICAgIGlmICh0b29MYXRlVGltZW91dFJlZi5jdXJyZW50KVxyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRvb0xhdGVUaW1lb3V0UmVmLmN1cnJlbnQpO1xyXG4gICAgICAgIH07XHJcbiAgICB9LCBbcGhhc2VdKTtcclxuICAgIC8vIEFueSB0aW1lIFwib3BlblwiIGNoYW5nZXMsIHVwZGF0ZSBvdXIgZGlyZWN0aW9uIGFuZCBwaGFzZS5cclxuICAgIC8vIEluIGFkZGl0aW9uLCBtZWFzdXJlIHRoZSBzaXplIG9mIHRoZSBlbGVtZW50IGlmIHJlcXVlc3RlZC5cclxuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKGVsZW1lbnQgJiYgb3BlbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzUGhhc2UgPSBwaGFzZVJlZi5jdXJyZW50O1xyXG4gICAgICAgICAgICAvLyBTd2FwIG91ciBkaXJlY3Rpb25cclxuICAgICAgICAgICAgaWYgKG9wZW4pXHJcbiAgICAgICAgICAgICAgICBzZXREaXJlY3Rpb24oXCJlbnRlclwiKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgc2V0RGlyZWN0aW9uKFwiZXhpdFwiKTtcclxuICAgICAgICAgICAgc2V0UGhhc2UocHJldmlvdXNQaGFzZSA9PT0gbnVsbCA/IFwiZmluYWxpemVcIiA6IFwiaW5pdFwiKTtcclxuICAgICAgICAgICAgaWYgKG1lYXN1cmUpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjdXJyZW50U2l6ZVdpdGhUcmFuc2l0aW9uID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHgsIHksIHdpZHRoLCBoZWlnaHQgfSA9IGN1cnJlbnRTaXplV2l0aFRyYW5zaXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VHJhbnNpdGlvbmluZ1goeCArIFwicHhcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VHJhbnNpdGlvbmluZ1koeSArIFwicHhcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VHJhbnNpdGlvbmluZ1dpZHRoKHdpZHRoICsgXCJweFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUcmFuc2l0aW9uaW5nSGVpZ2h0KGhlaWdodCArIFwicHhcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNQaGFzZSA9PT0gXCJmaW5hbGl6ZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UncmUgZ29pbmcgdG8gYmUgbWVzc2luZyB3aXRoIHRoZSBhY3R1YWwgZWxlbWVudCdzIGNsYXNzLCBcclxuICAgICAgICAgICAgICAgICAgICAvLyBzbyB3ZSdsbCB3YW50IGFuIGVhc3kgd2F5IHRvIHJlc3RvcmUgaXQgbGF0ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFja3VwID0gZWxlbWVudC5jbGFzc05hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGAke2NsYXNzQmFzZX0tbWVhc3VyZWApO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShgJHtjbGFzc0Jhc2V9LWVudGVyYCwgYCR7Y2xhc3NCYXNlfS1lbnRlci1pbml0YCwgYCR7Y2xhc3NCYXNlfS1lbnRlci10cmFuc2l0aW9uYCwgYCR7Y2xhc3NCYXNlfS1lbnRlci1maW5hbGl6ZWAsIGAke2NsYXNzQmFzZX0tZXhpdGAsIGAke2NsYXNzQmFzZX0tZXhpdC1pbml0YCwgYCR7Y2xhc3NCYXNlfS1leGl0LXRyYW5zaXRpb25gLCBgJHtjbGFzc0Jhc2V9LWV4aXQtZmluYWxpemVgKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3JjZVJlZmxvdyhlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaXplV2l0aG91dFRyYW5zaXRpb24gPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgeCwgeSwgd2lkdGgsIGhlaWdodCB9ID0gc2l6ZVdpdGhvdXRUcmFuc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFN1cmZhY2VYKHggKyBcInB4XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFN1cmZhY2VZKHkgKyBcInB4XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFN1cmZhY2VXaWR0aCh3aWR0aCArIFwicHhcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0U3VyZmFjZUhlaWdodChoZWlnaHQgKyBcInB4XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gYmFja3VwO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcmNlUmVmbG93KGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW29wZW4sIGVsZW1lbnQsIG1lYXN1cmUsIGNsYXNzQmFzZV0pO1xyXG4gICAgLy8gQW55IHRpbWUgdGhlIHBoYXNlIGNoYW5nZXMgdG8gaW5pdCwgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBzY3JlZW4gaXMgcGFpbnRlZCxcclxuICAgIC8vIGNoYW5nZSB0aGUgcGhhc2UgdG8gXCJ0cmFuc2l0aW9uXCIgYW5kIHJlLXJlbmRlciAoKS5cclxuICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKGVsZW1lbnQgJiYgZGlyZWN0aW9uUmVmLmN1cnJlbnQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjbGFzc0Jhc2UgPz89IFwidHJhbnNpdGlvblwiO1xyXG4gICAgICAgICAgICBpZiAocGhhc2UgPT09IFwiaW5pdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBQcmVhY3QganVzdCBmaW5pc2hlZCByZW5kZXJpbmcgaW5pdFxyXG4gICAgICAgICAgICAgICAgLy8gTm93IHNldCBvdXIgdHJhbnNpdGlvbiBzdHlsZS5cclxuICAgICAgICAgICAgICAgIHNldFBoYXNlKFwidHJhbnNpdGlvblwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChtZWFzdXJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yY2VSZWZsb3coZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LCBbcGhhc2UsIG1lYXN1cmUsIGVsZW1lbnRdKTtcclxuICAgIGNvbnN0IGlubGluZURpcmVjdGlvbiA9IGxvZ2ljYWxEaXJlY3Rpb24/LmlubGluZURpcmVjdGlvbjtcclxuICAgIGNvbnN0IGJsb2NrRGlyZWN0aW9uID0gbG9naWNhbERpcmVjdGlvbj8uYmxvY2tEaXJlY3Rpb247XHJcbiAgICBjb25zdCB3cml0aW5nTW9kZUlzSG9yaXpvbnRhbCA9IChpbmxpbmVEaXJlY3Rpb24gPT0gXCJydGxcIiB8fCBpbmxpbmVEaXJlY3Rpb24gPT0gXCJsdHJcIik7XHJcbiAgICBjb25zdCBzdXJmYWNlSW5saW5lSW5zZXQgPSB3cml0aW5nTW9kZUlzSG9yaXpvbnRhbCA/IHN1cmZhY2VYIDogc3VyZmFjZVk7XHJcbiAgICBjb25zdCBzdXJmYWNlQmxvY2tJbnNldCA9IHdyaXRpbmdNb2RlSXNIb3Jpem9udGFsID8gc3VyZmFjZVkgOiBzdXJmYWNlWDtcclxuICAgIGNvbnN0IHN1cmZhY2VJbmxpbmVTaXplID0gd3JpdGluZ01vZGVJc0hvcml6b250YWwgPyBzdXJmYWNlV2lkdGggOiBzdXJmYWNlSGVpZ2h0O1xyXG4gICAgY29uc3Qgc3VyZmFjZUJsb2NrU2l6ZSA9IHdyaXRpbmdNb2RlSXNIb3Jpem9udGFsID8gc3VyZmFjZUhlaWdodCA6IHN1cmZhY2VXaWR0aDtcclxuICAgIGNvbnN0IHRyYW5zaXRpb25pbmdJbmxpbmVJbnNldCA9IHdyaXRpbmdNb2RlSXNIb3Jpem9udGFsID8gdHJhbnNpdGlvbmluZ1ggOiB0cmFuc2l0aW9uaW5nWTtcclxuICAgIGNvbnN0IHRyYW5zaXRpb25pbmdCbG9ja0luc2V0ID0gd3JpdGluZ01vZGVJc0hvcml6b250YWwgPyB0cmFuc2l0aW9uaW5nWSA6IHRyYW5zaXRpb25pbmdYO1xyXG4gICAgY29uc3QgdHJhbnNpdGlvbmluZ0lubGluZVNpemUgPSB3cml0aW5nTW9kZUlzSG9yaXpvbnRhbCA/IHRyYW5zaXRpb25pbmdXaWR0aCA6IHRyYW5zaXRpb25pbmdIZWlnaHQ7XHJcbiAgICBjb25zdCB0cmFuc2l0aW9uaW5nQmxvY2tTaXplID0gd3JpdGluZ01vZGVJc0hvcml6b250YWwgPyB0cmFuc2l0aW9uaW5nSGVpZ2h0IDogdHJhbnNpdGlvbmluZ1dpZHRoO1xyXG4gICAgbGV0IGFsbW9zdERvbmUgPSB1c2VSZWZFbGVtZW50UHJvcHMoe1xyXG4gICAgICAgIHJlZixcclxuICAgICAgICBzdHlsZTogcmVtb3ZlRW1wdHkoe1xyXG4gICAgICAgICAgICBbYC0tJHtjbGFzc0Jhc2V9LWR1cmF0aW9uYF06IGR1cmF0aW9uLFxyXG4gICAgICAgICAgICBbYC0tJHtjbGFzc0Jhc2V9LXN1cmZhY2UteGBdOiBzdXJmYWNlWCxcclxuICAgICAgICAgICAgW2AtLSR7Y2xhc3NCYXNlfS1zdXJmYWNlLXlgXTogc3VyZmFjZVksXHJcbiAgICAgICAgICAgIFtgLS0ke2NsYXNzQmFzZX0tc3VyZmFjZS13aWR0aGBdOiBzdXJmYWNlV2lkdGgsXHJcbiAgICAgICAgICAgIFtgLS0ke2NsYXNzQmFzZX0tc3VyZmFjZS1oZWlnaHRgXTogc3VyZmFjZUhlaWdodCxcclxuICAgICAgICAgICAgW2AtLSR7Y2xhc3NCYXNlfS1zdXJmYWNlLWlubGluZS1pbnNldGBdOiBzdXJmYWNlSW5saW5lSW5zZXQsXHJcbiAgICAgICAgICAgIFtgLS0ke2NsYXNzQmFzZX0tc3VyZmFjZS1ibG9jay1pbnNldGBdOiBzdXJmYWNlQmxvY2tJbnNldCxcclxuICAgICAgICAgICAgW2AtLSR7Y2xhc3NCYXNlfS1zdXJmYWNlLWlubGluZS1zaXplYF06IHN1cmZhY2VJbmxpbmVTaXplLFxyXG4gICAgICAgICAgICBbYC0tJHtjbGFzc0Jhc2V9LXN1cmZhY2UtYmxvY2stc2l6ZWBdOiBzdXJmYWNlQmxvY2tTaXplLFxyXG4gICAgICAgICAgICBbYC0tJHtjbGFzc0Jhc2V9LXRyYW5zaXRpb25pbmcteGBdOiB0cmFuc2l0aW9uaW5nWCxcclxuICAgICAgICAgICAgW2AtLSR7Y2xhc3NCYXNlfS10cmFuc2l0aW9uaW5nLXlgXTogdHJhbnNpdGlvbmluZ1ksXHJcbiAgICAgICAgICAgIFtgLS0ke2NsYXNzQmFzZX0tdHJhbnNpdGlvbmluZy13aWR0aGBdOiB0cmFuc2l0aW9uaW5nV2lkdGgsXHJcbiAgICAgICAgICAgIFtgLS0ke2NsYXNzQmFzZX0tdHJhbnNpdGlvbmluZy1oZWlnaHRgXTogdHJhbnNpdGlvbmluZ0hlaWdodCxcclxuICAgICAgICAgICAgW2AtLSR7Y2xhc3NCYXNlfS10cmFuc2l0aW9uaW5nLWlubGluZS1pbnNldGBdOiB0cmFuc2l0aW9uaW5nSW5saW5lSW5zZXQsXHJcbiAgICAgICAgICAgIFtgLS0ke2NsYXNzQmFzZX0tdHJhbnNpdGlvbmluZy1ibG9jay1pbnNldGBdOiB0cmFuc2l0aW9uaW5nQmxvY2tJbnNldCxcclxuICAgICAgICAgICAgW2AtLSR7Y2xhc3NCYXNlfS10cmFuc2l0aW9uaW5nLWlubGluZS1zaXplYF06IHRyYW5zaXRpb25pbmdJbmxpbmVTaXplLFxyXG4gICAgICAgICAgICBbYC0tJHtjbGFzc0Jhc2V9LXRyYW5zaXRpb25pbmctYmxvY2stc2l6ZWBdOiB0cmFuc2l0aW9uaW5nQmxvY2tTaXplXHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgb25UcmFuc2l0aW9uRW5kLFxyXG4gICAgICAgIC4uLih7IFwiYXJpYS1oaWRkZW5cIjogb3BlbiA/IHVuZGVmaW5lZCA6IFwidHJ1ZVwiIH0pLFxyXG4gICAgICAgIGNsYXNzTmFtZTogY2xzeChkaXJlY3Rpb24gJiYgZ2V0Q2xhc3NOYW1lKGNsYXNzQmFzZSwgZGlyZWN0aW9uKSwgZGlyZWN0aW9uICYmIHBoYXNlICYmIGdldENsYXNzTmFtZShjbGFzc0Jhc2UsIGRpcmVjdGlvbiwgcGhhc2UpLCBleGl0VmlzaWJpbGl0eSA9PSBcInJlbW92ZWRcIiAmJiBgJHtjbGFzc0Jhc2V9LXJlbW92ZWQtb24tZXhpdGAsIGV4aXRWaXNpYmlsaXR5ID09IFwidmlzaWJsZVwiICYmIGAke2NsYXNzQmFzZX0tdmlzaWJsZS1vbi1leGl0YCwgYCR7Y2xhc3NCYXNlfS1pbmxpbmUtZGlyZWN0aW9uLSR7aW5saW5lRGlyZWN0aW9uID8/IFwibHRyXCJ9YCwgYCR7Y2xhc3NCYXNlfS1ibG9jay1kaXJlY3Rpb24tJHtibG9ja0RpcmVjdGlvbiA/PyBcInR0YlwifWApLFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHMoKShhbG1vc3REb25lLCBvdGhlclByb3BzKTtcclxufVxyXG5mdW5jdGlvbiByZW1vdmVFbXB0eShvYmopIHtcclxuICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMob2JqKS5maWx0ZXIoKFtfLCB2XSkgPT4gdiAhPSBudWxsKSk7XHJcbn1cclxuLyoqXHJcbiAqIEEgY29tcG9uZW50IHRoYXQgKndyYXBzIGFuIEhUTUxFbGVtZW50IG9yIG90aGVyIHJlZi1mb3J3YXJkaW5nIGNvbXBvbmVudCogYW5kIGFsbG93cyBpdCB0byB1c2UgQ1NTIHRvIHRyYW5zaXRpb24gaW4vb3V0LlxyXG4gKiBDb21iaW5lcyB0aGUgcHJvcHMgcGFzc2VkIHRvIGl0LCB0aGUgcHJvcHMgaXRzIGNoaWxkIGhhcywgYW5kIHRoZSBwcm9wcyBuZWVkZWQgZm9yIHRoZSBDU1MgdHJhbnNpdGlvbiwgYW5kIHBhc3NlcyB0aGVtXHJcbiAqIGFsbCB0byB0aGUgY2hpbGQgZWxlbWVudCB5b3UgcHJvdmlkZS5cclxuICpcclxuICogVGhpcyBpcyB0aGUgbW9zdCBnZW5lcmFsIGNvbXBvbmVudCB0aGF0IG90aGVycyB1c2UgYXMgYSBiYXNlLiBCeSBkZWZhdWx0LCB0aGlzIGNvbXBvbmVudCBieSBpdHNlbGYgZG9lc24ndCBhY3R1YWxseSBhZGQgYW55IENTUyBjbGFzc2VzIHRoYXQgYW5pbWF0ZSBhbnl0aGluZyAobGlrZSBvcGFjaXR5LCBmb3IgZXhhbXBsZSkuXHJcbiAqIEl0IGFkZHMgY2xhc3NlcyBsaWtlIGB0cmFuc2l0aW9uLWVudGVyLWZpbmFsaXplYCwgYnV0IHlvdSBuZWVkIHRvIHByb3ZpZGUgdGhlIGFkZGl0aW9uYWwgZS5nLiBgZmFkZWAgY2xhc3MgdGhhdCByZWFjdHMgdG8gaXQuXHJcbiAqXHJcbiAqIFVzZSB0aGlzIGlmIHRoZSBvdGhlciwgbW9yZSBzcGVjaWFsaXplZCBUcmFuc2l0aW9uIGNvbXBvbmVudHMgZG9uJ3QgZml0IHlvdXIgbmVlZHMuXHJcbiAqXHJcbiAqIEBleGFtcGxlIGA8VHJhbnNpdGlvbmFibGUgb3Blbj17b3Blbn0gey4uLnVzZUNyZWF0ZUZhZGVQcm9wcyguLi4pfT48ZGl2PntjaGlsZHJlbn08L2Rpdj48L1RyYW5zaXRpb25hYmxlPmBcclxuICogQGV4YW1wbGUgYDxUcmFuc2l0aW9uYWJsZSBvcGVuPXtvcGVufT48ZGl2IHsuLi51c2VDcmVhdGVGYWRlUHJvcHMoLi4uKX0+e2NoaWxkcmVufTwvZGl2PjwvVHJhbnNpdGlvbmFibGU+YFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFRyYW5zaXRpb25hYmxlID0gZm9yd2FyZEVsZW1lbnRSZWYoZnVuY3Rpb24gVHJhbnNpdGlvbih7IGNoaWxkcmVuOiBjaGlsZCwgZHVyYXRpb24sIGNsYXNzQmFzZSwgbWVhc3VyZSwgZXhpdFZpc2liaWxpdHksIG9wZW4sIG9uVHJhbnNpdGlvblVwZGF0ZSwgYW5pbWF0ZU9uTW91bnQsIC4uLnByb3BzIH0sIHIpIHtcclxuICAgIGlmICghY2hpbGRJc1ZOb2RlKGNoaWxkKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkEgVHJhbnNpdGlvbmFibGUgY29tcG9uZW50IG11c3QgaGF2ZSBleGFjdGx5IG9uZSBjb21wb25lbnQgY2hpbGQgKGUuZy4gYSA8ZGl2PiwgYnV0IG5vdCBcXFwiYSBzdHJpbmdcXFwiKS5cIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCB0cmFuc2l0aW9uUHJvcHMgPSB1c2VDcmVhdGVUcmFuc2l0aW9uYWJsZVByb3BzKHsgY2xhc3NCYXNlLCBkdXJhdGlvbiwgbWVhc3VyZSwgb3BlbiwgYW5pbWF0ZU9uTW91bnQsIG9uVHJhbnNpdGlvblVwZGF0ZSwgcmVmOiByLCBleGl0VmlzaWJpbGl0eSB9LCBwcm9wcyk7XHJcbiAgICBjb25zdCBtZXJnZWRXaXRoQ2hpbGRyZW4gPSB1c2VNZXJnZWRQcm9wcygpKHRyYW5zaXRpb25Qcm9wcywgeyAuLi5jaGlsZC5wcm9wcywgcmVmOiBjaGlsZC5yZWYgfSk7XHJcbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkLCBtZXJnZWRXaXRoQ2hpbGRyZW4pO1xyXG59KTtcclxuZnVuY3Rpb24gY2hpbGRJc1ZOb2RlKGNoaWxkKSB7XHJcbiAgICBpZiAoIWNoaWxkKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgY2hpbGQgIT0gXCJvYmplY3RcIilcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICByZXR1cm4gKFwicHJvcHNcIiBpbiBjaGlsZCk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNpdGlvbmFibGUuanMubWFwIiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgZm9yd2FyZEVsZW1lbnRSZWYgfSBmcm9tIFwiLi9mb3J3YXJkLWVsZW1lbnQtcmVmXCI7XHJcbmltcG9ydCB7IHVzZU1lcmdlZFByb3BzIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLW1lcmdlZC1wcm9wc1wiO1xyXG5pbXBvcnQgeyBUcmFuc2l0aW9uYWJsZSB9IGZyb20gXCIuL3RyYW5zaXRpb25hYmxlXCI7XHJcbmltcG9ydCB7IGRlZmF1bHQgYXMgY2xzeCB9IGZyb20gXCJjbHN4XCI7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgc2V0IG9mIHByb3BzIHRoYXQgaW1wbGVtZW50IGEgQ2xpcCB0cmFuc2l0aW9uLiBMaWtlIGFsbCBgdXNlQ3JlYXRlKlByb3BzYCBob29rcywgbXVzdCBiZSB1c2VkIGluIHRhbWRlbSB3aXRoIGEgYFRyYW5zaXRpb25hYmxlYCBjb21wb25lbnQgKG9yIGB1c2VDcmVhdGVUcmFuc2l0aW9uYWJsZVByb3BzYCkuXHJcbiAqIEJlIHN1cmUgdG8gbWVyZ2UgdGhlc2UgcmV0dXJuZWQgcHJvcHMgd2l0aCB3aGF0ZXZlciB0aGUgdXNlciBwYXNzZWQgaW4uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlQ3JlYXRlQ2xpcFByb3BzKHsgY2xhc3NCYXNlLCBjbGlwT3JpZ2luLCBjbGlwT3JpZ2luSW5saW5lLCBjbGlwT3JpZ2luQmxvY2ssIGNsaXBNaW4sIGNsaXBNaW5JbmxpbmUsIGNsaXBNaW5CbG9jayB9LCBvdGhlclByb3BzKSB7XHJcbiAgICBjbGFzc0Jhc2UgPz89IFwidHJhbnNpdGlvblwiO1xyXG4gICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKCkoe1xyXG4gICAgICAgIGNsYXNzTmFtZTogY2xzeChgJHtjbGFzc0Jhc2V9LWNsaXBgKSxcclxuICAgICAgICBjbGFzc0Jhc2UsXHJcbiAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgW2AtLSR7Y2xhc3NCYXNlfS1jbGlwLW9yaWdpbi1pbmxpbmVgXTogKGNsaXBPcmlnaW5JbmxpbmUgPz8gY2xpcE9yaWdpbiA/PyAwLjUpLFxyXG4gICAgICAgICAgICBbYC0tJHtjbGFzc0Jhc2V9LWNsaXAtb3JpZ2luLWJsb2NrYF06IChjbGlwT3JpZ2luQmxvY2sgPz8gY2xpcE9yaWdpbiA/PyAwKSxcclxuICAgICAgICAgICAgW2AtLSR7Y2xhc3NCYXNlfS1jbGlwLW1pbi1pbmxpbmVgXTogKGNsaXBNaW5JbmxpbmUgPz8gY2xpcE1pbiA/PyAxKSxcclxuICAgICAgICAgICAgW2AtLSR7Y2xhc3NCYXNlfS1jbGlwLW1pbi1ibG9ja2BdOiAoY2xpcE1pbkJsb2NrID8/IGNsaXBNaW4gPz8gMCksXHJcbiAgICAgICAgfSxcclxuICAgIH0sIG90aGVyUHJvcHMpO1xyXG59XHJcbjtcclxuZXhwb3J0IGNvbnN0IENsaXAgPSBmb3J3YXJkRWxlbWVudFJlZihmdW5jdGlvbiBDbGlwKHsgY2xhc3NCYXNlLCBjbGlwT3JpZ2luLCBjbGlwT3JpZ2luSW5saW5lLCBjbGlwT3JpZ2luQmxvY2ssIGNsaXBNaW4sIGNsaXBNaW5JbmxpbmUsIGNsaXBNaW5CbG9jaywgb3BlbiwgLi4ucmVzdCB9LCByZWYpIHtcclxuICAgIHJldHVybiBoKFRyYW5zaXRpb25hYmxlLCB7IG9wZW46IG9wZW4sIC4uLnVzZUNyZWF0ZUNsaXBQcm9wcyh7IGNsYXNzQmFzZSwgY2xpcE9yaWdpbiwgY2xpcE9yaWdpbklubGluZSwgY2xpcE9yaWdpbkJsb2NrLCBjbGlwTWluLCBjbGlwTWluSW5saW5lLCBjbGlwTWluQmxvY2sgfSwgeyAuLi5yZXN0LCByZWYgfSkgfSk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGlwLmpzLm1hcCIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IGZvcndhcmRFbGVtZW50UmVmIH0gZnJvbSBcIi4vZm9yd2FyZC1lbGVtZW50LXJlZlwiO1xyXG5pbXBvcnQgeyB1c2VNZXJnZWRQcm9wcyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1tZXJnZWQtcHJvcHNcIjtcclxuaW1wb3J0IHsgVHJhbnNpdGlvbmFibGUgfSBmcm9tIFwiLi90cmFuc2l0aW9uYWJsZVwiO1xyXG4vKipcclxuICogQ3JlYXRlcyBhIHNldCBvZiBwcm9wcyB0aGF0IGltcGxlbWVudCBhIEZhZGUgdHJhbnNpdGlvbi4gTGlrZSBhbGwgYHVzZUNyZWF0ZSpQcm9wc2AgaG9va3MsIG11c3QgYmUgdXNlZCBpbiB0YW1kZW0gd2l0aCBhIGBUcmFuc2l0aW9uYWJsZWAgY29tcG9uZW50IChvciBgdXNlQ3JlYXRlVHJhbnNpdGlvbmFibGVQcm9wc2ApLlxyXG4gKiBCZSBzdXJlIHRvIG1lcmdlIHRoZXNlIHJldHVybmVkIHByb3BzIHdpdGggd2hhdGV2ZXIgdGhlIHVzZXIgcGFzc2VkIGluLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUNyZWF0ZUZhZGVQcm9wcyh7IGNsYXNzQmFzZSwgZmFkZU1pbiwgZmFkZU1heCB9LCBvdGhlclByb3BzKSB7XHJcbiAgICBjbGFzc0Jhc2UgPz89IFwidHJhbnNpdGlvblwiO1xyXG4gICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKCkoe1xyXG4gICAgICAgIGNsYXNzTmFtZTogYCR7Y2xhc3NCYXNlfS1mYWRlYCxcclxuICAgICAgICBjbGFzc0Jhc2UsXHJcbiAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgW2AtLSR7Y2xhc3NCYXNlfS1mYWRlLW1pbmBdOiAoZmFkZU1pbiA/PyAwKSxcclxuICAgICAgICAgICAgW2AtLSR7Y2xhc3NCYXNlfS1mYWRlLW1heGBdOiAoZmFkZU1heCA/PyAxKSxcclxuICAgICAgICB9XHJcbiAgICB9LCBvdGhlclByb3BzKTtcclxufVxyXG47XHJcbi8qKlxyXG4gKiBXcmFwcyBhIGRpdiAoZXRjLikgYW5kIGFsbG93cyBpdCB0byB0cmFuc2l0aW9uIGluL291dCBzbW9vdGhseSB3aXRoIGEgRmFkZSBlZmZlY3QuXHJcbiAqXHJcbiAqIE5vdGUgdGhhdCB3aGlsZSBpdCBpcyBhYnNvbHV0ZWx5IHBvc3NpYmxlIHRvIHdyYXAgYW5vdGhlciB0cmFuc2l0aW9uIHdpdGggYDxGYWRlPmAsXHJcbiAqIHRoZXJlIHdpbGwgYmUgc29tZSBkdXBsaWNhdGUgY29kZSBydW4gYXMgdHdvIGA8VHJhbnNpdGlvbmFibGU+YCBjb21wb25lbnRzIGVuZCB1cCBvcGVyYXRpbmcgb24gdGhlIHNhbWUgZWxlbWVudC5cclxuICogSXQncyBnZW5lcmFsbHkgcmVjb21tZW5kZWQgdG8gZWl0aGVyIHVzZSB0aGUgY29tcG9uZW50cyB0aGF0IGluY2x1ZGUgYSBjb21iaW5lZCBmYWRlIGVmZmVjdCxcclxuICogb3IganVzdCBkaXJlY3RseSBhIGA8VHJhbnNpdGlvbmFibGU+YCBvbiB5b3VyIG93bi5cclxuICpcclxuICogQHNlZSBgVHJhbnNpdGlvbmFibGVgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRmFkZSA9IGZvcndhcmRFbGVtZW50UmVmKGZ1bmN0aW9uIEZhZGUoeyBjbGFzc0Jhc2UsIGZhZGVNaW4sIGZhZGVNYXgsIG9wZW4sIC4uLnJlc3QgfSwgcmVmKSB7XHJcbiAgICByZXR1cm4gaChUcmFuc2l0aW9uYWJsZSwgeyBvcGVuOiBvcGVuLCAuLi51c2VDcmVhdGVGYWRlUHJvcHMoeyBjbGFzc0Jhc2UsIGZhZGVNaW4sIGZhZGVNYXggfSwgeyAuLi5yZXN0LCByZWYgfSkgfSk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1mYWRlLmpzLm1hcCIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IENsaXAgfSBmcm9tIFwiLi9jbGlwXCI7XHJcbmltcG9ydCB7IHVzZUNyZWF0ZUZhZGVQcm9wcyB9IGZyb20gXCIuL2ZhZGVcIjtcclxuaW1wb3J0IHsgZm9yd2FyZEVsZW1lbnRSZWYgfSBmcm9tIFwiLi9mb3J3YXJkLWVsZW1lbnQtcmVmXCI7XHJcbjtcclxuZXhwb3J0IGNvbnN0IENsaXBGYWRlID0gZm9yd2FyZEVsZW1lbnRSZWYoZnVuY3Rpb24gQ2xpcEZhZGUoeyBjbGFzc0Jhc2UsIGZhZGVNaW4sIGZhZGVNYXgsIG9wZW4sIC4uLnJlc3QgfSwgcmVmKSB7XHJcbiAgICByZXR1cm4gaChDbGlwLCB7IG9wZW46IG9wZW4sIC4uLnVzZUNyZWF0ZUZhZGVQcm9wcyh7IGNsYXNzQmFzZSwgZmFkZU1pbiwgZmFkZU1heCB9LCB7IC4uLnJlc3QsIHJlZiB9KSB9KTtcclxufSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNsaXAtZmFkZS5qcy5tYXAiLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyBmb3J3YXJkRWxlbWVudFJlZiB9IGZyb20gXCIuL2ZvcndhcmQtZWxlbWVudC1yZWZcIjtcclxuaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtbWVyZ2VkLXByb3BzXCI7XHJcbmltcG9ydCB7IFRyYW5zaXRpb25hYmxlIH0gZnJvbSBcIi4vdHJhbnNpdGlvbmFibGVcIjtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBzZXQgb2YgcHJvcHMgdGhhdCBpbXBsZW1lbnQgYSBab29tIHRyYW5zaXRpb24uIExpa2UgYWxsIGB1c2VDcmVhdGUqUHJvcHNgIGhvb2tzLCBtdXN0IGJlIHVzZWQgaW4gdGFtZGVtIHdpdGggYSBgVHJhbnNpdGlvbmFibGVgIGNvbXBvbmVudCAob3IgYHVzZUNyZWF0ZVRyYW5zaXRpb25hYmxlUHJvcHNgKS5cclxuICogQmUgc3VyZSB0byBtZXJnZSB0aGVzZSByZXR1cm5lZCBwcm9wcyB3aXRoIHdoYXRldmVyIHRoZSB1c2VyIHBhc3NlZCBpbi5cclxuICpcclxuICogSU1QT1JUQU5UOiBJZiB1c2VkIG91dHNpZGUgb2YgYSBgPENvbGxhcHNlIC8+YCwgeW91IG11c3QgaW5jbHVkZSB0aGUgYG1lYXN1cmVgIHByb3Agb24gdGhlIGA8VHJhbnNpdGlvbmFibGU+YCB0aGF0IHlvdSB1c2UuXHJcbiAqXHJcbiAqIEBleGFtcGxlIDxUcmFuc2l0aW9uYWJsZSBtZWFzdXJlIHsuLi51c2VDcmVhdGVDb2xsYXBzZVByb3BzKC4uLil9IC8+XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlQ3JlYXRlQ29sbGFwc2VQcm9wcyh7IGNsYXNzQmFzZSwgbWluQmxvY2tTaXplIH0sIG90aGVyUHJvcHMpIHtcclxuICAgIGNsYXNzQmFzZSA/Pz0gXCJ0cmFuc2l0aW9uXCI7XHJcbiAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHMoKSh7XHJcbiAgICAgICAgY2xhc3NCYXNlLFxyXG4gICAgICAgIG1lYXN1cmU6IHRydWUsXHJcbiAgICAgICAgY2xhc3NOYW1lOiBgJHtjbGFzc0Jhc2V9LWNvbGxhcHNlYCxcclxuICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICBbYC0tJHtjbGFzc0Jhc2V9LWNvbGxhcHNlLW1pbi1ibG9ja2BdOiBtaW5CbG9ja1NpemUgPz8gMFxyXG4gICAgICAgIH1cclxuICAgIH0sIG90aGVyUHJvcHMpO1xyXG59XHJcbjtcclxuLyoqXHJcbiAqIFdyYXBzIGEgZGl2IChldGMuKSBhbmQgYWxsb3dzIGl0IHRvIHRyYW5zaXRpb24gaW4vb3V0IHNtb290aGx5IHdpdGggYSBDb2xsYXBzZSBlZmZlY3QuXHJcbiAqXHJcbiAqICpJbXBvcnRhbnQqOiBUaGlzIGNvbXBvbmVudCBpcyAqbm90KiBlZmZpY2llbnQgZm9yIHRoZSBicm93c2VyIHRvIGFuaW1hdGUhXHJcbiAqIE1ha2Ugc3VyZSB5b3UgZG8gdGVzdGluZyBvbiBsb3dlciBwb3dlciBkZXZpY2VzLCBvciBwcmVmZXIgYSBsaWdodGVyXHJcbiAqIGFsdGVybmF0aXZlLCBsaWtlIGA8Q2xpcD5gLlxyXG4gKlxyXG4gKiBAc2VlIGBUcmFuc2l0aW9uYWJsZWBcclxuICovXHJcbmV4cG9ydCBjb25zdCBDb2xsYXBzZSA9IGZvcndhcmRFbGVtZW50UmVmKGZ1bmN0aW9uIENvbGxhcHNlKHsgY2xhc3NCYXNlLCBvcGVuLCBtaW5CbG9ja1NpemUsIC4uLnJlc3QgfSwgcmVmKSB7XHJcbiAgICByZXR1cm4gaChUcmFuc2l0aW9uYWJsZSwgeyBvcGVuOiBvcGVuLCAuLi51c2VDcmVhdGVDb2xsYXBzZVByb3BzKHsgY2xhc3NCYXNlLCBtaW5CbG9ja1NpemUgfSwgeyAuLi5yZXN0LCByZWYgfSkgfSk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xsYXBzZS5qcy5tYXAiLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyBDb2xsYXBzZSB9IGZyb20gXCIuL2NvbGxhcHNlXCI7XHJcbmltcG9ydCB7IHVzZUNyZWF0ZUZhZGVQcm9wcyB9IGZyb20gXCIuL2ZhZGVcIjtcclxuaW1wb3J0IHsgZm9yd2FyZEVsZW1lbnRSZWYgfSBmcm9tIFwiLi9mb3J3YXJkLWVsZW1lbnQtcmVmXCI7XHJcbjtcclxuLyoqXHJcbiAqIFdyYXBzIGEgZGl2IChldGMuKSBhbmQgYWxsb3dzIGl0IHRvIHRyYW5zaXRpb24gaW4vb3V0IHNtb290aGx5IHdpdGggYm90aCBDb2xsYXBzZSBhbmQgRmFkZSBlZmZlY3RzLlxyXG4gKlxyXG4gKiBAc2VlIGBUcmFuc2l0aW9uYWJsZWAgYENvbGxhcHNlYCBgRmFkZWBcclxuICovXHJcbmV4cG9ydCBjb25zdCBDb2xsYXBzZUZhZGUgPSBmb3J3YXJkRWxlbWVudFJlZihmdW5jdGlvbiBDb2xsYXBzZUZhZGUoeyBjbGFzc0Jhc2UsIGZhZGVNaW4sIGZhZGVNYXgsIG9wZW4sIC4uLnJlc3QgfSwgcmVmKSB7XHJcbiAgICByZXR1cm4gaChDb2xsYXBzZSwgeyBvcGVuOiBvcGVuLCAuLi51c2VDcmVhdGVGYWRlUHJvcHMoeyBjbGFzc0Jhc2UsIGZhZGVNaW4sIGZhZGVNYXggfSwgeyAuLi5yZXN0LCByZWYgfSkgfSk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xsYXBzZS1mYWRlLmpzLm1hcCIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZU1lcmdlZFByb3BzIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLW1lcmdlZC1wcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgZm9yd2FyZEVsZW1lbnRSZWYgfSBmcm9tIFwiLi9mb3J3YXJkLWVsZW1lbnQtcmVmXCI7XHJcbmltcG9ydCB7IFRyYW5zaXRpb25hYmxlIH0gZnJvbSBcIi4vdHJhbnNpdGlvbmFibGVcIjtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBzZXQgb2YgcHJvcHMgdGhhdCBpbXBsZW1lbnQgYSBTbGlkZSB0cmFuc2l0aW9uLiBMaWtlIGFsbCBgdXNlQ3JlYXRlKlByb3BzYCBob29rcywgbXVzdCBiZSB1c2VkIGluIHRhbWRlbSB3aXRoIGEgYFRyYW5zaXRpb25hYmxlYCBjb21wb25lbnQgKG9yIGB1c2VDcmVhdGVUcmFuc2l0aW9uYWJsZVByb3BzYCkuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlQ3JlYXRlU2xpZGVQcm9wcyh7IGNsYXNzQmFzZSwgc2xpZGVUYXJnZXRJbmxpbmUsIHNsaWRlVGFyZ2V0QmxvY2sgfSwgb3RoZXJQcm9wcykge1xyXG4gICAgY2xhc3NCYXNlID8/PSBcInRyYW5zaXRpb25cIjtcclxuICAgIGNvbnN0IGxhc3RWYWxpZFRhcmdldElubGluZSA9IHVzZVJlZihzbGlkZVRhcmdldElubGluZSA/PyAxKTtcclxuICAgIGNvbnN0IGxhc3RWYWxpZFRhcmdldEJsb2NrID0gdXNlUmVmKHNsaWRlVGFyZ2V0QmxvY2sgPz8gMCk7XHJcbiAgICB1c2VFZmZlY3QoKCkgPT4geyBpZiAoc2xpZGVUYXJnZXRJbmxpbmUpXHJcbiAgICAgICAgbGFzdFZhbGlkVGFyZ2V0SW5saW5lLmN1cnJlbnQgPSBzbGlkZVRhcmdldElubGluZTsgfSwgW3NsaWRlVGFyZ2V0SW5saW5lXSk7XHJcbiAgICB1c2VFZmZlY3QoKCkgPT4geyBpZiAoc2xpZGVUYXJnZXRCbG9jaylcclxuICAgICAgICBsYXN0VmFsaWRUYXJnZXRCbG9jay5jdXJyZW50ID0gc2xpZGVUYXJnZXRCbG9jazsgfSwgW3NsaWRlVGFyZ2V0QmxvY2tdKTtcclxuICAgIGlmIChzbGlkZVRhcmdldElubGluZSA9PSAwKVxyXG4gICAgICAgIHNsaWRlVGFyZ2V0SW5saW5lID0gbGFzdFZhbGlkVGFyZ2V0SW5saW5lLmN1cnJlbnQ7XHJcbiAgICBpZiAoc2xpZGVUYXJnZXRCbG9jayA9PSAwKVxyXG4gICAgICAgIHNsaWRlVGFyZ2V0QmxvY2sgPSBsYXN0VmFsaWRUYXJnZXRCbG9jay5jdXJyZW50O1xyXG4gICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKCkoe1xyXG4gICAgICAgIGNsYXNzTmFtZTogYCR7Y2xhc3NCYXNlfS1zbGlkZWAsXHJcbiAgICAgICAgY2xhc3NCYXNlLFxyXG4gICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgIFtgLS0ke2NsYXNzQmFzZX0tc2xpZGUtdGFyZ2V0LWlubGluZWBdOiBgJHsoc2xpZGVUYXJnZXRJbmxpbmUgPz8gMCl9YCxcclxuICAgICAgICAgICAgW2AtLSR7Y2xhc3NCYXNlfS1zbGlkZS10YXJnZXQtYmxvY2tgXTogYCR7KHNsaWRlVGFyZ2V0QmxvY2sgPz8gMCl9YFxyXG4gICAgICAgIH1cclxuICAgIH0sIG90aGVyUHJvcHMpO1xyXG59XHJcbjtcclxuLyoqXHJcbiAqIFdyYXBzIGEgZGl2IChldGMuKSBhbmQgYWxsb3dzIGl0IHRvIHRyYW5zaXRpb24gaW4vb3V0IHNtb290aGx5IHdpdGggYSBTbGlkZSBlZmZlY3QuXHJcbiAqXHJcbiAqIFByb3ZpZGUgdGhlIGRpcmVjdGlvbiB0aGUgZWxlbWVudCB3aWxsIHRyYXZlbCBpbiB3aXRoIGBzbGlkZUlubGluZWAgYW5kIGBzbGlkZUJsb2NrYCxcclxuICogd2l0aCBgMWAgYmVpbmcgYDEwMCVgIG9mIHRoZSBlbGVtZW50J3Mgd2lkdGggb3IgaGVpZ2h0LlxyXG4gKlxyXG4gKiBBIHZhbHVlIG9mIGAwYCBpcyBoYW5kbGVkIHNwZWNpYWxseSwgZWZmZWN0aXZlbHkgbWVhbmluZyBcInVzZSB0aGUgbGFzdCBub24temVybyB2YWx1ZVwiLFxyXG4gKiB3aGljaCBhbGxvd3MgZm9yIGNvbnZlbmllbnQgc2V0dXBzIGluc2lkZSBvZiBhIGBTd2FwQ29udGFpbmVyYFxyXG4gKiAoYHNsaWRlSW5saW5lPXtpbmRleCAtIHNlbGVjdGVkSW5kZXh9YCBvciBzaW1pbGFyLilcclxuICpcclxuICogQHNlZSBgVHJhbnNpdGlvbmFibGVgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgU2xpZGUgPSBmb3J3YXJkRWxlbWVudFJlZihmdW5jdGlvbiBTbGlkZSh7IGNsYXNzQmFzZSwgc2xpZGVUYXJnZXRJbmxpbmUsIHNsaWRlVGFyZ2V0QmxvY2ssIG9wZW4sIC4uLnJlc3QgfSwgcmVmKSB7XHJcbiAgICByZXR1cm4gaChUcmFuc2l0aW9uYWJsZSwgeyBvcGVuOiBvcGVuLCAuLi51c2VDcmVhdGVTbGlkZVByb3BzKHsgY2xhc3NCYXNlLCBzbGlkZVRhcmdldElubGluZSwgc2xpZGVUYXJnZXRCbG9jayB9LCB7IC4uLnJlc3QsIHJlZiB9KSB9KTtcclxufSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNsaWRlLmpzLm1hcCIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZUNyZWF0ZUZhZGVQcm9wcyB9IGZyb20gXCIuL2ZhZGVcIjtcclxuaW1wb3J0IHsgZm9yd2FyZEVsZW1lbnRSZWYgfSBmcm9tIFwiLi9mb3J3YXJkLWVsZW1lbnQtcmVmXCI7XHJcbmltcG9ydCB7IFNsaWRlIH0gZnJvbSBcIi4vc2xpZGVcIjtcclxuO1xyXG4vKipcclxuICogV3JhcHMgYSBkaXYgKGV0Yy4pIGFuZCBhbGxvd3MgaXQgdG8gdHJhbnNpdGlvbiBpbi9vdXQgc21vb3RobHkgd2l0aCBib3RoIFNsaWRlIGFuZCBGYWRlIGVmZmVjdHMuXHJcbiAqXHJcbiAqIGBzbGlkZUlubGluZT17KGluZGV4IC0gc2VsZWN0ZWRJbmRleCkgLyAxMH1gIHdvdWxkIG1ha2UgdGhlIGVsZW1lbnQgbG9vayBsaWtlIGl0IGZhZGVzIG91dCBiZWZvcmUgaXQgdHJhdmVscyB0byBpdHMgdGFyZ2V0IGRlc3RpbmF0aW9uLlxyXG4gKlxyXG4gKiBAc2VlIGBUcmFuc2l0aW9uYWJsZWAgYFpvb21gXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgU2xpZGVGYWRlID0gZm9yd2FyZEVsZW1lbnRSZWYoZnVuY3Rpb24gU2xpZGVGYWRlKHsgY2xhc3NCYXNlLCBmYWRlTWluLCBmYWRlTWF4LCBvcGVuLCAuLi5yZXN0IH0sIHJlZikge1xyXG4gICAgcmV0dXJuIGgoU2xpZGUsIHsgb3Blbjogb3BlbiwgLi4udXNlQ3JlYXRlRmFkZVByb3BzKHsgY2xhc3NCYXNlLCBmYWRlTWluLCBmYWRlTWF4IH0sIHsgLi4ucmVzdCwgcmVmIH0pIH0pO1xyXG59KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2xpZGUtZmFkZS5qcy5tYXAiLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VNZXJnZWRQcm9wcyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1tZXJnZWQtcHJvcHNcIjtcclxuaW1wb3J0IHsgZm9yd2FyZEVsZW1lbnRSZWYgfSBmcm9tIFwiLi9mb3J3YXJkLWVsZW1lbnQtcmVmXCI7XHJcbmltcG9ydCB7IFRyYW5zaXRpb25hYmxlIH0gZnJvbSBcIi4vdHJhbnNpdGlvbmFibGVcIjtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBzZXQgb2YgcHJvcHMgdGhhdCBpbXBsZW1lbnQgYSBab29tIHRyYW5zaXRpb24uIExpa2UgYWxsIGB1c2VDcmVhdGUqUHJvcHNgIGhvb2tzLCBtdXN0IGJlIHVzZWQgaW4gdGFtZGVtIHdpdGggYSBgVHJhbnNpdGlvbmFibGVgIGNvbXBvbmVudCAob3IgYHVzZUNyZWF0ZVRyYW5zaXRpb25hYmxlUHJvcHNgKS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VDcmVhdGVab29tUHJvcHMoeyBjbGFzc0Jhc2UsIHpvb21PcmlnaW4sIHpvb21PcmlnaW5JbmxpbmUsIHpvb21PcmlnaW5CbG9jaywgem9vbU1pbiwgem9vbU1pbklubGluZSwgem9vbU1pbkJsb2NrIH0sIG90aGVyUHJvcHMpIHtcclxuICAgIGNsYXNzQmFzZSA/Pz0gXCJ0cmFuc2l0aW9uXCI7XHJcbiAgICByZXR1cm4gKHVzZU1lcmdlZFByb3BzKCkoe1xyXG4gICAgICAgIGNsYXNzTmFtZTogYCR7Y2xhc3NCYXNlfS16b29tYCxcclxuICAgICAgICBjbGFzc0Jhc2UsXHJcbiAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgW2AtLSR7Y2xhc3NCYXNlfS16b29tLW9yaWdpbi1pbmxpbmVgXTogYCR7KHpvb21PcmlnaW5JbmxpbmUgPz8gem9vbU9yaWdpbiA/PyAwLjUpfWAsXHJcbiAgICAgICAgICAgIFtgLS0ke2NsYXNzQmFzZX0tem9vbS1vcmlnaW4tYmxvY2tgXTogYCR7KHpvb21PcmlnaW5CbG9jayA/PyB6b29tT3JpZ2luID8/IDAuNSl9YCxcclxuICAgICAgICAgICAgW2AtLSR7Y2xhc3NCYXNlfS16b29tLW1pbi1pbmxpbmVgXTogYCR7KHpvb21NaW5JbmxpbmUgPz8gem9vbU1pbiA/PyAwKX1gLFxyXG4gICAgICAgICAgICBbYC0tJHtjbGFzc0Jhc2V9LXpvb20tbWluLWJsb2NrYF06IGAkeyh6b29tTWluQmxvY2sgPz8gem9vbU1pbiA/PyAwKX1gLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LCBvdGhlclByb3BzKSk7XHJcbn1cclxuO1xyXG4vKipcclxuICogV3JhcHMgYSBkaXYgKGV0Yy4pIGFuZCBhbGxvd3MgaXQgdG8gdHJhbnNpdGlvbiBpbi9vdXQgc21vb3RobHkgd2l0aCBhIFpvb20gZWZmZWN0LlxyXG4gKiBAc2VlIGBUcmFuc2l0aW9uYWJsZWAgYFpvb21GYWRlYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFpvb20gPSBmb3J3YXJkRWxlbWVudFJlZihmdW5jdGlvbiBab29tKHsgY2xhc3NCYXNlLCB6b29tT3JpZ2luLCB6b29tT3JpZ2luSW5saW5lLCB6b29tT3JpZ2luQmxvY2ssIHpvb21NaW4sIHpvb21NaW5JbmxpbmUsIHpvb21NaW5CbG9jaywgb3BlbiwgLi4ucmVzdCB9LCByZWYpIHtcclxuICAgIHJldHVybiBoKFRyYW5zaXRpb25hYmxlLCB7IG9wZW46IG9wZW4sIC4uLnVzZUNyZWF0ZVpvb21Qcm9wcyh7IGNsYXNzQmFzZSwgem9vbU9yaWdpbiwgem9vbU9yaWdpbklubGluZSwgem9vbU9yaWdpbkJsb2NrLCB6b29tTWluLCB6b29tTWluSW5saW5lLCB6b29tTWluQmxvY2sgfSwgeyAuLi5yZXN0LCByZWYgfSkgfSk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD16b29tLmpzLm1hcCIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZUNyZWF0ZUZhZGVQcm9wcyB9IGZyb20gXCIuL2ZhZGVcIjtcclxuaW1wb3J0IHsgZm9yd2FyZEVsZW1lbnRSZWYgfSBmcm9tIFwiLi9mb3J3YXJkLWVsZW1lbnQtcmVmXCI7XHJcbmltcG9ydCB7IFpvb20gfSBmcm9tIFwiLi96b29tXCI7XHJcbjtcclxuLyoqXHJcbiAqIFdyYXBzIGEgZGl2IChldGMuKSBhbmQgYWxsb3dzIGl0IHRvIHRyYW5zaXRpb24gaW4vb3V0IHNtb290aGx5IHdpdGggYm90aCBab29tIGFuZCBGYWRlIGVmZmVjdHMuXHJcbiAqXHJcbiAqIFRoaXMgaXMgYW4gaWRlYWwgdGltZSB0byB1c2UgdGhlIG1pbmltdW0gc2l6ZSBab29tIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIEBzZWUgYFRyYW5zaXRpb25hYmxlYCBgWm9vbWBcclxuICovXHJcbmV4cG9ydCBjb25zdCBab29tRmFkZSA9IGZvcndhcmRFbGVtZW50UmVmKGZ1bmN0aW9uIFpvb21GYWRlKHsgY2xhc3NCYXNlLCBmYWRlTWluLCBmYWRlTWF4LCBvcGVuLCAuLi5yZXN0IH0sIHJlZikge1xyXG4gICAgcmV0dXJuIGgoWm9vbSwgeyBvcGVuOiBvcGVuLCAuLi51c2VDcmVhdGVGYWRlUHJvcHMoeyBjbGFzc0Jhc2UsIGZhZGVNaW4sIGZhZGVNYXggfSwgeyAuLi5yZXN0LCByZWYgfSkgfSk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD16b29tLWZhZGUuanMubWFwIiwiaW1wb3J0IHsgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgZm9yd2FyZEVsZW1lbnRSZWYgfSBmcm9tIFwiLi9mb3J3YXJkLWVsZW1lbnQtcmVmXCI7XHJcbmltcG9ydCB7IFNsaWRlIH0gZnJvbSBcIi4vc2xpZGVcIjtcclxuaW1wb3J0IHsgdXNlQ3JlYXRlWm9vbVByb3BzIH0gZnJvbSBcIi4vem9vbVwiO1xyXG47XHJcbi8qKlxyXG4gKiBXcmFwcyBhIGRpdiAoZXRjLikgYW5kIGFsbG93cyBpdCB0byB0cmFuc2l0aW9uIGluL291dCBzbW9vdGhseSB3aXRoIGJvdGggU2xpZGUgYW5kIFpvb20gZWZmZWN0cy5cclxuICpcclxuICogUHJvYmFibHkgYmVzdCBjb21iaW5lZCB3aXRoIGB1c2VDcmVhdGVGYWRlUHJvcHNgIChvciBqdXN0IHVzaW5nIGEgYFNsaWRlWm9vbUZhZGVgPykuXHJcbiAqXHJcbiAqIEBzZWUgYFRyYW5zaXRpb25hYmxlYCBgU2xpZGVGYWRlWm9vbWAgYFpvb21gIGBGYWRlYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFNsaWRlWm9vbSA9IGZvcndhcmRFbGVtZW50UmVmKGZ1bmN0aW9uIFNsaWRlWm9vbSh7IGNsYXNzQmFzZSwgem9vbU1pbiwgem9vbU1pbklubGluZSwgem9vbU1pbkJsb2NrLCB6b29tT3JpZ2luLCB6b29tT3JpZ2luSW5saW5lLCB6b29tT3JpZ2luQmxvY2ssIG9wZW4sIC4uLnJlc3QgfSwgcmVmKSB7XHJcbiAgICByZXR1cm4gaChTbGlkZSwgeyBvcGVuOiBvcGVuLCAuLi51c2VDcmVhdGVab29tUHJvcHMoeyBjbGFzc0Jhc2UsIHpvb21NaW4sIHpvb21NaW5JbmxpbmUsIHpvb21NaW5CbG9jaywgem9vbU9yaWdpbiwgem9vbU9yaWdpbklubGluZSwgem9vbU9yaWdpbkJsb2NrIH0sIHsgLi4ucmVzdCwgcmVmIH0pIH0pO1xyXG59KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2xpZGUtem9vbS5qcy5tYXAiLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VDcmVhdGVGYWRlUHJvcHMgfSBmcm9tIFwiLi9mYWRlXCI7XHJcbmltcG9ydCB7IGZvcndhcmRFbGVtZW50UmVmIH0gZnJvbSBcIi4vZm9yd2FyZC1lbGVtZW50LXJlZlwiO1xyXG5pbXBvcnQgeyBTbGlkZVpvb20gfSBmcm9tIFwiLi9zbGlkZS16b29tXCI7XHJcbjtcclxuLyoqXHJcbiAqIFdyYXBzIGEgZGl2IChldGMuKSBhbmQgYWxsb3dzIGl0IHRvIHRyYW5zaXRpb24gaW4vb3V0IHNtb290aGx5IHdpdGggWm9vbSwgU2xpZGUsIGFuZCBGYWRlIGVmZmVjdHMuXHJcbiAqXHJcbiAqIE5vdGUgdGhhdCB0aGlzIGlzIGJhc2ljYWxseSBqdXN0IHNob3J0aGFuZCBmb3Igc29tZSBwcm9wIGNyZWF0aW9uIGFuZCBwcm9wIG1lcmdpbmcgZnVuY3Rpb25zLlxyXG4gKlxyXG4gKiBAc2VlIGBUcmFuc2l0aW9uYWJsZWAgYFNsaWRlYCBgWm9vbWAgYEZhZGVgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgU2xpZGVab29tRmFkZSA9IGZvcndhcmRFbGVtZW50UmVmKGZ1bmN0aW9uIFNsaWRlWm9vbUZhZGUoeyBjbGFzc0Jhc2UsIGZhZGVNaW4sIGZhZGVNYXgsIG9wZW4sIC4uLnJlc3QgfSwgcmVmKSB7XHJcbiAgICByZXR1cm4gaChTbGlkZVpvb20sIHsgb3Blbjogb3BlbiwgLi4udXNlQ3JlYXRlRmFkZVByb3BzKHsgY2xhc3NCYXNlLCBmYWRlTWluLCBmYWRlTWF4IH0sIHsgLi4ucmVzdCwgcmVmIH0pIH0pO1xyXG59KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2xpZGUtem9vbS1mYWRlLmpzLm1hcCIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyBmb3J3YXJkRWxlbWVudFJlZiB9IGZyb20gXCIuL2ZvcndhcmQtZWxlbWVudC1yZWZcIjtcclxuaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtbWVyZ2VkLXByb3BzXCI7XHJcbmltcG9ydCB7IFRyYW5zaXRpb25hYmxlIH0gZnJvbSBcIi4vdHJhbnNpdGlvbmFibGVcIjtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBzZXQgb2YgcHJvcHMgdGhhdCBpbXBsZW1lbnQgYSBGbGlwIHRyYW5zaXRpb24uIExpa2UgYWxsIGB1c2VDcmVhdGUqUHJvcHNgIGhvb2tzLCBtdXN0IGJlIHVzZWQgaW4gdGFtZGVtIHdpdGggYSBgVHJhbnNpdGlvbmFibGVgIGNvbXBvbmVudCAob3IgYHVzZUNyZWF0ZVRyYW5zaXRpb25hYmxlUHJvcHNgKS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VDcmVhdGVGbGlwUHJvcHMoeyBjbGFzc0Jhc2UsIGZsaXBBbmdsZUlubGluZSwgZmxpcEFuZ2xlQmxvY2ssIHBlcnNwZWN0aXZlIH0sIG90aGVyUHJvcHMpIHtcclxuICAgIGNsYXNzQmFzZSA/Pz0gXCJ0cmFuc2l0aW9uXCI7XHJcbiAgICBjb25zdCBsYXN0VmFsaWRUYXJnZXRJbmxpbmUgPSB1c2VSZWYoZmxpcEFuZ2xlSW5saW5lID8/IDE4MCk7XHJcbiAgICBjb25zdCBsYXN0VmFsaWRUYXJnZXRCbG9jayA9IHVzZVJlZihmbGlwQW5nbGVCbG9jayA/PyAwKTtcclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7IGlmIChmbGlwQW5nbGVJbmxpbmUpXHJcbiAgICAgICAgbGFzdFZhbGlkVGFyZ2V0SW5saW5lLmN1cnJlbnQgPSBmbGlwQW5nbGVJbmxpbmU7IH0sIFtmbGlwQW5nbGVJbmxpbmVdKTtcclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7IGlmIChmbGlwQW5nbGVCbG9jaylcclxuICAgICAgICBsYXN0VmFsaWRUYXJnZXRCbG9jay5jdXJyZW50ID0gZmxpcEFuZ2xlQmxvY2s7IH0sIFtmbGlwQW5nbGVCbG9ja10pO1xyXG4gICAgaWYgKGZsaXBBbmdsZUlubGluZSA9PSAwKVxyXG4gICAgICAgIGZsaXBBbmdsZUlubGluZSA9IGxhc3RWYWxpZFRhcmdldElubGluZS5jdXJyZW50O1xyXG4gICAgaWYgKGZsaXBBbmdsZUJsb2NrID09IDApXHJcbiAgICAgICAgZmxpcEFuZ2xlQmxvY2sgPSBsYXN0VmFsaWRUYXJnZXRCbG9jay5jdXJyZW50O1xyXG4gICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKCkoe1xyXG4gICAgICAgIGNsYXNzTmFtZTogYCR7Y2xhc3NCYXNlfS1mbGlwYCxcclxuICAgICAgICBjbGFzc0Jhc2UsXHJcbiAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgW2AtLSR7Y2xhc3NCYXNlfS1mbGlwLWFuZ2xlLWlubGluZWBdOiBgJHsoZmxpcEFuZ2xlSW5saW5lID8/IDApfWRlZ2AsXHJcbiAgICAgICAgICAgIFtgLS0ke2NsYXNzQmFzZX0tZmxpcC1hbmdsZS1ibG9ja2BdOiBgJHsoZmxpcEFuZ2xlQmxvY2sgPz8gMCl9ZGVnYCxcclxuICAgICAgICAgICAgW2AtLSR7Y2xhc3NCYXNlfS1wZXJzcGVjdGl2ZWBdOiBgJHsocGVyc3BlY3RpdmUgPz8gODAwKX1weGBcclxuICAgICAgICB9XHJcbiAgICB9LCBvdGhlclByb3BzKTtcclxufVxyXG47XHJcbi8qKlxyXG4gKiBXcmFwcyBhIGRpdiAoZXRjLikgYW5kIGFsbG93cyBpdCB0byB0cmFuc2l0aW9uIGluL291dCBzbW9vdGhseSB3aXRoIGEgRmxpcCBlZmZlY3QuXHJcbiAqXHJcbiAqIFByb3ZpZGUgdGhlIGRpcmVjdGlvbiB0aGUgZWxlbWVudCB3aWxsIHRyYXZlbCBpbiB3aXRoIGBmbGlwSW5saW5lYCBhbmQgYGZsaXBCbG9ja2AsXHJcbiAqIHdpdGggYDFgIGJlaW5nIGAxMDAlYCBvZiB0aGUgZWxlbWVudCdzIHdpZHRoIG9yIGhlaWdodC5cclxuICpcclxuICogQSB2YWx1ZSBvZiBgMGAgaXMgaGFuZGxlZCBzcGVjaWFsbHksIGVmZmVjdGl2ZWx5IG1lYW5pbmcgXCJ1c2UgdGhlIGxhc3Qgbm9uLXplcm8gdmFsdWVcIixcclxuICogd2hpY2ggYWxsb3dzIGZvciBjb252ZW5pZW50IHNldHVwcyBpbnNpZGUgb2YgYSBgU3dhcENvbnRhaW5lcmBcclxuICogKGBmbGlwSW5saW5lPXtpbmRleCAtIHNlbGVjdGVkSW5kZXh9YCBvciBzaW1pbGFyLilcclxuICpcclxuICogQHNlZSBgVHJhbnNpdGlvbmFibGVgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRmxpcCA9IGZvcndhcmRFbGVtZW50UmVmKGZ1bmN0aW9uIEZsaXAoeyBjbGFzc0Jhc2UsIGZsaXBBbmdsZUlubGluZSwgZmxpcEFuZ2xlQmxvY2ssIHBlcnNwZWN0aXZlLCBvcGVuLCAuLi5yZXN0IH0sIHJlZikge1xyXG4gICAgcmV0dXJuIGgoVHJhbnNpdGlvbmFibGUsIHsgb3Blbjogb3BlbiwgLi4udXNlQ3JlYXRlRmxpcFByb3BzKHsgY2xhc3NCYXNlLCBmbGlwQW5nbGVJbmxpbmUsIGZsaXBBbmdsZUJsb2NrLCBwZXJzcGVjdGl2ZSB9LCB7IC4uLnJlc3QsIHJlZiB9KSB9KTtcclxufSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZsaXAuanMubWFwIiwiaW1wb3J0IHsgZGVmYXVsdCBhcyBjbHN4IH0gZnJvbSBcImNsc3hcIjtcclxuaW1wb3J0IHsgY2xvbmVFbGVtZW50IH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VNZXJnZWRQcm9wcyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1tZXJnZWQtcHJvcHNcIjtcclxuaW1wb3J0IHsgZm9yd2FyZEVsZW1lbnRSZWYgfSBmcm9tIFwiLi9mb3J3YXJkLWVsZW1lbnQtcmVmXCI7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgc2V0IG9mIHByb3BzIHRoYXQgaW1wbGVtZW50IGEgc3dhcCBjb250YWluZXIuXHJcbiAqIEJlIHN1cmUgdG8gbWVyZ2UgdGhlc2UgcmV0dXJuZWQgcHJvcHMgd2l0aCB3aGF0ZXZlciB0aGUgdXNlciBwYXNzZWQgaW4uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlQ3JlYXRlU3dhcHBhYmxlUHJvcHMoeyBpbmxpbmUsIGNsYXNzQmFzZSB9LCBvdGhlclByb3BzKSB7XHJcbiAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHMoKSh7XHJcbiAgICAgICAgY2xhc3NOYW1lOiBjbHN4KGAke2NsYXNzQmFzZSA/PyBcInRyYW5zaXRpb25cIn0tc3dhcC1jb250YWluZXJgLCBpbmxpbmUgJiYgYCR7Y2xhc3NCYXNlID8/IFwidHJhbnNpdGlvblwifS1zd2FwLWNvbnRhaW5lci1pbmxpbmVgKVxyXG4gICAgfSwgb3RoZXJQcm9wcyk7XHJcbn1cclxuLyoqXHJcbiAqIEFsbG93cyBhIHNldCBvZiBjaGlsZCA8VHJhbnNpdGlvbmFibGU+IGNvbXBvbmVudHMgdG8gYW5pbWF0ZSBpbiAmIG91dCBpbi1wbGFjZS4gVmVyeSB1c2VmdWwgZm9yLCBlLmcuLCB0YWIgcGFuZWxzLlxyXG4gKlxyXG4gKiBZb3UgbXVzdCBtYW5hZ2UgZWFjaCBjaGlsZCBgPFRyYW5zaXRpb25hYmxlPmAgY29tcG9uZW50J3MgYG9wZW5gIHByb3AgLS0gdGhpcyBjb21wb25lbnQgKmRvZXMgbm90KiBtYW5hZ2UgYW55IHNvcnQgb2Ygc3RhdGUgaW4gdGhhdCByZWdhcmQuXHJcbiAqXHJcbiAqIExpa2UgYDxUcmFuc2l0aW9uYWJsZT5gLCAqdGhpcyB3cmFwcyBhbiBIVE1MRWxlbWVudCAob3Igb3RoZXIgcmVmLWZvcndhcmRpbmcgY29tcG9uZW50KSouIFRoaXMgd2lsbCBiZSB5b3VyIGNvbnRhaW5lciB0aGF0IGhvbGRzIGVhY2ggYDxUcmFuc2l0aW9uYWJsZT5gIChvciBjb21wb25lbnQgdGhhdCB1c2VzIGl0KS4gU3RyaWN0bHkgc3BlYWtpbmcgaXQgY291bGQgYmUgYW55dGhpbmcsIG5vdCBhIGA8VHJhbnNpdGlvbmFibGU+YCwgYnV0IGlmIGl0IGRvZXNudCd0IHRyYW5zaXRpb24gb3V0IHRoZW4gaXQncyBqdXN0IGdvaW5nIHRvIGJlIGhhbmdpbmcgYXJvdW5kIDEwMCUgb2YgdGhlIHRpbWUuXHJcbiAqXHJcbiAqIExvbmcgd2F5IG9mIHNheWluZywgaWYgeW91IGdldCBhIGNyeXB0aWMgZXJyb3Igd2l0aCB0aGlzIGNvbXBvbmVudCwgbWFrZSBzdXJlIGl0IGhhcyBhIHNpbmdsZSBgPGRpdj5gIGNoaWxkIG9yIHNvbWV0aGluZy5cclxuICogQHBhcmFtIHBhcmFtMFxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFN3YXBwYWJsZSA9IGZvcndhcmRFbGVtZW50UmVmKGZ1bmN0aW9uIFN3YXBwYWJsZSh7IGNoaWxkcmVuLCBjbGFzc0Jhc2UsIGlubGluZSwgLi4ucCB9LCByZWYpIHtcclxuICAgIGlubGluZSA/Pz0gdHlwZW9mIGNoaWxkcmVuLnR5cGUgPT09IFwic3RyaW5nXCIgJiYgaW5saW5lRWxlbWVudHMuaGFzKGNoaWxkcmVuLnR5cGUpO1xyXG4gICAgY29uc3QgdHJhbnNpdGlvblByb3BzID0gdXNlQ3JlYXRlU3dhcHBhYmxlUHJvcHMoeyBjbGFzc0Jhc2UsIGlubGluZSB9LCB7IC4uLnAsIHJlZiB9KTtcclxuICAgIGNvbnN0IG1lcmdlZFdpdGhDaGlsZHJlbiA9IHVzZU1lcmdlZFByb3BzKCkodHJhbnNpdGlvblByb3BzLCBjaGlsZHJlbi5wcm9wcyk7XHJcbiAgICByZXR1cm4gY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBtZXJnZWRXaXRoQ2hpbGRyZW4pO1xyXG59KTtcclxuLy8gSWYgXCJpbmxpbmVcIiBpc24ndCBleHBsaWNpdGx5IHByb3ZpZGVkLCB3ZSB0cnkgdG8gaW1wbGljaXRseSBkbyBpdCBiYXNlZCBvbiB0aGUgY2hpbGQncyB0YWcuXHJcbi8vIE5vdCBwZXJmZWN0LCBidXQgaXQncyBub3Qgc3VwcG9zZWQgdG8gYmUuIGBpbmxpbmVgIGlzIGZvciBwZXJmZWN0LlxyXG5jb25zdCBpbmxpbmVFbGVtZW50cyA9IG5ldyBTZXQoW1xyXG4gICAgXCJhXCIsXHJcbiAgICBcImFiYnJcIixcclxuICAgIFwiYWNyb255bVwiLFxyXG4gICAgXCJhdWRpb1wiLFxyXG4gICAgXCJiXCIsXHJcbiAgICBcImJkaVwiLFxyXG4gICAgXCJiZG9cIixcclxuICAgIFwiYmlnXCIsXHJcbiAgICBcImJyXCIsXHJcbiAgICBcImJ1dHRvblwiLFxyXG4gICAgXCJjYW52YXNcIixcclxuICAgIFwiY2l0ZVwiLFxyXG4gICAgXCJjb2RlXCIsXHJcbiAgICBcImRhdGFcIixcclxuICAgIFwiZGF0YWxpc3RcIixcclxuICAgIFwiZGVsXCIsXHJcbiAgICBcImRmblwiLFxyXG4gICAgXCJlbVwiLFxyXG4gICAgXCJlbWJlZFwiLFxyXG4gICAgXCJpXCIsXHJcbiAgICBcImlmcmFtZVwiLFxyXG4gICAgXCJpbWdcIixcclxuICAgIFwiaW5wdXRcIixcclxuICAgIFwiaW5zXCIsXHJcbiAgICBcImtiZFwiLFxyXG4gICAgXCJsYWJlbFwiLFxyXG4gICAgXCJtYXBcIixcclxuICAgIFwibWFya1wiLFxyXG4gICAgXCJtZXRlclwiLFxyXG4gICAgXCJub3NjcmlwdFwiLFxyXG4gICAgXCJvYmplY3RcIixcclxuICAgIFwib3V0cHV0XCIsXHJcbiAgICBcInBpY3R1cmVcIixcclxuICAgIFwicHJvZ3Jlc3NcIixcclxuICAgIFwicVwiLFxyXG4gICAgXCJydWJ5XCIsXHJcbiAgICBcInNcIixcclxuICAgIFwic2FtcFwiLFxyXG4gICAgXCJzY3JpcHRcIixcclxuICAgIFwic2VsZWN0XCIsXHJcbiAgICBcInNsb3RcIixcclxuICAgIFwic21hbGxcIixcclxuICAgIFwic3BhblwiLFxyXG4gICAgXCJzdHJvbmdcIixcclxuICAgIFwic3ViXCIsXHJcbiAgICBcInN1cFwiLFxyXG4gICAgXCJzdmdcIixcclxuICAgIFwidGVtcGxhdGVcIixcclxuICAgIFwidGV4dGFyZWFcIixcclxuICAgIFwidGltZVwiLFxyXG4gICAgXCJ1XCIsXHJcbiAgICBcInR0XCIsXHJcbiAgICBcInZhclwiLFxyXG4gICAgXCJ2aWRlb1wiLFxyXG4gICAgXCJ3YnJcIlxyXG5dKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dhcHBhYmxlLmpzLm1hcCIsImV4cG9ydCBjb25zdCBFdmVudERldGFpbCA9IFN5bWJvbChcImV2ZW50LWRldGFpbFwiKTtcclxuZXhwb3J0IGZ1bmN0aW9uIGVuaGFuY2VFdmVudChlLCBkZXRhaWwpIHtcclxuICAgIGxldCBldmVudCA9IGU7XHJcbiAgICBldmVudFtFdmVudERldGFpbF0gPSBkZXRhaWw7XHJcbiAgICByZXR1cm4gZXZlbnQ7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvcHMuanMubWFwIiwiaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtbWVyZ2VkLXByb3BzXCI7XHJcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLXN0YXRlXCI7XHJcbmltcG9ydCB7IEV2ZW50RGV0YWlsLCBlbmhhbmNlRXZlbnQgfSBmcm9tIFwiLi9wcm9wc1wiO1xyXG5sZXQgcHVsc2UgPSAoXCJ2aWJyYXRlXCIgaW4gbmF2aWdhdG9yKSA/ICgoKSA9PiBuYXZpZ2F0b3IudmlicmF0ZSgxMCkpIDogKCgpID0+IHsgfSk7XHJcbi8qKlxyXG4gKiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvIGVuYWJsZS9kaXNhYmxlIGJ1dHRvbiB2aWJyYXRpb24gcHVsc2VzIG9uIGFuIGFwcC13aWRlIHNjYWxlLlxyXG4gKlxyXG4gKlxyXG4gKiBAcGFyYW0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcnVuIHdoZW4gYSBidXR0b24gaXMgdGFwcGVkLlxyXG4gKiAoRGVmYXVsdCBpcyBgKCkgPT4gbmF2aWdhdG9yLnZpYnJhdGUoMTApYCBpbiBicm93c2VycyB0aGF0IHN1cHBvcnQgaXQsIGEgbm9vcCBvdGhlcndpc2UpXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0QnV0dG9uVmlicmF0ZShmdW5jKSB7XHJcbiAgICBwdWxzZSA9IGZ1bmM7XHJcbn1cclxuZnVuY3Rpb24gZXhjbHVkZXModGFnLCB0YXJnZXQsIGV4Y2x1ZGUpIHtcclxuICAgIGlmIChleGNsdWRlPy5bdGFyZ2V0XSlcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIGlmICh0YXJnZXQgPT09IFwic3BhY2VcIiB8fCB0YXJnZXQgPT09IFwiZW50ZXJcIilcclxuICAgICAgICByZXR1cm4gdGFnID09IFwiYnV0dG9uXCI7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuLyoqXHJcbiAqIEVhc3kgd2F5IHRvIFwicG9seWZpbGxcIiBidXR0b24tbGlrZSBpbnRlcmFjdGlvbnMgb250bywgZS5nLiwgYSBkaXYuXHJcbiAqXHJcbiAqIEFkZHMgY2xpY2ssIHNwYWNlIG9uIGtleURvd24sIGFuZCBlbnRlciBvbiBrZXlVcCwgYXMgd2VsbCBhcyBoYXB0aWNcclxuICogZmVlZGJhY2sgdmlhIGEgbW9tZW50YXJ5IHZpYnJhdGlvbiBwdWxzZSB3aGVuIHRoZXJlJ3MgYW4gb25DbGljayBoYW5kbGVyIHByb3ZpZGVkXHJcbiAqICh0aGlzIGNhbiBiZSBkaXNhYmxlZCBhcHAtd2lkZSB3aXRoIGBzZXRCdXR0b25WaWJyYXRlYCkuXHJcbiAqXHJcbiAqIEluIGFkZGl0aW9uLCB3aGVuIHRoZSBDU1MgYDphY3RpdmVgIHBzZXVkby1jbGFzcyB3b3VsZCBhcHBseSB0byBhIG5vcm1hbCBidXR0b25cclxuICogKGkuZS4gd2hlbiBob2xkaW5nIHRoZSBzcGFjZWJhciBvciBkdXJpbmcgbW91c2Vkb3duKSwgYHsgXCJkYXRhLXBzZXVkby1hY3RpdmVcIjogXCJ0cnVlXCIgfWBcclxuICogaXMgYWRkZWQgdG8gdGhlIHByb3BzLiAgWW91IGNhbiBlaXRoZXIgbGV0IGl0IHBhc3MgdGhyb3VnaCBhbmQgc3R5bGUgaXQgdGhyb3VnaCBuZXcgQ1NTLFxyXG4gKiBvciBpbnNwZWN0IHRoZSByZXR1cm5lZCBwcm9wcyBmb3IgaXQgYW5kIGFkZCBlLmcuIGFuIGAuYWN0aXZlYCBjbGFzcyBmb3IgZXhpc3RpbmcgQ1NTXHJcbiAqXHJcbiAqIEBwYXJhbSBvbkNsaWNrXHJcbiAqIEBwYXJhbSBleGNsdWRlIFdoZXRoZXIgdGhlIHBvbHlmaWxsIHNob3VsZCBhcHBseSAoY2FuIHNwZWNpZnkgZm9yIHNwZWNpZmljIGludGVyYWN0aW9ucylcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VCdXR0b25MaWtlRXZlbnRIYW5kbGVycyh0YWcsIG9uQ2xpY2tTeW5jLCBleGNsdWRlKSB7XHJcbiAgICAvL3R5cGUgRSA9IEV2IGV4dGVuZHMgaC5KU1guVGFyZ2V0ZWRFdmVudDxpbmZlciBFLCBhbnk+PyBFIDogRXZlbnRUYXJnZXQ7XHJcbiAgICBjb25zdCBbYWN0aXZlLCBzZXRBY3RpdmVdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgY29uc3Qgb25LZXlVcCA9IGV4Y2x1ZGVzKHRhZywgXCJzcGFjZVwiLCBleGNsdWRlKSA/IHVuZGVmaW5lZCA6IChlKSA9PiB7XHJcbiAgICAgICAgaWYgKGUua2V5ID09IFwiIFwiICYmIG9uQ2xpY2tTeW5jKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgb25DbGlja1N5bmMoZSk7XHJcbiAgICAgICAgICAgIHNldEFjdGl2ZShmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG9uTW91c2VEb3duID0gZXhjbHVkZXModGFnLCBcImNsaWNrXCIsIGV4Y2x1ZGUpID8gdW5kZWZpbmVkIDogKGUpID0+IHtcclxuICAgICAgICBpZiAoZS5idXR0b24gPT09IDApXHJcbiAgICAgICAgICAgIHNldEFjdGl2ZSh0cnVlKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBvbkJsdXIgPSAoZSkgPT4ge1xyXG4gICAgICAgIHNldEFjdGl2ZShmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgY29uc3Qgb25Nb3VzZVVwID0gZXhjbHVkZXModGFnLCBcImNsaWNrXCIsIGV4Y2x1ZGUpID8gdW5kZWZpbmVkIDogb25CbHVyO1xyXG4gICAgY29uc3Qgb25Nb3VzZU91dCA9IGV4Y2x1ZGVzKHRhZywgXCJjbGlja1wiLCBleGNsdWRlKSA/IHVuZGVmaW5lZCA6IG9uQmx1cjtcclxuICAgIGNvbnN0IG9uS2V5RG93biA9IGV4Y2x1ZGVzKHRhZywgXCJzcGFjZVwiLCBleGNsdWRlKSAmJiBleGNsdWRlcyh0YWcsIFwiZW50ZXJcIiwgZXhjbHVkZSkgPyB1bmRlZmluZWQgOiAoZSkgPT4ge1xyXG4gICAgICAgIGlmIChlLmtleSA9PSBcIiBcIiAmJiBvbkNsaWNrU3luYyAmJiAhZXhjbHVkZXModGFnLCBcInNwYWNlXCIsIGV4Y2x1ZGUpKSB7XHJcbiAgICAgICAgICAgIC8vIFdlIGRvbid0IGFjdHVhbGx5IGFjdGl2YXRlIGl0IG9uIGEgc3BhY2Uga2V5ZG93blxyXG4gICAgICAgICAgICAvLyBidXQgd2UgZG8gcHJldmVudERlZmF1bHQgdG8gc3RvcCB0aGUgcGFnZSBmcm9tIHNjcm9sbGluZy5cclxuICAgICAgICAgICAgc2V0QWN0aXZlKHRydWUpO1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlLmtleSA9PSBcIkVudGVyXCIgJiYgb25DbGlja1N5bmMgJiYgIWV4Y2x1ZGVzKHRhZywgXCJlbnRlclwiLCBleGNsdWRlKSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIG9uQ2xpY2tTeW5jKGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBvbkNsaWNrMiA9IGV4Y2x1ZGVzKHRhZywgXCJjbGlja1wiLCBleGNsdWRlKSA/IHVuZGVmaW5lZCA6ICgoZSkgPT4ge1xyXG4gICAgICAgIGlmIChvbkNsaWNrU3luYyAmJiAhZXhjbHVkZXModGFnLCBcImNsaWNrXCIsIGV4Y2x1ZGUpKSB7XHJcbiAgICAgICAgICAgIHB1bHNlKCk7XHJcbiAgICAgICAgICAgIG9uQ2xpY2tTeW5jKGUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIChwcm9wcykgPT4gdXNlTWVyZ2VkUHJvcHMoKSh7IG9uS2V5RG93biwgb25LZXlVcCwgb25DbGljazogb25DbGljazIsIG9uQmx1ciwgb25Nb3VzZURvd24sIG9uTW91c2VVcCwgb25Nb3VzZU91dCwgLi4ueyBcImRhdGEtcHNldWRvLWFjdGl2ZVwiOiBhY3RpdmUgPyBcInRydWVcIiA6IHVuZGVmaW5lZCB9IH0sIHByb3BzKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdXNlQXJpYUJ1dHRvbih7IHRhZywgcHJlc3NlZCwgb25DbGljayB9KSB7XHJcbiAgICBmdW5jdGlvbiB1c2VBcmlhQnV0dG9uUHJvcHMoeyBcImFyaWEtcHJlc3NlZFwiOiBhcmlhUHJlc3NlZCwgdGFiSW5kZXgsIHJvbGUsIC4uLnAgfSkge1xyXG4gICAgICAgIGNvbnN0IHByb3BzID0gdXNlQnV0dG9uTGlrZUV2ZW50SGFuZGxlcnModGFnLCAoZSkgPT4gb25DbGljaz8uKGVuaGFuY2VFdmVudChlLCB7IHByZXNzZWQ6IHByZXNzZWQgPT0gbnVsbCA/IG51bGwgOiAhcHJlc3NlZCB9KSksIHVuZGVmaW5lZCkocCk7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uUHJvcHMgPSB7IHJvbGUsIHRhYkluZGV4LCBcImFyaWEtcHJlc3NlZFwiOiBhcmlhUHJlc3NlZCA/PyAocHJlc3NlZCA9PT0gdHJ1ZSA/IFwidHJ1ZVwiIDogcHJlc3NlZCA9PT0gZmFsc2UgPyBcImZhbHNlXCIgOiB1bmRlZmluZWQpIH07XHJcbiAgICAgICAgY29uc3QgZGl2UHJvcHMgPSB7IC4uLmJ1dHRvblByb3BzLCB0YWJJbmRleDogdGFiSW5kZXggPz8gMCwgcm9sZTogcm9sZSA/PyBcImJ1dHRvblwiIH07XHJcbiAgICAgICAgY29uc3QgYW5jaG9yUHJvcHMgPSB7IC4uLmRpdlByb3BzIH07XHJcbiAgICAgICAgc3dpdGNoICh0YWcpIHtcclxuICAgICAgICAgICAgY2FzZSBcImJ1dHRvblwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKCkoYnV0dG9uUHJvcHMsIHByb3BzKTtcclxuICAgICAgICAgICAgY2FzZSBcImFcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB1c2VNZXJnZWRQcm9wcygpKGFuY2hvclByb3BzLCBwcm9wcyk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHMoKShkaXZQcm9wcywgcHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlQXJpYUJ1dHRvblByb3BzXHJcbiAgICB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1idXR0b24uanMubWFwIiwiaW1wb3J0IHsgdXNlQ2hpbGRNYW5hZ2VyIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLWNoaWxkLW1hbmFnZXJcIjtcclxuaW1wb3J0IHsgdXNlTGluZWFyTmF2aWdhdGlvbiB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1rZXlib2FyZC1uYXZpZ2F0aW9uXCI7XHJcbmltcG9ydCB7IHVzZUxheW91dEVmZmVjdCB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1sYXlvdXQtZWZmZWN0XCI7XHJcbmltcG9ydCB7IHVzZU1lcmdlZFByb3BzIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLW1lcmdlZC1wcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VSYW5kb21JZCB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1yYW5kb20taWRcIjtcclxuaW1wb3J0IHsgdXNlUmVmRWxlbWVudCB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1yZWYtZWxlbWVudFwiO1xyXG5pbXBvcnQgeyB1c2VTdGFibGVDYWxsYmFjayB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1zdGFibGUtY2FsbGJhY2tcIjtcclxuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2Utc3RhdGVcIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IHVzZUJ1dHRvbkxpa2VFdmVudEhhbmRsZXJzIH0gZnJvbSBcIi4vdXNlLWJ1dHRvblwiO1xyXG5pbXBvcnQgeyB1c2VDaGlsZEZsYWcgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtY2hpbGQtbWFuYWdlclwiO1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlQXJpYUFjY29yZGlvbih7IGV4cGFuZGVkSW5kZXgsIHNldEV4cGFuZGVkSW5kZXggfSkge1xyXG4gICAgY29uc3QgW2xhc3RGb2N1c2VkSW5kZXgsIHNldExhc3RGb2N1c2VkSW5kZXgsIGdldExhc3RGb2N1c2VkSW5kZXhdID0gdXNlU3RhdGUoMCk7XHJcbiAgICBjb25zdCBzdGFibGVTZXRFeHBhbmRlZEluZGV4ID0gdXNlU3RhYmxlQ2FsbGJhY2soc2V0RXhwYW5kZWRJbmRleCA/PyAoKCkgPT4geyB9KSk7XHJcbiAgICBjb25zdCB7IG1hbmFnZWRDaGlsZHJlbjogbWFuYWdlZEFjY29yZGlvblNlY3Rpb25zLCB1c2VNYW5hZ2VkQ2hpbGQ6IHVzZU1hbmFnZWRDaGlsZFNlY3Rpb24gfSA9IHVzZUNoaWxkTWFuYWdlcigpO1xyXG4gICAgY29uc3QgeyB1c2VMaW5lYXJOYXZpZ2F0aW9uQ2hpbGQgfSA9IHVzZUxpbmVhck5hdmlnYXRpb24oeyBtYW5hZ2VkQ2hpbGRyZW46IG1hbmFnZWRBY2NvcmRpb25TZWN0aW9ucywgbmF2aWdhdGlvbkRpcmVjdGlvbjogXCJibG9ja1wiLCBnZXRJbmRleDogZ2V0TGFzdEZvY3VzZWRJbmRleCwgc2V0SW5kZXg6IHNldExhc3RGb2N1c2VkSW5kZXggfSk7XHJcbiAgICAvLyBBbnkgdGltZSBsaXN0IG1hbmFnZW1lbnQgY2hhbmdlcyB0aGUgZm9jdXNlZCBpbmRleCwgbWFudWFsbHkgZm9jdXMgdGhlIGNoaWxkXHJcbiAgICAvLyBUT0RPOiBDYW4gdGhpcyBiZSBjdXQ/XHJcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmIChsYXN0Rm9jdXNlZEluZGV4ICE9IG51bGwgJiYgbGFzdEZvY3VzZWRJbmRleCA+PSAwKVxyXG4gICAgICAgICAgICBtYW5hZ2VkQWNjb3JkaW9uU2VjdGlvbnNbbGFzdEZvY3VzZWRJbmRleF0/LmZvY3VzKCk7XHJcbiAgICB9LCBbbGFzdEZvY3VzZWRJbmRleF0pO1xyXG4gICAgdXNlQ2hpbGRGbGFnKGV4cGFuZGVkSW5kZXgsIG1hbmFnZWRBY2NvcmRpb25TZWN0aW9ucy5sZW5ndGgsIChpLCBvcGVuKSA9PiBtYW5hZ2VkQWNjb3JkaW9uU2VjdGlvbnNbaV0/LnNldE9wZW5Gcm9tUGFyZW50KG9wZW4pKTtcclxuICAgIGNvbnN0IHVzZUFyaWFBY2NvcmRpb25TZWN0aW9uID0gdXNlQ2FsbGJhY2soKGFyZ3MpID0+IHtcclxuICAgICAgICBjb25zdCBbb3BlbkZyb21QYXJlbnQsIHNldE9wZW5Gcm9tUGFyZW50LCBnZXRPcGVuRnJvbVBhcmVudF0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgICAgICBjb25zdCB7IHJhbmRvbUlkOiBib2R5UmFuZG9tSWQsIHVzZVJhbmRvbUlkUHJvcHM6IHVzZUJvZHlSYW5kb21JZFByb3BzLCB1c2VSZWZlcmVuY2VkSWRQcm9wczogdXNlUmVmZXJlbmNlZEJvZHlJZFByb3BzIH0gPSB1c2VSYW5kb21JZCh7IHByZWZpeDogXCJhcmlhLWFjY29yZGlvbi1zZWN0aW9uLWJvZHktXCIgfSk7XHJcbiAgICAgICAgY29uc3QgeyByYW5kb21JZDogaGVhZFJhbmRvbUlkLCB1c2VSYW5kb21JZFByb3BzOiB1c2VIZWFkUmFuZG9tSWRQcm9wcywgdXNlUmVmZXJlbmNlZElkUHJvcHM6IHVzZVJlZmVyZW5jZWRIZWFkSWRQcm9wcyB9ID0gdXNlUmFuZG9tSWQoeyBwcmVmaXg6IFwiYXJpYS1hY2NvcmRpb24tc2VjdGlvbi1oZWFkZXItXCIgfSk7XHJcbiAgICAgICAgbGV0IG9wZW4gPSAoKGFyZ3Mub3BlbiA/PyBvcGVuRnJvbVBhcmVudCkgPz8gbnVsbCk7XHJcbiAgICAgICAgLy8gVE9ETzogQ29udmVydCB0byB1c2UgdXNlTWFuYWdlZENoaWxkIHNvIHRoYXQgdGhpcyBob29rIFxyXG4gICAgICAgIC8vIGlzIHN0YWJsZSB3aXRob3V0IChkaXJlY3RseSkgZGVwZW5kaW5nIG9uIHRoZSBvcGVuIHN0YXRlLlxyXG4gICAgICAgIGNvbnN0IHVzZUFyaWFBY2NvcmRpb25TZWN0aW9uSGVhZGVyID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlQXJpYUFjY29yZGlvblNlY3Rpb25IZWFkZXIoeyB0YWcgfSkge1xyXG4gICAgICAgICAgICBjb25zdCB7IHVzZVJlZkVsZW1lbnRQcm9wcywgZWxlbWVudCB9ID0gdXNlUmVmRWxlbWVudCgpO1xyXG4gICAgICAgICAgICBjb25zdCBmb2N1cyA9IHVzZUNhbGxiYWNrKCgpID0+IHsgZWxlbWVudD8uZm9jdXMoKTsgfSwgW2VsZW1lbnRdKTtcclxuICAgICAgICAgICAgY29uc3QgeyB1c2VNYW5hZ2VkQ2hpbGRQcm9wcyB9ID0gdXNlTWFuYWdlZENoaWxkU2VjdGlvbih7IGluZGV4OiBhcmdzLmluZGV4LCBvcGVuOiBvcGVuLCBzZXRPcGVuRnJvbVBhcmVudCwgZm9jdXMgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgdXNlTGluZWFyTmF2aWdhdGlvbkNoaWxkUHJvcHMgfSA9IHVzZUxpbmVhck5hdmlnYXRpb25DaGlsZCgpO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiB1c2VBcmlhQWNjb3JkaW9uU2VjdGlvbkhlYWRlclByb3BzKHsgW1wiYXJpYS1leHBhbmRlZFwiXTogYXJpYUV4cGFuZGVkLCBbXCJhcmlhLWRpc2FibGVkXCJdOiBhcmlhRGlzYWJsZWQsIC4uLnByb3BzIH0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9uRm9jdXMgPSAoKSA9PiB7IHNldExhc3RGb2N1c2VkSW5kZXgoYXJncy5pbmRleCk7IH07XHJcbiAgICAgICAgICAgICAgICBsZXQgb25DbGljayA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0T3BlbkZyb21QYXJlbnQoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhYmxlU2V0RXhwYW5kZWRJbmRleChudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YWJsZVNldEV4cGFuZGVkSW5kZXgoYXJncy5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgbGV0IHJldEIgPSB1c2VNZXJnZWRQcm9wcygpKHsgdGFiSW5kZXg6IDAgfSwgdXNlQnV0dG9uTGlrZUV2ZW50SGFuZGxlcnModGFnLCBvbkNsaWNrLCB1bmRlZmluZWQpKHByb3BzKSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgcmV0MyA9IHVzZU1lcmdlZFByb3BzKCkodXNlSGVhZFJhbmRvbUlkUHJvcHModXNlUmVmZXJlbmNlZEJvZHlJZFByb3BzKFwiYXJpYS1jb250cm9sc1wiKSh7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJhcmlhLWV4cGFuZGVkXCI6IChhcmlhRXhwYW5kZWQgPz8gKCEhb3BlbikudG9TdHJpbmcoKSksXHJcbiAgICAgICAgICAgICAgICAgICAgXCJhcmlhLWRpc2FibGVkXCI6IChhcmlhRGlzYWJsZWQgPz8gKG9wZW4gPyBcInRydWVcIiA6IHVuZGVmaW5lZCkpLFxyXG4gICAgICAgICAgICAgICAgICAgIC4uLnVzZVJlZkVsZW1lbnRQcm9wcyh1c2VNYW5hZ2VkQ2hpbGRQcm9wcyhyZXRCKSlcclxuICAgICAgICAgICAgICAgIH0pKSwgeyBvbkZvY3VzIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZUxpbmVhck5hdmlnYXRpb25DaGlsZFByb3BzKHJldDMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdXNlQXJpYUFjY29yZGlvblNlY3Rpb25IZWFkZXJQcm9wcyB9O1xyXG4gICAgICAgIH0sIFtvcGVuXSk7XHJcbiAgICAgICAgY29uc3QgdXNlQXJpYUFjY29yZGlvblNlY3Rpb25Cb2R5ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlQXJpYUFjY29yZGlvblNlY3Rpb25Cb2R5KCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiB1c2VBcmlhQWNjb3JkaW9uU2VjdGlvbkJvZHlQcm9wcyh7IHJvbGUsIC4uLnByb3BzIH0pIHtcclxuICAgICAgICAgICAgICAgIGxldCByZXQxID0gdXNlUmVmZXJlbmNlZEhlYWRJZFByb3BzKFwiYXJpYS1sYWJlbGxlZGJ5XCIpKHsgcm9sZTogcm9sZSA/PyBcInJlZ2lvblwiLCAuLi5wcm9wcyB9KTtcclxuICAgICAgICAgICAgICAgIGxldCByZXQyID0gdXNlQm9keVJhbmRvbUlkUHJvcHMocmV0MSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0MjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB1c2VBcmlhQWNjb3JkaW9uU2VjdGlvbkJvZHlQcm9wc1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0sIFtdKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBleHBhbmRlZDogb3BlbixcclxuICAgICAgICAgICAgdXNlQXJpYUFjY29yZGlvblNlY3Rpb25IZWFkZXIsXHJcbiAgICAgICAgICAgIHVzZUFyaWFBY2NvcmRpb25TZWN0aW9uQm9keSxcclxuICAgICAgICB9O1xyXG4gICAgfSwgW3VzZUxpbmVhck5hdmlnYXRpb25DaGlsZF0pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VBcmlhQWNjb3JkaW9uU2VjdGlvblxyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtYWNjb3JkaW9uLmpzLm1hcCIsImltcG9ydCB7IHVzZU1lcmdlZFByb3BzLCB1c2VSZWZFbGVtZW50LCB1c2VTdGFibGVDYWxsYmFjayB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IHVzZVJhbmRvbUlkIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLXJhbmRvbS1pZFwiO1xyXG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgdXNlQnV0dG9uTGlrZUV2ZW50SGFuZGxlcnMgfSBmcm9tIFwiLi91c2UtYnV0dG9uXCI7XHJcbi8qKlxyXG4gKiBBZGRzIGFuIElEIGFuZCBcImFyaWEtbGFiZWxsZWRieVwiIGZvciB0d28gZWxlbWVudHMsIGFuIFwiaW5wdXRcIiBlbGVtZW50IGFuZCBhIFwibGFiZWxcIiBlbGVtZW50LlxyXG4gKlxyXG4gKiBSZXR1cm5zIHRoZSBgdXNlUmVmZXJlbmNlZElkUHJvcHNgIGhvb2tzIGlmIHlvdSBuZWVkIHRvIGFsc28gYWRkIG90aGVyIElELXJlZmVyZW5jaW5nIGF0dHJpYnV0ZXMsIGxpa2UgYGZvcmBcclxuICpcclxuICogQHNlZSB1c2VJbnB1dExhYmVsXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlR2VuZXJpY0xhYmVsKHsgbGFiZWxQcmVmaXgsIGlucHV0UHJlZml4LCBiYWNrdXBUZXh0IH0gPSB7IGxhYmVsUHJlZml4OiBcImxhYmVsLVwiLCBpbnB1dFByZWZpeDogXCJpbnB1dC1cIiB9KSB7XHJcbiAgICBjb25zdCB7IGVsZW1lbnQ6IGxhYmVsRWxlbWVudCwgZ2V0RWxlbWVudDogZ2V0TGFiZWxFbGVtZW50LCB1c2VSZWZFbGVtZW50UHJvcHM6IHVzZUxhYmVsUmVmRWxlbWVudFByb3BzIH0gPSB1c2VSZWZFbGVtZW50KCk7XHJcbiAgICBjb25zdCB7IGVsZW1lbnQ6IGlucHV0RWxlbWVudCwgZ2V0RWxlbWVudDogZ2V0SW5wdXRFbGVtZW50LCB1c2VSZWZFbGVtZW50UHJvcHM6IHVzZUlucHV0UmVmRWxlbWVudFByb3BzIH0gPSB1c2VSZWZFbGVtZW50KCk7XHJcbiAgICBjb25zdCB7IHVzZVJhbmRvbUlkUHJvcHM6IHVzZUxhYmVsUmFuZG9tSWRQcm9wcywgaWQ6IGxhYmVsSWQsIHJhbmRvbUlkOiBsYWJlbFJhbmRvbUlkLCB1c2VSZWZlcmVuY2VkSWRQcm9wczogdXNlUmVmZXJlbmNlZExhYmVsSWRQcm9wcyB9ID0gdXNlUmFuZG9tSWQoeyBwcmVmaXg6IGxhYmVsUHJlZml4IH0pO1xyXG4gICAgY29uc3QgeyB1c2VSYW5kb21JZFByb3BzOiB1c2VJbnB1dFJhbmRvbUlkUHJvcHMsIGlkOiBpbnB1dElkLCByYW5kb21JZDogaW5wdXRSYW5kb21JZCwgdXNlUmVmZXJlbmNlZElkUHJvcHM6IHVzZVJlZmVyZW5jZWRJbnB1dElkUHJvcHMgfSA9IHVzZVJhbmRvbUlkKHsgcHJlZml4OiBpbnB1dFByZWZpeCB9KTtcclxuICAgIGNvbnN0IGxhYmVsSGFzTW91bnRlZCA9ICEhKGxhYmVsRWxlbWVudCk7XHJcbiAgICBjb25zdCBpbnB1dEhhc01vdW50ZWQgPSAhIShpbnB1dEVsZW1lbnQpO1xyXG4gICAgY29uc3QgdXNlR2VuZXJpY0xhYmVsTGFiZWwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiB1c2VHZW5lcmljTGFiZWxMYWJlbCgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB1c2VHZW5lcmljTGFiZWxMYWJlbFByb3BzOiAocHJvcHMpID0+IHsgcmV0dXJuIHVzZUxhYmVsUmFuZG9tSWRQcm9wcyh1c2VMYWJlbFJlZkVsZW1lbnRQcm9wcyhwcm9wcykpOyB9XHJcbiAgICAgICAgfTtcclxuICAgIH0sIFtdKTtcclxuICAgIGNvbnN0IHVzZUdlbmVyaWNMYWJlbElucHV0ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlR2VuZXJpY0xhYmVsSW5wdXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdXNlR2VuZXJpY0xhYmVsSW5wdXRQcm9wczogKHsgXCJhcmlhLWxhYmVsbGVkYnlcIjogYXJpYUxhYmVsbGVkYnksIFwiYXJpYS1sYWJlbFwiOiBhcmlhTGFiZWwsIC4uLnByb3BzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAodXNlSW5wdXRSYW5kb21JZFByb3BzKHVzZVJlZmVyZW5jZWRMYWJlbElkUHJvcHMoXCJhcmlhLWxhYmVsbGVkYnlcIikodXNlSW5wdXRSZWZFbGVtZW50UHJvcHModXNlTWVyZ2VkUHJvcHMoKSh7IFwiYXJpYS1sYWJlbFwiOiAoIWxhYmVsSGFzTW91bnRlZCA/IGJhY2t1cFRleHQgOiBhcmlhTGFiZWwpID8/IGFyaWFMYWJlbCB9LCBwcm9wcykpKSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0sIFtsYWJlbEhhc01vdW50ZWRdKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlR2VuZXJpY0xhYmVsSW5wdXQsXHJcbiAgICAgICAgdXNlR2VuZXJpY0xhYmVsTGFiZWwsXHJcbiAgICAgICAgdXNlUmVmZXJlbmNlZExhYmVsSWRQcm9wcyxcclxuICAgICAgICB1c2VSZWZlcmVuY2VkSW5wdXRJZFByb3BzLFxyXG4gICAgICAgIGxhYmVsSWQsXHJcbiAgICAgICAgaW5wdXRJZCxcclxuICAgICAgICBsYWJlbEVsZW1lbnQsXHJcbiAgICAgICAgaW5wdXRFbGVtZW50LFxyXG4gICAgICAgIGdldExhYmVsRWxlbWVudCxcclxuICAgICAgICBnZXRJbnB1dEVsZW1lbnQsXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBIYW5kbGVzIHRoZSBhdHRyaWJ1dGVzIGBpZGAsIGBmb3JgLCBhbmQgYGFyaWEtbGFiZWxsZWRieWAgZm9yIHRvIHJlbGF0ZWQgZWxlbWVudHMuXHJcbiAqXHJcbiAqIEl0J3MgYXNzdW1lZCB0aGF0IHRoZSBsYWJlbCBpcyBhbiBgSFRNTExhYmVsRWxlbWVudGAsIGFuZCB0aGUgaW5wdXQgaXMgc29tZXRoaW5nIGZvciB3aGljaFxyXG4gKiB0aGUgYGZvcmAgYXR0cmlidXRlIGNhbiByZWZlcmVuY2UuXHJcbiAqXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlSW5wdXRMYWJlbCh7IGxhYmVsUHJlZml4LCBpbnB1dFByZWZpeCB9ID0geyBsYWJlbFByZWZpeDogXCJsYWJlbC1cIiwgaW5wdXRQcmVmaXg6IFwiaW5wdXQtXCIgfSkge1xyXG4gICAgY29uc3QgeyB1c2VHZW5lcmljTGFiZWxJbnB1dCwgdXNlR2VuZXJpY0xhYmVsTGFiZWwsIHVzZVJlZmVyZW5jZWRJbnB1dElkUHJvcHMsIHVzZVJlZmVyZW5jZWRMYWJlbElkUHJvcHMsIGlucHV0SWQsIGxhYmVsSWQsIGlucHV0RWxlbWVudCwgZ2V0SW5wdXRFbGVtZW50LCBsYWJlbEVsZW1lbnQsIGdldExhYmVsRWxlbWVudCB9ID0gdXNlR2VuZXJpY0xhYmVsKHsgbGFiZWxQcmVmaXgsIGlucHV0UHJlZml4IH0pO1xyXG4gICAgY29uc3QgdXNlSW5wdXRMYWJlbExhYmVsID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlSW5wdXRMYWJlbExhYmVsKHsgdGFnIH0pIHtcclxuICAgICAgICBjb25zdCB7IHVzZUdlbmVyaWNMYWJlbExhYmVsUHJvcHMgfSA9IHVzZUdlbmVyaWNMYWJlbExhYmVsKCk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdXNlSW5wdXRMYWJlbExhYmVsUHJvcHMocHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdpdGhGb3IgPSB1c2VSZWZlcmVuY2VkSW5wdXRJZFByb3BzKFwiZm9yXCIpKHByb3BzKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdpdGhvdXRGb3IgPSBwcm9wcztcclxuICAgICAgICAgICAgICAgIHJldHVybiB1c2VHZW5lcmljTGFiZWxMYWJlbFByb3BzKHRhZyA9PSBcImxhYmVsXCIgPyB3aXRoRm9yIDogd2l0aG91dEZvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSwgW3VzZUdlbmVyaWNMYWJlbElucHV0XSk7XHJcbiAgICBjb25zdCB1c2VJbnB1dExhYmVsSW5wdXQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiB1c2VJbnB1dExhYmVsSW5wdXQoKSB7XHJcbiAgICAgICAgY29uc3QgeyB1c2VHZW5lcmljTGFiZWxJbnB1dFByb3BzIH0gPSB1c2VHZW5lcmljTGFiZWxJbnB1dCgpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHVzZUlucHV0TGFiZWxJbnB1dFByb3BzKHByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlR2VuZXJpY0xhYmVsSW5wdXRQcm9wcyhwcm9wcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSwgW3VzZUdlbmVyaWNMYWJlbExhYmVsXSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVzZUlucHV0TGFiZWxMYWJlbCxcclxuICAgICAgICB1c2VJbnB1dExhYmVsSW5wdXQsXHJcbiAgICAgICAgbGFiZWxJZCxcclxuICAgICAgICBpbnB1dElkLFxyXG4gICAgICAgIGlucHV0RWxlbWVudCxcclxuICAgICAgICBsYWJlbEVsZW1lbnQsXHJcbiAgICAgICAgZ2V0SW5wdXRFbGVtZW50LFxyXG4gICAgICAgIGdldExhYmVsRWxlbWVudFxyXG4gICAgfTtcclxufVxyXG5jb25zdCBoYW5kbGVzSW5wdXQgPSAodGFnLCBsYWJlbFBvc2l0aW9uLCB3aGljaCkgPT4ge1xyXG4gICAgaWYgKGxhYmVsUG9zaXRpb24gPT09IFwic2VwYXJhdGVcIikge1xyXG4gICAgICAgIGlmICh3aGljaCA9PT0gXCJpbnB1dC1lbGVtZW50XCIpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGVsc2UgaWYgKHdoaWNoID09PSBcImxhYmVsLWVsZW1lbnRcIilcclxuICAgICAgICAgICAgcmV0dXJuIHRhZyAhPSBcImlucHV0XCI7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChsYWJlbFBvc2l0aW9uID09PSBcIndyYXBwaW5nXCIpIHtcclxuICAgICAgICBpZiAod2hpY2ggPT09IFwiaW5wdXQtZWxlbWVudFwiKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYgKHdoaWNoID09IFwibGFiZWwtZWxlbWVudFwiKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEhhbmRsZXMgbGFiZWwgdHlwZSAod3JhcHBpbmcgb3Igc2VwYXJhdGUpIGZvciBjaGVja2JveGVzLCByYWRpb3MsIHN3aXRjaGVzLCBldGMuXHJcbiAqIEBwYXJhbSBwYXJhbTBcclxuICogQHJldHVybnNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VDaGVja2JveExpa2UoeyBkaXNhYmxlZCwgbGFiZWxQb3NpdGlvbiwgb25JbnB1dCwgcm9sZSB9KSB7XHJcbiAgICBjb25zdCBzdGFibGVPbklucHV0ID0gdXNlU3RhYmxlQ2FsbGJhY2soKGUpID0+IHsgZS5wcmV2ZW50RGVmYXVsdCgpOyBvbklucHV0Py4oZSk7IH0pO1xyXG4gICAgY29uc3QgeyBpbnB1dElkLCBsYWJlbElkLCB1c2VJbnB1dExhYmVsSW5wdXQ6IHVzZUlMSW5wdXQsIHVzZUlucHV0TGFiZWxMYWJlbDogdXNlSUxMYWJlbCwgZ2V0TGFiZWxFbGVtZW50LCBnZXRJbnB1dEVsZW1lbnQgfSA9IHVzZUlucHV0TGFiZWwoeyBsYWJlbFByZWZpeDogXCJhcmlhLWNoZWNrYm94LWxhYmVsLVwiLCBpbnB1dFByZWZpeDogXCJhcmlhLWNoZWNrYm94LWlucHV0LVwiIH0pO1xyXG4gICAgY29uc3QgdXNlQ2hlY2tib3hMaWtlSW5wdXRFbGVtZW50ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlQ2hlY2tib3hJbnB1dEVsZW1lbnQoeyB0YWcgfSkge1xyXG4gICAgICAgIGNvbnN0IHsgdXNlSW5wdXRMYWJlbElucHV0UHJvcHM6IHVzZUlMSW5wdXRQcm9wcyB9ID0gdXNlSUxJbnB1dCgpO1xyXG4gICAgICAgIGNvbnN0IHsgZWxlbWVudCwgdXNlUmVmRWxlbWVudFByb3BzIH0gPSB1c2VSZWZFbGVtZW50KCk7XHJcbiAgICAgICAgcmV0dXJuIHsgaW5wdXRFbGVtZW50OiBlbGVtZW50LCB1c2VDaGVja2JveExpa2VJbnB1dEVsZW1lbnRQcm9wcyB9O1xyXG4gICAgICAgIGZ1bmN0aW9uIHVzZUNoZWNrYm94TGlrZUlucHV0RWxlbWVudFByb3BzKHsgLi4ucDAgfSkge1xyXG4gICAgICAgICAgICAvLyBGb3Igc29tZSByZWFzb24sIENocm9tZSB3b24ndCBmaXJlIG9uSW5wdXQgZXZlbnRzIGZvciByYWRpbyBidXR0b25zIHRoYXQgYXJlIHRhYkluZGV4PS0xPz9cclxuICAgICAgICAgICAgLy8gTmVlZHMgaW52ZXN0aWdhdGluZywgYnV0IG9uSW5wdXQgd29ya3MgZmluZSBpbiBGaXJlZm94XHJcbiAgICAgICAgICAgIC8vIFRPRE9cclxuICAgICAgICAgICAgbGV0IHByb3BzID0gdXNlQnV0dG9uTGlrZUV2ZW50SGFuZGxlcnModGFnLCBkaXNhYmxlZCB8fCAhaGFuZGxlc0lucHV0KHRhZywgbGFiZWxQb3NpdGlvbiwgXCJpbnB1dC1lbGVtZW50XCIpID8gdW5kZWZpbmVkIDogc3RhYmxlT25JbnB1dCwgdW5kZWZpbmVkKSh7fSk7XHJcbiAgICAgICAgICAgIGlmICh0YWcgPT0gXCJpbnB1dFwiKVxyXG4gICAgICAgICAgICAgICAgcHJvcHMub25JbnB1dCA9IChlKSA9PiBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHByb3BzID0gdXNlUmVmRWxlbWVudFByb3BzKHVzZUlMSW5wdXRQcm9wcyhwcm9wcykpO1xyXG4gICAgICAgICAgICBpZiAobGFiZWxQb3NpdGlvbiA9PSBcIndyYXBwaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIC8vIEJlY2F1c2UgdGhlIHdyYXBwZWQgbGFiZWwgaGFuZGxlcyBhbGwgaW50ZXJhY3Rpb25zLFxyXG4gICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhpcyBlbGVtZW50IGNhbid0IGJlIGludGVyYWN0ZWQgd2l0aFxyXG4gICAgICAgICAgICAgICAgLy8gZXZlbiBpZiBpdCdzIGFuIGlucHV0IGVsZW1lbnQuXHJcbiAgICAgICAgICAgICAgICBwcm9wcy5pbmVydCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBwcm9wcy50YWJJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgcHJvcHMub25Gb2N1cyA9IGUgPT4gZ2V0TGFiZWxFbGVtZW50KCkuZm9jdXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0YWcgIT0gXCJpbnB1dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMucm9sZSA9IHJvbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMudGFiSW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcHJvcHNbXCJhcmlhLWRpc2FibGVkXCJdID0gZGlzYWJsZWQudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHMoKShwMCwgcHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIFt1c2VJTElucHV0LCByb2xlLCBsYWJlbFBvc2l0aW9uLCBkaXNhYmxlZF0pO1xyXG4gICAgY29uc3QgdXNlQ2hlY2tib3hMaWtlTGFiZWxFbGVtZW50ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlQ2hlY2tib3hMYWJlbEVsZW1lbnQoeyB0YWcgfSkge1xyXG4gICAgICAgIGNvbnN0IHsgdXNlSW5wdXRMYWJlbExhYmVsUHJvcHM6IHVzZUlMTGFiZWxQcm9wcyB9ID0gdXNlSUxMYWJlbCh7IHRhZyB9KTtcclxuICAgICAgICBmdW5jdGlvbiB1c2VDaGVja2JveExpa2VMYWJlbEVsZW1lbnRQcm9wcyh7IC4uLnAwIH0pIHtcclxuICAgICAgICAgICAgbGV0IG5ld1Byb3BzID0gdXNlQnV0dG9uTGlrZUV2ZW50SGFuZGxlcnMoXCJkaXZcIiwgZGlzYWJsZWQgfHwgIWhhbmRsZXNJbnB1dCh0YWcsIGxhYmVsUG9zaXRpb24sIFwibGFiZWwtZWxlbWVudFwiKSA/IHVuZGVmaW5lZCA6IHN0YWJsZU9uSW5wdXQsIHVuZGVmaW5lZCkoe30pO1xyXG4gICAgICAgICAgICBpZiAobGFiZWxQb3NpdGlvbiA9PSBcIndyYXBwaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIG5ld1Byb3BzLnRhYkluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgIG5ld1Byb3BzLnJvbGUgPSByb2xlO1xyXG4gICAgICAgICAgICAgICAgbmV3UHJvcHNbXCJhcmlhLWRpc2FibGVkXCJdID0gZGlzYWJsZWQudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoZSBvbmUgY2FzZSB3aGVyZSB0aGVyZSdzIGFsbW9zdCBub3RoaW5nIHRvIGRvXHJcbiAgICAgICAgICAgICAgICAvLyBUaGUgbW9zdCBub3JtYWwgY2FzZSB3aGVyZSBldmVyeXRoaW5nIGFjdHMgYWNjb3JkaW5nIG5vcm1hbCBIVE1MIG1lY2hhbmljcy5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHMoKShuZXdQcm9wcywgdXNlSUxMYWJlbFByb3BzKHAwKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IHVzZUNoZWNrYm94TGlrZUxhYmVsRWxlbWVudFByb3BzIH07XHJcbiAgICB9LCBbdXNlSUxMYWJlbCwgcm9sZSwgbGFiZWxQb3NpdGlvbl0pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VDaGVja2JveExpa2VJbnB1dEVsZW1lbnQsXHJcbiAgICAgICAgdXNlQ2hlY2tib3hMaWtlTGFiZWxFbGVtZW50LFxyXG4gICAgICAgIGdldExhYmVsRWxlbWVudCxcclxuICAgICAgICBnZXRJbnB1dEVsZW1lbnRcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLWxhYmVsLmpzLm1hcCIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IGVuaGFuY2VFdmVudCwgRXZlbnREZXRhaWwgfSBmcm9tIFwiLi9wcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VDaGVja2JveExpa2UgfSBmcm9tIFwiLi91c2UtbGFiZWxcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUFyaWFDaGVja2JveCh7IGxhYmVsUG9zaXRpb24sIGNoZWNrZWQsIG9uSW5wdXQsIGRpc2FibGVkIH0pIHtcclxuICAgIGNvbnN0IG9uSW5wdXRFbmhhbmNlZCA9IChlKSA9PiBvbklucHV0Py4oZW5oYW5jZUV2ZW50KGUsIHsgY2hlY2tlZDogIWNoZWNrZWQgfSkpO1xyXG4gICAgY29uc3QgeyBnZXRJbnB1dEVsZW1lbnQsIGdldExhYmVsRWxlbWVudCwgdXNlQ2hlY2tib3hMaWtlSW5wdXRFbGVtZW50LCB1c2VDaGVja2JveExpa2VMYWJlbEVsZW1lbnQgfSA9IHVzZUNoZWNrYm94TGlrZSh7IGxhYmVsUG9zaXRpb24sIHJvbGU6IFwiY2hlY2tib3hcIiwgZGlzYWJsZWQsIG9uSW5wdXQ6IG9uSW5wdXRFbmhhbmNlZCB9KTtcclxuICAgIGNvbnN0IHVzZUNoZWNrYm94SW5wdXRFbGVtZW50ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlQ2hlY2tib3hJbnB1dEVsZW1lbnQoeyB0YWcgfSkge1xyXG4gICAgICAgIGNvbnN0IHsgaW5wdXRFbGVtZW50LCB1c2VDaGVja2JveExpa2VJbnB1dEVsZW1lbnRQcm9wcyB9ID0gdXNlQ2hlY2tib3hMaWtlSW5wdXRFbGVtZW50KHsgdGFnIH0pO1xyXG4gICAgICAgIGNvbnN0IGlzTWl4ZWQgPSAoY2hlY2tlZCA9PSBcIm1peGVkXCIpO1xyXG4gICAgICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0YWcgPT09IFwiaW5wdXRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudC5pbmRldGVybWluYXRlID0gaXNNaXhlZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIFtpbnB1dEVsZW1lbnQsIGlzTWl4ZWQsIHRhZ10pO1xyXG4gICAgICAgIHJldHVybiB7IHVzZUNoZWNrYm94SW5wdXRFbGVtZW50UHJvcHMgfTtcclxuICAgICAgICBmdW5jdGlvbiB1c2VDaGVja2JveElucHV0RWxlbWVudFByb3BzKHsgLi4ucDAgfSkge1xyXG4gICAgICAgICAgICBsZXQgcHJvcHMgPSB1c2VDaGVja2JveExpa2VJbnB1dEVsZW1lbnRQcm9wcyhwMCk7XHJcbiAgICAgICAgICAgIHByb3BzLmNoZWNrZWQgPz89ICEhY2hlY2tlZDtcclxuICAgICAgICAgICAgaWYgKGxhYmVsUG9zaXRpb24gPT0gXCJzZXBhcmF0ZVwiKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wc1tcImFyaWEtY2hlY2tlZFwiXSA9IGNoZWNrZWQudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0YWcgIT0gXCJpbnB1dFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnRhYkluZGV4ID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGFnID09IFwiaW5wdXRcIilcclxuICAgICAgICAgICAgICAgIHByb3BzLnR5cGUgPSBcImNoZWNrYm94XCI7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9wcztcclxuICAgICAgICB9XHJcbiAgICB9LCBbY2hlY2tlZCwgbGFiZWxQb3NpdGlvbiwgZGlzYWJsZWRdKTtcclxuICAgIGNvbnN0IHVzZUNoZWNrYm94TGFiZWxFbGVtZW50ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlQ2hlY2tib3hMYWJlbEVsZW1lbnQoeyB0YWcgfSkge1xyXG4gICAgICAgIGNvbnN0IHsgdXNlQ2hlY2tib3hMaWtlTGFiZWxFbGVtZW50UHJvcHMgfSA9IHVzZUNoZWNrYm94TGlrZUxhYmVsRWxlbWVudCh7IHRhZyB9KTtcclxuICAgICAgICBmdW5jdGlvbiB1c2VDaGVja2JveExhYmVsRWxlbWVudFByb3BzKHsgLi4ucHJvcHMgfSkge1xyXG4gICAgICAgICAgICBpZiAobGFiZWxQb3NpdGlvbiA9PSBcIndyYXBwaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHByb3BzW1wiYXJpYS1jaGVja2VkXCJdID0gY2hlY2tlZC50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhZyAhPSBcImlucHV0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMudGFiSW5kZXggPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VDaGVja2JveExpa2VMYWJlbEVsZW1lbnRQcm9wcyhwcm9wcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIDtcclxuICAgICAgICByZXR1cm4geyB1c2VDaGVja2JveExhYmVsRWxlbWVudFByb3BzIH07XHJcbiAgICB9LCBbdXNlQ2hlY2tib3hMaWtlTGFiZWxFbGVtZW50LCBkaXNhYmxlZCwgbGFiZWxQb3NpdGlvbl0pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VDaGVja2JveElucHV0RWxlbWVudCxcclxuICAgICAgICB1c2VDaGVja2JveExhYmVsRWxlbWVudFxyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtY2hlY2tib3guanMubWFwIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtbWVyZ2VkLXByb3BzXCI7XHJcbmltcG9ydCB7IHVzZVJhbmRvbUlkIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLXJhbmRvbS1pZFwiO1xyXG5pbXBvcnQgeyB1c2VSZWZFbGVtZW50IH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLXJlZi1lbGVtZW50XCI7XHJcbmltcG9ydCB7IHVzZUZvY3VzVHJhcCB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1mb2N1cy10cmFwXCI7XHJcbmltcG9ydCB7IHVzZUdsb2JhbEhhbmRsZXIgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtZXZlbnQtaGFuZGxlclwiO1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1zdGF0ZVwiO1xyXG4vKipcclxuICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgYSBtb2RhbC1saWtlIHNvZnQtZGlzbWlzcyBpbnRlcmFjdGlvbi5cclxuICpcclxuICogVGhhdCBpcywgYW55IGNsaWNrcyBvciB0YXBzIG91dHNpZGUgb2YgdGhlIGdpdmVuIGNvbXBvbmVudCxcclxuICogb3IgYW55IHRpbWUgdGhlIEVzY2FwZSBrZXkgaXMgcHJlc3NlZCB3aXRoaW4gdGhlIGNvbXBvbmVudCxcclxuICogKHdpdGggdmFyaW91cyBicm93c2VyIG9kZGl0aWVzIHJlZ2FyZGluZyBjbGlja3Mgb24gYmxhbmsgb3IgaW5lcnQgYXJlYXMgaGFuZGxlZClcclxuICogdGhlIGNvbXBvbmVudCB3aWxsIHJlcXVlc3QgdG8gY2xvc2UgaXRzZWxmLlxyXG4gKlxyXG4gKiBPZiBjb3Vyc2UsIGlmIHlvdSBkb24ndCBkbyBhbnl0aGluZyBpbiB0aGUgYG9uQ2xvc2VgIGZ1bmN0aW9uLFxyXG4gKiBpdCB3b24ndCBiZSBhIHNvZnQgZGlzbWlzcyBhbnltb3JlLlxyXG4gKlxyXG4gKiBAcGFyYW0gcGFyYW0wXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlU29mdERpc21pc3MoeyBvbkNsb3NlIH0pIHtcclxuICAgIGNvbnN0IHsgZWxlbWVudCwgdXNlUmVmRWxlbWVudFByb3BzIH0gPSB1c2VSZWZFbGVtZW50KCk7XHJcbiAgICBmdW5jdGlvbiBvbkJhY2tkcm9wQ2xpY2soZSkge1xyXG4gICAgICAgIC8vIEJhc2ljYWxseSwgXCJ3YXMgdGhpcyBldmVudCBmaXJlZCBvbiB0aGUgcm9vdC1tb3N0IGVsZW1lbnQsIG9yIGF0IGxlYXN0IGFuIGVsZW1lbnQgbm90IGNvbnRhaW5lZCBieSB0aGUgbW9kYWw/XCJcclxuICAgICAgICAvLyBFaXRoZXIgY291bGQgYmUgaG93IHRoZSBicm93c2VyIGhhbmRsZXMgdGhlc2Ugc29ydHMgb2YgXCJpbnRlcmFjdGluZyB3aXRoIG5vdGhpbmdcIiBldmVudHMuXHJcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCAhKGVsZW1lbnQgJiYgZS50YXJnZXQgaW5zdGFuY2VvZiBFbGVtZW50ICYmIGVsZW1lbnQgaW5zdGFuY2VvZiBFbGVtZW50ICYmIGVsZW1lbnQuY29udGFpbnMoZS50YXJnZXQpKSkge1xyXG4gICAgICAgICAgICBvbkNsb3NlKFwiYmFja2Ryb3BcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gU2luY2UgZXZlcnl0aGluZyBlbHNlIGlzIGluZXJ0LCB3ZSBsaXN0ZW4gZm9yIGNhcHR1cmVkIGNsaWNrcyBvbiB0aGUgd2luZG93XHJcbiAgICAvLyAod2UgZG9uJ3QgdXNlIG9uQ2xpY2sgc2luY2UgdGhhdCBkb2Vzbid0IGZpcmUgd2hlbiBjbGlja2VkIG9uIGVtcHR5L2luZXJ0IGFyZWFzKVxyXG4gICAgLy8gTm90ZTogV2UgbmVlZCBhICpzZXBhcmF0ZSogdG91Y2ggZXZlbnQgb24gbW9iaWxlIFNhZmFyaSwgYmVjYXVzZVxyXG4gICAgLy8gaXQgZG9lc24ndCBsZXQgY2xpY2sgZXZlbnRzIGJ1YmJsZSBvciBiZSBjYXB0dXJlZCBmcm9tIHRyYWRpdGlvbmFsbHkgbm9uLWludGVyYWN0aXZlIGVsZW1lbnRzLFxyXG4gICAgLy8gYnV0IHRvdWNoIGV2ZW50cyB3b3JrIGFzIGV4cGVjdGVkLlxyXG4gICAgdXNlR2xvYmFsSGFuZGxlcih3aW5kb3csIFwibW91c2Vkb3duXCIsICFvcGVuID8gbnVsbCA6IG9uQmFja2Ryb3BDbGljaywgeyBjYXB0dXJlOiB0cnVlIH0pO1xyXG4gICAgdXNlR2xvYmFsSGFuZGxlcih3aW5kb3csIFwidG91Y2hzdGFydFwiLCAhb3BlbiA/IG51bGwgOiBvbkJhY2tkcm9wQ2xpY2ssIHsgY2FwdHVyZTogdHJ1ZSB9KTtcclxuICAgIGNvbnN0IG9uS2V5RG93biA9IChlKSA9PiB7XHJcbiAgICAgICAgaWYgKGUua2V5ID09PSBcIkVzY2FwZVwiKSB7XHJcbiAgICAgICAgICAgIG9uQ2xvc2UoXCJlc2NhcGVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiB7IHVzZVNvZnREaXNtaXNzUHJvcHM6IChwcm9wcykgPT4gdXNlTWVyZ2VkUHJvcHMoKSh1c2VSZWZFbGVtZW50UHJvcHMoeyBvbktleURvd24gfSksIHByb3BzKSB9O1xyXG59XHJcbi8qKlxyXG4gKiBBIGdlbmVyaWMgbW9kYWwgaG9vaywgdXNlZCBieSBtb2RhbCBkaWFsb2dzLCBidXQgY2FuIGFsc29cclxuICogYmUgdXNlZCBieSBhbnl0aGluZyB0aGF0J3MgbW9kYWwgd2l0aCBhIGJhY2tkcm9wLlxyXG4gKiBAcGFyYW0gcGFyYW0wXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlQXJpYU1vZGFsKHsgb3Blbiwgb25DbG9zZSB9KSB7XHJcbiAgICBjb25zdCBbbW9kYWxEZXNjcmliZWRCeUJvZHksIHNldE1vZGFsRGVzY3JpYmVkQnlCb2R5XSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIHVzZUhpZGVTY3JvbGwob3Blbik7XHJcbiAgICBjb25zdCB7IGlkOiBtb2RhbElkLCB1c2VSYW5kb21JZFByb3BzOiB1c2VNb2RhbElkUHJvcHMsIHVzZVJlZmVyZW5jZWRJZFByb3BzOiB1c2VNb2RhbFJlZmVyZW5jaW5nSWRQcm9wcyB9ID0gdXNlUmFuZG9tSWQoeyBwcmVmaXg6IFwiYXJpYS1tb2RhbC1cIiB9KTtcclxuICAgIGNvbnN0IHsgaWQ6IGJvZHlJZCwgdXNlUmFuZG9tSWRQcm9wczogdXNlQm9keUlkUHJvcHMsIHVzZVJlZmVyZW5jZWRJZFByb3BzOiB1c2VCb2R5UmVmZXJlbmNpbmdJZFByb3BzIH0gPSB1c2VSYW5kb21JZCh7IHByZWZpeDogXCJhcmlhLW1vZGFsLWJvZHktXCIgfSk7XHJcbiAgICBjb25zdCB7IGlkOiB0aXRsZUlkLCB1c2VSYW5kb21JZFByb3BzOiB1c2VUaXRsZUlkUHJvcHMsIHVzZVJlZmVyZW5jZWRJZFByb3BzOiB1c2VUaXRsZVJlZmVyZW5jaW5nSWRQcm9wcyB9ID0gdXNlUmFuZG9tSWQoeyBwcmVmaXg6IFwiYXJpYS1tb2RhbC10aXRsZS1cIiB9KTtcclxuICAgIGNvbnN0IHsgdXNlU29mdERpc21pc3NQcm9wcyB9ID0gdXNlU29mdERpc21pc3MoeyBvbkNsb3NlIH0pO1xyXG4gICAgY29uc3QgdXNlTW9kYWxCYWNrZHJvcCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHVzZU1vZGFsQmFja2Ryb3AoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gdXNlTW9kYWxCYWNrZHJvcFByb3BzKHByb3BzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VNZXJnZWRQcm9wcygpKHt9LCBwcm9wcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IHVzZU1vZGFsQmFja2Ryb3BQcm9wcyB9O1xyXG4gICAgfSwgW10pO1xyXG4gICAgY29uc3QgdXNlTW9kYWxQcm9wcyA9IGZ1bmN0aW9uICh7IFwiYXJpYS1tb2RhbFwiOiBhcmlhTW9kYWwsIHJvbGUsIC4uLnAwIH0pIHtcclxuICAgICAgICBjb25zdCB7IHVzZUZvY3VzVHJhcFByb3BzIH0gPSB1c2VGb2N1c1RyYXAoeyB0cmFwQWN0aXZlOiBvcGVuIH0pO1xyXG4gICAgICAgIGNvbnN0IHAxID0gdXNlVGl0bGVSZWZlcmVuY2luZ0lkUHJvcHMoXCJhcmlhLWxhYmVsbGVkYnlcIikocDApO1xyXG4gICAgICAgIGNvbnN0IHAyID0gdXNlTW9kYWxJZFByb3BzKHAxKTtcclxuICAgICAgICBjb25zdCBwRmluYWwgPSB1c2VCb2R5UmVmZXJlbmNpbmdJZFByb3BzKFwiYXJpYS1kZXNjcmliZWRieVwiKShwMik7XHJcbiAgICAgICAgcmV0dXJuIHVzZUZvY3VzVHJhcFByb3BzKHVzZU1lcmdlZFByb3BzKCkodXNlU29mdERpc21pc3NQcm9wcyh7IHJvbGU6IFwiZGlhbG9nXCIgfSksIG1vZGFsRGVzY3JpYmVkQnlCb2R5ID8gcEZpbmFsIDogcDIpKTtcclxuICAgIH07XHJcbiAgICBjb25zdCB1c2VNb2RhbFRpdGxlID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlTW9kYWxUaXRsZSgpIHtcclxuICAgICAgICBjb25zdCB1c2VNb2RhbFRpdGxlUHJvcHMgPSBmdW5jdGlvbiAocHJvcHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZVRpdGxlSWRQcm9wcyhwcm9wcyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4geyB1c2VNb2RhbFRpdGxlUHJvcHMgfTtcclxuICAgIH0sIFtdKTtcclxuICAgIGNvbnN0IHVzZU1vZGFsQm9keSA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHVzZU1vZGFsQm9keSh7IGRlc2NyaXB0aXZlIH0pIHtcclxuICAgICAgICBzZXRNb2RhbERlc2NyaWJlZEJ5Qm9keShkZXNjcmlwdGl2ZSk7XHJcbiAgICAgICAgY29uc3QgdXNlTW9kYWxCb2R5UHJvcHMgPSBmdW5jdGlvbiAocHJvcHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZUJvZHlJZFByb3BzKHByb3BzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB7IHVzZU1vZGFsQm9keVByb3BzIH07XHJcbiAgICB9LCBbXSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVzZU1vZGFsUHJvcHMsXHJcbiAgICAgICAgdXNlTW9kYWxUaXRsZSxcclxuICAgICAgICB1c2VNb2RhbEJvZHksXHJcbiAgICAgICAgdXNlTW9kYWxCYWNrZHJvcFxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogQWxsb3dzIGZvciBoaWRpbmcgdGhlIHNjcm9sbCBiYXIgb2YgdGhlIHJvb3QgSFRNTCBlbGVtZW50XHJcbiAqIHdpdGhvdXQgc2hpZnRpbmcgdGhlIGxheW91dCBvZiB0aGUgcGFnZSBtb3JlIHRoYW4gYWRkaW5nIGEgZm93IHBpeGVsc1xyXG4gKiBvZiBwYWRkaW5nIHRvIHRoZSByb290IGVsZW1lbnQgaWYgbmVjZXNzYXJ5LlxyXG4gKiBAcGFyYW0gaGlkZVNjcm9sbFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUhpZGVTY3JvbGwoaGlkZVNjcm9sbCkge1xyXG4gICAgY29uc3QgW3Njcm9sbGJhcldpZHRoLCBzZXRTY3JvbGxiYXJXaWR0aCwgZ2V0U2Nyb2xsYmFyV2lkdGhdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmIChoaWRlU2Nyb2xsKSB7XHJcbiAgICAgICAgICAgIGxldCB3aWR0aFdpdGhTY3JvbGxCYXIgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsV2lkdGg7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZG9jdW1lbnQtc2Nyb2xsLWhpZGRlblwiKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRhdGFzZXRbXCJzY3JvbGxIaWRlcnNcIl0gPSAoKyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZGF0YXNldFtcInNjcm9sbEhpZGVyc1wiXSB8fCBcIjBcIikgKyAxKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBsZXQgd2lkdGhXaXRob3V0U2Nyb2xsQmFyID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFdpZHRoO1xyXG4gICAgICAgICAgICBsZXQgc2Nyb2xsYmFyV2lkdGggPSAod2lkdGhXaXRob3V0U2Nyb2xsQmFyIC0gd2lkdGhXaXRoU2Nyb2xsQmFyKTtcclxuICAgICAgICAgICAgLy8gRmFpbHNhZmUgLS0gaWYgdGhpcyBtZWFzdXJpbmcgdHJpY2sgZG9lcyBzb21ldGhpbmcgdW5leHBlY3RlZCwganVzdCBpZ25vcmUgaXRcclxuICAgICAgICAgICAgaWYgKHNjcm9sbGJhcldpZHRoID4gODApXHJcbiAgICAgICAgICAgICAgICBzY3JvbGxiYXJXaWR0aCA9IDA7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tc2Nyb2xsYmFyLXdpZHRoXCIsIGAke3Njcm9sbGJhcldpZHRofXB4YCk7XHJcbiAgICAgICAgICAgIHNldFNjcm9sbGJhcldpZHRoKHNjcm9sbGJhcldpZHRoKTtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kYXRhc2V0W1wic2Nyb2xsSGlkZXJzXCJdID0gKCsoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRhdGFzZXRbXCJzY3JvbGxIaWRlcnNcIl0gfHwgXCIwXCIpIC0gMSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZGF0YXNldFtcInNjcm9sbEhpZGVyc1wiXSA9PSBcIjBcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXNjcm9sbC1oaWRlcnNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkb2N1bWVudC1zY3JvbGwtaGlkZGVuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH0sIFtoaWRlU2Nyb2xsXSk7XHJcbiAgICByZXR1cm4geyBzY3JvbGxiYXJXaWR0aCwgZ2V0U2Nyb2xsYmFyV2lkdGggfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtbW9kYWwuanMubWFwIiwiaW1wb3J0IHsgdXNlQXJpYU1vZGFsIH0gZnJvbSBcIi4vdXNlLW1vZGFsXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VBcmlhRGlhbG9nKHsgb3Blbiwgb25DbG9zZSB9KSB7XHJcbiAgICAvLyBUT0RPOiBEaWZmZXJlbmNlcyBiZXR3ZWVuIGRpYWxvZyBhbmQgbW9kYWwgZ28gaGVyZSwgcHJlc3VtYWJseVxyXG4gICAgY29uc3QgeyB1c2VNb2RhbEJhY2tkcm9wLCB1c2VNb2RhbEJvZHksIHVzZU1vZGFsUHJvcHMsIHVzZU1vZGFsVGl0bGUgfSA9IHVzZUFyaWFNb2RhbCh7IG9wZW4sIG9uQ2xvc2UgfSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVzZURpYWxvZ1Byb3BzOiB1c2VNb2RhbFByb3BzLFxyXG4gICAgICAgIHVzZURpYWxvZ1RpdGxlOiB1c2VNb2RhbFRpdGxlLFxyXG4gICAgICAgIHVzZURpYWxvZ0JvZHk6IHVzZU1vZGFsQm9keSxcclxuICAgICAgICB1c2VEaWFsb2dCYWNrZHJvcDogdXNlTW9kYWxCYWNrZHJvcFxyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtZGlhbG9nLmpzLm1hcCIsImltcG9ydCB7IHVzZUFjdGl2ZUVsZW1lbnQsIHVzZUhhc0ZvY3VzIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLWxheW91dC1lZmZlY3RcIjtcclxuaW1wb3J0IHsgdXNlTGlzdE5hdmlnYXRpb24gfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtbGlzdC1uYXZpZ2F0aW9uXCI7XHJcbmltcG9ydCB7IHVzZU1lcmdlZFByb3BzIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLW1lcmdlZC1wcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VSZWZFbGVtZW50IH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLXJlZi1lbGVtZW50XCI7XHJcbmltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1zdGF0ZVwiO1xyXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyBFdmVudERldGFpbCB9IGZyb20gXCIuL3Byb3BzXCI7XHJcbmltcG9ydCB7IHVzZUJ1dHRvbkxpa2VFdmVudEhhbmRsZXJzIH0gZnJvbSBcIi4vdXNlLWJ1dHRvblwiO1xyXG5pbXBvcnQgeyB1c2VHZW5lcmljTGFiZWwgfSBmcm9tIFwiLi91c2UtbGFiZWxcIjtcclxuaW1wb3J0IHsgdXNlQ2hpbGRGbGFnIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLWNoaWxkLW1hbmFnZXJcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUFyaWFMaXN0Ym94U2luZ2xlKHsgc2VsZWN0ZWRJbmRleCwgb25TZWxlY3QsIHNlbGVjdGlvbk1vZGUsIC4uLmFyZ3MgfSkge1xyXG4gICAgY29uc3QgeyBsYXN0Rm9jdXNlZElubmVyLCB1c2VIYXNGb2N1c1Byb3BzIH0gPSB1c2VIYXNGb2N1cygpO1xyXG4gICAgY29uc3QgeyB1c2VHZW5lcmljTGFiZWxJbnB1dCwgdXNlR2VuZXJpY0xhYmVsTGFiZWwsIHVzZVJlZmVyZW5jZWRJbnB1dElkUHJvcHMsIHVzZVJlZmVyZW5jZWRMYWJlbElkUHJvcHMsIGlucHV0RWxlbWVudCB9ID0gdXNlR2VuZXJpY0xhYmVsKHsgbGFiZWxQcmVmaXg6IFwiYXJpYS1saXN0Ym94LWxhYmVsLVwiLCBpbnB1dFByZWZpeDogXCJhcmlhLWxpc3Rib3gtXCIgfSk7XHJcbiAgICBjb25zdCB7IHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGQsIG5hdmlnYXRlVG9JbmRleCwgbWFuYWdlZENoaWxkcmVuLCBzZXRUYWJiYWJsZUluZGV4LCB0YWJiYWJsZUluZGV4LCBmb2N1c0N1cnJlbnQsIGN1cnJlbnRUeXBlYWhlYWQsIGludmFsaWRUeXBlYWhlYWQgfSA9IHVzZUxpc3ROYXZpZ2F0aW9uKHsgLi4uYXJncywgZm9jdXNPbkNoYW5nZTogbGFzdEZvY3VzZWRJbm5lciB9KTtcclxuICAgIGNvbnN0IHsgdXNlR2VuZXJpY0xhYmVsSW5wdXRQcm9wcyB9ID0gdXNlR2VuZXJpY0xhYmVsSW5wdXQoKTtcclxuICAgIGNvbnN0IHN0YWJsZU9uU2VsZWN0ID0gdXNlU3RhYmxlQ2FsbGJhY2sob25TZWxlY3QgPz8gKCgpID0+IHsgfSkpO1xyXG4gICAgdXNlQ2hpbGRGbGFnKHNlbGVjdGVkSW5kZXgsIG1hbmFnZWRDaGlsZHJlbi5sZW5ndGgsIChpLCBzZWxlY3RlZCkgPT4gbWFuYWdlZENoaWxkcmVuW2ldPy5zZXRTZWxlY3RlZChzZWxlY3RlZCkpO1xyXG4gICAgdXNlTGF5b3V0RWZmZWN0KChbXSkgPT4ge1xyXG4gICAgICAgIG5hdmlnYXRlVG9JbmRleChzZWxlY3RlZEluZGV4KTtcclxuICAgIH0sIFtzZWxlY3RlZEluZGV4LCBtYW5hZ2VkQ2hpbGRyZW4ubGVuZ3RoXSk7XHJcbiAgICBjb25zdCBjaGlsZENvdW50ID0gbWFuYWdlZENoaWxkcmVuLmxlbmd0aDtcclxuICAgIGNvbnN0IHsgbGFzdEFjdGl2ZUVsZW1lbnQgfSA9IHVzZUFjdGl2ZUVsZW1lbnQoKTtcclxuICAgIGxldCBhbnlSYWRpb3NGb2N1c2VkID0gKCEhaW5wdXRFbGVtZW50Py5jb250YWlucyhsYXN0QWN0aXZlRWxlbWVudCkpO1xyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAoIWFueVJhZGlvc0ZvY3VzZWQpXHJcbiAgICAgICAgICAgIHNldFRhYmJhYmxlSW5kZXgoc2VsZWN0ZWRJbmRleCk7XHJcbiAgICB9LCBbYW55UmFkaW9zRm9jdXNlZCwgc2VsZWN0ZWRJbmRleCwgc2V0VGFiYmFibGVJbmRleF0pO1xyXG4gICAgY29uc3QgdXNlTGlzdGJveFNpbmdsZUl0ZW0gPSB1c2VDYWxsYmFjaygoaW5mbykgPT4ge1xyXG4gICAgICAgIGNvbnN0IFtzZWxlY3RlZCwgc2V0U2VsZWN0ZWQsIGdldFNlbGVjdGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgICAgICBjb25zdCB7IHRhYmJhYmxlLCB1c2VMaXN0TmF2aWdhdGlvblNpYmxpbmdQcm9wcywgdXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzIH0gPSB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkKHsgc2V0U2VsZWN0ZWQsIC4uLmluZm8gfSk7XHJcbiAgICAgICAgY29uc3QgeyBlbGVtZW50LCB1c2VSZWZFbGVtZW50UHJvcHMgfSA9IHVzZVJlZkVsZW1lbnQoKTtcclxuICAgICAgICBjb25zdCBpbmRleCA9IGluZm8uaW5kZXg7XHJcbiAgICAgICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQgJiYgdGFiYmFibGUgJiYgc2VsZWN0aW9uTW9kZSA9PSBcImZvY3VzXCIpIHtcclxuICAgICAgICAgICAgICAgIHN0YWJsZU9uU2VsZWN0Py4oeyB0YXJnZXQ6IGVsZW1lbnQsIGN1cnJlbnRUYXJnZXQ6IGVsZW1lbnQsIFtFdmVudERldGFpbF06IHsgc2VsZWN0ZWRJbmRleDogaW5kZXggfSB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIFtlbGVtZW50LCB0YWJiYWJsZSwgc2VsZWN0aW9uTW9kZSwgaW5kZXhdKTtcclxuICAgICAgICByZXR1cm4geyB1c2VMaXN0Ym94U2luZ2xlSXRlbVByb3BzLCB0YWJiYWJsZSwgc2VsZWN0ZWQsIGdldFNlbGVjdGVkIH07XHJcbiAgICAgICAgZnVuY3Rpb24gdXNlTGlzdGJveFNpbmdsZUl0ZW1Qcm9wcyhwcm9wcykge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdQcm9wcyA9IHVzZUJ1dHRvbkxpa2VFdmVudEhhbmRsZXJzKGluZm8udGFnLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbmF2aWdhdGVUb0luZGV4KGluZm8uaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhYmxlT25TZWxlY3Q/Lih7IHRhcmdldDogZWxlbWVudCwgY3VycmVudFRhcmdldDogZWxlbWVudCwgW0V2ZW50RGV0YWlsXTogeyBzZWxlY3RlZEluZGV4OiBpbmRleCB9IH0pO1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9LCB1bmRlZmluZWQpKHt9KTtcclxuICAgICAgICAgICAgcHJvcHMucm9sZSA9IFwib3B0aW9uXCI7XHJcbiAgICAgICAgICAgIHByb3BzW1wiYXJpYS1zZXRzaXplXCJdID0gKGNoaWxkQ291bnQpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHByb3BzW1wiYXJpYS1wb3NpbnNldFwiXSA9IChpbmZvLmluZGV4ICsgMSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgcHJvcHNbXCJhcmlhLXNlbGVjdGVkXCJdID0gc2VsZWN0ZWQudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQcm9wcyh1c2VNZXJnZWRQcm9wcygpKG5ld1Byb3BzLCB1c2VSZWZFbGVtZW50UHJvcHMocHJvcHMpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW3VzZUxpc3ROYXZpZ2F0aW9uQ2hpbGQsIHNlbGVjdGlvbk1vZGUsIGNoaWxkQ291bnRdKTtcclxuICAgIGNvbnN0IHVzZUxpc3Rib3hTaW5nbGVMYWJlbCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHVzZUxpc3Rib3hTaW5nbGVMYWJlbCgpIHtcclxuICAgICAgICBmdW5jdGlvbiB1c2VMaXN0Ym94U2luZ2xlTGFiZWxQcm9wcyhwcm9wcykge1xyXG4gICAgICAgICAgICBjb25zdCB7IHVzZUdlbmVyaWNMYWJlbExhYmVsUHJvcHMgfSA9IHVzZUdlbmVyaWNMYWJlbExhYmVsKCk7XHJcbiAgICAgICAgICAgIHVzZUdlbmVyaWNMYWJlbExhYmVsUHJvcHMocHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyB1c2VMaXN0Ym94U2luZ2xlTGFiZWxQcm9wcyB9O1xyXG4gICAgfSwgW3VzZUdlbmVyaWNMYWJlbExhYmVsXSk7XHJcbiAgICByZXR1cm4geyB1c2VMaXN0Ym94U2luZ2xlSXRlbSwgdXNlTGlzdGJveFNpbmdsZVByb3BzLCB1c2VMaXN0Ym94U2luZ2xlTGFiZWwsIHRhYmJhYmxlSW5kZXgsIGZvY3VzOiBmb2N1c0N1cnJlbnQsIGN1cnJlbnRUeXBlYWhlYWQsIGludmFsaWRUeXBlYWhlYWQgfTtcclxuICAgIGZ1bmN0aW9uIHVzZUxpc3Rib3hTaW5nbGVQcm9wcyhwcm9wcykge1xyXG4gICAgICAgIHByb3BzLnJvbGUgPSBcImxpc3Rib3hcIjtcclxuICAgICAgICByZXR1cm4gdXNlSGFzRm9jdXNQcm9wcyh1c2VHZW5lcmljTGFiZWxJbnB1dFByb3BzKHByb3BzKSk7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLWxpc3Rib3gtc2luZ2xlLmpzLm1hcCIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyB1c2VIYXNGb2N1cyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1oYXMtZm9jdXNcIjtcclxuaW1wb3J0IHsgdXNlQWN0aXZlRWxlbWVudCB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1hY3RpdmUtZWxlbWVudFwiO1xyXG5pbXBvcnQgeyB1c2VTdGFibGVDYWxsYmFjayB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1zdGFibGUtY2FsbGJhY2tcIjtcclxuaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLWxheW91dC1lZmZlY3RcIjtcclxuaW1wb3J0IHsgdXNlTGlzdE5hdmlnYXRpb24gfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtbGlzdC1uYXZpZ2F0aW9uXCI7XHJcbmltcG9ydCB7IHVzZU1lcmdlZFByb3BzIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLW1lcmdlZC1wcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VSYW5kb21JZCB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1yYW5kb20taWRcIjtcclxuaW1wb3J0IHsgdXNlUmVmRWxlbWVudCB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1yZWYtZWxlbWVudFwiO1xyXG5pbXBvcnQgeyBFdmVudERldGFpbCwgZW5oYW5jZUV2ZW50IH0gZnJvbSBcIi4vcHJvcHNcIjtcclxuaW1wb3J0IHsgdXNlVGltZW91dCB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IHVzZVNvZnREaXNtaXNzIH0gZnJvbSBcIi4vdXNlLW1vZGFsXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VBcmlhTWVudSh7IGNvbGxhdG9yLCBrZXlOYXZpZ2F0aW9uLCBub1R5cGVhaGVhZCwgbm9XcmFwLCB0eXBlYWhlYWRUaW1lb3V0LCAuLi5hcmdzIH0pIHtcclxuICAgIGNvbnN0IFtmb2N1c1RyYXBBY3RpdmUsIHNldEZvY3VzVHJhcEFjdGl2ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBsZXQgb25DbG9zZSA9IGFyZ3Mub25DbG9zZTtcclxuICAgIGxldCBvbk9wZW4gPSBhcmdzLm9uT3BlbjtcclxuICAgIGxldCBtZW51YmFyID0gYXJncy5tZW51YmFyO1xyXG4gICAgbGV0IG9wZW4gPSAobWVudWJhciA/IHRydWUgOiBhcmdzLm9wZW4pO1xyXG4gICAgY29uc3Qgc3RhYmxlT25DbG9zZSA9IHVzZVN0YWJsZUNhbGxiYWNrKG9uQ2xvc2UgPz8gKCgpID0+IHsgfSkpO1xyXG4gICAgLy8gVE9ETzogSXQncyBhd2t3YXJkIHRoYXQgdGhlIGJ1dHRvbiBmb2N1cyBwcm9wcyBhcmUgb3V0IGhlcmUgd2hlcmUgd2UgZG9uJ3QgaGF2ZSBpdHMgdHlwZSxcclxuICAgIC8vIGJ1dCBmb2N1cyBtYW5hZ2VtZW50IGlzIHN1cGVyIHNlbnNpdGl2ZSwgYW5kIGV2ZW4gd2FpdGluZyBmb3IgYSB1c2VMYXlvdXRFZmZlY3QgdG8gc3luYyBzdGF0ZSBoZXJlXHJcbiAgICAvLyB3b3VsZCBiZSB0b28gbGF0ZSwgc28gaXQgd291bGQgbG9vayBsaWtlIHRoZXJlJ3MgYSBtb21lbnQgYmV0d2VlbiBtZW51IGZvY3VzIGxvc3QgYW5kIGJ1dHRvbiBmb2N1cyBnYWluZWRcclxuICAgIC8vIHdoZXJlIG5vdGhpbmcgaXMgZm9jdXNlZC4gXHJcbiAgICBjb25zdCB7IGZvY3VzZWRJbm5lcjogbWVudUhhc0ZvY3VzLCB1c2VIYXNGb2N1c1Byb3BzOiB1c2VNZW51SGFzRm9jdXNQcm9wcywgfSA9IHVzZUhhc0ZvY3VzKCk7XHJcbiAgICBjb25zdCB7IGZvY3VzZWRJbm5lcjogYnV0dG9uSGFzRm9jdXMsIHVzZUhhc0ZvY3VzUHJvcHM6IHVzZUJ1dHRvbkhhc0ZvY3VzUHJvcHMgfSA9IHVzZUhhc0ZvY3VzKCk7XHJcbiAgICBjb25zdCB7IGFjdGl2ZUVsZW1lbnQsIGxhc3RBY3RpdmVFbGVtZW50LCB3aW5kb3dGb2N1c2VkIH0gPSB1c2VBY3RpdmVFbGVtZW50KCk7XHJcbiAgICBjb25zdCB7IG1hbmFnZWRDaGlsZHJlbiwgdXNlTGlzdE5hdmlnYXRpb25DaGlsZCwgdGFiYmFibGVJbmRleCwgZm9jdXNDdXJyZW50OiBmb2N1c01lbnUgfSA9IHVzZUxpc3ROYXZpZ2F0aW9uKHsgY29sbGF0b3IsIGtleU5hdmlnYXRpb24sIG5vVHlwZWFoZWFkLCBub1dyYXAsIHR5cGVhaGVhZFRpbWVvdXQsIGZvY3VzT25DaGFuZ2U6IChtZW51SGFzRm9jdXMgfHwgYnV0dG9uSGFzRm9jdXMpIH0pO1xyXG4gICAgY29uc3QgeyB1c2VSYW5kb21JZFByb3BzOiB1c2VNZW51SWRQcm9wcywgdXNlUmVmZXJlbmNlZElkUHJvcHM6IHVzZU1lbnVJZFJlZmVyZW5jaW5nUHJvcHMgfSA9IHVzZVJhbmRvbUlkKHsgcHJlZml4OiBcImFyaWEtbWVudS1cIiB9KTtcclxuICAgIGNvbnN0IFtvcGVuZXJFbGVtZW50LCBzZXRPcGVuZXJFbGVtZW50XSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgeyB1c2VTb2Z0RGlzbWlzc1Byb3BzIH0gPSB1c2VTb2Z0RGlzbWlzcyh7IG9uQ2xvc2U6IHN0YWJsZU9uQ2xvc2UgfSk7XHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHNldEZvY3VzVHJhcEFjdGl2ZShvcGVuKTtcclxuICAgIH0sIFtvcGVuXSk7XHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmIChmb2N1c1RyYXBBY3RpdmUpXHJcbiAgICAgICAgICAgIGZvY3VzTWVudT8uKCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBvcGVuZXJFbGVtZW50Py5mb2N1cygpO1xyXG4gICAgfSwgW2ZvY3VzTWVudSwgZm9jdXNUcmFwQWN0aXZlXSk7XHJcbiAgICAvLyBGb2N1cyBtYW5hZ2VtZW50IGlzIHJlYWxseSBmaW5pY2t5LCBhbmQgdGhlcmUncyBhbHdheXMgZ29pbmcgdG8gYmUgXHJcbiAgICAvLyBhbiBlZGdlIGNhc2Ugd2hlcmUgbm90aGluZydzIGZvY3VzZWQgZm9yIHR3byBjb25zZWN1dGl2ZSBmcmFtZXMgXHJcbiAgICAvLyBvbiBpT1Mgb3Igd2hhdGV2ZXIsIHdoaWNoIHdvdWxkIGltbWVkaWF0ZWx5IGNsb3NlIHRoZSBtZW51IFxyXG4gICAgLy8gYW55IHRpbWUgaXQncyBiZWVuIG9wZW5lZC4gU28gYW55IHRpbWUgaXQgKmxvb2tzKiBsaWtlIHdlIHNob3VsZCBjbG9zZSxcclxuICAgIC8vIHRyeSB3YWl0aW5nIDEwMG1zLiBJZiBpdCdzIHN0aWxsIHRydWUgdGhlbiwgdGhlbiB5ZWFoLCB3ZSBzaG91bGQgY2xvc2UuXHJcbiAgICBsZXQgc2hvdWxkQ2xvc2UgPSAoZm9jdXNUcmFwQWN0aXZlICYmIHdpbmRvd0ZvY3VzZWQgJiYgIW1lbnVIYXNGb2N1cyAmJiAhYnV0dG9uSGFzRm9jdXMpO1xyXG4gICAgdXNlVGltZW91dCh7XHJcbiAgICAgICAgdGltZW91dDogMTAwLFxyXG4gICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGRDbG9zZSkge1xyXG4gICAgICAgICAgICAgICAgb25DbG9zZT8uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHRyaWdnZXJJbmRleDogYCR7c2hvdWxkQ2xvc2V9YFxyXG4gICAgfSk7XHJcbiAgICAvLyBBIG1lbnUgc2VudGluYWwgaXMgYSBoaWRkZW4gYnV0IGZvY3VzYWJsZSBlbGVtZW50IHRoYXQgY29tZXMgYXQgdGhlIHN0YXJ0IG9yIGVuZCBvZiB0aGUgZWxlbWVudFxyXG4gICAgLy8gdGhhdCwgd2hlbiBhY3RpdmF0ZWQgb3IgZm9jdXNlZCBvdmVyLCBjbG9zZXMgdGhlIG1lbnUuXHJcbiAgICAvLyAoaWYgZm9jdXNlZCB3aXRoaW4gMTAwbXMgb2YgdGhlIG9wZW4gcHJvcCBjaGFuZ2luZywgaW5zdGVhZCBvZlxyXG4gICAgLy8gY2xvc2luZyB0aGUgbWVudSwgZm9jdXNpbmcgdGhlIHNlbnRpbmVsIGltbWVkaWF0ZWx5IGFza3MgdGhlIG1lbnUgdG8gZm9jdXMgaXRzZWxmKS5cclxuICAgIC8vIFRoaXMgZXhpc3RzIGJlY2F1c2Ugd2hpbGUgbW91c2UgdXNlcnMgY2FuIGNsaWNrIG91dCBvZiBhIG1lbnVcclxuICAgIC8vIGFuZCBrZXlib2FyZCB1c2VycyBjYW4gZXNjYXBlIHRvIGNsb3NlIHRoZSBtZW51LFxyXG4gICAgLy8gc2NyZWVuIHJlYWRlcnMgYW5kIG90aGVyIGlucHV0IG1ldGhvZHMgdGhhdCBkb24ndCB1c2UgdGhvc2UgdHdvIGJlY29tZSBzdHVjay5cclxuICAgIGNvbnN0IHVzZU1lbnVTZW50aW5lbCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcclxuICAgICAgICBjb25zdCBbZmlyc3RTZW50aW5lbElzQWN0aXZlLCBzZXRGaXJzdFNlbnRpbmVsSXNBY3RpdmVdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgICAgIHVzZVRpbWVvdXQoeyBjYWxsYmFjazogKCkgPT4geyBzZXRGaXJzdFNlbnRpbmVsSXNBY3RpdmUob3Blbik7IH0sIHRpbWVvdXQ6IDEwMCwgdHJpZ2dlckluZGV4OiBgJHtmaXJzdFNlbnRpbmVsSXNBY3RpdmV9YCB9KTtcclxuICAgICAgICBjb25zdCBvbkZvY3VzID0gZmlyc3RTZW50aW5lbElzQWN0aXZlID8gKCgpID0+IHN0YWJsZU9uQ2xvc2UoKSkgOiAoKCkgPT4gZm9jdXNNZW51Py4oKSk7XHJcbiAgICAgICAgY29uc3Qgb25DbGljayA9ICgpID0+IHN0YWJsZU9uQ2xvc2UoKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB1c2VNZW51U2VudGluZWxQcm9wczogZnVuY3Rpb24gKHApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1c2VNZXJnZWRQcm9wcygpKHsgb25Gb2N1cywgb25DbGljayB9LCBwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9LCBbZm9jdXNNZW51LCBvcGVuXSk7XHJcbiAgICBjb25zdCB1c2VNZW51QnV0dG9uID0gdXNlQ2FsbGJhY2soKHsgdGFnIH0pID0+IHtcclxuICAgICAgICBjb25zdCB7IGVsZW1lbnQsIGdldEVsZW1lbnQsIHVzZVJlZkVsZW1lbnRQcm9wcyB9ID0gdXNlUmVmRWxlbWVudCgpO1xyXG4gICAgICAgIHVzZUxheW91dEVmZmVjdCgoKSA9PiB7IHNldE9wZW5lckVsZW1lbnQoZWxlbWVudCk7IH0sIFtlbGVtZW50XSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdXNlTWVudUJ1dHRvblByb3BzOiBmdW5jdGlvbiAocCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHByb3BzID0gdXNlUmVmRWxlbWVudFByb3BzKHVzZU1lcmdlZFByb3BzKCkoeyBvbkNsaWNrOiAoKSA9PiB7IHJldHVybiBvcGVuID8gb25DbG9zZT8uKCkgOiBvbk9wZW4/LigpOyB9IH0sIHVzZU1lbnVJZFJlZmVyZW5jaW5nUHJvcHMoXCJhcmlhLWNvbnRyb2xzXCIpKHVzZUJ1dHRvbkhhc0ZvY3VzUHJvcHMocCkpKSk7XHJcbiAgICAgICAgICAgICAgICBwcm9wc1tcImFyaWEtaGFzcG9wdXBcIl0gPSBcIm1lbnVcIjtcclxuICAgICAgICAgICAgICAgIHByb3BzW1wiYXJpYS1leHBhbmRlZFwiXSA9IG9wZW4gPyBcInRydWVcIiA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9LCBbb3Blbiwgb25DbG9zZSwgb25PcGVuLCB1c2VNZW51SWRSZWZlcmVuY2luZ1Byb3BzXSk7XHJcbiAgICBjb25zdCB1c2VNZW51U3VibWVudUl0ZW0gPSB1c2VDYWxsYmFjaygoYXJncykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgdXNlTWVudVByb3BzLCB1c2VNZW51QnV0dG9uIH0gPSB1c2VBcmlhTWVudShhcmdzKTtcclxuICAgICAgICBjb25zdCB7IHVzZU1lbnVCdXR0b25Qcm9wcyB9ID0gdXNlTWVudUJ1dHRvbih7IHRhZzogXCJsaVwiIH0pO1xyXG4gICAgICAgIGNvbnN0IHsgZWxlbWVudCwgZ2V0RWxlbWVudCwgdXNlUmVmRWxlbWVudFByb3BzIH0gPSB1c2VSZWZFbGVtZW50KCk7XHJcbiAgICAgICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHsgc2V0T3BlbmVyRWxlbWVudChlbGVtZW50KTsgfSwgW2VsZW1lbnRdKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgICAgICBnZXRFbGVtZW50LFxyXG4gICAgICAgICAgICB1c2VNZW51UHJvcHMsXHJcbiAgICAgICAgICAgIHVzZU1lbnVTdWJtZW51SXRlbVByb3BzOiBmdW5jdGlvbiAoeyAuLi5wcm9wcyB9KSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wcy5yb2xlID0gXCJtZW51aXRlbVwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZVJlZkVsZW1lbnRQcm9wcyh1c2VNZW51QnV0dG9uUHJvcHModXNlTWVudUlkUmVmZXJlbmNpbmdQcm9wcyhcImFyaWEtY29udHJvbHNcIikocHJvcHMpKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSwgW10pO1xyXG4gICAgY29uc3QgdXNlTWVudUl0ZW0gPSB1c2VDYWxsYmFjaygoYXJncykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgdXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzIH0gPSB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkKGFyZ3MpO1xyXG4gICAgICAgIC8vIGNvbnN0IHsgZ2V0U3luY0hhbmRsZXIsIC4uLmFzeW5jSW5mbyB9ID0gdXNlQXN5bmNIYW5kbGVyPEU+KCkoeyBjYXB0dXJlOiBfID0+IHZvaWQgKDApIH0pO1xyXG4gICAgICAgIC8vIGNvbnN0IG9uQ2xpY2sgPSBnZXRTeW5jSGFuZGxlcihhc3luY0luZm8ucGVuZGluZyA/IG51bGwgOiAoYXJncy5vbkNsaWNrID8/IG51bGwpKTtcclxuICAgICAgICBjb25zdCBvbkNsaWNrID0gYXJncy5vbkNsaWNrO1xyXG4gICAgICAgIGZ1bmN0aW9uIHVzZU1lbnVJdGVtUHJvcHMoeyAuLi5wcm9wcyB9KSB7XHJcbiAgICAgICAgICAgIHByb3BzLnJvbGUgPSBcIm1lbnVpdGVtXCI7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VNZXJnZWRQcm9wcygpKHsgb25DbGljayB9LCB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkUHJvcHMocHJvcHMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdXNlTWVudUl0ZW1Qcm9wcyB9O1xyXG4gICAgfSwgW10pO1xyXG4gICAgY29uc3QgdXNlTWVudUl0ZW1DaGVja2JveCA9IHVzZUNhbGxiYWNrKChhcmdzKSA9PiB7XHJcbiAgICAgICAgLy9jb25zdCB7IGdldFN5bmNIYW5kbGVyLCAuLi5hc3luY0luZm8gfSA9IHVzZUFzeW5jSGFuZGxlcjxFPigpKHsgY2FwdHVyZTogXyA9PiAhYXJncy5jaGVja2VkIH0pO1xyXG4gICAgICAgIC8vY29uc3Qgb25DbGljayA9IGdldFN5bmNIYW5kbGVyKGFzeW5jSW5mby5wZW5kaW5nID8gbnVsbCA6IGFyZ3Mub25DaGFuZ2UpO1xyXG4gICAgICAgIGNvbnN0IG9uQ2xpY2sgPSAoZSkgPT4gYXJncy5vbkNoYW5nZShlbmhhbmNlRXZlbnQoZSwgeyBjaGVja2VkOiAhYXJncy5jaGVja2VkIH0pKTtcclxuICAgICAgICBmdW5jdGlvbiB1c2VNZW51SXRlbVByb3BzKHsgLi4ucHJvcHMgfSkge1xyXG4gICAgICAgICAgICBwcm9wcy5yb2xlID0gXCJtZW51aXRlbWNoZWNrYm94XCI7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VNZXJnZWRQcm9wcygpKHsgb25DbGljayB9LCBwcm9wcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IHVzZU1lbnVJdGVtUHJvcHMgfTtcclxuICAgIH0sIFtdKTtcclxuICAgIGZ1bmN0aW9uIHVzZU1lbnVQcm9wcyh7IC4uLnByb3BzIH0pIHtcclxuICAgICAgICBwcm9wcy5yb2xlID0gXCJtZW51XCI7XHJcbiAgICAgICAgZnVuY3Rpb24gb25LZXlEb3duKGUpIHtcclxuICAgICAgICAgICAgaWYgKGUua2V5ID09IFwiRXNjYXBlXCIgJiYgb25DbG9zZSkge1xyXG4gICAgICAgICAgICAgICAgb25DbG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1c2VNZW51SWRQcm9wcyh1c2VNZW51SGFzRm9jdXNQcm9wcyh1c2VNZXJnZWRQcm9wcygpKHsgb25LZXlEb3duIH0sIHVzZVNvZnREaXNtaXNzUHJvcHMocHJvcHMpKSkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB1c2VNZW51UHJvcHMsXHJcbiAgICAgICAgdXNlTWVudUJ1dHRvbixcclxuICAgICAgICB1c2VNZW51SXRlbSxcclxuICAgICAgICB1c2VNZW51U2VudGluZWwsXHJcbiAgICAgICAgdXNlTWVudUl0ZW1DaGVja2JveCxcclxuICAgICAgICB1c2VNZW51U3VibWVudUl0ZW0sXHJcbiAgICAgICAgZm9jdXNNZW51XHJcbiAgICB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1tZW51LmpzLm1hcCIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IHVzZUNoaWxkTWFuYWdlciB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1jaGlsZC1tYW5hZ2VyXCI7XHJcbmltcG9ydCB7IHVzZUxheW91dEVmZmVjdCB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1sYXlvdXQtZWZmZWN0XCI7XHJcbmltcG9ydCB7IHVzZUxpc3ROYXZpZ2F0aW9uIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLWxpc3QtbmF2aWdhdGlvblwiO1xyXG5pbXBvcnQgeyB1c2VNZXJnZWRQcm9wcyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1tZXJnZWQtcHJvcHNcIjtcclxuaW1wb3J0IHsgdXNlUmFuZG9tSWQgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtcmFuZG9tLWlkXCI7XHJcbmltcG9ydCB7IHVzZVN0YWJsZUNhbGxiYWNrIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLXN0YWJsZS1jYWxsYmFja1wiO1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1zdGF0ZVwiO1xyXG5pbXBvcnQgeyB1c2VCdXR0b25MaWtlRXZlbnRIYW5kbGVycyB9IGZyb20gXCIuL3VzZS1idXR0b25cIjtcclxuaW1wb3J0IHsgdXNlUmVmRWxlbWVudCB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1yZWYtZWxlbWVudFwiO1xyXG5pbXBvcnQgeyB1c2VIYXNGb2N1cywgdXNlTG9naWNhbERpcmVjdGlvbiwgdXNlU3RhYmxlR2V0dGVyIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgZW5oYW5jZUV2ZW50LCBFdmVudERldGFpbCB9IGZyb20gXCIuL3Byb3BzXCI7XHJcbmltcG9ydCB7IHVzZUNoaWxkRmxhZyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1jaGlsZC1tYW5hZ2VyXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VBcmlhVGFicyh7IHNlbGVjdGlvbk1vZGUsIHNlbGVjdGVkSW5kZXgsIG9uU2VsZWN0LCBvcmllbnRhdGlvbjogbG9naWNhbE9yaWVudGF0aW9uLCAuLi5hcmdzIH0pIHtcclxuICAgIGNvbnN0IHsgdXNlSGFzRm9jdXNQcm9wczogdXNlVGFiTGlzdEhhc0ZvY3VzUHJvcHMsIGZvY3VzZWRJbm5lcjogdGFiTGlzdEZvY3VzZWQgfSA9IHVzZUhhc0ZvY3VzKCk7XHJcbiAgICBjb25zdCB7IGVsZW1lbnQ6IGxpc3RFbGVtZW50LCB1c2VSZWZFbGVtZW50UHJvcHMgfSA9IHVzZVJlZkVsZW1lbnQoKTtcclxuICAgIGNvbnN0IHsgZ2V0TG9naWNhbERpcmVjdGlvbiwgY29udmVydFRvUGh5c2ljYWxPcmllbnRhdGlvbiB9ID0gdXNlTG9naWNhbERpcmVjdGlvbihsaXN0RWxlbWVudCk7XHJcbiAgICBjb25zdCBwaHlzaWNhbE9yaWVudGF0aW9uID0gY29udmVydFRvUGh5c2ljYWxPcmllbnRhdGlvbihsb2dpY2FsT3JpZW50YXRpb24pO1xyXG4gICAgY29uc3QgeyB1c2VSYW5kb21JZFByb3BzOiB1c2VUYWJMaXN0SWRQcm9wcywgdXNlUmVmZXJlbmNlZElkUHJvcHM6IHVzZVJlZmVyZW5jZWRUYWJMaXN0SWQgfSA9IHVzZVJhbmRvbUlkKHsgcHJlZml4OiBcImFyaWEtdGFiLWxpc3QtXCIgfSk7XHJcbiAgICBjb25zdCB7IHVzZVJhbmRvbUlkUHJvcHM6IHVzZVRhYkxhYmVsSWRQcm9wcywgdXNlUmVmZXJlbmNlZElkUHJvcHM6IHVzZVJlZmVyZW5jZWRUYWJMYWJlbElkIH0gPSB1c2VSYW5kb21JZCh7IHByZWZpeDogXCJhcmlhLXRhYi1sYWJlbC1cIiB9KTtcclxuICAgIGNvbnN0IHsgbWFuYWdlZENoaWxkcmVuOiBtYW5hZ2VkVGFicywgbmF2aWdhdGVUb0luZGV4LCB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkLCB0YWJiYWJsZUluZGV4LCBpbnZhbGlkVHlwZWFoZWFkLCBjdXJyZW50VHlwZWFoZWFkLCBmb2N1c0N1cnJlbnQgfSA9IHVzZUxpc3ROYXZpZ2F0aW9uKHsgLi4uYXJncywgZm9jdXNPbkNoYW5nZTogdGFiTGlzdEZvY3VzZWQsIGtleU5hdmlnYXRpb246IGxvZ2ljYWxPcmllbnRhdGlvbiB9KTtcclxuICAgIGNvbnN0IHsgbWFuYWdlZENoaWxkcmVuOiBtYW5hZ2VkUGFuZWxzLCB1c2VNYW5hZ2VkQ2hpbGQ6IHVzZU1hbmFnZWRUYWJQYW5lbCB9ID0gdXNlQ2hpbGRNYW5hZ2VyKCk7XHJcbiAgICBjb25zdCBzdGFibGVPblNlbGVjdCA9IHVzZVN0YWJsZUNhbGxiYWNrKG9uU2VsZWN0KTtcclxuICAgIGNvbnN0IGNoaWxkQ291bnQgPSBtYW5hZ2VkVGFicy5sZW5ndGg7XHJcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGZvciAobGV0IGNoaWxkIG9mIG1hbmFnZWRUYWJzKVxyXG4gICAgICAgICAgICBjaGlsZC5zZXRTZWxlY3Rpb25Nb2RlKHNlbGVjdGlvbk1vZGUpO1xyXG4gICAgfSwgW3NlbGVjdGlvbk1vZGVdKTtcclxuICAgIHVzZUNoaWxkRmxhZyhzZWxlY3RlZEluZGV4LCBtYW5hZ2VkVGFicy5sZW5ndGgsIChpLCBzZWxlY3RlZCkgPT4gbWFuYWdlZFRhYnNbaV0/LnNldFNlbGVjdGVkKHNlbGVjdGVkKSk7XHJcbiAgICB1c2VDaGlsZEZsYWcoc2VsZWN0ZWRJbmRleCwgbWFuYWdlZFBhbmVscy5sZW5ndGgsIChpLCB2aXNpYmxlKSA9PiBtYW5hZ2VkUGFuZWxzW2ldPy5zZXRWaXNpYmxlKHZpc2libGUpKTtcclxuICAgIHVzZUxheW91dEVmZmVjdCgoW3ByZXZDaGlsZENvdW50LCBwcmV2U2VsZWN0ZWRJbmRleF0pID0+IHtcclxuICAgICAgICBpZiAoc2VsZWN0ZWRJbmRleCAhPSBudWxsICYmIHNlbGVjdGlvbk1vZGUgPT0gXCJhY3RpdmF0ZVwiKSB7XHJcbiAgICAgICAgICAgIG1hbmFnZWRQYW5lbHNbc2VsZWN0ZWRJbmRleF0/LmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW2NoaWxkQ291bnQsIHNlbGVjdGVkSW5kZXgsIHNlbGVjdGlvbk1vZGVdKTtcclxuICAgIGNvbnN0IGdldFRhYkxpc3RJc0ZvY3VzZWQgPSB1c2VTdGFibGVHZXR0ZXIodGFiTGlzdEZvY3VzZWQpO1xyXG4gICAgY29uc3QgdXNlVGFiID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlVGFiKGluZm8pIHtcclxuICAgICAgICAvL2NvbnN0IFtzZWxlY3RlZFRhYklkLCBzZXRTZWxlY3RlZFRhYklkLCBnZXRTZWxlY3RlZFRhYklkXSA9IHVzZVN0YXRlPHN0cmluZyB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcclxuICAgICAgICBjb25zdCBbc2VsZWN0aW9uTW9kZUwsIHNldFNlbGVjdGlvbk1vZGVMXSA9IHVzZVN0YXRlKHNlbGVjdGlvbk1vZGUpO1xyXG4gICAgICAgIGNvbnN0IHsgZWxlbWVudCwgdXNlUmVmRWxlbWVudFByb3BzIH0gPSB1c2VSZWZFbGVtZW50KCk7XHJcbiAgICAgICAgY29uc3QgW3RhYlBhbmVsSWQsIHNldFRhYlBhbmVsSWRdID0gdXNlU3RhdGUodW5kZWZpbmVkKTtcclxuICAgICAgICBjb25zdCB7IHVzZVJhbmRvbUlkUHJvcHM6IHVzZVRhYklkUHJvcHMsIGlkOiB0YWJJZCwgZ2V0SWQ6IGdldFRhYklkIH0gPSB1c2VSYW5kb21JZCh7IHByZWZpeDogXCJhcmlhLXRhYi1cIiB9KTtcclxuICAgICAgICBjb25zdCBbc2VsZWN0ZWQsIHNldFNlbGVjdGVkLCBnZXRTZWxlY3RlZF0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgICAgICBjb25zdCB7IHRhYmJhYmxlLCB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkUHJvcHMsIHVzZUxpc3ROYXZpZ2F0aW9uU2libGluZ1Byb3BzIH0gPSB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkKHsgLi4uaW5mbywgc2V0U2VsZWN0ZWQsIHRhYklkLCBzZXRUYWJQYW5lbElkLCBzZXRTZWxlY3Rpb25Nb2RlOiBzZXRTZWxlY3Rpb25Nb2RlTCB9KTtcclxuICAgICAgICBjb25zdCBnZXRJbmRleCA9IHVzZVN0YWJsZUdldHRlcihpbmZvLmluZGV4KTtcclxuICAgICAgICAvLyBjb25zdCB7IGdldFN5bmNIYW5kbGVyLCAuLi5hc3luY0luZm8gfSA9IHVzZUFzeW5jSGFuZGxlcjxFbGVtZW50PigpKHsgY2FwdHVyZTogKGU6IHVua25vd24pID0+IGluZm8uaW5kZXggfSk7XHJcbiAgICAgICAgLy8gY29uc3Qgb25TZWxlY3QgPSBnZXRTeW5jSGFuZGxlcihhc3luY0luZm8ucGVuZGluZz8gbnVsbCA6IChzdGFibGVBc3luY09uU2VsZWN0ID8/IG51bGwpKTtcclxuICAgICAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGFiYmFibGUgJiYgc2VsZWN0aW9uTW9kZUwgPT0gXCJmb2N1c1wiKSB7XHJcbiAgICAgICAgICAgICAgICBvblNlbGVjdCh7IHRhcmdldDogZWxlbWVudCwgY3VycmVudFRhcmdldDogZWxlbWVudCwgW0V2ZW50RGV0YWlsXTogeyBzZWxlY3RlZEluZGV4OiBnZXRJbmRleCgpIH0gfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBbdGFiYmFibGUsIHNlbGVjdGlvbk1vZGVMLCBlbGVtZW50XSk7XHJcbiAgICAgICAgdXNlRWZmZWN0KCgpID0+IHsgbWFuYWdlZFBhbmVsc1tpbmZvLmluZGV4XT8uc2V0VGFiSWQodGFiSWQpOyB9LCBbdGFiSWQsIGluZm8uaW5kZXhdKTtcclxuICAgICAgICAvKnVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZClcclxuICAgICAgICAgICAgICAgIHNldFNlbGVjdGVkVGFiSWQodGFiSWQpO1xyXG4gICAgICAgIH0sIFtzZWxlY3RlZCwgdGFiSWRdKSovXHJcbiAgICAgICAgZnVuY3Rpb24gdXNlVGFiUHJvcHMoeyAuLi5wcm9wcyB9KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1Byb3BzID0gdXNlQnV0dG9uTGlrZUV2ZW50SGFuZGxlcnMoaW5mby50YWcsIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBuYXZpZ2F0ZVRvSW5kZXgoaW5mby5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICBvblNlbGVjdD8uKGVuaGFuY2VFdmVudChlLCB7IHNlbGVjdGVkSW5kZXg6IGdldEluZGV4KCkgfSkpO1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9LCB1bmRlZmluZWQpKHByb3BzKTtcclxuICAgICAgICAgICAgbmV3UHJvcHMucm9sZSA9IFwidGFiXCI7XHJcbiAgICAgICAgICAgIG5ld1Byb3BzW1wiYXJpYS1zZWxlY3RlZFwiXSA9IChzZWxlY3RlZCA/PyBmYWxzZSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgbmV3UHJvcHNbXCJhcmlhLWNvbnRyb2xzXCJdID0gdGFiUGFuZWxJZDtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKCkoe30sIHVzZVRhYklkUHJvcHModXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzKHVzZVJlZkVsZW1lbnRQcm9wcyhuZXdQcm9wcykpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IHVzZVRhYlByb3BzLCBzZWxlY3RlZCB9O1xyXG4gICAgfSwgW10pO1xyXG4gICAgY29uc3QgdXNlVGFiUGFuZWwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiB1c2VQYW5lbChpbmZvKSB7XHJcbiAgICAgICAgLy9jb25zdCBbc2VsZWN0ZWRUYWJQYW5lbElkLCBzZXRTZWxlY3RlZFRhYlBhbmVsSWQsIGdldFNlbGVjdGVkVGFiUGFuZWxJZF0gPSB1c2VTdGF0ZTxzdHJpbmcgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XHJcbiAgICAgICAgY29uc3QgW3Nob3VsZEZvY3VzLCBzZXRTaG91bGRGb2N1c10gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICAgICAgY29uc3QgW3RhYklkLCBzZXRUYWJJZF0gPSB1c2VTdGF0ZSh1bmRlZmluZWQpO1xyXG4gICAgICAgIGNvbnN0IFtzZWxlY3RlZCwgc2V0U2VsZWN0ZWQsIGdldFNlbGVjdGVkXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgICAgIGNvbnN0IHsgdXNlUmFuZG9tSWRQcm9wczogdXNlUGFuZWxJZFByb3BzLCB1c2VSZWZlcmVuY2VkSWRQcm9wczogdXNlUmVmZXJlbmNlZFBhbmVsSWQsIGlkOiB0YWJQYW5lbElkIH0gPSB1c2VSYW5kb21JZCh7IHByZWZpeDogXCJhcmlhLXRhYi1wYW5lbC1cIiB9KTtcclxuICAgICAgICBjb25zdCB7IGVsZW1lbnQsIHVzZU1hbmFnZWRDaGlsZFByb3BzIH0gPSB1c2VNYW5hZ2VkVGFiUGFuZWwoeyAuLi5pbmZvLCB0YWJQYW5lbElkLCBzZXRUYWJJZCwgZm9jdXMsIHNldFZpc2libGU6IHNldFNlbGVjdGVkIH0pO1xyXG4gICAgICAgIGZ1bmN0aW9uIGZvY3VzKCkge1xyXG4gICAgICAgICAgICBpZiAoZ2V0VGFiTGlzdElzRm9jdXNlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRTaG91bGRGb2N1cyh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoc2hvdWxkRm9jdXMpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQ/LmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICBzZXRTaG91bGRGb2N1cyhmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBbZWxlbWVudCwgc2hvdWxkRm9jdXNdKTtcclxuICAgICAgICB1c2VFZmZlY3QoKCkgPT4geyBtYW5hZ2VkVGFic1tpbmZvLmluZGV4XT8uc2V0VGFiUGFuZWxJZCh0YWJQYW5lbElkKTsgfSwgW3RhYlBhbmVsSWQsIGluZm8uaW5kZXhdKTtcclxuICAgICAgICBmdW5jdGlvbiB1c2VUYWJQYW5lbFByb3BzKHsgLi4ucHJvcHMgfSkge1xyXG4gICAgICAgICAgICBwcm9wc1tcImFyaWEtbGFiZWxsZWRieVwiXSA9IG1hbmFnZWRUYWJzW2luZm8uaW5kZXhdPy50YWJJZDtcclxuICAgICAgICAgICAgcHJvcHMucm9sZSA9IFwidGFicGFuZWxcIjtcclxuICAgICAgICAgICAgcHJvcHMudGFiSW5kZXggPz89IC0xOyAvLyBNYWtlIHN1cmUgdGhlIHRhYiBwYW5lbCBpcyB0YWJiYWJsZS5cclxuICAgICAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKCkoe30sIHVzZVBhbmVsSWRQcm9wcyh1c2VNYW5hZ2VkQ2hpbGRQcm9wcyhwcm9wcykpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdXNlVGFiUGFuZWxQcm9wcywgc2VsZWN0ZWQgfTtcclxuICAgIH0sIFtdKTtcclxuICAgIGNvbnN0IHVzZVRhYnNMaXN0ID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlVGFiTGlzdCgpIHtcclxuICAgICAgICBmdW5jdGlvbiB1c2VUYWJMaXN0UHJvcHMoeyAuLi5wcm9wcyB9KSB7XHJcbiAgICAgICAgICAgIHByb3BzLnJvbGUgPSBcInRhYmxpc3RcIjtcclxuICAgICAgICAgICAgcHJvcHNbXCJhcmlhLW9yaWVudGF0aW9uXCJdID0gcGh5c2ljYWxPcmllbnRhdGlvbjtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZVJlZmVyZW5jZWRUYWJMYWJlbElkKFwiYXJpYS1sYWJlbGxlZGJ5XCIpKHVzZVRhYkxpc3RIYXNGb2N1c1Byb3BzKHVzZVJlZkVsZW1lbnRQcm9wcyhwcm9wcykpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdXNlVGFiTGlzdFByb3BzIH07XHJcbiAgICB9LCBbcGh5c2ljYWxPcmllbnRhdGlvbl0pO1xyXG4gICAgY29uc3QgdXNlVGFic0xhYmVsID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlVGFic0xhYmVsKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIHVzZVRhYnNMYWJlbFByb3BzKHsgLi4ucHJvcHMgfSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdXNlVGFiTGFiZWxJZFByb3BzKHByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdXNlVGFic0xhYmVsUHJvcHMgfTtcclxuICAgIH0sIFtdKTtcclxuICAgIHJldHVybiB7IHVzZVRhYiwgdXNlVGFiUGFuZWwsIHVzZVRhYnNMaXN0LCB1c2VUYWJzTGFiZWwsIHRhYmJhYmxlSW5kZXgsIGZvY3VzVGFiTGlzdDogZm9jdXNDdXJyZW50LCBjdXJyZW50VHlwZWFoZWFkLCBpbnZhbGlkVHlwZWFoZWFkIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlLXRhYnMuanMubWFwIiwiaW1wb3J0IHsgdXNlQWN0aXZlRWxlbWVudCwgdXNlSGFzRm9jdXMsIHVzZU1lcmdlZFByb3BzLCB1c2VSZWZFbGVtZW50LCB1c2VTdGFibGVDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVyc1wiO1xyXG5pbXBvcnQgeyB1c2VMaXN0TmF2aWdhdGlvbiB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1saXN0LW5hdmlnYXRpb25cIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IGVuaGFuY2VFdmVudCwgRXZlbnREZXRhaWwgfSBmcm9tIFwiLi9wcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VDaGVja2JveExpa2UgfSBmcm9tIFwiLi91c2UtbGFiZWxcIjtcclxuaW1wb3J0IHsgdXNlQ2hpbGRGbGFnIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLWNoaWxkLW1hbmFnZXJcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUFyaWFSYWRpb0dyb3VwKHsgbmFtZSwgc2VsZWN0ZWRWYWx1ZSwgb25JbnB1dCB9KSB7XHJcbiAgICBjb25zdCB7IGVsZW1lbnQsIHVzZVJlZkVsZW1lbnRQcm9wcyB9ID0gdXNlUmVmRWxlbWVudCgpO1xyXG4gICAgY29uc3QgW3NlbGVjdGVkSW5kZXgsIHNldFNlbGVjdGVkSW5kZXgsIGdldFNlbGVjdGVkSW5kZXhdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBieU5hbWUgPSB1c2VSZWYobmV3IE1hcCgpKTtcclxuICAgIGNvbnN0IHN0YWJsZU9uSW5wdXQgPSB1c2VTdGFibGVDYWxsYmFjayhvbklucHV0KTtcclxuICAgIGNvbnN0IHsgdXNlSGFzRm9jdXNQcm9wcywgbGFzdEZvY3VzZWRJbm5lciB9ID0gdXNlSGFzRm9jdXMoKTtcclxuICAgIGNvbnN0IHsgbWFuYWdlZENoaWxkcmVuLCB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkLCBzZXRUYWJiYWJsZUluZGV4LCB0YWJiYWJsZUluZGV4LCBmb2N1c0N1cnJlbnQsIGN1cnJlbnRUeXBlYWhlYWQsIGludmFsaWRUeXBlYWhlYWQgfSA9IHVzZUxpc3ROYXZpZ2F0aW9uKHsgZm9jdXNPbkNoYW5nZTogbGFzdEZvY3VzZWRJbm5lciB9KTtcclxuICAgIGNvbnN0IHVzZVJhZGlvR3JvdXBQcm9wcyA9IHVzZUNhbGxiYWNrKCh7IC4uLnByb3BzIH0pID0+IHtcclxuICAgICAgICBwcm9wcy5yb2xlID0gXCJyYWRpb2dyb3VwXCI7XHJcbiAgICAgICAgcmV0dXJuIHVzZVJlZkVsZW1lbnRQcm9wcyh1c2VIYXNGb2N1c1Byb3BzKHByb3BzKSk7XHJcbiAgICB9LCBbdXNlSGFzRm9jdXNQcm9wcywgdXNlUmVmRWxlbWVudFByb3BzXSk7XHJcbiAgICB1c2VDaGlsZEZsYWcoc2VsZWN0ZWRJbmRleCwgbWFuYWdlZENoaWxkcmVuLmxlbmd0aCwgKGksIGNoZWNrZWQpID0+IG1hbmFnZWRDaGlsZHJlbltpXT8uc2V0Q2hlY2tlZChjaGVja2VkKSk7XHJcbiAgICBjb25zdCB7IGxhc3RBY3RpdmVFbGVtZW50IH0gPSB1c2VBY3RpdmVFbGVtZW50KCk7XHJcbiAgICBsZXQgYW55UmFkaW9zRm9jdXNlZCA9ICghIWVsZW1lbnQ/LmNvbnRhaW5zKGxhc3RBY3RpdmVFbGVtZW50KSk7XHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmICghYW55UmFkaW9zRm9jdXNlZCAmJiBzZWxlY3RlZEluZGV4ICE9IG51bGwpXHJcbiAgICAgICAgICAgIHNldFRhYmJhYmxlSW5kZXgoc2VsZWN0ZWRJbmRleCk7XHJcbiAgICB9LCBbYW55UmFkaW9zRm9jdXNlZCwgc2VsZWN0ZWRJbmRleCwgc2V0VGFiYmFibGVJbmRleF0pO1xyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBsZXQgb2xkSW5kZXggPSBnZXRTZWxlY3RlZEluZGV4KCk7XHJcbiAgICAgICAgbGV0IG5ld0luZGV4ID0gYnlOYW1lLmN1cnJlbnQuZ2V0KHNlbGVjdGVkVmFsdWUpO1xyXG4gICAgICAgIHNldFNlbGVjdGVkSW5kZXgobmV3SW5kZXgpO1xyXG4gICAgfSwgW3NlbGVjdGVkVmFsdWVdKTtcclxuICAgIGNvbnN0IHVzZVJhZGlvID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gdXNlQXJpYVJhZGlvKHsgdmFsdWUsIGluZGV4LCB0ZXh0LCBkaXNhYmxlZCwgbGFiZWxQb3NpdGlvbiwgLi4ucmVzdCB9KSB7XHJcbiAgICAgICAgY29uc3Qgb25JbnB1dCA9IHVzZUNhbGxiYWNrKChlKSA9PiB7XHJcbiAgICAgICAgICAgIHN0YWJsZU9uSW5wdXQoZW5oYW5jZUV2ZW50KGUsIHsgc2VsZWN0ZWRWYWx1ZTogdmFsdWUgfSkpO1xyXG4gICAgICAgIH0sIFtzdGFibGVPbklucHV0LCB2YWx1ZSwgaW5kZXhdKTtcclxuICAgICAgICBjb25zdCB7IGdldElucHV0RWxlbWVudCwgZ2V0TGFiZWxFbGVtZW50LCB1c2VDaGVja2JveExpa2VJbnB1dEVsZW1lbnQsIHVzZUNoZWNrYm94TGlrZUxhYmVsRWxlbWVudCB9ID0gdXNlQ2hlY2tib3hMaWtlKHsgZGlzYWJsZWQsIGxhYmVsUG9zaXRpb24sIG9uSW5wdXQsIHJvbGU6IFwicmFkaW9cIiB9KTtcclxuICAgICAgICAvL2NvbnN0IHt9ID0gdXNlQ2hlY2tib3hMaWtlSW5wdXRFbGVtZW50KHsgIH0pXHJcbiAgICAgICAgY29uc3QgYnlOYW1lMiA9IGJ5TmFtZS5jdXJyZW50O1xyXG4gICAgICAgIGNvbnN0IFtjaGVja2VkLCBzZXRDaGVja2VkXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgICAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmFzc2VydCghYnlOYW1lMi5oYXModmFsdWUpKTtcclxuICAgICAgICAgICAgYnlOYW1lMi5zZXQodmFsdWUsIGluZGV4KTtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHsgYnlOYW1lMi5kZWxldGUodmFsdWUpOyB9O1xyXG4gICAgICAgIH0sIFt2YWx1ZSwgaW5kZXhdKTtcclxuICAgICAgICBjb25zdCB7IHRhYmJhYmxlLCB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkUHJvcHMsIHVzZUxpc3ROYXZpZ2F0aW9uU2libGluZ1Byb3BzIH0gPSB1c2VMaXN0TmF2aWdhdGlvbkNoaWxkKHsgaW5kZXgsIHNldENoZWNrZWQsIHRleHQsIC4uLnJlc3QgfSk7XHJcbiAgICAgICAgY29uc3QgdXNlUmFkaW9JbnB1dCA9ICh7IHRhZyB9KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVzZVJhZGlvSW5wdXRQcm9wcyA9IChwcm9wcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRhZyA9PSBcImlucHV0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wcy5uYW1lID0gbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wcy5jaGVja2VkID0gY2hlY2tlZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzW1wiYXJpYS1jaGVja2VkXCJdID0gY2hlY2tlZC50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgeyB1c2VDaGVja2JveExpa2VJbnB1dEVsZW1lbnRQcm9wcyB9ID0gdXNlQ2hlY2tib3hMaWtlSW5wdXRFbGVtZW50KHsgdGFnIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICh1c2VNZXJnZWRQcm9wcygpKHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRQcm9wcygodXNlQ2hlY2tib3hMaWtlSW5wdXRFbGVtZW50UHJvcHMoe30pKSksIHByb3BzKSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB1c2VSYWRpb0lucHV0UHJvcHNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHVzZVJhZGlvTGFiZWwgPSB1c2VDYWxsYmFjaygoeyB0YWcgfSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB1c2VSYWRpb0xhYmVsUHJvcHMgPSAocHJvcHMpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgdXNlQ2hlY2tib3hMaWtlTGFiZWxFbGVtZW50UHJvcHMgfSA9IHVzZUNoZWNrYm94TGlrZUxhYmVsRWxlbWVudCh7IHRhZyB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1c2VDaGVja2JveExpa2VMYWJlbEVsZW1lbnRQcm9wcyh1c2VNZXJnZWRQcm9wcygpKHt9LCBwcm9wcykpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdXNlUmFkaW9MYWJlbFByb3BzXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSwgW3VzZUNoZWNrYm94TGlrZUxhYmVsRWxlbWVudF0pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHVzZVJhZGlvSW5wdXQsXHJcbiAgICAgICAgICAgIHVzZVJhZGlvTGFiZWwsXHJcbiAgICAgICAgfTtcclxuICAgIH0sIFtieU5hbWUsIHVzZUxpc3ROYXZpZ2F0aW9uQ2hpbGRdKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdXNlUmFkaW8sXHJcbiAgICAgICAgdXNlUmFkaW9Hcm91cFByb3BzLFxyXG4gICAgICAgIG1hbmFnZWRDaGlsZHJlbixcclxuICAgICAgICBnZXRJbmRleDogdXNlQ2FsbGJhY2soKHZhbHVlKSA9PiB7IHJldHVybiBieU5hbWUuY3VycmVudC5nZXQodmFsdWUpOyB9LCBbYnlOYW1lXSksXHJcbiAgICAgICAgdGFiYmFibGVJbmRleCxcclxuICAgICAgICBmb2N1c1JhZGlvOiBmb2N1c0N1cnJlbnQsXHJcbiAgICAgICAgY3VycmVudFR5cGVhaGVhZCxcclxuICAgICAgICBpbnZhbGlkVHlwZWFoZWFkXHJcbiAgICB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1yYWRpby1ncm91cC5qcy5tYXAiLCJpbXBvcnQgeyB1c2VDaGlsZE1hbmFnZXIsIHVzZU1lcmdlZFByb3BzLCB1c2VSYW5kb21JZCwgdXNlUmVmRWxlbWVudCwgdXNlU3RhdGUsIHVzZVRpbWVvdXQgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVyc1wiO1xyXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IHVzZUNoaWxkRmxhZyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1jaGlsZC1tYW5hZ2VyXCI7XHJcbmltcG9ydCB7IGZpbmRGaXJzdEZvY3VzYWJsZSB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1mb2N1cy10cmFwXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VUb2FzdHMoe30pIHtcclxuICAgIC8vIFwiUG9pbnRlclwiIHRvIHdoYXRldmVyIGluZGV4IHRvYXN0IGlzIGN1cnJlbnRseSBiZWluZyBzaG93bi5cclxuICAgIC8vIEUuZy4gaXQncyAwIHdoZW4gdGhlIGZpcnN0IHRvYXN0IGlzIHNob3duLCB0aGVuIHdoZW4gZGlzbWlzc2VkLCBpdCBiZWNvbWVzIDEuXHJcbiAgICAvLyBXaGVuIHRoZSBzZWNvbmQgdG9hc3QgaXMgc2hvd24sIGl0IHN0YXlzIGF0IDEgdW50aWwgZGlzbWlzc2VkLCB3aGVuIGl0IHRoZW4gYmVjb21lcyAyLCBldGMuXHJcbiAgICAvLyBCZWNhdXNlIHRvYXN0cyBjYW4gcG90ZW50aWFsbHkgYmUgZGlzbWlzc2VkIG91dCBvZiBvcmRlciwgdGhpcyByZXByZXNlbnRzIHRoZSBcIm9sZGVzdFwiIHRvYXN0IHRoYXQgc3RpbGwgaGFzbid0IGJlZW4gZGlzbWlzc2VkLFxyXG4gICAgLy8gZXZlbiBpZiBcInlvdW5nZXJcIiBvbmVzIGhhdmUuXHJcbiAgICBjb25zdCBbYWN0aXZlVG9hc3RJbmRleCwgc2V0QWN0aXZlVG9hc3RJbmRleCwgZ2V0QWN0aXZlVG9hc3RJbmRleF0gPSB1c2VTdGF0ZSgtMSk7XHJcbiAgICBjb25zdCBbcG9saXRlbmVzcywgc2V0UG9saXRlbmVzc10gPSB1c2VTdGF0ZShcInBvbGl0ZVwiKTtcclxuICAgIGNvbnN0IHsgZWxlbWVudCwgZ2V0RWxlbWVudCwgdXNlUmVmRWxlbWVudFByb3BzIH0gPSB1c2VSZWZFbGVtZW50KCk7XHJcbiAgICBjb25zdCB7IGluZGljZXNCeUVsZW1lbnQsIG1hbmFnZWRDaGlsZHJlbiwgbW91bnRlZENoaWxkcmVuOiB0b2FzdFF1ZXVlLCB1c2VNYW5hZ2VkQ2hpbGQsIGdldE1vdW50SW5kZXggfSA9IHVzZUNoaWxkTWFuYWdlcigpO1xyXG4gICAgLy8gQW55IHRpbWUgYSBuZXcgdG9hc3QgbW91bnRzLCB1cGRhdGUgb3VyIGJvdHRvbW1vc3RUb2FzdEluZGV4IHRvIHBvaW50IHRvIGl0IGlmIG5lY2Vzc2FyeVxyXG4gICAgLy8gKFwibmVjZXNzYXJ5XCIganVzdCBtZWFuaW5nIGlmIGl0J3MgdGhlIGZpcnN0IHRvYXN0IGV2ZXIgb3IgYWxsIHByaW9yIHRvYXN0cyBoYXZlIGJlZW4gZGlzbWlzc2VkKVxyXG4gICAgY29uc3Qgb25BbnlUb2FzdE1vdW50ZWQgPSB1c2VDYWxsYmFjaygoaW5kZXgpID0+IHtcclxuICAgICAgICBsZXQgYm90dG9tID0gZ2V0QWN0aXZlVG9hc3RJbmRleCgpO1xyXG4gICAgICAgIHdoaWxlIChib3R0b20gPCB0b2FzdFF1ZXVlLmxlbmd0aCAmJiAoYm90dG9tIDwgMCB8fCB0b2FzdFF1ZXVlW2JvdHRvbV0/LmRpc21pc3NlZCkpIHtcclxuICAgICAgICAgICAgKytib3R0b207XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldEFjdGl2ZVRvYXN0SW5kZXgoYm90dG9tKTtcclxuICAgIH0sIFtzZXRBY3RpdmVUb2FzdEluZGV4XSk7XHJcbiAgICAvLyBBbnkgdGltZSBhIHRvYXN0IGlzIGRpc21pc3NlZCwgdXBkYXRlIG91ciBib3R0b21tb3N0VG9hc3RJbmRleCB0byBwb2ludCB0byB0aGUgbmV4dCB0b2FzdCBpbiB0aGUgcXVldWUsIGlmIG9uZSBleGlzdHMuXHJcbiAgICBjb25zdCBvbkFueVRvYXN0RGlzbWlzc2VkID0gdXNlQ2FsbGJhY2soKGluZGV4KSA9PiB7XHJcbiAgICAgICAgbGV0IGJvdHRvbSA9IGdldEFjdGl2ZVRvYXN0SW5kZXgoKTtcclxuICAgICAgICB3aGlsZSAoYm90dG9tIDwgdG9hc3RRdWV1ZS5sZW5ndGggJiYgKGJvdHRvbSA8IDAgfHwgYm90dG9tID09PSBpbmRleCB8fCB0b2FzdFF1ZXVlW2JvdHRvbV0/LmRpc21pc3NlZCkpIHtcclxuICAgICAgICAgICAgKytib3R0b207XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldEFjdGl2ZVRvYXN0SW5kZXgoYm90dG9tKTtcclxuICAgICAgICBpZiAoZ2V0RWxlbWVudCgpPy5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSlcclxuICAgICAgICAgICAgdG9hc3RRdWV1ZVtib3R0b21dPy5mb2N1cygpO1xyXG4gICAgfSwgW3NldEFjdGl2ZVRvYXN0SW5kZXhdKTtcclxuICAgIC8vIEFueSB0aW1lIHRoZSBpbmRleCBwb2ludGluZyB0byB0aGUgY3VycmVudGx5LXNob3dpbmcgdG9hc3QgY2hhbmdlcyxcclxuICAgIC8vIHVwZGF0ZSB0aGUgcmVsZXZhbnQgY2hpbGRyZW4gYW5kIGxldCB0aGVtIGtub3cgdGhhdCB0aGV5J3JlIG5vdyBlaXRoZXIgYWN0aXZlIG9yIGRpc21pc3NlZC5cclxuICAgIHVzZUNoaWxkRmxhZyhhY3RpdmVUb2FzdEluZGV4LCB0b2FzdFF1ZXVlLmxlbmd0aCwgKChpLCBzZXQpID0+IHtcclxuICAgICAgICBpZiAoc2V0KVxyXG4gICAgICAgICAgICBjb25zb2xlLmFzc2VydChpIDw9IGdldEFjdGl2ZVRvYXN0SW5kZXgoKSk7XHJcbiAgICAgICAgdG9hc3RRdWV1ZVtpXT8uc2V0U3RhdHVzKHNldCA/IFwiYWN0aXZlXCIgOiAoaSA8IGdldEFjdGl2ZVRvYXN0SW5kZXgoKSA/IFwiZGlzbWlzc2VkXCIgOiBcInBlbmRpbmdcIikpO1xyXG4gICAgfSkpO1xyXG4gICAgY29uc3QgdXNlVG9hc3QgPSB1c2VDYWxsYmFjaygoeyBwb2xpdGVuZXNzLCB0aW1lb3V0IH0pID0+IHtcclxuICAgICAgICBjb25zdCBbc3RhdHVzLCBzZXRTdGF0dXMsIGdldFN0YXR1c10gPSB1c2VTdGF0ZShcInBlbmRpbmdcIik7XHJcbiAgICAgICAgY29uc3QgZGlzbWlzc2VkID0gKHN0YXR1cyA9PT0gXCJkaXNtaXNzZWRcIik7XHJcbiAgICAgICAgY29uc3QgZGlzbWlzcyA9IHVzZUNhbGxiYWNrKCgpID0+IHsgc2V0U3RhdHVzKFwiZGlzbWlzc2VkXCIpOyB9LCBbXSk7XHJcbiAgICAgICAgY29uc3QgeyByYW5kb21JZDogdG9hc3RJZCB9ID0gdXNlUmFuZG9tSWQoeyBwcmVmaXg6IFwidG9hc3QtXCIgfSk7XHJcbiAgICAgICAgLy9jb25zdCBbdG9hc3RJZCwgc2V0VG9hc3RJZF0gPSB1c2VTdGF0ZSgoKSA9PiBnZW5lcmF0ZVJhbmRvbUlkKFwidG9hc3QtXCIpKTtcclxuICAgICAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4geyBzZXRQb2xpdGVuZXNzKHBvbGl0ZW5lc3MgPz8gXCJwb2xpdGVcIik7IH0sIFtwb2xpdGVuZXNzXSk7XHJcbiAgICAgICAgY29uc3QgZm9jdXMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBnZXRFbGVtZW50KCk7XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdEZvY3VzYWJsZSA9IGZpbmRGaXJzdEZvY3VzYWJsZShlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIGZpcnN0Rm9jdXNhYmxlPy5mb2N1cygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgW10pO1xyXG4gICAgICAgIGNvbnN0IHsgZWxlbWVudCwgdXNlTWFuYWdlZENoaWxkUHJvcHMsIGdldEVsZW1lbnQgfSA9IHVzZU1hbmFnZWRDaGlsZCh7IGRpc21pc3NlZCwgaW5kZXg6IHRvYXN0SWQsIHNldFN0YXR1cywgZm9jdXMgfSk7XHJcbiAgICAgICAgY29uc3QgaXNBY3RpdmUgPSAoc3RhdHVzID09PSBcImFjdGl2ZVwiKTtcclxuICAgICAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICBvbkFueVRvYXN0TW91bnRlZChnZXRNb3VudEluZGV4KHRvYXN0SWQpKTtcclxuICAgICAgICB9LCBbXSk7XHJcbiAgICAgICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGRpc21pc3NlZClcclxuICAgICAgICAgICAgICAgIG9uQW55VG9hc3REaXNtaXNzZWQoZ2V0TW91bnRJbmRleCh0b2FzdElkKSk7XHJcbiAgICAgICAgfSwgW2Rpc21pc3NlZF0pO1xyXG4gICAgICAgIHVzZVRpbWVvdXQoe1xyXG4gICAgICAgICAgICB0aW1lb3V0LFxyXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzQWN0aXZlKVxyXG4gICAgICAgICAgICAgICAgICAgIHNldFN0YXR1cyhcImRpc21pc3NlZFwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdHJpZ2dlckluZGV4OiBpc0FjdGl2ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0YXR1cyxcclxuICAgICAgICAgICAgZ2V0U3RhdHVzLFxyXG4gICAgICAgICAgICBkaXNtaXNzLFxyXG4gICAgICAgICAgICB1c2VUb2FzdFByb3BzOiBmdW5jdGlvbiAoeyAuLi5wcm9wcyB9KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHMoKSh1c2VNYW5hZ2VkQ2hpbGRQcm9wcyh7fSksIHByb3BzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9LCBbXSk7XHJcbiAgICBmdW5jdGlvbiB1c2VUb2FzdENvbnRhaW5lclByb3BzKHsgcm9sZSwgXCJhcmlhLWxpdmVcIjogYXJpYUxpdmUsIFwiYXJpYS1yZWxldmFudFwiOiBhcmlhUmVsZXZhbnQsIC4uLnByb3BzIH0pIHtcclxuICAgICAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHMoKSh1c2VSZWZFbGVtZW50UHJvcHMoeyBjbGFzczogXCJ0b2FzdHMtY29udGFpbmVyXCIsIHJvbGU6IFwic3RhdHVzXCIsIFwiYXJpYS1saXZlXCI6IHBvbGl0ZW5lc3MgPz8gYXJpYUxpdmUgPz8gXCJwb2xpdGVcIiwgXCJhcmlhLXJlbGV2YW50XCI6IGFyaWFSZWxldmFudCA/PyBcImFkZGl0aW9uc1wiIH0pLCBwcm9wcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyB1c2VUb2FzdCwgdXNlVG9hc3RDb250YWluZXJQcm9wcyB9O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS10b2FzdHMuanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgZm9yd2FyZFJlZiwgdXNlQ29udGV4dCwgdXNlRWZmZWN0IH0gZnJvbSBcInByZWFjdC9jb21wYXRcIjtcclxuaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtbWVyZ2VkLXByb3BzXCI7XHJcbmltcG9ydCBjbHN4IGZyb20gXCJjbHN4XCI7XHJcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VUaW1lb3V0IH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmRFbGVtZW50UmVmKGNvbXBvbmVudCkge1xyXG4gICAgcmV0dXJuIGZvcndhcmRSZWYoY29tcG9uZW50KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdXNlUHNldWRvQWN0aXZlKHsgXCJkYXRhLXBzZXVkby1hY3RpdmVcIjogYWN0aXZlLCAuLi5wcm9wcyB9KSB7XHJcbiAgICByZXR1cm4gdXNlTWVyZ2VkUHJvcHMoKSh7IGNsYXNzTmFtZTogY2xzeCgoYWN0aXZlID09IHRydWUgfHwgYWN0aXZlID09IFwidHJ1ZVwiKSAmJiBcImFjdGl2ZVwiKSB9LCBwcm9wcyk7XHJcbn1cclxuY29uc3QgU3Bpbm5lckRlbGF5Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQoMTAwMCk7XHJcbmV4cG9ydCBmdW5jdGlvbiBQcm92aWRlU3Bpbm5lckRlbGF5KHsgY2hpbGRyZW4sIHRpbWVvdXQgfSkge1xyXG4gICAgcmV0dXJuIGgoU3Bpbm5lckRlbGF5Q29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogdGltZW91dCB9LCBjaGlsZHJlbik7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNwaW5uZXJEZWxheShwZW5kaW5nLCB0aW1lb3V0KSB7XHJcbiAgICBjb25zdCBbc2hvd1NwaW5uZXIsIHNldFNob3dTcGlubmVyXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKCFwZW5kaW5nKSB7XHJcbiAgICAgICAgICAgIHNldFNob3dTcGlubmVyKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbcGVuZGluZ10pO1xyXG4gICAgY29uc3QgZGVmYXVsdERlbGF5ID0gdXNlQ29udGV4dChTcGlubmVyRGVsYXlDb250ZXh0KTtcclxuICAgIHVzZVRpbWVvdXQoe1xyXG4gICAgICAgIHRpbWVvdXQ6IHRpbWVvdXQgPz8gZGVmYXVsdERlbGF5ID8/IDEwMDAsXHJcbiAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgc2V0U2hvd1NwaW5uZXIocGVuZGluZyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0cmlnZ2VySW5kZXg6IHBlbmRpbmdcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHNob3dTcGlubmVyO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BzLmpzLm1hcCIsImltcG9ydCBjbHN4IGZyb20gXCJjbHN4XCI7XHJcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIGggfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZUFyaWFBY2NvcmRpb24gfSBmcm9tIFwicHJlYWN0LWFyaWEtd2lkZ2V0c1wiO1xyXG5pbXBvcnQgeyB1c2VNZXJnZWRQcm9wcyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1tZXJnZWQtcHJvcHNcIjtcclxuaW1wb3J0IHsgQ29sbGFwc2UgfSBmcm9tIFwicHJlYWN0LXRyYW5zaXRpb25cIjtcclxuaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgZm9yd2FyZEVsZW1lbnRSZWYgfSBmcm9tIFwiLi4vcHJvcHNcIjtcclxuY29uc3QgVXNlQXJpYUFjY29yZGlvblNlY3Rpb25Db250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKTtcclxuZXhwb3J0IGNvbnN0IEFjY29yZGlvbiA9IGZvcndhcmRFbGVtZW50UmVmKGZ1bmN0aW9uIEFjY29yZGlvbih7IGV4cGFuZGVkSW5kZXgsIHNldEV4cGFuZGVkSW5kZXgsIGNoaWxkcmVuLCAuLi5wcm9wcyB9LCByZWYpIHtcclxuICAgIGNvbnN0IHsgdXNlQXJpYUFjY29yZGlvblNlY3Rpb24gfSA9IHVzZUFyaWFBY2NvcmRpb24oeyBleHBhbmRlZEluZGV4LCBzZXRFeHBhbmRlZEluZGV4IH0pO1xyXG4gICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgLi4udXNlTWVyZ2VkUHJvcHMoKSh7IHJlZiwgY2xhc3NOYW1lOiBcImFjY29yZGlhblwiIH0sIHByb3BzKSB9LFxyXG4gICAgICAgIGgoVXNlQXJpYUFjY29yZGlvblNlY3Rpb25Db250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiB1c2VBcmlhQWNjb3JkaW9uU2VjdGlvbiB9LCBjaGlsZHJlbikpKTtcclxufSk7XHJcbmV4cG9ydCBjb25zdCBBY2NvcmRpb25TZWN0aW9uID0gZm9yd2FyZEVsZW1lbnRSZWYoZnVuY3Rpb24gQWNjb3JkaW9uU2VjdGlvbih7IGluZGV4LCBvcGVuLCBoZWFkZXIsIGhlYWRlckxldmVsLCBjaGlsZHJlbiwgVHJhbnNpdGlvbiwgLi4ucHJvcHMgfSwgcmVmKSB7XHJcbiAgICBjb25zdCB1c2VBcmlhQWNjb3JkaW9uU2VjdGlvbiA9IHVzZUNvbnRleHQoVXNlQXJpYUFjY29yZGlvblNlY3Rpb25Db250ZXh0KTtcclxuICAgIGNvbnN0IHsgZXhwYW5kZWQsIHVzZUFyaWFBY2NvcmRpb25TZWN0aW9uSGVhZGVyLCB1c2VBcmlhQWNjb3JkaW9uU2VjdGlvbkJvZHkgfSA9IHVzZUFyaWFBY2NvcmRpb25TZWN0aW9uKHsgaW5kZXgsIG9wZW4gfSk7XHJcbiAgICBjb25zdCB7IHVzZUFyaWFBY2NvcmRpb25TZWN0aW9uSGVhZGVyUHJvcHMgfSA9IHVzZUFyaWFBY2NvcmRpb25TZWN0aW9uSGVhZGVyKHsgdGFnOiBcImJ1dHRvblwiIH0pO1xyXG4gICAgY29uc3QgeyB1c2VBcmlhQWNjb3JkaW9uU2VjdGlvbkJvZHlQcm9wcyB9ID0gdXNlQXJpYUFjY29yZGlvblNlY3Rpb25Cb2R5KCk7XHJcbiAgICBUcmFuc2l0aW9uID8/PSBDb2xsYXBzZTtcclxuICAgIGhlYWRlckxldmVsID8/PSAyO1xyXG4gICAgY29uc29sZS5sb2coYCR7aW5kZXh9OiAke2V4cGFuZGVkPy50b1N0cmluZygpfWApO1xyXG4gICAgY29uc3QgaGVhZGVyQnV0dG9uUHJvcHMgPSB1c2VBcmlhQWNjb3JkaW9uU2VjdGlvbkhlYWRlclByb3BzKHsgdHlwZTogXCJidXR0b25cIiwgY2xhc3M6IGNsc3goXCJhY2NvcmRpb24tYnV0dG9uXCIsICFleHBhbmRlZCA/IFwiIGNvbGxhcHNlZFwiIDogXCJcIikgfSk7XHJcbiAgICBjb25zdCBoZWFkZXJQcm9wcyA9ICh7IGNsYXNzOiBcImFjY29yZGlvbi1oZWFkZXJcIiwgY2hpbGRyZW46IGgoXCJidXR0b25cIiwgeyAuLi5oZWFkZXJCdXR0b25Qcm9wcyB9LCBoZWFkZXIpIH0pO1xyXG4gICAgY29uc3QgaGVhZGVySnN4ID0gaGVhZGVyTGV2ZWwgPj0gMSAmJiBoZWFkZXJMZXZlbCA8PSA2ID8gaChgaCR7aGVhZGVyTGV2ZWx9YCwgaGVhZGVyUHJvcHMpIDogaChcImRpdlwiLCB1c2VNZXJnZWRQcm9wcygpKGhlYWRlclByb3BzLCB7IHJvbGU6IFwiaGVhZGluZ1wiLCBcImFyaWEtbGV2ZWxcIjogYCR7aGVhZGVyTGV2ZWx9YCB9KSk7XHJcbiAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyAuLi57IHJlZiwgY2xhc3M6IFwiYWNjb3JkaW9uLWl0ZW1cIiB9IH0sXHJcbiAgICAgICAgaGVhZGVySnN4LFxyXG4gICAgICAgIGgoVHJhbnNpdGlvbiwgeyBvcGVuOiBleHBhbmRlZCwgLi4udXNlQXJpYUFjY29yZGlvblNlY3Rpb25Cb2R5UHJvcHModXNlTWVyZ2VkUHJvcHMoKShwcm9wcywgeyBjbGFzczogXCJcIiB9KSkgfSxcclxuICAgICAgICAgICAgaChcImRpdlwiLCBudWxsLFxyXG4gICAgICAgICAgICAgICAgaChcImRpdlwiLCB7IGNsYXNzOiBcImFjY29yZGlvbi1ib2R5XCIgfSwgY2hpbGRyZW4pKSkpKTtcclxufSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjY29yZGlvbi5qcy5tYXAiLCJpbXBvcnQgY2xzeCBmcm9tIFwiY2xzeFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCBjcmVhdGVFbGVtZW50LCBGcmFnbWVudCwgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMsIHVzZVJhbmRvbUlkLCB1c2VTdGF0ZSwgdXNlVGltZW91dCB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgZm9yd2FyZEVsZW1lbnRSZWYsIHVzZVNwaW5uZXJEZWxheSB9IGZyb20gXCIuLi9wcm9wc1wiO1xyXG5pbXBvcnQgeyBGYWRlIH0gZnJvbSBcInByZWFjdC10cmFuc2l0aW9uL2ZhZGVcIjtcclxuaW1wb3J0IHsgU3dhcHBhYmxlIH0gZnJvbSBcInByZWFjdC10cmFuc2l0aW9uXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VBcmlhUHJvZ3Jlc3NCYXIoeyB0YWcsIG1heCwgdmFsdWUsIHZhbHVlVGV4dCB9KSB7XHJcbiAgICAvL2NvbnN0IHsgaW5wdXRJZCwgbGFiZWxJZCwgdXNlR2VuZXJpY0xhYmVsSW5wdXQsIHVzZUdlbmVyaWNMYWJlbExhYmVsLCB1c2VSZWZlcmVuY2VkSW5wdXRJZFByb3BzLCB1c2VSZWZlcmVuY2VkTGFiZWxJZFByb3BzIH0gPSB1c2VHZW5lcmljTGFiZWwoeyBpbnB1dFByZWZpeDogXCJwcm9ncmVzc2Jhci1cIiwgbGFiZWxQcmVmaXg6IFwicHJvZ3Jlc3NiYXItcmVmZXJlbmNlLVwiIH0pO1xyXG4gICAgY29uc3QgeyBpZDogcHJvZ3Jlc3NCYXJJZCwgZ2V0SWQsIHVzZVJhbmRvbUlkUHJvcHMsIHVzZVJlZmVyZW5jZWRJZFByb3BzIH0gPSB1c2VSYW5kb21JZCh7IHByZWZpeDogXCJwcm9ncmVzc2Jhci1cIiB9KTtcclxuICAgIGZ1bmN0aW9uIHVzZVByb2dyZXNzUHJvcHMoeyBcImFyaWEtdmFsdWVtYXhcIjogYXJpYVZhbHVlTWF4LCBcImFyaWEtdmFsdWVub3dcIjogYXJpYVZhbHVlTm93LCBcImFyaWEtdmFsdWV0ZXh0XCI6IGFyaWFWYWx1ZVRleHQsIHJvbGUsIC4uLnAgfSkge1xyXG4gICAgICAgIGNvbnN0IGV4dHJhUHJvcHMgPSB0YWcgPT09IFwicHJvZ3Jlc3NcIiA/XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG1heCxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiAodmFsdWUgPz8gdW5kZWZpbmVkKSxcclxuICAgICAgICAgICAgICAgIFwiYXJpYS12YWx1ZW5vd1wiOiB2YWx1ZSA9PSBudWxsID8gdW5kZWZpbmVkIDogYCR7dmFsdWV9YCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJhcmlhLXZhbHVlbWF4XCI6IG1heCA9PSBudWxsID8gdW5kZWZpbmVkIDogYCR7bWF4fWAsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJhcmlhLXZhbHVldGV4dFwiOiB2YWx1ZVRleHQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGAke3ZhbHVlVGV4dH1gLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiYXJpYS12YWx1ZW5vd1wiOiB2YWx1ZSA9PSBudWxsID8gdW5kZWZpbmVkIDogYCR7dmFsdWV9YCxcclxuICAgICAgICAgICAgICAgICAgICByb2xlOiBcInByb2dyZXNzYmFyXCJcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHVzZVJhbmRvbUlkUHJvcHModXNlTWVyZ2VkUHJvcHMoKShleHRyYVByb3BzLCBwKSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB1c2VSZWZlcmVuY2VkRWxlbWVudCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIHVzZVJlZmVyZW5jZWRFbGVtZW50KCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIHVzZVJlZmVyZW5jZWRQcm9wcyhwcm9wcykge1xyXG4gICAgICAgICAgICByZXR1cm4gdXNlUmVmZXJlbmNlZElkUHJvcHMoXCJhcmlhLWNvbnRyb2xzXCIpKHByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdXNlUmVmZXJlbmNlZFByb3BzIH07XHJcbiAgICB9LCBbdXNlUmVmZXJlbmNlZElkUHJvcHNdKTtcclxuICAgIHJldHVybiB7IHVzZVByb2dyZXNzUHJvcHMsIHVzZVJlZmVyZW5jZWRFbGVtZW50IH07XHJcbn1cclxuZXhwb3J0IGNvbnN0IFByb2dyZXNzQXNDaGlsZENvbnRleHQgPSBjcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XHJcbmNvbnN0IFByb2dyZXNzTWF4Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTtcclxuY29uc3QgUHJvZ3Jlc3NWYWx1ZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XHJcbmNvbnN0IFByb2dyZXNzVmFsdWVUZXh0Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTtcclxuLyoqXHJcbiAqIEEgcHJvZ3Jlc3MgYmFyIGNhbiBlaXRoZXIgdGFrZSBpdHMgdmFsdWUgJiBtYXggYXJndW1lbnRzIGRpcmVjdGx5LFxyXG4gKiBvciBoYXZlIHRoZW0gcHJvdmlkZWQgYnkgYSBwYXJlbnQgdmlhIHZhcmlvbnMgQ29udGV4dCBvYmplY3RzLlxyXG4gKlxyXG4gKiBQcm9wcyB3aWxsIGJlIHByaW9yaXRpemVkIG92ZXIgY29udGV4dCBpZiBib3RoIGFyZSBnaXZlbi5cclxuICogQHBhcmFtIHBhcmFtMFxyXG4gKiBAcmV0dXJuc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIFByb2dyZXNzTGluZWFyKHsgY29sb3IsIG1heDogbWF4UHJvcCwgdmFsdWU6IHZhbHVlUHJvcCwgdmFsdWVUZXh0OiB2YWx1ZVRleHRQcm9wLCBzdHJpcGVkLCB2YXJpYW50LCAuLi5yZXN0IH0pIHtcclxuICAgIGxldCB2YWx1ZSA9ICh1c2VDb250ZXh0KFByb2dyZXNzVmFsdWVDb250ZXh0KSk7XHJcbiAgICBsZXQgbWF4ID0gdXNlQ29udGV4dChQcm9ncmVzc01heENvbnRleHQpO1xyXG4gICAgbGV0IHZhbHVlVGV4dCA9IHVzZUNvbnRleHQoUHJvZ3Jlc3NWYWx1ZVRleHRDb250ZXh0KTtcclxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHZhbHVlID0gdmFsdWVQcm9wO1xyXG4gICAgaWYgKG1heCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIG1heCA9IG1heFByb3A7XHJcbiAgICBpZiAodmFsdWVUZXh0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgdmFsdWVUZXh0ID0gdmFsdWVUZXh0UHJvcDtcclxuICAgIGNvbnN0IHByb3ZpZGVQYXJlbnRXaXRoSG9vayA9IHVzZUNvbnRleHQoUHJvZ3Jlc3NBc0NoaWxkQ29udGV4dCk7XHJcbiAgICBjb25zdCB7IHVzZVByb2dyZXNzUHJvcHMsIHVzZVJlZmVyZW5jZWRFbGVtZW50IH0gPSB1c2VBcmlhUHJvZ3Jlc3NCYXIoeyB2YWx1ZSwgdmFsdWVUZXh0LCBtYXgsIHRhZzogXCJwcm9ncmVzc1wiIH0pO1xyXG4gICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHsgcHJvdmlkZVBhcmVudFdpdGhIb29rPy4odXNlUmVmZXJlbmNlZEVsZW1lbnQpOyB9LCBbdXNlUmVmZXJlbmNlZEVsZW1lbnQsIHByb3ZpZGVQYXJlbnRXaXRoSG9va10pO1xyXG4gICAgcmV0dXJuIChoKFwiZGl2XCIsIHsgLi4udXNlTWVyZ2VkUHJvcHMoKSh7IGNsYXNzTmFtZTogY2xzeChcInByb2dyZXNzXCIsIGBiZy0ke2NvbG9yID8/IFwicHJpbWFyeVwifWApIH0sIHJlc3QpIH0sXHJcbiAgICAgICAgaChcInByb2dyZXNzXCIsIHsgLi4udXNlUHJvZ3Jlc3NQcm9wcyh7IGNsYXNzTmFtZTogXCJwcm9ncmVzcy1iYXJcIiB9KSB9KSkpO1xyXG59XHJcbi8vIDopXHJcbmNvbnN0IFIgPSAoKG5ldyBEYXRlKCkpLmdldERhdGUoKSAlIDIpO1xyXG5mdW5jdGlvbiBDaGVjaygpIHtcclxuICAgIHJldHVybiAoaChcImlcIiwgeyBjbGFzczogXCJiaSBiaS1jaGVjayB0ZXh0LXN1Y2Nlc3NcIiB9KSk7XHJcbn1cclxuZnVuY3Rpb24gQ3Jvc3MoKSB7XHJcbiAgICByZXR1cm4gKGgoXCJpXCIsIHsgY2xhc3M6IFwiYmkgYmkteCB0ZXh0LXdhcm5pbmdcIiB9KSk7XHJcbn1cclxuZXhwb3J0IGNvbnN0IFByb2dyZXNzQ2lyY3VsYXIgPSBmb3J3YXJkRWxlbWVudFJlZihmdW5jdGlvbiAoeyBzcGlubmVyVGltZW91dCwgbW9kZSwgY29sb3JGaWxsLCBjaGlsZHJlblBvc2l0aW9uLCBjaGlsZHJlbiwgY29sb3IsIC4uLnAgfSwgcmVmKSB7XHJcbiAgICBjb25zdCBwcm92aWRlUGFyZW50V2l0aEhvb2sgPSB1c2VDb250ZXh0KFByb2dyZXNzQXNDaGlsZENvbnRleHQpO1xyXG4gICAgY29uc3QgeyB1c2VQcm9ncmVzc1Byb3BzLCB1c2VSZWZlcmVuY2VkRWxlbWVudCB9ID0gdXNlQXJpYVByb2dyZXNzQmFyKHsgdmFsdWU6IG51bGwsIHZhbHVlVGV4dDogdW5kZWZpbmVkLCBtYXg6IHVuZGVmaW5lZCwgdGFnOiBcImRpdlwiIH0pO1xyXG4gICAgLy91c2VMYXlvdXRFZmZlY3QoKCkgPT4geyBwcm92aWRlUGFyZW50V2l0aEhvb2s/Lih1c2VSZWZlcmVuY2VkRWxlbWVudCkgfSwgW3VzZVJlZmVyZW5jZWRFbGVtZW50LCBwcm92aWRlUGFyZW50V2l0aEhvb2tdKVxyXG4gICAgY29uc3QgeyB1c2VSZWZlcmVuY2VkUHJvcHMgfSA9IHVzZVJlZmVyZW5jZWRFbGVtZW50KCk7XHJcbiAgICBjb25zdCBzaG93U3Bpbm5lciA9IHVzZVNwaW5uZXJEZWxheShtb2RlID09PSBcInBlbmRpbmdcIiwgc3Bpbm5lclRpbWVvdXQpO1xyXG4gICAgLy9jb25zdCBbc3Bpbm5lclNob3dDb3VudCwgc2V0U3Bpbm5lclNob3dDb3VudF0gPSB1c2VTdGF0ZSgwKTtcclxuICAgIC8vdXNlRWZmZWN0KCgpID0+IHsgc2V0U3Bpbm5lclNob3dDb3VudChzID0+ICsrcykgfSwgW3Nob3dTcGlubmVyXSk7XHJcbiAgICB1c2VFZmZlY3QoKCkgPT4geyBzZXRTaG93blN0YXR1c0xvbmdFbm91Z2goZmFsc2UpOyB9LCBbbW9kZV0pO1xyXG4gICAgY29uc3QgW3Nob3duU3RhdHVzTG9uZ0Vub3VnaCwgc2V0U2hvd25TdGF0dXNMb25nRW5vdWdoXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIHVzZVRpbWVvdXQoe1xyXG4gICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7IGlmIChtb2RlID09IFwiZmFpbGVkXCIgfHwgKG1vZGUgPT0gXCJzdWNjZWVkZWRcIikpXHJcbiAgICAgICAgICAgIHNldFNob3duU3RhdHVzTG9uZ0Vub3VnaCh0cnVlKTsgfSxcclxuICAgICAgICB0aW1lb3V0OiAxMDAwLFxyXG4gICAgICAgIHRyaWdnZXJJbmRleDogbW9kZVxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBwcm9ncmVzc0VsZW1lbnQgPSAoaChcImRpdlwiLCB7IC4uLnVzZU1lcmdlZFByb3BzKCkodXNlUHJvZ3Jlc3NQcm9wcyh7IHJlZiwgY2xhc3NOYW1lOiBjbHN4KFwiY2lyY3VsYXItcHJvZ3Jlc3MtY29udGFpbmVyXCIpIH0pLCBwKSB9LFxyXG4gICAgICAgIGgoU3dhcHBhYmxlLCBudWxsLFxyXG4gICAgICAgICAgICBoKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImNpcmN1bGFyLXByb2dyZXNzLXN3YXBwYWJsZVwiIH0sXHJcbiAgICAgICAgICAgICAgICBoKEZhZGUsIHsgb3BlbjogbW9kZSA9PT0gXCJwZW5kaW5nXCIgJiYgc2hvd1NwaW5uZXIgfSxcclxuICAgICAgICAgICAgICAgICAgICBoKFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbHN4KFwiY2lyY3VsYXItcHJvZ3Jlc3NcIiwgYGNpcmN1bGFyLXByb2dyZXNzLSR7Y29sb3IgPz8gXCJwcmltYXJ5XCJ9YCwgY29sb3JGaWxsID09IFwiZm9yZWdyb3VuZFwiICYmIFwiaW52ZXJzZS1maWxsXCIsIGNvbG9yRmlsbCA9PT0gXCJmb3JlZ3JvdW5kLW9ubHlcIiAmJiBcIm5vLWZpbGxcIikgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaChcImRpdlwiLCBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaChcImRpdlwiLCBudWxsKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGgoXCJkaXZcIiwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgoXCJkaXZcIiwgbnVsbCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoKFwiZGl2XCIsIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoKFwiZGl2XCIsIG51bGwpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaChcImRpdlwiLCBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaChcImRpdlwiLCBudWxsKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGgoXCJkaXZcIiwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgoXCJkaXZcIiwgbnVsbCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoKFwiZGl2XCIsIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoKFwiZGl2XCIsIG51bGwpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaChcImRpdlwiLCBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaChcImRpdlwiLCBudWxsKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGgoXCJkaXZcIiwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgoXCJkaXZcIiwgbnVsbCkpKSksXHJcbiAgICAgICAgICAgICAgICBoKEZhZGUsIHsgb3BlbjogIXNob3duU3RhdHVzTG9uZ0Vub3VnaCAmJiBtb2RlID09PSBcInN1Y2NlZWRlZFwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgaChcImRpdlwiLCBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoKENoZWNrLCBudWxsKSkpLFxyXG4gICAgICAgICAgICAgICAgaChGYWRlLCB7IG9wZW46ICFzaG93blN0YXR1c0xvbmdFbm91Z2ggJiYgbW9kZSA9PT0gXCJmYWlsZWRcIiB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGgoXCJkaXZcIiwgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaChDcm9zcywgbnVsbCkpKSkpKSk7XHJcbiAgICBjaGlsZHJlblBvc2l0aW9uID8/PSBcImFmdGVyXCI7XHJcbiAgICByZXR1cm4gKGgoRnJhZ21lbnQsIG51bGwsXHJcbiAgICAgICAgY2hpbGRyZW5Qb3NpdGlvbiA9PSBcImJlZm9yZVwiICYmIHByb2dyZXNzRWxlbWVudCxcclxuICAgICAgICBjaGlsZHJlbiAmJiBjcmVhdGVFbGVtZW50KGNoaWxkcmVuLnR5cGUsIHVzZU1lcmdlZFByb3BzKCkoeyBjaGlsZHJlbjogY2hpbGRyZW5Qb3NpdGlvbiA9PT0gXCJjaGlsZFwiID8gcHJvZ3Jlc3NFbGVtZW50IDogdW5kZWZpbmVkLCByZWY6IGNoaWxkcmVuLnJlZiB9LCB1c2VSZWZlcmVuY2VkUHJvcHMoY2hpbGRyZW4ucHJvcHMpKSksXHJcbiAgICAgICAgY2hpbGRyZW5Qb3NpdGlvbiA9PSBcImFmdGVyXCIgJiYgcHJvZ3Jlc3NFbGVtZW50KSk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1saW5lYXIuanMubWFwIiwiaW1wb3J0IGNsc3ggZnJvbSBcImNsc3hcIjtcclxuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtbWVyZ2VkLXByb3BzXCI7XHJcbmltcG9ydCB7IG1lbW8gfSBmcm9tIFwicHJlYWN0L2NvbXBhdFwiO1xyXG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5jb25zdCBEZWZhdWx0RmlsbFN0eWxlQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoXCJmaWxsXCIpO1xyXG5jb25zdCBEZWZhdWx0Q29sb3JTdHlsZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KFwicHJpbWFyeVwiKTtcclxuY29uc3QgRGVmYXVsdFNpemVDb250ZXh0ID0gY3JlYXRlQ29udGV4dChcIm1kXCIpO1xyXG5jb25zdCBEZWZhdWx0RGlzYWJsZWRDb250ZXh0ID0gY3JlYXRlQ29udGV4dChmYWxzZSk7XHJcbmV4cG9ydCBjb25zdCBQcm92aWRlRGVmYXVsdEJ1dHRvbkZpbGwgPSBtZW1vKGZ1bmN0aW9uIFByb3ZpZGVEZWZhdWx0QnV0dG9uRmlsbCh7IHZhbHVlLCBjaGlsZHJlbiB9KSB7IHJldHVybiBoKERlZmF1bHRGaWxsU3R5bGVDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiB2YWx1ZSB9LCBjaGlsZHJlbik7IH0pO1xyXG5leHBvcnQgY29uc3QgUHJvdmlkZURlZmF1bHRCdXR0b25Db2xvciA9IG1lbW8oZnVuY3Rpb24gUHJvdmlkZURlZmF1bHRCdXR0b25Db2xvcih7IHZhbHVlLCBjaGlsZHJlbiB9KSB7IHJldHVybiBoKERlZmF1bHRDb2xvclN0eWxlQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogdmFsdWUgfSwgY2hpbGRyZW4pOyB9KTtcclxuZXhwb3J0IGNvbnN0IFByb3ZpZGVEZWZhdWx0QnV0dG9uU2l6ZSA9IG1lbW8oZnVuY3Rpb24gUHJvdmlkZURlZmF1bHRCdXR0b25TaXplKHsgdmFsdWUsIGNoaWxkcmVuIH0pIHsgcmV0dXJuIGgoRGVmYXVsdFNpemVDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiB2YWx1ZSB9LCBjaGlsZHJlbik7IH0pO1xyXG5leHBvcnQgY29uc3QgUHJvdmlkZURlZmF1bHRCdXR0b25EaXNhYmxlZCA9IG1lbW8oZnVuY3Rpb24gUHJvdmlkZURlZmF1bHRCdXR0b25EaXNhYmxlZCh7IHZhbHVlLCBjaGlsZHJlbiB9KSB7IHJldHVybiBoKERlZmF1bHREaXNhYmxlZENvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHZhbHVlIH0sIGNoaWxkcmVuKTsgfSk7XHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VCdXR0b25GaWxsVmFyaWFudChwcm92aWRlZFZhbHVlKSB7XHJcbiAgICBjb25zdCBkZWZhdWx0RmlsbCA9IHVzZUNvbnRleHQoRGVmYXVsdEZpbGxTdHlsZUNvbnRleHQpO1xyXG4gICAgcmV0dXJuIHByb3ZpZGVkVmFsdWUgPz8gZGVmYXVsdEZpbGw7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUJ1dHRvbkNvbG9yVmFyaWFudChwcm92aWRlZFZhbHVlKSB7XHJcbiAgICBjb25zdCBkZWZhdWx0Q29sb3IgPSB1c2VDb250ZXh0KERlZmF1bHRDb2xvclN0eWxlQ29udGV4dCk7XHJcbiAgICByZXR1cm4gcHJvdmlkZWRWYWx1ZSA/PyBkZWZhdWx0Q29sb3I7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUJ1dHRvblNpemUocHJvdmlkZWRWYWx1ZSkge1xyXG4gICAgY29uc3QgZGVmYXVsdFNpemUgPSB1c2VDb250ZXh0KERlZmF1bHRTaXplQ29udGV4dCk7XHJcbiAgICByZXR1cm4gcHJvdmlkZWRWYWx1ZSA/PyBkZWZhdWx0U2l6ZTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdXNlQnV0dG9uRGlzYWJsZWQocHJvdmlkZWRWYWx1ZSkge1xyXG4gICAgY29uc3QgZGVmYXVsdERpc2FibGVkID0gdXNlQ29udGV4dChEZWZhdWx0RGlzYWJsZWRDb250ZXh0KTtcclxuICAgIHJldHVybiBwcm92aWRlZFZhbHVlID8/IGRlZmF1bHREaXNhYmxlZDtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdXNlQnV0dG9uU3R5bGVzKHApIHtcclxuICAgIGxldCB7IGNvbG9yVmFyaWFudCwgc2l6ZSwgZmlsbFZhcmlhbnQsIGRpc2FibGVkIH0gPSBwO1xyXG4gICAgY29sb3JWYXJpYW50ID0gdXNlQnV0dG9uQ29sb3JWYXJpYW50KGNvbG9yVmFyaWFudCk7XHJcbiAgICBzaXplID0gdXNlQnV0dG9uU2l6ZShzaXplKTtcclxuICAgIGZpbGxWYXJpYW50ID0gdXNlQnV0dG9uRmlsbFZhcmlhbnQoZmlsbFZhcmlhbnQpO1xyXG4gICAgZGlzYWJsZWQgPSB1c2VCdXR0b25EaXNhYmxlZChkaXNhYmxlZCk7XHJcbiAgICBjb25zdCB1c2VCdXR0b25TdHlsZXNQcm9wcyA9IChwcm9wcykgPT4gdXNlTWVyZ2VkUHJvcHMoKSh7IFwiYXJpYS1kaXNhYmxlZFwiOiBkaXNhYmxlZCA/IFwidHJ1ZVwiIDogdW5kZWZpbmVkLCBjbGFzc05hbWU6IGNsc3goZGlzYWJsZWQgJiYgXCJkaXNhYmxlZFwiLCBcImJ0blwiLCBgYnRuLSR7ZmlsbFZhcmlhbnQgPT0gXCJvdXRsaW5lXCIgPyBgb3V0bGluZS1gIDogYGB9JHtjb2xvclZhcmlhbnR9YCwgYGJ0bi0ke3NpemV9YCwgZGlzYWJsZWQgJiYgXCJkaXNhYmxlZFwiKSB9LCBwcm9wcyk7XHJcbiAgICByZXR1cm4geyBjb2xvclZhcmlhbnQsIHNpemUsIGZpbGxWYXJpYW50LCBkaXNhYmxlZCwgdXNlQnV0dG9uU3R5bGVzUHJvcHMgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0cy5qcy5tYXAiLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VBcmlhQnV0dG9uIH0gZnJvbSBcInByZWFjdC1hcmlhLXdpZGdldHMvdXNlLWJ1dHRvblwiO1xyXG5pbXBvcnQgeyB1c2VBc3luY0hhbmRsZXIgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVyc1wiO1xyXG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgUHJvZ3Jlc3NDaXJjdWxhciB9IGZyb20gXCIuLi9wcm9ncmVzc1wiO1xyXG5pbXBvcnQgeyBmb3J3YXJkRWxlbWVudFJlZiB9IGZyb20gXCIuLi9wcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VCdXR0b25TdHlsZXMgfSBmcm9tIFwiLi9kZWZhdWx0c1wiO1xyXG5mdW5jdGlvbiBCdXR0b25SKHAsIHJlZikge1xyXG4gICAgaWYgKHAudGFnPy50b0xvd2VyQ2FzZSgpID09PSBcImFcIilcclxuICAgICAgICByZXR1cm4gaChBbmNob3JCdXR0b24sIHsgcmVmOiByZWYsIC4uLnAgfSk7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgcmV0dXJuIGgoQnV0dG9uQnV0dG9uLCB7IHJlZjogcmVmLCAuLi5wIH0pO1xyXG59XHJcbmNvbnN0IEFuY2hvckJ1dHRvbiA9IGZvcndhcmRFbGVtZW50UmVmKGZ1bmN0aW9uIEFuY2hvckJ1dHRvbihwLCByZWYpIHtcclxuICAgIGxldCB7IGNvbG9yVmFyaWFudCwgc2l6ZSwgZmlsbFZhcmlhbnQsIGRpc2FibGVkLCAuLi5wcm9wcyB9ID0gcDtcclxuICAgIGNvbnN0IHsgdXNlQXJpYUJ1dHRvblByb3BzIH0gPSB1c2VBcmlhQnV0dG9uKHsgdGFnOiBcImFcIiB9KTtcclxuICAgIGNvbnN0IGJ1dHRvblN0eWxlSW5mbyA9IHVzZUJ1dHRvblN0eWxlcyh7IGNvbG9yVmFyaWFudCwgc2l6ZSwgZmlsbFZhcmlhbnQsIGRpc2FibGVkIH0pO1xyXG4gICAgZGlzYWJsZWQgPSBidXR0b25TdHlsZUluZm8uZGlzYWJsZWQ7XHJcbiAgICBjb2xvclZhcmlhbnQgPSBidXR0b25TdHlsZUluZm8uY29sb3JWYXJpYW50O1xyXG4gICAgc2l6ZSA9IGJ1dHRvblN0eWxlSW5mby5zaXplO1xyXG4gICAgZmlsbFZhcmlhbnQgPSBidXR0b25TdHlsZUluZm8uZmlsbFZhcmlhbnQ7XHJcbiAgICBjb25zdCB1c2VCdXR0b25TdHlsZXNQcm9wcyA9IGJ1dHRvblN0eWxlSW5mby51c2VCdXR0b25TdHlsZXNQcm9wcztcclxuICAgIHJldHVybiBoKFwiYVwiLCB7IC4uLnVzZUFyaWFCdXR0b25Qcm9wcyh1c2VCdXR0b25TdHlsZXNQcm9wcyh7IC4uLnByb3BzLCByZWYgfSkpIH0pO1xyXG59KTtcclxuY29uc3QgQnV0dG9uQnV0dG9uID0gZm9yd2FyZEVsZW1lbnRSZWYoZnVuY3Rpb24gQnV0dG9uQnV0dG9uKHAsIHJlZikge1xyXG4gICAgbGV0IHsgY29sb3JWYXJpYW50LCBzaXplLCBmaWxsVmFyaWFudCwgZGlzYWJsZWQsIGRlYm91bmNlLCBzaG93QXN5bmNTdWNjZXNzLCBvbkNsaWNrOiBvbkNsaWNrQXN5bmMsIC4uLnByb3BzIH0gPSBwO1xyXG4gICAgY29uc3QgeyBnZXRTeW5jSGFuZGxlciwgcGVuZGluZywgc2V0dGxlQ291bnQsIGhhc0Vycm9yIH0gPSB1c2VBc3luY0hhbmRsZXIoKSh7IGRlYm91bmNlLCBjYXB0dXJlOiB1c2VDYWxsYmFjaygoKSA9PiB7IHJldHVybiB1bmRlZmluZWQ7IH0sIFtdKSB9KTtcclxuICAgIGRpc2FibGVkIHx8PSBwZW5kaW5nO1xyXG4gICAgY29uc3QgeyB1c2VBcmlhQnV0dG9uUHJvcHMgfSA9IHVzZUFyaWFCdXR0b24oeyB0YWc6IFwiYnV0dG9uXCIgfSk7XHJcbiAgICBjb25zdCBidXR0b25TdHlsZUluZm8gPSB1c2VCdXR0b25TdHlsZXMoeyBjb2xvclZhcmlhbnQsIHNpemUsIGZpbGxWYXJpYW50LCBkaXNhYmxlZCB9KTtcclxuICAgIGRpc2FibGVkID0gYnV0dG9uU3R5bGVJbmZvLmRpc2FibGVkO1xyXG4gICAgY29sb3JWYXJpYW50ID0gYnV0dG9uU3R5bGVJbmZvLmNvbG9yVmFyaWFudDtcclxuICAgIHNpemUgPSBidXR0b25TdHlsZUluZm8uc2l6ZTtcclxuICAgIGZpbGxWYXJpYW50ID0gYnV0dG9uU3R5bGVJbmZvLmZpbGxWYXJpYW50O1xyXG4gICAgY29uc3QgdXNlQnV0dG9uU3R5bGVzUHJvcHMgPSBidXR0b25TdHlsZUluZm8udXNlQnV0dG9uU3R5bGVzUHJvcHM7XHJcbiAgICBjb25zdCBvbkNsaWNrID0gZ2V0U3luY0hhbmRsZXIocGVuZGluZyA/IG51bGwgOiBvbkNsaWNrQXN5bmMpO1xyXG4gICAgcmV0dXJuIChoKFByb2dyZXNzQ2lyY3VsYXIsIHsgbW9kZTogaGFzRXJyb3IgPyBcImZhaWxlZFwiIDogcGVuZGluZyA/IFwicGVuZGluZ1wiIDogKHNldHRsZUNvdW50ICYmIHNob3dBc3luY1N1Y2Nlc3MpID8gXCJzdWNjZWVkZWRcIiA6IG51bGwsIGNoaWxkcmVuUG9zaXRpb246IFwiY2hpbGRcIiwgY29sb3I6IGNvbG9yVmFyaWFudCA9PT0gXCJsaW5rXCIgPyBcInByaW1hcnlcIiA6IGNvbG9yVmFyaWFudCwgY29sb3JGaWxsOiBmaWxsVmFyaWFudCA9PSBcImZpbGxcIiA/IFwiZm9yZWdyb3VuZFwiIDogXCJiYWNrZ3JvdW5kXCIgfSxcclxuICAgICAgICBoKFwiYnV0dG9uXCIsIHsgLi4udXNlQXJpYUJ1dHRvblByb3BzKHVzZUJ1dHRvblN0eWxlc1Byb3BzKHsgLi4ucHJvcHMsIG9uQ2xpY2ssIHJlZiB9KSkgfSkpKTtcclxufSk7XHJcbmV4cG9ydCBjb25zdCBCdXR0b24gPSBmb3J3YXJkRWxlbWVudFJlZihCdXR0b25SKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnV0dG9uLmpzLm1hcCIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZUFyaWFCdXR0b24gfSBmcm9tIFwicHJlYWN0LWFyaWEtd2lkZ2V0cy91c2UtYnV0dG9uXCI7XHJcbmltcG9ydCB7IHVzZUFzeW5jSGFuZGxlciwgdXNlU3RhYmxlR2V0dGVyIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IGZvcndhcmRFbGVtZW50UmVmIH0gZnJvbSBcIi4uL3Byb3BzXCI7XHJcbmltcG9ydCB7IHVzZUJ1dHRvblN0eWxlcyB9IGZyb20gXCIuL2RlZmF1bHRzXCI7XHJcbmV4cG9ydCBjb25zdCBUb2dnbGVCdXR0b24gPSBmb3J3YXJkRWxlbWVudFJlZihmdW5jdGlvbiBUb2dnbGVCdXR0b24ocCwgcmVmKSB7XHJcbiAgICBsZXQgeyBjb2xvclZhcmlhbnQsIHNpemUsIGRpc2FibGVkLCBwcmVzc2VkLCBkZWJvdW5jZSwgb25DbGljazogb25DbGlja0FzeW5jLCAuLi5wcm9wcyB9ID0gcDtcclxuICAgIGNvbnN0IGZpbGxWYXJpYW50ID0gcHJlc3NlZCA/IFwiZmlsbFwiIDogXCJvdXRsaW5lXCI7XHJcbiAgICBjb25zdCBnZXRQcmVzc2VkID0gdXNlU3RhYmxlR2V0dGVyKHByZXNzZWQpO1xyXG4gICAgY29uc3QgeyBnZXRTeW5jSGFuZGxlciwgcGVuZGluZyB9ID0gdXNlQXN5bmNIYW5kbGVyKCkoeyBkZWJvdW5jZSwgY2FwdHVyZTogdXNlQ2FsbGJhY2soKCkgPT4geyByZXR1cm4gIWdldFByZXNzZWQoKTsgfSwgW10pIH0pO1xyXG4gICAgZGlzYWJsZWQgfHw9IHBlbmRpbmc7XHJcbiAgICBjb25zdCB7IHVzZUFyaWFCdXR0b25Qcm9wcyB9ID0gdXNlQXJpYUJ1dHRvbih7IHRhZzogXCJidXR0b25cIiwgcHJlc3NlZCB9KTtcclxuICAgIGNvbnN0IGJ1dHRvblN0eWxlSW5mbyA9IHVzZUJ1dHRvblN0eWxlcyh7IGNvbG9yVmFyaWFudCwgc2l6ZSwgZmlsbFZhcmlhbnQsIGRpc2FibGVkIH0pO1xyXG4gICAgZGlzYWJsZWQgPSBidXR0b25TdHlsZUluZm8uZGlzYWJsZWQ7XHJcbiAgICBjb2xvclZhcmlhbnQgPSBidXR0b25TdHlsZUluZm8uY29sb3JWYXJpYW50O1xyXG4gICAgc2l6ZSA9IGJ1dHRvblN0eWxlSW5mby5zaXplO1xyXG4gICAgY29uc3QgdXNlQnV0dG9uU3R5bGVzUHJvcHMgPSBidXR0b25TdHlsZUluZm8udXNlQnV0dG9uU3R5bGVzUHJvcHM7XHJcbiAgICBjb25zdCBvbkNsaWNrID0gZ2V0U3luY0hhbmRsZXIocGVuZGluZyA/IG51bGwgOiBvbkNsaWNrQXN5bmMpO1xyXG4gICAgcmV0dXJuIGgoXCJidXR0b25cIiwgeyAuLi51c2VBcmlhQnV0dG9uUHJvcHModXNlQnV0dG9uU3R5bGVzUHJvcHMoeyAuLi5wcm9wcywgb25DbGljaywgcmVmIH0pKSB9KTtcclxufSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvZ2dsZS1idXR0b24uanMubWFwIiwiaW1wb3J0IGNsc3ggZnJvbSBcImNsc3hcIjtcclxuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgaCB9IGZyb20gXCJwcmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlSGFzRm9jdXMsIHVzZUxpc3ROYXZpZ2F0aW9uLCB1c2VNZXJnZWRQcm9wcyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IGZvcndhcmRFbGVtZW50UmVmIH0gZnJvbSBcIi4uL3Byb3BzXCI7XHJcbmltcG9ydCB7IHVzZUJ1dHRvbkNvbG9yVmFyaWFudCwgdXNlQnV0dG9uRGlzYWJsZWQsIHVzZUJ1dHRvbkZpbGxWYXJpYW50LCB1c2VCdXR0b25TaXplIH0gZnJvbSBcIi4vZGVmYXVsdHNcIjtcclxuaW1wb3J0IHsgUHJvdmlkZURlZmF1bHRCdXR0b25Db2xvciwgUHJvdmlkZURlZmF1bHRCdXR0b25TaXplLCBQcm92aWRlRGVmYXVsdEJ1dHRvbkRpc2FibGVkLCBQcm92aWRlRGVmYXVsdEJ1dHRvbkZpbGwgfSBmcm9tIFwiLi9kZWZhdWx0c1wiO1xyXG5pbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VFZmZlY3QgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCIuL2J1dHRvblwiO1xyXG5pbXBvcnQgeyBUb2dnbGVCdXR0b24gfSBmcm9tIFwiLi90b2dnbGUtYnV0dG9uXCI7XHJcbmV4cG9ydCBjb25zdCBVc2VCdXR0b25Hcm91cENoaWxkID0gY3JlYXRlQ29udGV4dChudWxsKTtcclxuZXhwb3J0IGNvbnN0IEJ1dHRvbkdyb3VwID0gZm9yd2FyZEVsZW1lbnRSZWYoZnVuY3Rpb24gQnV0dG9uR3JvdXAocCwgcmVmKSB7XHJcbiAgICBjb25zdCB7IGxhc3RGb2N1c2VkSW5uZXIsIHVzZUhhc0ZvY3VzUHJvcHMgfSA9IHVzZUhhc0ZvY3VzKCk7XHJcbiAgICBjb25zdCB7IGluZGljZXNCeUVsZW1lbnQsIG1hbmFnZWRDaGlsZHJlbiwgdXNlTGlzdE5hdmlnYXRpb25DaGlsZCwgbmF2aWdhdGVUb0luZGV4LCBjaGlsZENvdW50IH0gPSB1c2VMaXN0TmF2aWdhdGlvbih7IGZvY3VzT25DaGFuZ2U6IGxhc3RGb2N1c2VkSW5uZXIgfSk7XHJcbiAgICAvLyBTdHlsaW5nIHByb3BzXHJcbiAgICBsZXQgeyBjb2xvclZhcmlhbnQsIGZpbGxWYXJpYW50LCBzaXplLCBkaXNhYmxlZCwgc2VsZWN0ZWRJbmRleCwgLi4ucDMgfSA9IHA7XHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmIChzZWxlY3RlZEluZGV4ICE9IG51bGwpXHJcbiAgICAgICAgICAgIG5hdmlnYXRlVG9JbmRleChzZWxlY3RlZEluZGV4KTtcclxuICAgIH0sIFtzZWxlY3RlZEluZGV4XSk7XHJcbiAgICAvLyBCdWlsZCBuZXcgRE9NIHByb3BzIHRvIG1lcmdlIGJhc2VkIG9mZiB0aGUgc3R5bGluZyBwcm9wc1xyXG4gICAgY29sb3JWYXJpYW50ID0gdXNlQnV0dG9uQ29sb3JWYXJpYW50KGNvbG9yVmFyaWFudCk7XHJcbiAgICBzaXplID0gdXNlQnV0dG9uU2l6ZShzaXplKTtcclxuICAgIGZpbGxWYXJpYW50ID0gdXNlQnV0dG9uRmlsbFZhcmlhbnQoZmlsbFZhcmlhbnQpO1xyXG4gICAgZGlzYWJsZWQgPSB1c2VCdXR0b25EaXNhYmxlZChkaXNhYmxlZCk7XHJcbiAgICBjb25zdCBuZXdEb21Qcm9wcyA9IHsgcmVmLCByb2xlOiBcImdyb3VwXCIsIGRpc2FibGVkLCBjbGFzc05hbWU6IGNsc3goXCJidG4tZ3JvdXBcIikgfTtcclxuICAgIC8vIFJlbWFpbmluZyBwcm9wcywgZm9yd2FyZGVkIG9udG8gdGhlIERPTVxyXG4gICAgY29uc3QgZG9tUHJvcHMgPSB1c2VIYXNGb2N1c1Byb3BzKHVzZU1lcmdlZFByb3BzKCkobmV3RG9tUHJvcHMsIHAzKSk7XHJcbiAgICBkb21Qcm9wc1tcImRhdGEtY2hpbGQtY291bnRcIl0gPSBgJHtjaGlsZENvdW50fWA7XHJcbiAgICByZXR1cm4gKGgoVXNlQnV0dG9uR3JvdXBDaGlsZC5Qcm92aWRlciwgeyB2YWx1ZTogdXNlTGlzdE5hdmlnYXRpb25DaGlsZCB9LFxyXG4gICAgICAgIGgoUHJvdmlkZURlZmF1bHRCdXR0b25Db2xvciwgeyB2YWx1ZTogY29sb3JWYXJpYW50IH0sXHJcbiAgICAgICAgICAgIGgoUHJvdmlkZURlZmF1bHRCdXR0b25GaWxsLCB7IHZhbHVlOiBmaWxsVmFyaWFudCB9LFxyXG4gICAgICAgICAgICAgICAgaChQcm92aWRlRGVmYXVsdEJ1dHRvblNpemUsIHsgdmFsdWU6IHNpemUgfSxcclxuICAgICAgICAgICAgICAgICAgICBoKFByb3ZpZGVEZWZhdWx0QnV0dG9uRGlzYWJsZWQsIHsgdmFsdWU6IGRpc2FibGVkIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGgoXCJkaXZcIiwgeyAuLi5kb21Qcm9wcyB9KSkpKSkpKTtcclxufSk7XHJcbmZ1bmN0aW9uIEJ1dHRvbkdyb3VwQ2hpbGQxKHsgaW5kZXgsIC4uLmJ1dHRvblByb3BzIH0sIHJlZikge1xyXG4gICAgLy8gVGhpcyBpcyBtb3JlLW9yLWxlc3MgZm9yY2VkIHRvIGJlIGEgc2VwYXJhdGUgY29tcG9uZW50IGJlY2F1c2Ugb2YgdGhlIGluZGV4IHByb3AuXHJcbiAgICAvLyBJdCB3b3VsZCBiZSByZWFsbHkgbmljZSB0byBmaW5kIGEgd2F5IHRvIG1ha2UgdGhhdCBpbXBsaWNpdCBiYXNlZCBvbiBET00gbG9jYXRpb24sXHJcbiAgICAvLyBzcGVjaWZpY2FsbHkgZm9yIHNtYWxsIHRoaW5ncyBsaWtlIGJ1dHRvbiBncm91cHMuLi5cclxuICAgIGNvbnN0IHVzZUJ1dHRvbkdyb3VwQ2hpbGQgPSB1c2VDb250ZXh0KFVzZUJ1dHRvbkdyb3VwQ2hpbGQpO1xyXG4gICAgY29uc3QgeyB0YWJiYWJsZSwgdXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzLCB1c2VMaXN0TmF2aWdhdGlvblNpYmxpbmdQcm9wcyB9ID0gdXNlQnV0dG9uR3JvdXBDaGlsZCh7IGluZGV4LCB0ZXh0OiBudWxsIH0pO1xyXG4gICAgLy8gVE9ETzogSXQncyBraW5kYSBmcmFnaWxlIGhlcmUgaG93IHRoZSBzeW5jIG9uQ2xpY2sgb2YgbGlzdE5hdmlnYXRpb24gXHJcbiAgICAvLyBhbmQgdGhlIGFzeW5jIG9uQ2xpY2sgb2YgYnV0dG9uIGFyZSBtaXhpbmcuXHJcbiAgICBjb25zdCBwID0gdXNlTGlzdE5hdmlnYXRpb25DaGlsZFByb3BzKHsgcmVmLCAuLi5idXR0b25Qcm9wcyB9KTtcclxuICAgIGlmIChwLnByZXNzZWQgIT0gbnVsbClcclxuICAgICAgICByZXR1cm4gaChUb2dnbGVCdXR0b24sIHsgLi4ucCB9KTtcclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gaChCdXR0b24sIHsgLi4ucCB9KTtcclxufVxyXG5leHBvcnQgY29uc3QgQnV0dG9uR3JvdXBDaGlsZCA9IGZvcndhcmRFbGVtZW50UmVmKEJ1dHRvbkdyb3VwQ2hpbGQxKTtcclxuKCkgPT4ge1xyXG4gICAgaChCdXR0b25Hcm91cENoaWxkLCB7IGluZGV4OiAwLCBwcmVzc2VkOiB0cnVlLCBvbkNsaWNrOiBiID0+IHsgfSB9KTtcclxuICAgIGgoQnV0dG9uR3JvdXBDaGlsZCwgeyBpbmRleDogMCwgdGFnOiBcImFcIiwgaHJlZjogXCIgXCIgfSk7XHJcbiAgICBoKEJ1dHRvbkdyb3VwQ2hpbGQsIHsgaW5kZXg6IDAsIG9uQ2xpY2s6IChuLCBlKSA9PiB7IH0gfSk7XHJcbiAgICBoKEJ1dHRvbkdyb3VwQ2hpbGQsIHsgdGFnOiBcImJ1dHRvblwiLCBpbmRleDogMCB9KTtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICBoKEJ1dHRvbkdyb3VwQ2hpbGQsIHsgdGFnOiBcImJ1dHRvblwiIH0pO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3JcclxuICAgIGgoQnV0dG9uR3JvdXBDaGlsZCwgeyB0YWc6IFwiYnV0dG9uXCIsIGluZGV4OiAwLCBwcmVzc2VkOiB0cnVlLCBvbkNsaWNrOiBiID0+IHsgfSB9KTtcclxuICAgIC8vLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICBoKEJ1dHRvbkdyb3VwQ2hpbGQsIHsgdGFnOiBcImFcIiwgaW5kZXg6IDAsIHByZXNzZWQ6IHRydWUsIG9uQ2xpY2s6IGIgPT4geyB9IH0pO1xyXG4gICAgLy8vIEB0cy1leHBlY3QtZXJyb3JcclxuICAgIGgoQnV0dG9uR3JvdXBDaGlsZCwgeyB0YWc6IFwiYVwiLCBpbmRleDogMCwgb25DbGljazogYiA9PiB7IH0gfSk7XHJcbn07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1dHRvbi1ncm91cC5qcy5tYXAiLCJpbXBvcnQgeyBnZW5lcmF0ZVJhbmRvbUlkIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLXJhbmRvbS1pZFwiO1xyXG5pbXBvcnQgeyBjcmVhdGVQb3J0YWwgfSBmcm9tIFwicHJlYWN0L2NvbXBhdFwiO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmNvbnN0IGJhc2VJZCA9IGdlbmVyYXRlUmFuZG9tSWQoXCJyZW5kZXItcG9ydGFsLWNvbnRhaW5lci1cIik7XHJcbmV4cG9ydCBmdW5jdGlvbiBCb2R5UG9ydGFsKHsgY2hpbGRyZW4gfSkge1xyXG4gICAgY29uc3QgaWQgPSB1c2VSZWYobnVsbCk7XHJcbiAgICBjb25zdCBbcG9ydGFsRWxlbWVudCwgc2V0UG9ydGFsRWxlbWVudF0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKGlkLmN1cnJlbnQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZC5jdXJyZW50ID0gZ2VuZXJhdGVSYW5kb21JZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYmFzZUlkKTtcclxuICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBjb250YWluZXIuaWQgPSBiYXNlSWQ7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSBcImJvZHktcG9ydGFsLWNvbnRhaW5lclwiO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQuY3VycmVudCk7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IFwiYm9keS1wb3J0YWxcIjtcclxuICAgICAgICAgICAgZWxlbWVudC5pZCA9IGlkLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0UG9ydGFsRWxlbWVudChlbGVtZW50KTtcclxuICAgICAgICByZXR1cm4gKCkgPT4gZG9jdW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XHJcbiAgICB9LCBbXSk7XHJcbiAgICBpZiAocG9ydGFsRWxlbWVudClcclxuICAgICAgICByZXR1cm4gY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBwb3J0YWxFbGVtZW50KTtcclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgeyBCb2R5UG9ydGFsIH0gZnJvbSBcIi4uL3BvcnRhbFwiO1xyXG5pbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VBcmlhRGlhbG9nIH0gZnJvbSBcInByZWFjdC1hcmlhLXdpZGdldHNcIjtcclxuaW1wb3J0IHsgZm9yd2FyZEVsZW1lbnRSZWYgfSBmcm9tIFwiLi4vcHJvcHNcIjtcclxuaW1wb3J0IHsgRmFkZSB9IGZyb20gXCJwcmVhY3QtdHJhbnNpdGlvbi9mYWRlXCI7XHJcbmltcG9ydCBcIndpY2ctaW5lcnRcIjtcclxuZXhwb3J0IGNvbnN0IERpYWxvZyA9IGZvcndhcmRFbGVtZW50UmVmKGZ1bmN0aW9uIERpYWxvZyh7IG9uQ2xvc2UsIG9wZW4sIGRlc2NyaXB0aXZlLCB0aXRsZSwgZm9vdGVyLCBUcmFuc2l0aW9uLCBjaGlsZHJlbiwgLi4ucmVzdCB9LCByZWYpIHtcclxuICAgIGNvbnN0IHsgdXNlRGlhbG9nQmFja2Ryb3AsIHVzZURpYWxvZ0JvZHksIHVzZURpYWxvZ1Byb3BzLCB1c2VEaWFsb2dUaXRsZSB9ID0gdXNlQXJpYURpYWxvZyh7IG9wZW4sIG9uQ2xvc2UgfSk7XHJcbiAgICBjb25zdCB7IHVzZU1vZGFsQmFja2Ryb3BQcm9wcyB9ID0gdXNlRGlhbG9nQmFja2Ryb3AoKTtcclxuICAgIGNvbnN0IHsgdXNlTW9kYWxCb2R5UHJvcHMsIH0gPSB1c2VEaWFsb2dCb2R5KHsgZGVzY3JpcHRpdmUgfSk7XHJcbiAgICBjb25zdCB7IHVzZU1vZGFsVGl0bGVQcm9wcyB9ID0gdXNlRGlhbG9nVGl0bGUoKTtcclxuICAgIHJldHVybiAoaChCb2R5UG9ydGFsLCBudWxsLFxyXG4gICAgICAgIGgoXCJkaXZcIiwgeyBjbGFzczogXCJtb2RhbC1wb3J0YWwtY29udGFpbmVyXCIgfSxcclxuICAgICAgICAgICAgaChGYWRlLCB7IG9wZW46IG9wZW4gfSxcclxuICAgICAgICAgICAgICAgIGgoXCJkaXZcIiwgeyAuLi51c2VNb2RhbEJhY2tkcm9wUHJvcHMoeyBjbGFzczogXCJtb2RhbC1iYWNrZHJvcCAgYmFja2Ryb3AtZmlsdGVyLXRyYW5zaXRpb25cIiwgb25Qb2ludGVyVXA6ICgpID0+IG9uQ2xvc2UoXCJiYWNrZHJvcFwiKSB9KSB9KSksXHJcbiAgICAgICAgICAgIGgoVHJhbnNpdGlvbiwgeyAuLi57IHJlZiwgb3BlbiwgLi4ucmVzdCB9IH0sXHJcbiAgICAgICAgICAgICAgICBoKFwiZGl2XCIsIHsgLi4udXNlRGlhbG9nUHJvcHMoeyBjbGFzczogXCJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLXNjcm9sbGFibGVcIiB9KSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGgoXCJkaXZcIiwgeyBjbGFzczogXCJtb2RhbC1jb250ZW50IFwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlICE9IG51bGwgJiYgaChcImRpdlwiLCB7IC4uLnVzZU1vZGFsVGl0bGVQcm9wcyh7IGNsYXNzOiBcIm1vZGFsLWhlYWRlclwiIH0pIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoKFwiaDFcIiwgeyBjbGFzczogXCJtb2RhbC10aXRsZVwiIH0sIHRpdGxlKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGgoXCJkaXZcIiwgeyAuLi51c2VNb2RhbEJvZHlQcm9wcyh7IGNsYXNzOiBcIm1vZGFsLWJvZHlcIiB9KSB9LCBjaGlsZHJlbiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvb3RlciAhPSBudWxsICYmIGgoXCJkaXZcIiwgeyBjbGFzczogXCJtb2RhbC1mb290ZXJcIiB9LCBmb290ZXIpKSkpKSkpO1xyXG59KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlhbG9nLmpzLm1hcCIsImltcG9ydCBjbHN4IGZyb20gXCJjbHN4XCI7XHJcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIGggfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZUFyaWFMaXN0Ym94U2luZ2xlIH0gZnJvbSBcInByZWFjdC1hcmlhLXdpZGdldHNcIjtcclxuaW1wb3J0IHsgRXZlbnREZXRhaWwgfSBmcm9tIFwicHJlYWN0LWFyaWEtd2lkZ2V0cy9wcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VBc3luY0hhbmRsZXIsIHVzZU1lcmdlZFByb3BzLCB1c2VSZWZFbGVtZW50LCB1c2VTdGF0ZSB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IHVzZUNvbnRleHQsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgdXNlUHNldWRvQWN0aXZlIH0gZnJvbSBcIi4uL3Byb3BzXCI7XHJcbmV4cG9ydCBjb25zdCBVc2VMaXN0Ym94U2luZ2xlSXRlbUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KG51bGwpO1xyXG5leHBvcnQgZnVuY3Rpb24gTGlzdFNpbmdsZShwcm9wcywgcmVmKSB7XHJcbiAgICBjb25zdCB7IG9uU2VsZWN0OiBvblNlbGVjdEFzeW5jLCBzZWxlY3RlZEluZGV4LCBzZWxlY3Rpb25Nb2RlLCBjb2xsYXRvciwga2V5TmF2aWdhdGlvbiwgbm9UeXBlYWhlYWQsIG5vV3JhcCwgdHlwZWFoZWFkVGltZW91dCwgdGFnLCBzZWxlY3QsIC4uLmRvbVByb3BzIH0gPSBwcm9wcztcclxuICAgIGNvbnN0IHsgZ2V0U3luY0hhbmRsZXIgfSA9IHVzZUFzeW5jSGFuZGxlcigpKHsgY2FwdHVyZTogKGUpID0+IGVbRXZlbnREZXRhaWxdLnNlbGVjdGVkSW5kZXggfSk7XHJcbiAgICBjb25zdCBvblNlbGVjdCA9IGdldFN5bmNIYW5kbGVyKG9uU2VsZWN0QXN5bmMpO1xyXG4gICAgY29uc3QgeyB1c2VMaXN0Ym94U2luZ2xlSXRlbSwgdXNlTGlzdGJveFNpbmdsZUxhYmVsLCB1c2VMaXN0Ym94U2luZ2xlUHJvcHMgfSA9IHVzZUFyaWFMaXN0Ym94U2luZ2xlKHsgb25TZWxlY3QsIHNlbGVjdGVkSW5kZXgsIHNlbGVjdGlvbk1vZGUsIHR5cGVhaGVhZFRpbWVvdXQsIG5vV3JhcCwgbm9UeXBlYWhlYWQsIGtleU5hdmlnYXRpb24sIGNvbGxhdG9yIH0pO1xyXG4gICAgcmV0dXJuIGgoVXNlTGlzdGJveFNpbmdsZUl0ZW1Db250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiB1c2VMaXN0Ym94U2luZ2xlSXRlbSB9LCBoKHRhZywgdXNlTWVyZ2VkUHJvcHMoKSh7IGNsYXNzOiBcImxpc3QtZ3JvdXBcIiwgcmVmIH0sIHVzZUxpc3Rib3hTaW5nbGVQcm9wcyhkb21Qcm9wcykpKSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIExpc3RJdGVtU2luZ2xlKHByb3BzLCByZWYpIHtcclxuICAgIGNvbnN0IHVzZUxpc3RJdGVtU2luZ2xlID0gdXNlQ29udGV4dChVc2VMaXN0Ym94U2luZ2xlSXRlbUNvbnRleHQpO1xyXG4gICAgY29uc3QgeyBpbmRleCwgLi4uZG9tUHJvcHMgfSA9IHsgLi4ucHJvcHMsIHJlZiB9O1xyXG4gICAgY29uc3QgW3RleHQsIHNldFRleHRdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCB7IHVzZVJlZkVsZW1lbnRQcm9wcywgZWxlbWVudCB9ID0gdXNlUmVmRWxlbWVudCgpO1xyXG4gICAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAoZWxlbWVudClcclxuICAgICAgICAgICAgc2V0VGV4dChlbGVtZW50LmlubmVyVGV4dCk7XHJcbiAgICB9LCBbZWxlbWVudF0pO1xyXG4gICAgY29uc3QgeyBnZXRTZWxlY3RlZCwgdGFiYmFibGUsIHNlbGVjdGVkLCB1c2VMaXN0Ym94U2luZ2xlSXRlbVByb3BzIH0gPSB1c2VMaXN0SXRlbVNpbmdsZSh7IGluZGV4LCB0ZXh0LCB0YWc6IFwibGlcIiB9KTtcclxuICAgIHJldHVybiBoKFwibGlcIiwgeyAuLi51c2VQc2V1ZG9BY3RpdmUodXNlTWVyZ2VkUHJvcHMoKSh7IGNsYXNzOiBjbHN4KFwibGlzdC1ncm91cC1pdGVtXCIsIFwibGlzdC1ncm91cC1pdGVtLWFjdGlvblwiLCBzZWxlY3RlZCAmJiBcImFjdGl2ZVwiKSB9LCB1c2VMaXN0Ym94U2luZ2xlSXRlbVByb3BzKHVzZVJlZkVsZW1lbnRQcm9wcyhkb21Qcm9wcykpKSkgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlzdC1zaW5nbGUuanMubWFwIiwiaW1wb3J0IGNsc3ggZnJvbSBcImNsc3hcIjtcclxuaW1wb3J0IHsgaCwgY3JlYXRlQ29udGV4dCwgY2xvbmVFbGVtZW50IH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VBcmlhVGFicyB9IGZyb20gXCJwcmVhY3QtYXJpYS13aWRnZXRzXCI7XHJcbmltcG9ydCB7IEV2ZW50RGV0YWlsIH0gZnJvbSBcInByZWFjdC1hcmlhLXdpZGdldHMvcHJvcHNcIjtcclxuaW1wb3J0IHsgdXNlQXN5bmNIYW5kbGVyIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtbWVyZ2VkLXByb3BzXCI7XHJcbmltcG9ydCB7IFN3YXBwYWJsZSB9IGZyb20gXCJwcmVhY3QtdHJhbnNpdGlvblwiO1xyXG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5jb25zdCBVc2VUYWJDb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKTtcclxuY29uc3QgVXNlVGFiUGFuZWxDb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKTtcclxuZXhwb3J0IGZ1bmN0aW9uIFRhYnMoeyBvblNlbGVjdDogb25TZWxlY3RBc3luYywgb3JpZW50YXRpb24sIHNlbGVjdGVkSW5kZXgsIHNlbGVjdGlvbk1vZGUsIHRhZywgY2hpbGRyZW4sIHZpc3VhbFZhcmlhbnQsIC4uLnByb3BzIH0pIHtcclxuICAgIGNvbnN0IGNhcHR1cmUgPSAoZSkgPT4geyByZXR1cm4gZVtFdmVudERldGFpbF0uc2VsZWN0ZWRJbmRleDsgfTtcclxuICAgIG9yaWVudGF0aW9uID8/PSBcImlubGluZVwiO1xyXG4gICAgY29uc3QgeyBnZXRTeW5jSGFuZGxlciB9ID0gdXNlQXN5bmNIYW5kbGVyKCkoeyBjYXB0dXJlOiBjYXB0dXJlIH0pO1xyXG4gICAgY29uc3Qgb25TZWxlY3QgPSBnZXRTeW5jSGFuZGxlcihvblNlbGVjdEFzeW5jKTtcclxuICAgIGNvbnN0IHsgdXNlVGFiLCB1c2VUYWJQYW5lbCwgdXNlVGFic0xhYmVsLCB1c2VUYWJzTGlzdCB9ID0gdXNlQXJpYVRhYnMoeyBvblNlbGVjdCwgc2VsZWN0ZWRJbmRleCwgc2VsZWN0aW9uTW9kZSwgb3JpZW50YXRpb24gfSk7XHJcbiAgICBjb25zdCB7IHVzZVRhYkxpc3RQcm9wcyB9ID0gdXNlVGFic0xpc3QoKTtcclxuICAgIHJldHVybiAoaChcImRpdlwiLCB7IGNsYXNzOiBjbHN4KFwidGFicy1jb250YWluZXJcIiwgYHRhYnMtb3JpZW50YXRpb24tJHtvcmllbnRhdGlvbn1gKSB9LFxyXG4gICAgICAgIGgoVXNlVGFiQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogdXNlVGFiIH0sIGNsb25lRWxlbWVudChjaGlsZHJlblswXSwgdXNlVGFiTGlzdFByb3BzKHVzZU1lcmdlZFByb3BzKCkoeyBjbGFzc05hbWU6IGNsc3goXCJuYXZcIiwgdmlzdWFsVmFyaWFudCA9PSBcInBpbGxzXCIgPyBcIm5hdi1waWxsc1wiIDogXCJuYXYtdGFic1wiKSB9LCB7IC4uLnByb3BzIH0pKSwgY2hpbGRyZW5bMF0ucHJvcHMuY2hpbGRyZW4pKSxcclxuICAgICAgICBoKFVzZVRhYlBhbmVsQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogdXNlVGFiUGFuZWwgfSxcclxuICAgICAgICAgICAgaChTd2FwcGFibGUsIG51bGwsXHJcbiAgICAgICAgICAgICAgICBoKFwiZGl2XCIsIHsgY2xhc3M6IFwidGFiLWNvbnRlbnRcIiB9LCBjaGlsZHJlbi5zbGljZSgxKSkpKSkpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBUYWIoeyBpbmRleCwgY2hpbGRyZW4sIC4uLnByb3BzIH0pIHtcclxuICAgIGNvbnN0IHVzZVRhYkNvbnRleHQgPSB1c2VDb250ZXh0KFVzZVRhYkNvbnRleHQpO1xyXG4gICAgY29uc3QgeyB1c2VUYWJQcm9wcywgc2VsZWN0ZWQgfSA9IHVzZVRhYkNvbnRleHQoeyBpbmRleCwgdGV4dDogbnVsbCwgdGFnOiBcImJ1dHRvblwiIH0pO1xyXG4gICAgcmV0dXJuIGgoXCJsaVwiLCB7IGNsYXNzTmFtZTogXCJuYXYtaXRlbVwiLCByb2xlOiBcInByZXNlbnRhdGlvblwiIH0sXHJcbiAgICAgICAgaChcImJ1dHRvblwiLCB7IC4uLnVzZVRhYlByb3BzKHVzZU1lcmdlZFByb3BzKCkoeyBjbGFzczogY2xzeChgbmF2LWxpbmtgLCBzZWxlY3RlZCAmJiBgYWN0aXZlYCkgfSwgcHJvcHMpKSB9LCBjaGlsZHJlbikpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBUYWJQYW5lbCh7IGluZGV4LCBjaGlsZHJlbiwgVHJhbnNpdGlvbiwgLi4ucmVzdCB9KSB7XHJcbiAgICBjb25zdCB1c2VUYWJQYW5lbCA9IHVzZUNvbnRleHQoVXNlVGFiUGFuZWxDb250ZXh0KTtcclxuICAgIGNvbnN0IHsgdXNlVGFiUGFuZWxQcm9wcywgc2VsZWN0ZWQgfSA9IHVzZVRhYlBhbmVsKHsgaW5kZXggfSk7XHJcbiAgICByZXR1cm4gaChUcmFuc2l0aW9uLCB1c2VUYWJQYW5lbFByb3BzKHsgY2xhc3M6IFwiXCIsIG9wZW46IHNlbGVjdGVkLCBjaGlsZHJlbiwgLi4ucmVzdCB9KSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFicy5qcy5tYXAiLG51bGwsbnVsbCwiXCJ1c2Ugc3RyaWN0XCI7XHJcbmdsb2JhbFRoaXMucHJvY2VzcyA/Pz0ge307XHJcbmdsb2JhbFRoaXMucHJvY2Vzcy5lbnYgPz89IHt9O1xyXG5nbG9iYWxUaGlzLnByb2Nlc3MuZW52Lk5PREVfRU5WID8/PSBcImRldmVsb3BtZW50XCI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcHBlci1jb25maWcuanMubWFwIiwiZXhwb3J0IHZhciB0b3AgPSAndG9wJztcbmV4cG9ydCB2YXIgYm90dG9tID0gJ2JvdHRvbSc7XG5leHBvcnQgdmFyIHJpZ2h0ID0gJ3JpZ2h0JztcbmV4cG9ydCB2YXIgbGVmdCA9ICdsZWZ0JztcbmV4cG9ydCB2YXIgYXV0byA9ICdhdXRvJztcbmV4cG9ydCB2YXIgYmFzZVBsYWNlbWVudHMgPSBbdG9wLCBib3R0b20sIHJpZ2h0LCBsZWZ0XTtcbmV4cG9ydCB2YXIgc3RhcnQgPSAnc3RhcnQnO1xuZXhwb3J0IHZhciBlbmQgPSAnZW5kJztcbmV4cG9ydCB2YXIgY2xpcHBpbmdQYXJlbnRzID0gJ2NsaXBwaW5nUGFyZW50cyc7XG5leHBvcnQgdmFyIHZpZXdwb3J0ID0gJ3ZpZXdwb3J0JztcbmV4cG9ydCB2YXIgcG9wcGVyID0gJ3BvcHBlcic7XG5leHBvcnQgdmFyIHJlZmVyZW5jZSA9ICdyZWZlcmVuY2UnO1xuZXhwb3J0IHZhciB2YXJpYXRpb25QbGFjZW1lbnRzID0gLyojX19QVVJFX18qL2Jhc2VQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7XG5leHBvcnQgdmFyIHBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovW10uY29uY2F0KGJhc2VQbGFjZW1lbnRzLCBbYXV0b10pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCwgcGxhY2VtZW50ICsgXCItXCIgKyBzdGFydCwgcGxhY2VtZW50ICsgXCItXCIgKyBlbmRdKTtcbn0sIFtdKTsgLy8gbW9kaWZpZXJzIHRoYXQgbmVlZCB0byByZWFkIHRoZSBET01cblxuZXhwb3J0IHZhciBiZWZvcmVSZWFkID0gJ2JlZm9yZVJlYWQnO1xuZXhwb3J0IHZhciByZWFkID0gJ3JlYWQnO1xuZXhwb3J0IHZhciBhZnRlclJlYWQgPSAnYWZ0ZXJSZWFkJzsgLy8gcHVyZS1sb2dpYyBtb2RpZmllcnNcblxuZXhwb3J0IHZhciBiZWZvcmVNYWluID0gJ2JlZm9yZU1haW4nO1xuZXhwb3J0IHZhciBtYWluID0gJ21haW4nO1xuZXhwb3J0IHZhciBhZnRlck1haW4gPSAnYWZ0ZXJNYWluJzsgLy8gbW9kaWZpZXIgd2l0aCB0aGUgcHVycG9zZSB0byB3cml0ZSB0byB0aGUgRE9NIChvciB3cml0ZSBpbnRvIGEgZnJhbWV3b3JrIHN0YXRlKVxuXG5leHBvcnQgdmFyIGJlZm9yZVdyaXRlID0gJ2JlZm9yZVdyaXRlJztcbmV4cG9ydCB2YXIgd3JpdGUgPSAnd3JpdGUnO1xuZXhwb3J0IHZhciBhZnRlcldyaXRlID0gJ2FmdGVyV3JpdGUnO1xuZXhwb3J0IHZhciBtb2RpZmllclBoYXNlcyA9IFtiZWZvcmVSZWFkLCByZWFkLCBhZnRlclJlYWQsIGJlZm9yZU1haW4sIG1haW4sIGFmdGVyTWFpbiwgYmVmb3JlV3JpdGUsIHdyaXRlLCBhZnRlcldyaXRlXTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlTmFtZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50ID8gKGVsZW1lbnQubm9kZU5hbWUgfHwgJycpLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gIGlmIChub2RlID09IG51bGwpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgaWYgKG5vZGUudG9TdHJpbmcoKSAhPT0gJ1tvYmplY3QgV2luZG93XScpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93IDogd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcblxuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuSFRNTEVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGlzU2hhZG93Um9vdChub2RlKSB7XG4gIC8vIElFIDExIGhhcyBubyBTaGFkb3dSb290XG4gIGlmICh0eXBlb2YgU2hhZG93Um9vdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5TaGFkb3dSb290O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q7XG59XG5cbmV4cG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCwgaXNTaGFkb3dSb290IH07IiwiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjsgLy8gVGhpcyBtb2RpZmllciB0YWtlcyB0aGUgc3R5bGVzIHByZXBhcmVkIGJ5IHRoZSBgY29tcHV0ZVN0eWxlc2AgbW9kaWZpZXJcbi8vIGFuZCBhcHBsaWVzIHRoZW0gdG8gdGhlIEhUTUxFbGVtZW50cyBzdWNoIGFzIHBvcHBlciBhbmQgYXJyb3dcblxuZnVuY3Rpb24gYXBwbHlTdHlsZXMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlO1xuICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnN0eWxlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBGbG93IGRvZXNuJ3Qgc3VwcG9ydCB0byBleHRlbmQgdGhpcyBwcm9wZXJ0eSwgYnV0IGl0J3MgdGhlIG1vc3RcbiAgICAvLyBlZmZlY3RpdmUgd2F5IHRvIGFwcGx5IHN0eWxlcyB0byBhbiBIVE1MRWxlbWVudFxuICAgIC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuXG5cbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW25hbWVdO1xuXG4gICAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUgPT09IHRydWUgPyAnJyA6IHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZTtcbiAgdmFyIGluaXRpYWxTdHlsZXMgPSB7XG4gICAgcG9wcGVyOiB7XG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGxlZnQ6ICcwJyxcbiAgICAgIHRvcDogJzAnLFxuICAgICAgbWFyZ2luOiAnMCdcbiAgICB9LFxuICAgIGFycm93OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG4gICAgcmVmZXJlbmNlOiB7fVxuICB9O1xuICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLnBvcHBlci5zdHlsZSwgaW5pdGlhbFN0eWxlcy5wb3BwZXIpO1xuICBzdGF0ZS5zdHlsZXMgPSBpbml0aWFsU3R5bGVzO1xuXG4gIGlmIChzdGF0ZS5lbGVtZW50cy5hcnJvdykge1xuICAgIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMuYXJyb3cuc3R5bGUsIGluaXRpYWxTdHlsZXMuYXJyb3cpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICAgIHZhciBzdHlsZVByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhzdGF0ZS5zdHlsZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBzdGF0ZS5zdHlsZXNbbmFtZV0gOiBpbml0aWFsU3R5bGVzW25hbWVdKTsgLy8gU2V0IGFsbCB2YWx1ZXMgdG8gYW4gZW1wdHkgc3RyaW5nIHRvIHVuc2V0IHRoZW1cblxuICAgICAgdmFyIHN0eWxlID0gc3R5bGVQcm9wZXJ0aWVzLnJlZHVjZShmdW5jdGlvbiAoc3R5bGUsIHByb3BlcnR5KSB7XG4gICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9ICcnO1xuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICB9LCB7fSk7IC8vIGFycm93IGlzIG9wdGlvbmFsICsgdmlydHVhbCBlbGVtZW50c1xuXG4gICAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnYXBwbHlTdHlsZXMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGFwcGx5U3R5bGVzLFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgcmVxdWlyZXM6IFsnY29tcHV0ZVN0eWxlcyddXG59OyIsImltcG9ydCB7IGF1dG8gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbn0iLCJpbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xudmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCBpbmNsdWRlU2NhbGUpIHtcbiAgaWYgKGluY2x1ZGVTY2FsZSA9PT0gdm9pZCAwKSB7XG4gICAgaW5jbHVkZVNjYWxlID0gZmFsc2U7XG4gIH1cblxuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzY2FsZVggPSAxO1xuICB2YXIgc2NhbGVZID0gMTtcblxuICBpZiAoaXNIVE1MRWxlbWVudChlbGVtZW50KSAmJiBpbmNsdWRlU2NhbGUpIHtcbiAgICB2YXIgb2Zmc2V0SGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgdmFyIG9mZnNldFdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDsgLy8gRG8gbm90IGF0dGVtcHQgdG8gZGl2aWRlIGJ5IDAsIG90aGVyd2lzZSB3ZSBnZXQgYEluZmluaXR5YCBhcyBzY2FsZVxuICAgIC8vIEZhbGxiYWNrIHRvIDEgaW4gY2FzZSBib3RoIHZhbHVlcyBhcmUgYDBgXG5cbiAgICBpZiAob2Zmc2V0V2lkdGggPiAwKSB7XG4gICAgICBzY2FsZVggPSByZWN0LndpZHRoIC8gb2Zmc2V0V2lkdGggfHwgMTtcbiAgICB9XG5cbiAgICBpZiAob2Zmc2V0SGVpZ2h0ID4gMCkge1xuICAgICAgc2NhbGVZID0gcmVjdC5oZWlnaHQgLyBvZmZzZXRIZWlnaHQgfHwgMTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiByb3VuZChyZWN0LndpZHRoIC8gc2NhbGVYKSxcbiAgICBoZWlnaHQ6IHJvdW5kKHJlY3QuaGVpZ2h0IC8gc2NhbGVZKSxcbiAgICB0b3A6IHJvdW5kKHJlY3QudG9wIC8gc2NhbGVZKSxcbiAgICByaWdodDogcm91bmQocmVjdC5yaWdodCAvIHNjYWxlWCksXG4gICAgYm90dG9tOiByb3VuZChyZWN0LmJvdHRvbSAvIHNjYWxlWSksXG4gICAgbGVmdDogcm91bmQocmVjdC5sZWZ0IC8gc2NhbGVYKSxcbiAgICB4OiByb3VuZChyZWN0LmxlZnQgLyBzY2FsZVgpLFxuICAgIHk6IHJvdW5kKHJlY3QudG9wIC8gc2NhbGVZKVxuICB9O1xufSIsImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7IC8vIFJldHVybnMgdGhlIGxheW91dCByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC4gTGF5b3V0XG4vLyBtZWFucyBpdCBkb2Vzbid0IHRha2UgaW50byBhY2NvdW50IHRyYW5zZm9ybXMuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldExheW91dFJlY3QoZWxlbWVudCkge1xuICB2YXIgY2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KTsgLy8gVXNlIHRoZSBjbGllbnRSZWN0IHNpemVzIGlmIGl0J3Mgbm90IGJlZW4gdHJhbnNmb3JtZWQuXG4gIC8vIEZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTIyM1xuXG4gIHZhciB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcblxuICBpZiAoTWF0aC5hYnMoY2xpZW50UmVjdC53aWR0aCAtIHdpZHRoKSA8PSAxKSB7XG4gICAgd2lkdGggPSBjbGllbnRSZWN0LndpZHRoO1xuICB9XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3QuaGVpZ2h0IC0gaGVpZ2h0KSA8PSAxKSB7XG4gICAgaGVpZ2h0ID0gY2xpZW50UmVjdC5oZWlnaHQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IGVsZW1lbnQub2Zmc2V0TGVmdCxcbiAgICB5OiBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcbn0iLCJpbXBvcnQgeyBpc1NoYWRvd1Jvb3QgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250YWlucyhwYXJlbnQsIGNoaWxkKSB7XG4gIHZhciByb290Tm9kZSA9IGNoaWxkLmdldFJvb3ROb2RlICYmIGNoaWxkLmdldFJvb3ROb2RlKCk7IC8vIEZpcnN0LCBhdHRlbXB0IHdpdGggZmFzdGVyIG5hdGl2ZSBtZXRob2RcblxuICBpZiAocGFyZW50LmNvbnRhaW5zKGNoaWxkKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIHRoZW4gZmFsbGJhY2sgdG8gY3VzdG9tIGltcGxlbWVudGF0aW9uIHdpdGggU2hhZG93IERPTSBzdXBwb3J0XG4gIGVsc2UgaWYgKHJvb3ROb2RlICYmIGlzU2hhZG93Um9vdChyb290Tm9kZSkpIHtcbiAgICAgIHZhciBuZXh0ID0gY2hpbGQ7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG5leHQgJiYgcGFyZW50LmlzU2FtZU5vZGUobmV4dCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ106IG5lZWQgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzLi4uXG5cblxuICAgICAgICBuZXh0ID0gbmV4dC5wYXJlbnROb2RlIHx8IG5leHQuaG9zdDtcbiAgICAgIH0gd2hpbGUgKG5leHQpO1xuICAgIH0gLy8gR2l2ZSB1cCwgdGhlIHJlc3VsdCBpcyBmYWxzZVxuXG5cbiAgcmV0dXJuIGZhbHNlO1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldFdpbmRvdyhlbGVtZW50KS5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xufSIsImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNUYWJsZUVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gWyd0YWJsZScsICd0ZCcsICd0aCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoZWxlbWVudCkpID49IDA7XG59IiwiaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIHtcbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICByZXR1cm4gKChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQgOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgZWxlbWVudC5kb2N1bWVudCkgfHwgd2luZG93LmRvY3VtZW50KS5kb2N1bWVudEVsZW1lbnQ7XG59IiwiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChnZXROb2RlTmFtZShlbGVtZW50KSA9PT0gJ2h0bWwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gKC8vIHRoaXMgaXMgYSBxdWlja2VyIChidXQgbGVzcyB0eXBlIHNhZmUpIHdheSB0byBzYXZlIHF1aXRlIHNvbWUgYnl0ZXMgZnJvbSB0aGUgYnVuZGxlXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIGVsZW1lbnQuYXNzaWduZWRTbG90IHx8IC8vIHN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlXG4gICAgZWxlbWVudC5wYXJlbnROb2RlIHx8ICggLy8gRE9NIEVsZW1lbnQgZGV0ZWN0ZWRcbiAgICBpc1NoYWRvd1Jvb3QoZWxlbWVudCkgPyBlbGVtZW50Lmhvc3QgOiBudWxsKSB8fCAvLyBTaGFkb3dSb290IGRldGVjdGVkXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IEhUTUxFbGVtZW50IGlzIGEgTm9kZVxuICAgIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSAvLyBmYWxsYmFja1xuXG4gICk7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBpc1RhYmxlRWxlbWVudCBmcm9tIFwiLi9pc1RhYmxlRWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuXG5mdW5jdGlvbiBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvODM3XG4gIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDtcbn0gLy8gYC5vZmZzZXRQYXJlbnRgIHJlcG9ydHMgYG51bGxgIGZvciBmaXhlZCBlbGVtZW50cywgd2hpbGUgYWJzb2x1dGUgZWxlbWVudHNcbi8vIHJldHVybiB0aGUgY29udGFpbmluZyBibG9ja1xuXG5cbmZ1bmN0aW9uIGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB7XG4gIHZhciBpc0ZpcmVmb3ggPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignZmlyZWZveCcpICE9PSAtMTtcbiAgdmFyIGlzSUUgPSBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSAhPT0gLTE7XG5cbiAgaWYgKGlzSUUgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSkge1xuICAgIC8vIEluIElFIDksIDEwIGFuZCAxMSBmaXhlZCBlbGVtZW50cyBjb250YWluaW5nIGJsb2NrIGlzIGFsd2F5cyBlc3RhYmxpc2hlZCBieSB0aGUgdmlld3BvcnRcbiAgICB2YXIgZWxlbWVudENzcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICBpZiAoZWxlbWVudENzcy5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgdmFyIGN1cnJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcblxuICB3aGlsZSAoaXNIVE1MRWxlbWVudChjdXJyZW50Tm9kZSkgJiYgWydodG1sJywgJ2JvZHknXS5pbmRleE9mKGdldE5vZGVOYW1lKGN1cnJlbnROb2RlKSkgPCAwKSB7XG4gICAgdmFyIGNzcyA9IGdldENvbXB1dGVkU3R5bGUoY3VycmVudE5vZGUpOyAvLyBUaGlzIGlzIG5vbi1leGhhdXN0aXZlIGJ1dCBjb3ZlcnMgdGhlIG1vc3QgY29tbW9uIENTUyBwcm9wZXJ0aWVzIHRoYXRcbiAgICAvLyBjcmVhdGUgYSBjb250YWluaW5nIGJsb2NrLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9Db250YWluaW5nX2Jsb2NrI2lkZW50aWZ5aW5nX3RoZV9jb250YWluaW5nX2Jsb2NrXG5cbiAgICBpZiAoY3NzLnRyYW5zZm9ybSAhPT0gJ25vbmUnIHx8IGNzcy5wZXJzcGVjdGl2ZSAhPT0gJ25vbmUnIHx8IGNzcy5jb250YWluID09PSAncGFpbnQnIHx8IFsndHJhbnNmb3JtJywgJ3BlcnNwZWN0aXZlJ10uaW5kZXhPZihjc3Mud2lsbENoYW5nZSkgIT09IC0xIHx8IGlzRmlyZWZveCAmJiBjc3Mud2lsbENoYW5nZSA9PT0gJ2ZpbHRlcicgfHwgaXNGaXJlZm94ICYmIGNzcy5maWx0ZXIgJiYgY3NzLmZpbHRlciAhPT0gJ25vbmUnKSB7XG4gICAgICByZXR1cm4gY3VycmVudE5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn0gLy8gR2V0cyB0aGUgY2xvc2VzdCBhbmNlc3RvciBwb3NpdGlvbmVkIGVsZW1lbnQuIEhhbmRsZXMgc29tZSBlZGdlIGNhc2VzLFxuLy8gc3VjaCBhcyB0YWJsZSBhbmNlc3RvcnMgYW5kIGNyb3NzIGJyb3dzZXIgYnVncy5cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50KTtcblxuICB3aGlsZSAob2Zmc2V0UGFyZW50ICYmIGlzVGFibGVFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIGlmIChvZmZzZXRQYXJlbnQgJiYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdodG1sJyB8fCBnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnYm9keScgJiYgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudCkgfHwgd2luZG93O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSA+PSAwID8gJ3gnIDogJ3knO1xufSIsImV4cG9ydCB2YXIgbWF4ID0gTWF0aC5tYXg7XG5leHBvcnQgdmFyIG1pbiA9IE1hdGgubWluO1xuZXhwb3J0IHZhciByb3VuZCA9IE1hdGgucm91bmQ7IiwiaW1wb3J0IHsgbWF4IGFzIG1hdGhNYXgsIG1pbiBhcyBtYXRoTWluIH0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd2l0aGluKG1pbiwgdmFsdWUsIG1heCkge1xuICByZXR1cm4gbWF0aE1heChtaW4sIG1hdGhNaW4odmFsdWUsIG1heCkpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEZyZXNoU2lkZU9iamVjdCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDBcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gXCIuL2dldEZyZXNoU2lkZU9iamVjdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VQYWRkaW5nT2JqZWN0KHBhZGRpbmdPYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGdldEZyZXNoU2lkZU9iamVjdCgpLCBwYWRkaW5nT2JqZWN0KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHBhbmRUb0hhc2hNYXAodmFsdWUsIGtleXMpIHtcbiAgcmV0dXJuIGtleXMucmVkdWNlKGZ1bmN0aW9uIChoYXNoTWFwLCBrZXkpIHtcbiAgICBoYXNoTWFwW2tleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gaGFzaE1hcDtcbiAgfSwge30pO1xufSIsImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldExheW91dFJlY3QuanNcIjtcbmltcG9ydCBjb250YWlucyBmcm9tIFwiLi4vZG9tLXV0aWxzL2NvbnRhaW5zLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB3aXRoaW4gZnJvbSBcIi4uL3V0aWxzL3dpdGhpbi5qc1wiO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tIFwiLi4vdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuLi91dGlscy9leHBhbmRUb0hhc2hNYXAuanNcIjtcbmltcG9ydCB7IGxlZnQsIHJpZ2h0LCBiYXNlUGxhY2VtZW50cywgdG9wLCBib3R0b20gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgdG9QYWRkaW5nT2JqZWN0ID0gZnVuY3Rpb24gdG9QYWRkaW5nT2JqZWN0KHBhZGRpbmcsIHN0YXRlKSB7XG4gIHBhZGRpbmcgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ2Z1bmN0aW9uJyA/IHBhZGRpbmcoT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiBwYWRkaW5nO1xuICByZXR1cm4gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbn07XG5cbmZ1bmN0aW9uIGFycm93KF9yZWYpIHtcbiAgdmFyIF9zdGF0ZSRtb2RpZmllcnNEYXRhJDtcblxuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgYXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGlzVmVydGljYWwgPSBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgaWYgKCFhcnJvd0VsZW1lbnQgfHwgIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcGFkZGluZ09iamVjdCA9IHRvUGFkZGluZ09iamVjdChvcHRpb25zLnBhZGRpbmcsIHN0YXRlKTtcbiAgdmFyIGFycm93UmVjdCA9IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KTtcbiAgdmFyIG1pblByb3AgPSBheGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICB2YXIgbWF4UHJvcCA9IGF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICB2YXIgZW5kRGlmZiA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtsZW5dICsgc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdIC0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnBvcHBlcltsZW5dO1xuICB2YXIgc3RhcnREaWZmID0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtheGlzXTtcbiAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGFycm93RWxlbWVudCk7XG4gIHZhciBjbGllbnRTaXplID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBheGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoIHx8IDAgOiAwO1xuICB2YXIgY2VudGVyVG9SZWZlcmVuY2UgPSBlbmREaWZmIC8gMiAtIHN0YXJ0RGlmZiAvIDI7IC8vIE1ha2Ugc3VyZSB0aGUgYXJyb3cgZG9lc24ndCBvdmVyZmxvdyB0aGUgcG9wcGVyIGlmIHRoZSBjZW50ZXIgcG9pbnQgaXNcbiAgLy8gb3V0c2lkZSBvZiB0aGUgcG9wcGVyIGJvdW5kc1xuXG4gIHZhciBtaW4gPSBwYWRkaW5nT2JqZWN0W21pblByb3BdO1xuICB2YXIgbWF4ID0gY2xpZW50U2l6ZSAtIGFycm93UmVjdFtsZW5dIC0gcGFkZGluZ09iamVjdFttYXhQcm9wXTtcbiAgdmFyIGNlbnRlciA9IGNsaWVudFNpemUgLyAyIC0gYXJyb3dSZWN0W2xlbl0gLyAyICsgY2VudGVyVG9SZWZlcmVuY2U7XG4gIHZhciBvZmZzZXQgPSB3aXRoaW4obWluLCBjZW50ZXIsIG1heCk7IC8vIFByZXZlbnRzIGJyZWFraW5nIHN5bnRheCBoaWdobGlnaHRpbmcuLi5cblxuICB2YXIgYXhpc1Byb3AgPSBheGlzO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gKF9zdGF0ZSRtb2RpZmllcnNEYXRhJCA9IHt9LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSRbYXhpc1Byb3BdID0gb2Zmc2V0LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQuY2VudGVyT2Zmc2V0ID0gb2Zmc2V0IC0gY2VudGVyLCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQpO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGVsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQsXG4gICAgICBhcnJvd0VsZW1lbnQgPSBfb3B0aW9ucyRlbGVtZW50ID09PSB2b2lkIDAgPyAnW2RhdGEtcG9wcGVyLWFycm93XScgOiBfb3B0aW9ucyRlbGVtZW50O1xuXG4gIGlmIChhcnJvd0VsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBDU1Mgc2VsZWN0b3JcblxuXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIGVsZW1lbnQgbXVzdCBiZSBhbiBIVE1MRWxlbWVudCAobm90IGFuIFNWR0VsZW1lbnQpLicsICdUbyB1c2UgYW4gU1ZHIGFycm93LCB3cmFwIGl0IGluIGFuIEhUTUxFbGVtZW50IHRoYXQgd2lsbCBiZSB1c2VkIGFzJywgJ3RoZSBhcnJvdy4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29udGFpbnMoc3RhdGUuZWxlbWVudHMucG9wcGVyLCBhcnJvd0VsZW1lbnQpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIG1vZGlmaWVyXFwncyBgZWxlbWVudGAgbXVzdCBiZSBhIGNoaWxkIG9mIHRoZSBwb3BwZXInLCAnZWxlbWVudC4nXS5qb2luKCcgJykpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHN0YXRlLmVsZW1lbnRzLmFycm93ID0gYXJyb3dFbGVtZW50O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnYXJyb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogYXJyb3csXG4gIGVmZmVjdDogZWZmZWN0LFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J11cbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG59IiwiaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCBlbmQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4uL3V0aWxzL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciB1bnNldFNpZGVzID0ge1xuICB0b3A6ICdhdXRvJyxcbiAgcmlnaHQ6ICdhdXRvJyxcbiAgYm90dG9tOiAnYXV0bycsXG4gIGxlZnQ6ICdhdXRvJ1xufTsgLy8gUm91bmQgdGhlIG9mZnNldHMgdG8gdGhlIG5lYXJlc3Qgc3VpdGFibGUgc3VicGl4ZWwgYmFzZWQgb24gdGhlIERQUi5cbi8vIFpvb21pbmcgY2FuIGNoYW5nZSB0aGUgRFBSLCBidXQgaXQgc2VlbXMgdG8gcmVwb3J0IGEgdmFsdWUgdGhhdCB3aWxsXG4vLyBjbGVhbmx5IGRpdmlkZSB0aGUgdmFsdWVzIGludG8gdGhlIGFwcHJvcHJpYXRlIHN1YnBpeGVscy5cblxuZnVuY3Rpb24gcm91bmRPZmZzZXRzQnlEUFIoX3JlZikge1xuICB2YXIgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnk7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG4gIHZhciBkcHIgPSB3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuICByZXR1cm4ge1xuICAgIHg6IHJvdW5kKHJvdW5kKHggKiBkcHIpIC8gZHByKSB8fCAwLFxuICAgIHk6IHJvdW5kKHJvdW5kKHkgKiBkcHIpIC8gZHByKSB8fCAwXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXBUb1N0eWxlcyhfcmVmMikge1xuICB2YXIgX09iamVjdCRhc3NpZ24yO1xuXG4gIHZhciBwb3BwZXIgPSBfcmVmMi5wb3BwZXIsXG4gICAgICBwb3BwZXJSZWN0ID0gX3JlZjIucG9wcGVyUmVjdCxcbiAgICAgIHBsYWNlbWVudCA9IF9yZWYyLnBsYWNlbWVudCxcbiAgICAgIHZhcmlhdGlvbiA9IF9yZWYyLnZhcmlhdGlvbixcbiAgICAgIG9mZnNldHMgPSBfcmVmMi5vZmZzZXRzLFxuICAgICAgcG9zaXRpb24gPSBfcmVmMi5wb3NpdGlvbixcbiAgICAgIGdwdUFjY2VsZXJhdGlvbiA9IF9yZWYyLmdwdUFjY2VsZXJhdGlvbixcbiAgICAgIGFkYXB0aXZlID0gX3JlZjIuYWRhcHRpdmUsXG4gICAgICByb3VuZE9mZnNldHMgPSBfcmVmMi5yb3VuZE9mZnNldHM7XG5cbiAgdmFyIF9yZWYzID0gcm91bmRPZmZzZXRzID09PSB0cnVlID8gcm91bmRPZmZzZXRzQnlEUFIob2Zmc2V0cykgOiB0eXBlb2Ygcm91bmRPZmZzZXRzID09PSAnZnVuY3Rpb24nID8gcm91bmRPZmZzZXRzKG9mZnNldHMpIDogb2Zmc2V0cyxcbiAgICAgIF9yZWYzJHggPSBfcmVmMy54LFxuICAgICAgeCA9IF9yZWYzJHggPT09IHZvaWQgMCA/IDAgOiBfcmVmMyR4LFxuICAgICAgX3JlZjMkeSA9IF9yZWYzLnksXG4gICAgICB5ID0gX3JlZjMkeSA9PT0gdm9pZCAwID8gMCA6IF9yZWYzJHk7XG5cbiAgdmFyIGhhc1ggPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd4Jyk7XG4gIHZhciBoYXNZID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneScpO1xuICB2YXIgc2lkZVggPSBsZWZ0O1xuICB2YXIgc2lkZVkgPSB0b3A7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG5cbiAgaWYgKGFkYXB0aXZlKSB7XG4gICAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChwb3BwZXIpO1xuICAgIHZhciBoZWlnaHRQcm9wID0gJ2NsaWVudEhlaWdodCc7XG4gICAgdmFyIHdpZHRoUHJvcCA9ICdjbGllbnRXaWR0aCc7XG5cbiAgICBpZiAob2Zmc2V0UGFyZW50ID09PSBnZXRXaW5kb3cocG9wcGVyKSkge1xuICAgICAgb2Zmc2V0UGFyZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KHBvcHBlcik7XG5cbiAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gIT09ICdzdGF0aWMnICYmIHBvc2l0aW9uID09PSAnYWJzb2x1dGUnKSB7XG4gICAgICAgIGhlaWdodFByb3AgPSAnc2Nyb2xsSGVpZ2h0JztcbiAgICAgICAgd2lkdGhQcm9wID0gJ3Njcm9sbFdpZHRoJztcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdOiBmb3JjZSB0eXBlIHJlZmluZW1lbnQsIHdlIGNvbXBhcmUgb2Zmc2V0UGFyZW50IHdpdGggd2luZG93IGFib3ZlLCBidXQgRmxvdyBkb2Vzbid0IGRldGVjdCBpdFxuXG5cbiAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQ7XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSB0b3AgfHwgKHBsYWNlbWVudCA9PT0gbGVmdCB8fCBwbGFjZW1lbnQgPT09IHJpZ2h0KSAmJiB2YXJpYXRpb24gPT09IGVuZCkge1xuICAgICAgc2lkZVkgPSBib3R0b207IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuXG4gICAgICB5IC09IG9mZnNldFBhcmVudFtoZWlnaHRQcm9wXSAtIHBvcHBlclJlY3QuaGVpZ2h0O1xuICAgICAgeSAqPSBncHVBY2NlbGVyYXRpb24gPyAxIDogLTE7XG4gICAgfVxuXG4gICAgaWYgKHBsYWNlbWVudCA9PT0gbGVmdCB8fCAocGxhY2VtZW50ID09PSB0b3AgfHwgcGxhY2VtZW50ID09PSBib3R0b20pICYmIHZhcmlhdGlvbiA9PT0gZW5kKSB7XG4gICAgICBzaWRlWCA9IHJpZ2h0OyAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICAgICAgeCAtPSBvZmZzZXRQYXJlbnRbd2lkdGhQcm9wXSAtIHBvcHBlclJlY3Qud2lkdGg7XG4gICAgICB4ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgcG9zaXRpb246IHBvc2l0aW9uXG4gIH0sIGFkYXB0aXZlICYmIHVuc2V0U2lkZXMpO1xuXG4gIGlmIChncHVBY2NlbGVyYXRpb24pIHtcbiAgICB2YXIgX09iamVjdCRhc3NpZ247XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24gPSB7fSwgX09iamVjdCRhc3NpZ25bc2lkZVldID0gaGFzWSA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbltzaWRlWF0gPSBoYXNYID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduLnRyYW5zZm9ybSA9ICh3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKSA8PSAxID8gXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweClcIiA6IFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweCwgMClcIiwgX09iamVjdCRhc3NpZ24pKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIChfT2JqZWN0JGFzc2lnbjIgPSB7fSwgX09iamVjdCRhc3NpZ24yW3NpZGVZXSA9IGhhc1kgPyB5ICsgXCJweFwiIDogJycsIF9PYmplY3QkYXNzaWduMltzaWRlWF0gPSBoYXNYID8geCArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjIudHJhbnNmb3JtID0gJycsIF9PYmplY3QkYXNzaWduMikpO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlU3R5bGVzKF9yZWY0KSB7XG4gIHZhciBzdGF0ZSA9IF9yZWY0LnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWY0Lm9wdGlvbnM7XG4gIHZhciBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPSBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbixcbiAgICAgIGdwdUFjY2VsZXJhdGlvbiA9IF9vcHRpb25zJGdwdUFjY2VsZXJhdCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGdwdUFjY2VsZXJhdCxcbiAgICAgIF9vcHRpb25zJGFkYXB0aXZlID0gb3B0aW9ucy5hZGFwdGl2ZSxcbiAgICAgIGFkYXB0aXZlID0gX29wdGlvbnMkYWRhcHRpdmUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhZGFwdGl2ZSxcbiAgICAgIF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9IG9wdGlvbnMucm91bmRPZmZzZXRzLFxuICAgICAgcm91bmRPZmZzZXRzID0gX29wdGlvbnMkcm91bmRPZmZzZXRzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkcm91bmRPZmZzZXRzO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gZ2V0Q29tcHV0ZWRTdHlsZShzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLnRyYW5zaXRpb25Qcm9wZXJ0eSB8fCAnJztcblxuICAgIGlmIChhZGFwdGl2ZSAmJiBbJ3RyYW5zZm9ybScsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5zb21lKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRyYW5zaXRpb25Qcm9wZXJ0eS5pbmRleE9mKHByb3BlcnR5KSA+PSAwO1xuICAgIH0pKSB7XG4gICAgICBjb25zb2xlLndhcm4oWydQb3BwZXI6IERldGVjdGVkIENTUyB0cmFuc2l0aW9ucyBvbiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZycsICdDU1MgcHJvcGVydGllczogXCJ0cmFuc2Zvcm1cIiwgXCJ0b3BcIiwgXCJyaWdodFwiLCBcImJvdHRvbVwiLCBcImxlZnRcIi4nLCAnXFxuXFxuJywgJ0Rpc2FibGUgdGhlIFwiY29tcHV0ZVN0eWxlc1wiIG1vZGlmaWVyXFwncyBgYWRhcHRpdmVgIG9wdGlvbiB0byBhbGxvdycsICdmb3Igc21vb3RoIHRyYW5zaXRpb25zLCBvciByZW1vdmUgdGhlc2UgcHJvcGVydGllcyBmcm9tIHRoZSBDU1MnLCAndHJhbnNpdGlvbiBkZWNsYXJhdGlvbiBvbiB0aGUgcG9wcGVyIGVsZW1lbnQgaWYgb25seSB0cmFuc2l0aW9uaW5nJywgJ29wYWNpdHkgb3IgYmFja2dyb3VuZC1jb2xvciBmb3IgZXhhbXBsZS4nLCAnXFxuXFxuJywgJ1dlIHJlY29tbWVuZCB1c2luZyB0aGUgcG9wcGVyIGVsZW1lbnQgYXMgYSB3cmFwcGVyIGFyb3VuZCBhbiBpbm5lcicsICdlbGVtZW50IHRoYXQgY2FuIGhhdmUgYW55IENTUyBwcm9wZXJ0eSB0cmFuc2l0aW9uZWQgZm9yIGFuaW1hdGlvbnMuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0ge1xuICAgIHBsYWNlbWVudDogZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHZhcmlhdGlvbjogZ2V0VmFyaWF0aW9uKHN0YXRlLnBsYWNlbWVudCksXG4gICAgcG9wcGVyOiBzdGF0ZS5lbGVtZW50cy5wb3BwZXIsXG4gICAgcG9wcGVyUmVjdDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIGdwdUFjY2VsZXJhdGlvbjogZ3B1QWNjZWxlcmF0aW9uXG4gIH07XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnN0eWxlcy5wb3BwZXIsIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLFxuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBhZGFwdGl2ZTogYWRhcHRpdmUsXG4gICAgICByb3VuZE9mZnNldHM6IHJvdW5kT2Zmc2V0c1xuICAgIH0pKSk7XG4gIH1cblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyAhPSBudWxsKSB7XG4gICAgc3RhdGUuc3R5bGVzLmFycm93ID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLmFycm93LCBtYXBUb1N0eWxlcyhPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIHtcbiAgICAgIG9mZnNldHM6IHN0YXRlLm1vZGlmaWVyc0RhdGEuYXJyb3csXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGFkYXB0aXZlOiBmYWxzZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcGxhY2VtZW50Jzogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnY29tcHV0ZVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnYmVmb3JlV3JpdGUnLFxuICBmbjogY29tcHV0ZVN0eWxlcyxcbiAgZGF0YToge31cbn07IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciBwYXNzaXZlID0ge1xuICBwYXNzaXZlOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgaW5zdGFuY2UgPSBfcmVmLmluc3RhbmNlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJHNjcm9sbCA9IG9wdGlvbnMuc2Nyb2xsLFxuICAgICAgc2Nyb2xsID0gX29wdGlvbnMkc2Nyb2xsID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkc2Nyb2xsLFxuICAgICAgX29wdGlvbnMkcmVzaXplID0gb3B0aW9ucy5yZXNpemUsXG4gICAgICByZXNpemUgPSBfb3B0aW9ucyRyZXNpemUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRyZXNpemU7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coc3RhdGUuZWxlbWVudHMucG9wcGVyKTtcbiAgdmFyIHNjcm9sbFBhcmVudHMgPSBbXS5jb25jYXQoc3RhdGUuc2Nyb2xsUGFyZW50cy5yZWZlcmVuY2UsIHN0YXRlLnNjcm9sbFBhcmVudHMucG9wcGVyKTtcblxuICBpZiAoc2Nyb2xsKSB7XG4gICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JvbGxQYXJlbnQpIHtcbiAgICAgIHNjcm9sbFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJlc2l6ZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgICBzY3JvbGxQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXNpemUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH1cbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBmdW5jdGlvbiBmbigpIHt9LFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgZGF0YToge31cbn07IiwidmFyIGhhc2ggPSB7XG4gIGxlZnQ6ICdyaWdodCcsXG4gIHJpZ2h0OiAnbGVmdCcsXG4gIGJvdHRvbTogJ3RvcCcsXG4gIHRvcDogJ2JvdHRvbSdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59IiwidmFyIGhhc2ggPSB7XG4gIHN0YXJ0OiAnZW5kJyxcbiAgZW5kOiAnc3RhcnQnXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvc3RhcnR8ZW5kL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGwobm9kZSkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KG5vZGUpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IHdpbi5wYWdlWE9mZnNldDtcbiAgdmFyIHNjcm9sbFRvcCA9IHdpbi5wYWdlWU9mZnNldDtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gIH07XG59IiwiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSB7XG4gIC8vIElmIDxodG1sPiBoYXMgYSBDU1Mgd2lkdGggZ3JlYXRlciB0aGFuIHRoZSB2aWV3cG9ydCwgdGhlbiB0aGlzIHdpbGwgYmVcbiAgLy8gaW5jb3JyZWN0IGZvciBSVEwuXG4gIC8vIFBvcHBlciAxIGlzIGJyb2tlbiBpbiB0aGlzIGNhc2UgYW5kIG5ldmVyIGhhZCBhIGJ1ZyByZXBvcnQgc28gbGV0J3MgYXNzdW1lXG4gIC8vIGl0J3Mgbm90IGFuIGlzc3VlLiBJIGRvbid0IHRoaW5rIGFueW9uZSBldmVyIHNwZWNpZmllcyB3aWR0aCBvbiA8aHRtbD5cbiAgLy8gYW55d2F5LlxuICAvLyBCcm93c2VycyB3aGVyZSB0aGUgbGVmdCBzY3JvbGxiYXIgZG9lc24ndCBjYXVzZSBhbiBpc3N1ZSByZXBvcnQgYDBgIGZvclxuICAvLyB0aGlzIChlLmcuIEVkZ2UgMjAxOSwgSUUxMSwgU2FmYXJpKVxuICByZXR1cm4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkubGVmdCArIGdldFdpbmRvd1Njcm9sbChlbGVtZW50KS5zY3JvbGxMZWZ0O1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB2aXN1YWxWaWV3cG9ydCA9IHdpbi52aXN1YWxWaWV3cG9ydDtcbiAgdmFyIHdpZHRoID0gaHRtbC5jbGllbnRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGh0bWwuY2xpZW50SGVpZ2h0O1xuICB2YXIgeCA9IDA7XG4gIHZhciB5ID0gMDsgLy8gTkI6IFRoaXMgaXNuJ3Qgc3VwcG9ydGVkIG9uIGlPUyA8PSAxMi4gSWYgdGhlIGtleWJvYXJkIGlzIG9wZW4sIHRoZSBwb3BwZXJcbiAgLy8gY2FuIGJlIG9ic2N1cmVkIHVuZGVybmVhdGggaXQuXG4gIC8vIEFsc28sIGBodG1sLmNsaWVudEhlaWdodGAgYWRkcyB0aGUgYm90dG9tIGJhciBoZWlnaHQgaW4gU2FmYXJpIGlPUywgZXZlblxuICAvLyBpZiBpdCBpc24ndCBvcGVuLCBzbyBpZiB0aGlzIGlzbid0IGF2YWlsYWJsZSwgdGhlIHBvcHBlciB3aWxsIGJlIGRldGVjdGVkXG4gIC8vIHRvIG92ZXJmbG93IHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbiB0b28gZWFybHkuXG5cbiAgaWYgKHZpc3VhbFZpZXdwb3J0KSB7XG4gICAgd2lkdGggPSB2aXN1YWxWaWV3cG9ydC53aWR0aDtcbiAgICBoZWlnaHQgPSB2aXN1YWxWaWV3cG9ydC5oZWlnaHQ7IC8vIFVzZXMgTGF5b3V0IFZpZXdwb3J0IChsaWtlIENocm9tZTsgU2FmYXJpIGRvZXMgbm90IGN1cnJlbnRseSlcbiAgICAvLyBJbiBDaHJvbWUsIGl0IHJldHVybnMgYSB2YWx1ZSB2ZXJ5IGNsb3NlIHRvIDAgKCsvLSkgYnV0IGNvbnRhaW5zIHJvdW5kaW5nXG4gICAgLy8gZXJyb3JzIGR1ZSB0byBmbG9hdGluZyBwb2ludCBudW1iZXJzLCBzbyB3ZSBuZWVkIHRvIGNoZWNrIHByZWNpc2lvbi5cbiAgICAvLyBTYWZhcmkgcmV0dXJucyBhIG51bWJlciA8PSAwLCB1c3VhbGx5IDwgLTEgd2hlbiBwaW5jaC16b29tZWRcbiAgICAvLyBGZWF0dXJlIGRldGVjdGlvbiBmYWlscyBpbiBtb2JpbGUgZW11bGF0aW9uIG1vZGUgaW4gQ2hyb21lLlxuICAgIC8vIE1hdGguYWJzKHdpbi5pbm5lcldpZHRoIC8gdmlzdWFsVmlld3BvcnQuc2NhbGUgLSB2aXN1YWxWaWV3cG9ydC53aWR0aCkgPFxuICAgIC8vIDAuMDAxXG4gICAgLy8gRmFsbGJhY2sgaGVyZTogXCJOb3QgU2FmYXJpXCIgdXNlckFnZW50XG5cbiAgICBpZiAoIS9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgIHggPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRMZWZ0O1xuICAgICAgeSA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiB4ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSxcbiAgICB5OiB5XG4gIH07XG59IiwiaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbEJhclguanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5pbXBvcnQgeyBtYXggfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiOyAvLyBHZXRzIHRoZSBlbnRpcmUgc2l6ZSBvZiB0aGUgc2Nyb2xsYWJsZSBkb2N1bWVudCBhcmVhLCBldmVuIGV4dGVuZGluZyBvdXRzaWRlXG4vLyBvZiB0aGUgYDxodG1sPmAgYW5kIGA8Ym9keT5gIHJlY3QgYm91bmRzIGlmIGhvcml6b250YWxseSBzY3JvbGxhYmxlXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciBfZWxlbWVudCRvd25lckRvY3VtZW47XG5cbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB3aW5TY3JvbGwgPSBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCk7XG4gIHZhciBib2R5ID0gKF9lbGVtZW50JG93bmVyRG9jdW1lbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5ib2R5O1xuICB2YXIgd2lkdGggPSBtYXgoaHRtbC5zY3JvbGxXaWR0aCwgaHRtbC5jbGllbnRXaWR0aCwgYm9keSA/IGJvZHkuc2Nyb2xsV2lkdGggOiAwLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApO1xuICB2YXIgaGVpZ2h0ID0gbWF4KGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLmNsaWVudEhlaWdodCwgYm9keSA/IGJvZHkuc2Nyb2xsSGVpZ2h0IDogMCwgYm9keSA/IGJvZHkuY2xpZW50SGVpZ2h0IDogMCk7XG4gIHZhciB4ID0gLXdpblNjcm9sbC5zY3JvbGxMZWZ0ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KTtcbiAgdmFyIHkgPSAtd2luU2Nyb2xsLnNjcm9sbFRvcDtcblxuICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShib2R5IHx8IGh0bWwpLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICB4ICs9IG1heChodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApIC0gd2lkdGg7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1Njcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIEZpcmVmb3ggd2FudHMgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcbiAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1k7XG5cbiAgcmV0dXJuIC9hdXRvfHNjcm9sbHxvdmVybGF5fGhpZGRlbi8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCk7XG59IiwiaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQobm9kZSkge1xuICBpZiAoWydodG1sJywgJ2JvZHknLCAnI2RvY3VtZW50J10uaW5kZXhPZihnZXROb2RlTmFtZShub2RlKSkgPj0gMCkge1xuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBpZiAoaXNIVE1MRWxlbWVudChub2RlKSAmJiBpc1Njcm9sbFBhcmVudChub2RlKSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKG5vZGUpKTtcbn0iLCJpbXBvcnQgZ2V0U2Nyb2xsUGFyZW50IGZyb20gXCIuL2dldFNjcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuLypcbmdpdmVuIGEgRE9NIGVsZW1lbnQsIHJldHVybiB0aGUgbGlzdCBvZiBhbGwgc2Nyb2xsIHBhcmVudHMsIHVwIHRoZSBsaXN0IG9mIGFuY2Vzb3JzXG51bnRpbCB3ZSBnZXQgdG8gdGhlIHRvcCB3aW5kb3cgb2JqZWN0LiBUaGlzIGxpc3QgaXMgd2hhdCB3ZSBhdHRhY2ggc2Nyb2xsIGxpc3RlbmVyc1xudG8sIGJlY2F1c2UgaWYgYW55IG9mIHRoZXNlIHBhcmVudCBlbGVtZW50cyBzY3JvbGwsIHdlJ2xsIG5lZWQgdG8gcmUtY2FsY3VsYXRlIHRoZVxucmVmZXJlbmNlIGVsZW1lbnQncyBwb3NpdGlvbi5cbiovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3RTY3JvbGxQYXJlbnRzKGVsZW1lbnQsIGxpc3QpIHtcbiAgdmFyIF9lbGVtZW50JG93bmVyRG9jdW1lbjtcblxuICBpZiAobGlzdCA9PT0gdm9pZCAwKSB7XG4gICAgbGlzdCA9IFtdO1xuICB9XG5cbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChlbGVtZW50KTtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudCA9PT0gKChfZWxlbWVudCRvd25lckRvY3VtZW4gPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZWxlbWVudCRvd25lckRvY3VtZW4uYm9keSk7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coc2Nyb2xsUGFyZW50KTtcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IFt3aW5dLmNvbmNhdCh3aW4udmlzdWFsVmlld3BvcnQgfHwgW10sIGlzU2Nyb2xsUGFyZW50KHNjcm9sbFBhcmVudCkgPyBzY3JvbGxQYXJlbnQgOiBbXSkgOiBzY3JvbGxQYXJlbnQ7XG4gIHZhciB1cGRhdGVkTGlzdCA9IGxpc3QuY29uY2F0KHRhcmdldCk7XG4gIHJldHVybiBpc0JvZHkgPyB1cGRhdGVkTGlzdCA6IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBpc0JvZHkgdGVsbHMgdXMgdGFyZ2V0IHdpbGwgYmUgYW4gSFRNTEVsZW1lbnQgaGVyZVxuICB1cGRhdGVkTGlzdC5jb25jYXQobGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZSh0YXJnZXQpKSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVjdFRvQ2xpZW50UmVjdChyZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZWN0LCB7XG4gICAgbGVmdDogcmVjdC54LFxuICAgIHRvcDogcmVjdC55LFxuICAgIHJpZ2h0OiByZWN0LnggKyByZWN0LndpZHRoLFxuICAgIGJvdHRvbTogcmVjdC55ICsgcmVjdC5oZWlnaHRcbiAgfSk7XG59IiwiaW1wb3J0IHsgdmlld3BvcnQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRWaWV3cG9ydFJlY3QgZnJvbSBcIi4vZ2V0Vmlld3BvcnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRSZWN0IGZyb20gXCIuL2dldERvY3VtZW50UmVjdC5qc1wiO1xuaW1wb3J0IGxpc3RTY3JvbGxQYXJlbnRzIGZyb20gXCIuL2xpc3RTY3JvbGxQYXJlbnRzLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcIi4vY29udGFpbnMuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHJlY3RUb0NsaWVudFJlY3QgZnJvbSBcIi4uL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCB7IG1heCwgbWluIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcblxuZnVuY3Rpb24gZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KTtcbiAgcmVjdC50b3AgPSByZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50VG9wO1xuICByZWN0LmxlZnQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudExlZnQ7XG4gIHJlY3QuYm90dG9tID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC5yaWdodCA9IHJlY3QubGVmdCArIGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJlY3Qud2lkdGggPSBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LmhlaWdodCA9IGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICByZWN0LnggPSByZWN0LmxlZnQ7XG4gIHJlY3QueSA9IHJlY3QudG9wO1xuICByZXR1cm4gcmVjdDtcbn1cblxuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQpIHtcbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50ID09PSB2aWV3cG9ydCA/IHJlY3RUb0NsaWVudFJlY3QoZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQpKSA6IGlzSFRNTEVsZW1lbnQoY2xpcHBpbmdQYXJlbnQpID8gZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QoY2xpcHBpbmdQYXJlbnQpIDogcmVjdFRvQ2xpZW50UmVjdChnZXREb2N1bWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKSk7XG59IC8vIEEgXCJjbGlwcGluZyBwYXJlbnRcIiBpcyBhbiBvdmVyZmxvd2FibGUgY29udGFpbmVyIHdpdGggdGhlIGNoYXJhY3RlcmlzdGljIG9mXG4vLyBjbGlwcGluZyAob3IgaGlkaW5nKSBvdmVyZmxvd2luZyBlbGVtZW50cyB3aXRoIGEgcG9zaXRpb24gZGlmZmVyZW50IGZyb21cbi8vIGBpbml0aWFsYFxuXG5cbmZ1bmN0aW9uIGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSB7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbiAgdmFyIGNhbkVzY2FwZUNsaXBwaW5nID0gWydhYnNvbHV0ZScsICdmaXhlZCddLmluZGV4T2YoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbikgPj0gMDtcbiAgdmFyIGNsaXBwZXJFbGVtZW50ID0gY2FuRXNjYXBlQ2xpcHBpbmcgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSA/IGdldE9mZnNldFBhcmVudChlbGVtZW50KSA6IGVsZW1lbnQ7XG5cbiAgaWYgKCFpc0VsZW1lbnQoY2xpcHBlckVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8xNDE0XG5cblxuICByZXR1cm4gY2xpcHBpbmdQYXJlbnRzLmZpbHRlcihmdW5jdGlvbiAoY2xpcHBpbmdQYXJlbnQpIHtcbiAgICByZXR1cm4gaXNFbGVtZW50KGNsaXBwaW5nUGFyZW50KSAmJiBjb250YWlucyhjbGlwcGluZ1BhcmVudCwgY2xpcHBlckVsZW1lbnQpICYmIGdldE5vZGVOYW1lKGNsaXBwaW5nUGFyZW50KSAhPT0gJ2JvZHknO1xuICB9KTtcbn0gLy8gR2V0cyB0aGUgbWF4aW11bSBhcmVhIHRoYXQgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSBpbiBkdWUgdG8gYW55IG51bWJlciBvZlxuLy8gY2xpcHBpbmcgcGFyZW50c1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENsaXBwaW5nUmVjdChlbGVtZW50LCBib3VuZGFyeSwgcm9vdEJvdW5kYXJ5KSB7XG4gIHZhciBtYWluQ2xpcHBpbmdQYXJlbnRzID0gYm91bmRhcnkgPT09ICdjbGlwcGluZ1BhcmVudHMnID8gZ2V0Q2xpcHBpbmdQYXJlbnRzKGVsZW1lbnQpIDogW10uY29uY2F0KGJvdW5kYXJ5KTtcbiAgdmFyIGNsaXBwaW5nUGFyZW50cyA9IFtdLmNvbmNhdChtYWluQ2xpcHBpbmdQYXJlbnRzLCBbcm9vdEJvdW5kYXJ5XSk7XG4gIHZhciBmaXJzdENsaXBwaW5nUGFyZW50ID0gY2xpcHBpbmdQYXJlbnRzWzBdO1xuICB2YXIgY2xpcHBpbmdSZWN0ID0gY2xpcHBpbmdQYXJlbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjUmVjdCwgY2xpcHBpbmdQYXJlbnQpIHtcbiAgICB2YXIgcmVjdCA9IGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGNsaXBwaW5nUGFyZW50KTtcbiAgICBhY2NSZWN0LnRvcCA9IG1heChyZWN0LnRvcCwgYWNjUmVjdC50b3ApO1xuICAgIGFjY1JlY3QucmlnaHQgPSBtaW4ocmVjdC5yaWdodCwgYWNjUmVjdC5yaWdodCk7XG4gICAgYWNjUmVjdC5ib3R0b20gPSBtaW4ocmVjdC5ib3R0b20sIGFjY1JlY3QuYm90dG9tKTtcbiAgICBhY2NSZWN0LmxlZnQgPSBtYXgocmVjdC5sZWZ0LCBhY2NSZWN0LmxlZnQpO1xuICAgIHJldHVybiBhY2NSZWN0O1xuICB9LCBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBmaXJzdENsaXBwaW5nUGFyZW50KSk7XG4gIGNsaXBwaW5nUmVjdC53aWR0aCA9IGNsaXBwaW5nUmVjdC5yaWdodCAtIGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QuaGVpZ2h0ID0gY2xpcHBpbmdSZWN0LmJvdHRvbSAtIGNsaXBwaW5nUmVjdC50b3A7XG4gIGNsaXBwaW5nUmVjdC54ID0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC55ID0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgcmV0dXJuIGNsaXBwaW5nUmVjdDtcbn0iLCJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgc3RhcnQsIGVuZCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZU9mZnNldHMoX3JlZikge1xuICB2YXIgcmVmZXJlbmNlID0gX3JlZi5yZWZlcmVuY2UsXG4gICAgICBlbGVtZW50ID0gX3JlZi5lbGVtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50ID8gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudCA/IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIGNvbW1vblggPSByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCAvIDIgLSBlbGVtZW50LndpZHRoIC8gMjtcbiAgdmFyIGNvbW1vblkgPSByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHQgLyAyIC0gZWxlbWVudC5oZWlnaHQgLyAyO1xuICB2YXIgb2Zmc2V0cztcblxuICBzd2l0Y2ggKGJhc2VQbGFjZW1lbnQpIHtcbiAgICBjYXNlIHRvcDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55IC0gZWxlbWVudC5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgYm90dG9tOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHJpZ2h0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgbGVmdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54IC0gZWxlbWVudC53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54LFxuICAgICAgICB5OiByZWZlcmVuY2UueVxuICAgICAgfTtcbiAgfVxuXG4gIHZhciBtYWluQXhpcyA9IGJhc2VQbGFjZW1lbnQgPyBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCkgOiBudWxsO1xuXG4gIGlmIChtYWluQXhpcyAhPSBudWxsKSB7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICBzd2l0Y2ggKHZhcmlhdGlvbikge1xuICAgICAgY2FzZSBzdGFydDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBvZmZzZXRzW21haW5BeGlzXSAtIChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgZW5kOlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdICsgKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn0iLCJpbXBvcnQgZ2V0Q2xpcHBpbmdSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSBcIi4vY29tcHV0ZU9mZnNldHMuanNcIjtcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gXCIuL3JlY3RUb0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCB7IGNsaXBwaW5nUGFyZW50cywgcmVmZXJlbmNlLCBwb3BwZXIsIGJvdHRvbSwgdG9wLCByaWdodCwgYmFzZVBsYWNlbWVudHMsIHZpZXdwb3J0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBtZXJnZVBhZGRpbmdPYmplY3QgZnJvbSBcIi4vbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuL2V4cGFuZFRvSGFzaE1hcC5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRldGVjdE92ZXJmbG93KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMkcGxhY2VtZW50ID09PSB2b2lkIDAgPyBzdGF0ZS5wbGFjZW1lbnQgOiBfb3B0aW9ucyRwbGFjZW1lbnQsXG4gICAgICBfb3B0aW9ucyRib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucyRib3VuZGFyeSA9PT0gdm9pZCAwID8gY2xpcHBpbmdQYXJlbnRzIDogX29wdGlvbnMkYm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRyb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucyRyb290Qm91bmRhcnkgPT09IHZvaWQgMCA/IHZpZXdwb3J0IDogX29wdGlvbnMkcm9vdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZWxlbWVudENvbnRlID0gX29wdGlvbnMuZWxlbWVudENvbnRleHQsXG4gICAgICBlbGVtZW50Q29udGV4dCA9IF9vcHRpb25zJGVsZW1lbnRDb250ZSA9PT0gdm9pZCAwID8gcG9wcGVyIDogX29wdGlvbnMkZWxlbWVudENvbnRlLFxuICAgICAgX29wdGlvbnMkYWx0Qm91bmRhcnkgPSBfb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMkYWx0Qm91bmRhcnkgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucyRwYWRkaW5nID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkcGFkZGluZztcbiAgdmFyIHBhZGRpbmdPYmplY3QgPSBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xuICB2YXIgYWx0Q29udGV4dCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyByZWZlcmVuY2UgOiBwb3BwZXI7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW2FsdEJvdW5kYXJ5ID8gYWx0Q29udGV4dCA6IGVsZW1lbnRDb250ZXh0XTtcbiAgdmFyIGNsaXBwaW5nQ2xpZW50UmVjdCA9IGdldENsaXBwaW5nUmVjdChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50IDogZWxlbWVudC5jb250ZXh0RWxlbWVudCB8fCBnZXREb2N1bWVudEVsZW1lbnQoc3RhdGUuZWxlbWVudHMucG9wcGVyKSwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSk7XG4gIHZhciByZWZlcmVuY2VDbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHN0YXRlLmVsZW1lbnRzLnJlZmVyZW5jZSk7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlQ2xpZW50UmVjdCxcbiAgICBlbGVtZW50OiBwb3BwZXJSZWN0LFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pO1xuICB2YXIgcG9wcGVyQ2xpZW50UmVjdCA9IHJlY3RUb0NsaWVudFJlY3QoT2JqZWN0LmFzc2lnbih7fSwgcG9wcGVyUmVjdCwgcG9wcGVyT2Zmc2V0cykpO1xuICB2YXIgZWxlbWVudENsaWVudFJlY3QgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcG9wcGVyQ2xpZW50UmVjdCA6IHJlZmVyZW5jZUNsaWVudFJlY3Q7IC8vIHBvc2l0aXZlID0gb3ZlcmZsb3dpbmcgdGhlIGNsaXBwaW5nIHJlY3RcbiAgLy8gMCBvciBuZWdhdGl2ZSA9IHdpdGhpbiB0aGUgY2xpcHBpbmcgcmVjdFxuXG4gIHZhciBvdmVyZmxvd09mZnNldHMgPSB7XG4gICAgdG9wOiBjbGlwcGluZ0NsaWVudFJlY3QudG9wIC0gZWxlbWVudENsaWVudFJlY3QudG9wICsgcGFkZGluZ09iamVjdC50b3AsXG4gICAgYm90dG9tOiBlbGVtZW50Q2xpZW50UmVjdC5ib3R0b20gLSBjbGlwcGluZ0NsaWVudFJlY3QuYm90dG9tICsgcGFkZGluZ09iamVjdC5ib3R0b20sXG4gICAgbGVmdDogY2xpcHBpbmdDbGllbnRSZWN0LmxlZnQgLSBlbGVtZW50Q2xpZW50UmVjdC5sZWZ0ICsgcGFkZGluZ09iamVjdC5sZWZ0LFxuICAgIHJpZ2h0OiBlbGVtZW50Q2xpZW50UmVjdC5yaWdodCAtIGNsaXBwaW5nQ2xpZW50UmVjdC5yaWdodCArIHBhZGRpbmdPYmplY3QucmlnaHRcbiAgfTtcbiAgdmFyIG9mZnNldERhdGEgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldDsgLy8gT2Zmc2V0cyBjYW4gYmUgYXBwbGllZCBvbmx5IHRvIHRoZSBwb3BwZXIgZWxlbWVudFxuXG4gIGlmIChlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyICYmIG9mZnNldERhdGEpIHtcbiAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0RGF0YVtwbGFjZW1lbnRdO1xuICAgIE9iamVjdC5rZXlzKG92ZXJmbG93T2Zmc2V0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgbXVsdGlwbHkgPSBbcmlnaHQsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAxIDogLTE7XG4gICAgICB2YXIgYXhpcyA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAneScgOiAneCc7XG4gICAgICBvdmVyZmxvd09mZnNldHNba2V5XSArPSBvZmZzZXRbYXhpc10gKiBtdWx0aXBseTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvdmVyZmxvd09mZnNldHM7XG59IiwiaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCB7IHZhcmlhdGlvblBsYWNlbWVudHMsIGJhc2VQbGFjZW1lbnRzLCBwbGFjZW1lbnRzIGFzIGFsbFBsYWNlbWVudHMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9ucyA9IF9vcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgX29wdGlvbnMkYWxsb3dlZEF1dG9QID0gX29wdGlvbnMuYWxsb3dlZEF1dG9QbGFjZW1lbnRzLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gX29wdGlvbnMkYWxsb3dlZEF1dG9QID09PSB2b2lkIDAgPyBhbGxQbGFjZW1lbnRzIDogX29wdGlvbnMkYWxsb3dlZEF1dG9QO1xuICB2YXIgdmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCk7XG4gIHZhciBwbGFjZW1lbnRzID0gdmFyaWF0aW9uID8gZmxpcFZhcmlhdGlvbnMgPyB2YXJpYXRpb25QbGFjZW1lbnRzIDogdmFyaWF0aW9uUGxhY2VtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gdmFyaWF0aW9uO1xuICB9KSA6IGJhc2VQbGFjZW1lbnRzO1xuICB2YXIgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGFsbG93ZWRBdXRvUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCkgPj0gMDtcbiAgfSk7XG5cbiAgaWYgKGFsbG93ZWRQbGFjZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGFsbG93ZWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFRoZSBgYWxsb3dlZEF1dG9QbGFjZW1lbnRzYCBvcHRpb24gZGlkIG5vdCBhbGxvdyBhbnknLCAncGxhY2VtZW50cy4gRW5zdXJlIHRoZSBgcGxhY2VtZW50YCBvcHRpb24gbWF0Y2hlcyB0aGUgdmFyaWF0aW9uJywgJ29mIHRoZSBhbGxvd2VkIHBsYWNlbWVudHMuJywgJ0ZvciBleGFtcGxlLCBcImF1dG9cIiBjYW5ub3QgYmUgdXNlZCB0byBhbGxvdyBcImJvdHRvbS1zdGFydFwiLicsICdVc2UgXCJhdXRvLXN0YXJ0XCIgaW5zdGVhZC4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXTogRmxvdyBzZWVtcyB0byBoYXZlIHByb2JsZW1zIHdpdGggdHdvIGFycmF5IHVuaW9ucy4uLlxuXG5cbiAgdmFyIG92ZXJmbG93cyA9IGFsbG93ZWRQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pW2dldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KV07XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gT2JqZWN0LmtleXMob3ZlcmZsb3dzKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93c1thXSAtIG92ZXJmbG93c1tiXTtcbiAgfSk7XG59IiwiaW1wb3J0IGdldE9wcG9zaXRlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRPcHBvc2l0ZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBjb21wdXRlQXV0b1BsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IGJvdHRvbSwgdG9wLCBzdGFydCwgcmlnaHQsIGxlZnQsIGF1dG8gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4uL3V0aWxzL2dldFZhcmlhdGlvbi5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmZ1bmN0aW9uIGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHBsYWNlbWVudCkge1xuICBpZiAoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIG9wcG9zaXRlUGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgcmV0dXJuIFtnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpLCBvcHBvc2l0ZVBsYWNlbWVudCwgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQob3Bwb3NpdGVQbGFjZW1lbnQpXTtcbn1cblxuZnVuY3Rpb24gZmxpcChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyA9IG9wdGlvbnMuZmFsbGJhY2tQbGFjZW1lbnRzLFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZmxpcFZhcmlhdGlvID0gb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMkZmxpcFZhcmlhdGlvID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkZmxpcFZhcmlhdGlvLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHM7XG4gIHZhciBwcmVmZXJyZWRQbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCk7XG4gIHZhciBpc0Jhc2VQbGFjZW1lbnQgPSBiYXNlUGxhY2VtZW50ID09PSBwcmVmZXJyZWRQbGFjZW1lbnQ7XG4gIHZhciBmYWxsYmFja1BsYWNlbWVudHMgPSBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgfHwgKGlzQmFzZVBsYWNlbWVudCB8fCAhZmxpcFZhcmlhdGlvbnMgPyBbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KV0gOiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwcmVmZXJyZWRQbGFjZW1lbnQpKTtcbiAgdmFyIHBsYWNlbWVudHMgPSBbcHJlZmVycmVkUGxhY2VtZW50XS5jb25jYXQoZmFsbGJhY2tQbGFjZW1lbnRzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvID8gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnM6IGZsaXBWYXJpYXRpb25zLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzOiBhbGxvd2VkQXV0b1BsYWNlbWVudHNcbiAgICB9KSA6IHBsYWNlbWVudCk7XG4gIH0sIFtdKTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgY2hlY2tzTWFwID0gbmV3IE1hcCgpO1xuICB2YXIgbWFrZUZhbGxiYWNrQ2hlY2tzID0gdHJ1ZTtcbiAgdmFyIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHNbMF07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFjZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBsYWNlbWVudCA9IHBsYWNlbWVudHNbaV07XG5cbiAgICB2YXIgX2Jhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgaXNTdGFydFZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSBzdGFydDtcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihfYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9KTtcbiAgICB2YXIgbWFpblZhcmlhdGlvblNpZGUgPSBpc1ZlcnRpY2FsID8gaXNTdGFydFZhcmlhdGlvbiA/IHJpZ2h0IDogbGVmdCA6IGlzU3RhcnRWYXJpYXRpb24gPyBib3R0b20gOiB0b3A7XG5cbiAgICBpZiAocmVmZXJlbmNlUmVjdFtsZW5dID4gcG9wcGVyUmVjdFtsZW5dKSB7XG4gICAgICBtYWluVmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB9XG5cbiAgICB2YXIgYWx0VmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB2YXIgY2hlY2tzID0gW107XG5cbiAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbX2Jhc2VQbGFjZW1lbnRdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W21haW5WYXJpYXRpb25TaWRlXSA8PSAwLCBvdmVyZmxvd1thbHRWYXJpYXRpb25TaWRlXSA8PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tzLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgcmV0dXJuIGNoZWNrO1xuICAgIH0pKSB7XG4gICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gICAgICBtYWtlRmFsbGJhY2tDaGVja3MgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNoZWNrc01hcC5zZXQocGxhY2VtZW50LCBjaGVja3MpO1xuICB9XG5cbiAgaWYgKG1ha2VGYWxsYmFja0NoZWNrcykge1xuICAgIC8vIGAyYCBtYXkgYmUgZGVzaXJlZCBpbiBzb21lIGNhc2VzIOKAkyByZXNlYXJjaCBsYXRlclxuICAgIHZhciBudW1iZXJPZkNoZWNrcyA9IGZsaXBWYXJpYXRpb25zID8gMyA6IDE7XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChfaSkge1xuICAgICAgdmFyIGZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRzLmZpbmQoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgICAgICB2YXIgY2hlY2tzID0gY2hlY2tzTWFwLmdldChwbGFjZW1lbnQpO1xuXG4gICAgICAgIGlmIChjaGVja3MpIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2tzLnNsaWNlKDAsIF9pKS5ldmVyeShmdW5jdGlvbiAoY2hlY2spIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVjaztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChmaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IGZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgICAgIHJldHVybiBcImJyZWFrXCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvciAodmFyIF9pID0gbnVtYmVyT2ZDaGVja3M7IF9pID4gMDsgX2ktLSkge1xuICAgICAgdmFyIF9yZXQgPSBfbG9vcChfaSk7XG5cbiAgICAgIGlmIChfcmV0ID09PSBcImJyZWFrXCIpIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS5wbGFjZW1lbnQgIT09IGZpcnN0Rml0dGluZ1BsYWNlbWVudCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXAgPSB0cnVlO1xuICAgIHN0YXRlLnBsYWNlbWVudCA9IGZpcnN0Rml0dGluZ1BsYWNlbWVudDtcbiAgICBzdGF0ZS5yZXNldCA9IHRydWU7XG4gIH1cbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2ZsaXAnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogZmxpcCxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXSxcbiAgZGF0YToge1xuICAgIF9za2lwOiBmYWxzZVxuICB9XG59OyIsImltcG9ydCB7IHRvcCwgYm90dG9tLCBsZWZ0LCByaWdodCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuXG5mdW5jdGlvbiBnZXRTaWRlT2Zmc2V0cyhvdmVyZmxvdywgcmVjdCwgcHJldmVudGVkT2Zmc2V0cykge1xuICBpZiAocHJldmVudGVkT2Zmc2V0cyA9PT0gdm9pZCAwKSB7XG4gICAgcHJldmVudGVkT2Zmc2V0cyA9IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiBvdmVyZmxvdy50b3AgLSByZWN0LmhlaWdodCAtIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICByaWdodDogb3ZlcmZsb3cucmlnaHQgLSByZWN0LndpZHRoICsgcHJldmVudGVkT2Zmc2V0cy54LFxuICAgIGJvdHRvbTogb3ZlcmZsb3cuYm90dG9tIC0gcmVjdC5oZWlnaHQgKyBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgbGVmdDogb3ZlcmZsb3cubGVmdCAtIHJlY3Qud2lkdGggLSBwcmV2ZW50ZWRPZmZzZXRzLnhcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKG92ZXJmbG93KSB7XG4gIHJldHVybiBbdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XS5zb21lKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93W3NpZGVdID49IDA7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoaWRlKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHByZXZlbnRlZE9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnByZXZlbnRPdmVyZmxvdztcbiAgdmFyIHJlZmVyZW5jZU92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBlbGVtZW50Q29udGV4dDogJ3JlZmVyZW5jZSdcbiAgfSk7XG4gIHZhciBwb3BwZXJBbHRPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYWx0Qm91bmRhcnk6IHRydWVcbiAgfSk7XG4gIHZhciByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhyZWZlcmVuY2VPdmVyZmxvdywgcmVmZXJlbmNlUmVjdCk7XG4gIHZhciBwb3BwZXJFc2NhcGVPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocG9wcGVyQWx0T3ZlcmZsb3csIHBvcHBlclJlY3QsIHByZXZlbnRlZE9mZnNldHMpO1xuICB2YXIgaXNSZWZlcmVuY2VIaWRkZW4gPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzKTtcbiAgdmFyIGhhc1BvcHBlckVzY2FwZWQgPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocG9wcGVyRXNjYXBlT2Zmc2V0cyk7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSB7XG4gICAgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzOiByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMsXG4gICAgcG9wcGVyRXNjYXBlT2Zmc2V0czogcG9wcGVyRXNjYXBlT2Zmc2V0cyxcbiAgICBpc1JlZmVyZW5jZUhpZGRlbjogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgaGFzUG9wcGVyRXNjYXBlZDogaGFzUG9wcGVyRXNjYXBlZFxuICB9O1xuICBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyLCB7XG4gICAgJ2RhdGEtcG9wcGVyLXJlZmVyZW5jZS1oaWRkZW4nOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICAnZGF0YS1wb3BwZXItZXNjYXBlZCc6IGhhc1BvcHBlckVzY2FwZWRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdoaWRlJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXSxcbiAgZm46IGhpZGVcbn07IiwiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIHBsYWNlbWVudHMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHJlY3RzLCBvZmZzZXQpIHtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHZhciBpbnZlcnREaXN0YW5jZSA9IFtsZWZ0LCB0b3BdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IC0xIDogMTtcblxuICB2YXIgX3JlZiA9IHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicgPyBvZmZzZXQoT2JqZWN0LmFzc2lnbih7fSwgcmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KSkgOiBvZmZzZXQsXG4gICAgICBza2lkZGluZyA9IF9yZWZbMF0sXG4gICAgICBkaXN0YW5jZSA9IF9yZWZbMV07XG5cbiAgc2tpZGRpbmcgPSBza2lkZGluZyB8fCAwO1xuICBkaXN0YW5jZSA9IChkaXN0YW5jZSB8fCAwKSAqIGludmVydERpc3RhbmNlO1xuICByZXR1cm4gW2xlZnQsIHJpZ2h0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyB7XG4gICAgeDogZGlzdGFuY2UsXG4gICAgeTogc2tpZGRpbmdcbiAgfSA6IHtcbiAgICB4OiBza2lkZGluZyxcbiAgICB5OiBkaXN0YW5jZVxuICB9O1xufVxuXG5mdW5jdGlvbiBvZmZzZXQoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuICB2YXIgX29wdGlvbnMkb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXQsXG4gICAgICBvZmZzZXQgPSBfb3B0aW9ucyRvZmZzZXQgPT09IHZvaWQgMCA/IFswLCAwXSA6IF9vcHRpb25zJG9mZnNldDtcbiAgdmFyIGRhdGEgPSBwbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgc3RhdGUucmVjdHMsIG9mZnNldCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICB2YXIgX2RhdGEkc3RhdGUkcGxhY2VtZW50ID0gZGF0YVtzdGF0ZS5wbGFjZW1lbnRdLFxuICAgICAgeCA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC54LFxuICAgICAgeSA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC55O1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy54ICs9IHg7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnkgKz0geTtcbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnb2Zmc2V0JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICBmbjogb2Zmc2V0XG59OyIsImltcG9ydCBjb21wdXRlT2Zmc2V0cyBmcm9tIFwiLi4vdXRpbHMvY29tcHV0ZU9mZnNldHMuanNcIjtcblxuZnVuY3Rpb24gcG9wcGVyT2Zmc2V0cyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICAvLyBPZmZzZXRzIGFyZSB0aGUgYWN0dWFsIHBvc2l0aW9uIHRoZSBwb3BwZXIgbmVlZHMgdG8gaGF2ZSB0byBiZVxuICAvLyBwcm9wZXJseSBwb3NpdGlvbmVkIG5lYXIgaXRzIHJlZmVyZW5jZSBlbGVtZW50XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgYmFzaWMgcGxhY2VtZW50LCBhbmQgd2lsbCBiZSBhZGp1c3RlZCBieVxuICAvLyB0aGUgbW9kaWZpZXJzIGluIHRoZSBuZXh0IHN0ZXBcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHN0YXRlLnJlY3RzLnJlZmVyZW5jZSxcbiAgICBlbGVtZW50OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdwb3BwZXJPZmZzZXRzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdyZWFkJyxcbiAgZm46IHBvcHBlck9mZnNldHMsXG4gIGRhdGE6IHt9XG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFsdEF4aXMoYXhpcykge1xuICByZXR1cm4gYXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xufSIsImltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgc3RhcnQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRBbHRBeGlzIGZyb20gXCIuLi91dGlscy9nZXRBbHRBeGlzLmpzXCI7XG5pbXBvcnQgd2l0aGluIGZyb20gXCIuLi91dGlscy93aXRoaW4uanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gXCIuLi91dGlscy9nZXRGcmVzaFNpZGVPYmplY3QuanNcIjtcbmltcG9ydCB7IG1heCBhcyBtYXRoTWF4LCBtaW4gYXMgbWF0aE1pbiB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIF9vcHRpb25zJHRldGhlciA9IG9wdGlvbnMudGV0aGVyLFxuICAgICAgdGV0aGVyID0gX29wdGlvbnMkdGV0aGVyID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkdGV0aGVyLFxuICAgICAgX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID0gb3B0aW9ucy50ZXRoZXJPZmZzZXQsXG4gICAgICB0ZXRoZXJPZmZzZXQgPSBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQ7XG4gIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5XG4gIH0pO1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gIXZhcmlhdGlvbjtcbiAgdmFyIG1haW5BeGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgYWx0QXhpcyA9IGdldEFsdEF4aXMobWFpbkF4aXMpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgdGV0aGVyT2Zmc2V0VmFsdWUgPSB0eXBlb2YgdGV0aGVyT2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gdGV0aGVyT2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSkpIDogdGV0aGVyT2Zmc2V0O1xuICB2YXIgZGF0YSA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoY2hlY2tNYWluQXhpcyB8fCBjaGVja0FsdEF4aXMpIHtcbiAgICB2YXIgbWFpblNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gdG9wIDogbGVmdDtcbiAgICB2YXIgYWx0U2lkZSA9IG1haW5BeGlzID09PSAneScgPyBib3R0b20gOiByaWdodDtcbiAgICB2YXIgbGVuID0gbWFpbkF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICB2YXIgb2Zmc2V0ID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc107XG4gICAgdmFyIG1pbiA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdICsgb3ZlcmZsb3dbbWFpblNpZGVdO1xuICAgIHZhciBtYXggPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXSAtIG92ZXJmbG93W2FsdFNpZGVdO1xuICAgIHZhciBhZGRpdGl2ZSA9IHRldGhlciA/IC1wb3BwZXJSZWN0W2xlbl0gLyAyIDogMDtcbiAgICB2YXIgbWluTGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IHJlZmVyZW5jZVJlY3RbbGVuXSA6IHBvcHBlclJlY3RbbGVuXTtcbiAgICB2YXIgbWF4TGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IC1wb3BwZXJSZWN0W2xlbl0gOiAtcmVmZXJlbmNlUmVjdFtsZW5dOyAvLyBXZSBuZWVkIHRvIGluY2x1ZGUgdGhlIGFycm93IGluIHRoZSBjYWxjdWxhdGlvbiBzbyB0aGUgYXJyb3cgZG9lc24ndCBnb1xuICAgIC8vIG91dHNpZGUgdGhlIHJlZmVyZW5jZSBib3VuZHNcblxuICAgIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgICB2YXIgYXJyb3dSZWN0ID0gdGV0aGVyICYmIGFycm93RWxlbWVudCA/IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KSA6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwXG4gICAgfTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nT2JqZWN0ID0gc3RhdGUubW9kaWZpZXJzRGF0YVsnYXJyb3cjcGVyc2lzdGVudCddID8gc3RhdGUubW9kaWZpZXJzRGF0YVsnYXJyb3cjcGVyc2lzdGVudCddLnBhZGRpbmcgOiBnZXRGcmVzaFNpZGVPYmplY3QoKTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nTWluID0gYXJyb3dQYWRkaW5nT2JqZWN0W21haW5TaWRlXTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nTWF4ID0gYXJyb3dQYWRkaW5nT2JqZWN0W2FsdFNpZGVdOyAvLyBJZiB0aGUgcmVmZXJlbmNlIGxlbmd0aCBpcyBzbWFsbGVyIHRoYW4gdGhlIGFycm93IGxlbmd0aCwgd2UgZG9uJ3Qgd2FudFxuICAgIC8vIHRvIGluY2x1ZGUgaXRzIGZ1bGwgc2l6ZSBpbiB0aGUgY2FsY3VsYXRpb24uIElmIHRoZSByZWZlcmVuY2UgaXMgc21hbGxcbiAgICAvLyBhbmQgbmVhciB0aGUgZWRnZSBvZiBhIGJvdW5kYXJ5LCB0aGUgcG9wcGVyIGNhbiBvdmVyZmxvdyBldmVuIGlmIHRoZVxuICAgIC8vIHJlZmVyZW5jZSBpcyBub3Qgb3ZlcmZsb3dpbmcgYXMgd2VsbCAoZS5nLiB2aXJ0dWFsIGVsZW1lbnRzIHdpdGggbm9cbiAgICAvLyB3aWR0aCBvciBoZWlnaHQpXG5cbiAgICB2YXIgYXJyb3dMZW4gPSB3aXRoaW4oMCwgcmVmZXJlbmNlUmVjdFtsZW5dLCBhcnJvd1JlY3RbbGVuXSk7XG4gICAgdmFyIG1pbk9mZnNldCA9IGlzQmFzZVBsYWNlbWVudCA/IHJlZmVyZW5jZVJlY3RbbGVuXSAvIDIgLSBhZGRpdGl2ZSAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gdGV0aGVyT2Zmc2V0VmFsdWUgOiBtaW5MZW4gLSBhcnJvd0xlbiAtIGFycm93UGFkZGluZ01pbiAtIHRldGhlck9mZnNldFZhbHVlO1xuICAgIHZhciBtYXhPZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyAtcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiArIGFkZGl0aXZlICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyB0ZXRoZXJPZmZzZXRWYWx1ZSA6IG1heExlbiArIGFycm93TGVuICsgYXJyb3dQYWRkaW5nTWF4ICsgdGV0aGVyT2Zmc2V0VmFsdWU7XG4gICAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3cgJiYgZ2V0T2Zmc2V0UGFyZW50KHN0YXRlLmVsZW1lbnRzLmFycm93KTtcbiAgICB2YXIgY2xpZW50T2Zmc2V0ID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBtYWluQXhpcyA9PT0gJ3knID8gYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50VG9wIHx8IDAgOiBhcnJvd09mZnNldFBhcmVudC5jbGllbnRMZWZ0IHx8IDAgOiAwO1xuICAgIHZhciBvZmZzZXRNb2RpZmllclZhbHVlID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXQgPyBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldFtzdGF0ZS5wbGFjZW1lbnRdW21haW5BeGlzXSA6IDA7XG4gICAgdmFyIHRldGhlck1pbiA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdICsgbWluT2Zmc2V0IC0gb2Zmc2V0TW9kaWZpZXJWYWx1ZSAtIGNsaWVudE9mZnNldDtcbiAgICB2YXIgdGV0aGVyTWF4ID0gcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gKyBtYXhPZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlO1xuXG4gICAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICAgIHZhciBwcmV2ZW50ZWRPZmZzZXQgPSB3aXRoaW4odGV0aGVyID8gbWF0aE1pbihtaW4sIHRldGhlck1pbikgOiBtaW4sIG9mZnNldCwgdGV0aGVyID8gbWF0aE1heChtYXgsIHRldGhlck1heCkgOiBtYXgpO1xuICAgICAgcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQ7XG4gICAgICBkYXRhW21haW5BeGlzXSA9IHByZXZlbnRlZE9mZnNldCAtIG9mZnNldDtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tBbHRBeGlzKSB7XG4gICAgICB2YXIgX21haW5TaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IHRvcCA6IGxlZnQ7XG5cbiAgICAgIHZhciBfYWx0U2lkZSA9IG1haW5BeGlzID09PSAneCcgPyBib3R0b20gOiByaWdodDtcblxuICAgICAgdmFyIF9vZmZzZXQgPSBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdO1xuXG4gICAgICB2YXIgX21pbiA9IF9vZmZzZXQgKyBvdmVyZmxvd1tfbWFpblNpZGVdO1xuXG4gICAgICB2YXIgX21heCA9IF9vZmZzZXQgLSBvdmVyZmxvd1tfYWx0U2lkZV07XG5cbiAgICAgIHZhciBfcHJldmVudGVkT2Zmc2V0ID0gd2l0aGluKHRldGhlciA/IG1hdGhNaW4oX21pbiwgdGV0aGVyTWluKSA6IF9taW4sIF9vZmZzZXQsIHRldGhlciA/IG1hdGhNYXgoX21heCwgdGV0aGVyTWF4KSA6IF9tYXgpO1xuXG4gICAgICBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldDtcbiAgICAgIGRhdGFbYWx0QXhpc10gPSBfcHJldmVudGVkT2Zmc2V0IC0gX29mZnNldDtcbiAgICB9XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3ByZXZlbnRPdmVyZmxvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J11cbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRTY3JvbGwoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wXG4gIH07XG59IiwiaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEhUTUxFbGVtZW50U2Nyb2xsIGZyb20gXCIuL2dldEhUTUxFbGVtZW50U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlU2Nyb2xsKG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IGdldFdpbmRvdyhub2RlKSB8fCAhaXNIVE1MRWxlbWVudChub2RlKSkge1xuICAgIHJldHVybiBnZXRXaW5kb3dTY3JvbGwobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldEhUTUxFbGVtZW50U2Nyb2xsKG5vZGUpO1xuICB9XG59IiwiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXROb2RlU2Nyb2xsIGZyb20gXCIuL2dldE5vZGVTY3JvbGwuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbEJhclguanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcblxuZnVuY3Rpb24gaXNFbGVtZW50U2NhbGVkKGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgc2NhbGVYID0gcmVjdC53aWR0aCAvIGVsZW1lbnQub2Zmc2V0V2lkdGggfHwgMTtcbiAgdmFyIHNjYWxlWSA9IHJlY3QuaGVpZ2h0IC8gZWxlbWVudC5vZmZzZXRIZWlnaHQgfHwgMTtcbiAgcmV0dXJuIHNjYWxlWCAhPT0gMSB8fCBzY2FsZVkgIT09IDE7XG59IC8vIFJldHVybnMgdGhlIGNvbXBvc2l0ZSByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC5cbi8vIENvbXBvc2l0ZSBtZWFucyBpdCB0YWtlcyBpbnRvIGFjY291bnQgdHJhbnNmb3JtcyBhcyB3ZWxsIGFzIGxheW91dC5cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb21wb3NpdGVSZWN0KGVsZW1lbnRPclZpcnR1YWxFbGVtZW50LCBvZmZzZXRQYXJlbnQsIGlzRml4ZWQpIHtcbiAgaWYgKGlzRml4ZWQgPT09IHZvaWQgMCkge1xuICAgIGlzRml4ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHZhciBpc09mZnNldFBhcmVudEFuRWxlbWVudCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIG9mZnNldFBhcmVudElzU2NhbGVkID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpICYmIGlzRWxlbWVudFNjYWxlZChvZmZzZXRQYXJlbnQpO1xuICB2YXIgZG9jdW1lbnRFbGVtZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnRPclZpcnR1YWxFbGVtZW50LCBvZmZzZXRQYXJlbnRJc1NjYWxlZCk7XG4gIHZhciBzY3JvbGwgPSB7XG4gICAgc2Nyb2xsTGVmdDogMCxcbiAgICBzY3JvbGxUb3A6IDBcbiAgfTtcbiAgdmFyIG9mZnNldHMgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgaWYgKGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50IHx8ICFpc09mZnNldFBhcmVudEFuRWxlbWVudCAmJiAhaXNGaXhlZCkge1xuICAgIGlmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpICE9PSAnYm9keScgfHwgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy8xMDc4XG4gICAgaXNTY3JvbGxQYXJlbnQoZG9jdW1lbnRFbGVtZW50KSkge1xuICAgICAgc2Nyb2xsID0gZ2V0Tm9kZVNjcm9sbChvZmZzZXRQYXJlbnQpO1xuICAgIH1cblxuICAgIGlmIChpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCkpIHtcbiAgICAgIG9mZnNldHMgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50LCB0cnVlKTtcbiAgICAgIG9mZnNldHMueCArPSBvZmZzZXRQYXJlbnQuY2xpZW50TGVmdDtcbiAgICAgIG9mZnNldHMueSArPSBvZmZzZXRQYXJlbnQuY2xpZW50VG9wO1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICBvZmZzZXRzLnggPSBnZXRXaW5kb3dTY3JvbGxCYXJYKGRvY3VtZW50RWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB4OiByZWN0LmxlZnQgKyBzY3JvbGwuc2Nyb2xsTGVmdCAtIG9mZnNldHMueCxcbiAgICB5OiByZWN0LnRvcCArIHNjcm9sbC5zY3JvbGxUb3AgLSBvZmZzZXRzLnksXG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodFxuICB9O1xufSIsImltcG9ydCB7IG1vZGlmaWVyUGhhc2VzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7IC8vIHNvdXJjZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDk4NzUyNTVcblxuZnVuY3Rpb24gb3JkZXIobW9kaWZpZXJzKSB7XG4gIHZhciBtYXAgPSBuZXcgTWFwKCk7XG4gIHZhciB2aXNpdGVkID0gbmV3IFNldCgpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIG1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIG1hcC5zZXQobW9kaWZpZXIubmFtZSwgbW9kaWZpZXIpO1xuICB9KTsgLy8gT24gdmlzaXRpbmcgb2JqZWN0LCBjaGVjayBmb3IgaXRzIGRlcGVuZGVuY2llcyBhbmQgdmlzaXQgdGhlbSByZWN1cnNpdmVseVxuXG4gIGZ1bmN0aW9uIHNvcnQobW9kaWZpZXIpIHtcbiAgICB2aXNpdGVkLmFkZChtb2RpZmllci5uYW1lKTtcbiAgICB2YXIgcmVxdWlyZXMgPSBbXS5jb25jYXQobW9kaWZpZXIucmVxdWlyZXMgfHwgW10sIG1vZGlmaWVyLnJlcXVpcmVzSWZFeGlzdHMgfHwgW10pO1xuICAgIHJlcXVpcmVzLmZvckVhY2goZnVuY3Rpb24gKGRlcCkge1xuICAgICAgaWYgKCF2aXNpdGVkLmhhcyhkZXApKSB7XG4gICAgICAgIHZhciBkZXBNb2RpZmllciA9IG1hcC5nZXQoZGVwKTtcblxuICAgICAgICBpZiAoZGVwTW9kaWZpZXIpIHtcbiAgICAgICAgICBzb3J0KGRlcE1vZGlmaWVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJlc3VsdC5wdXNoKG1vZGlmaWVyKTtcbiAgfVxuXG4gIG1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIGlmICghdmlzaXRlZC5oYXMobW9kaWZpZXIubmFtZSkpIHtcbiAgICAgIC8vIGNoZWNrIGZvciB2aXNpdGVkIG9iamVjdFxuICAgICAgc29ydChtb2RpZmllcik7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkZXJNb2RpZmllcnMobW9kaWZpZXJzKSB7XG4gIC8vIG9yZGVyIGJhc2VkIG9uIGRlcGVuZGVuY2llc1xuICB2YXIgb3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyKG1vZGlmaWVycyk7IC8vIG9yZGVyIGJhc2VkIG9uIHBoYXNlXG5cbiAgcmV0dXJuIG1vZGlmaWVyUGhhc2VzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwaGFzZSkge1xuICAgIHJldHVybiBhY2MuY29uY2F0KG9yZGVyZWRNb2RpZmllcnMuZmlsdGVyKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgICAgcmV0dXJuIG1vZGlmaWVyLnBoYXNlID09PSBwaGFzZTtcbiAgICB9KSk7XG4gIH0sIFtdKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmbikge1xuICB2YXIgcGVuZGluZztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlbmRpbmc7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KHN0cikge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gW10uY29uY2F0KGFyZ3MpLnJlZHVjZShmdW5jdGlvbiAocCwgYykge1xuICAgIHJldHVybiBwLnJlcGxhY2UoLyVzLywgYyk7XG4gIH0sIHN0cik7XG59IiwiaW1wb3J0IGZvcm1hdCBmcm9tIFwiLi9mb3JtYXQuanNcIjtcbmltcG9ydCB7IG1vZGlmaWVyUGhhc2VzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG52YXIgSU5WQUxJRF9NT0RJRklFUl9FUlJPUiA9ICdQb3BwZXI6IG1vZGlmaWVyIFwiJXNcIiBwcm92aWRlZCBhbiBpbnZhbGlkICVzIHByb3BlcnR5LCBleHBlY3RlZCAlcyBidXQgZ290ICVzJztcbnZhciBNSVNTSU5HX0RFUEVOREVOQ1lfRVJST1IgPSAnUG9wcGVyOiBtb2RpZmllciBcIiVzXCIgcmVxdWlyZXMgXCIlc1wiLCBidXQgXCIlc1wiIG1vZGlmaWVyIGlzIG5vdCBhdmFpbGFibGUnO1xudmFyIFZBTElEX1BST1BFUlRJRVMgPSBbJ25hbWUnLCAnZW5hYmxlZCcsICdwaGFzZScsICdmbicsICdlZmZlY3QnLCAncmVxdWlyZXMnLCAnb3B0aW9ucyddO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmFsaWRhdGVNb2RpZmllcnMobW9kaWZpZXJzKSB7XG4gIG1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIFtdLmNvbmNhdChPYmplY3Qua2V5cyhtb2RpZmllciksIFZBTElEX1BST1BFUlRJRVMpIC8vIElFMTEtY29tcGF0aWJsZSByZXBsYWNlbWVudCBmb3IgYG5ldyBTZXQoaXRlcmFibGUpYFxuICAgIC5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgc2VsZikge1xuICAgICAgcmV0dXJuIHNlbGYuaW5kZXhPZih2YWx1ZSkgPT09IGluZGV4O1xuICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2RpZmllci5uYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgU3RyaW5nKG1vZGlmaWVyLm5hbWUpLCAnXCJuYW1lXCInLCAnXCJzdHJpbmdcIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLm5hbWUpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdlbmFibGVkJzpcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZGlmaWVyLmVuYWJsZWQgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgbW9kaWZpZXIubmFtZSwgJ1wiZW5hYmxlZFwiJywgJ1wiYm9vbGVhblwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIuZW5hYmxlZCkgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3BoYXNlJzpcbiAgICAgICAgICBpZiAobW9kaWZpZXJQaGFzZXMuaW5kZXhPZihtb2RpZmllci5waGFzZSkgPCAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJwaGFzZVwiJywgXCJlaXRoZXIgXCIgKyBtb2RpZmllclBoYXNlcy5qb2luKCcsICcpLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5waGFzZSkgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2ZuJzpcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZGlmaWVyLmZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJmblwiJywgJ1wiZnVuY3Rpb25cIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLmZuKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZWZmZWN0JzpcbiAgICAgICAgICBpZiAobW9kaWZpZXIuZWZmZWN0ICE9IG51bGwgJiYgdHlwZW9mIG1vZGlmaWVyLmVmZmVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgbW9kaWZpZXIubmFtZSwgJ1wiZWZmZWN0XCInLCAnXCJmdW5jdGlvblwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIuZm4pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyZXF1aXJlcyc6XG4gICAgICAgICAgaWYgKG1vZGlmaWVyLnJlcXVpcmVzICE9IG51bGwgJiYgIUFycmF5LmlzQXJyYXkobW9kaWZpZXIucmVxdWlyZXMpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJyZXF1aXJlc1wiJywgJ1wiYXJyYXlcIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLnJlcXVpcmVzKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncmVxdWlyZXNJZkV4aXN0cyc6XG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1vZGlmaWVyLnJlcXVpcmVzSWZFeGlzdHMpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJyZXF1aXJlc0lmRXhpc3RzXCInLCAnXCJhcnJheVwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cykgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ29wdGlvbnMnOlxuICAgICAgICBjYXNlICdkYXRhJzpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJQb3BwZXJKUzogYW4gaW52YWxpZCBwcm9wZXJ0eSBoYXMgYmVlbiBwcm92aWRlZCB0byB0aGUgXFxcIlwiICsgbW9kaWZpZXIubmFtZSArIFwiXFxcIiBtb2RpZmllciwgdmFsaWQgcHJvcGVydGllcyBhcmUgXCIgKyBWQUxJRF9QUk9QRVJUSUVTLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIFwiXFxcIlwiICsgcyArIFwiXFxcIlwiO1xuICAgICAgICAgIH0pLmpvaW4oJywgJykgKyBcIjsgYnV0IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgcHJvdmlkZWQuXCIpO1xuICAgICAgfVxuXG4gICAgICBtb2RpZmllci5yZXF1aXJlcyAmJiBtb2RpZmllci5yZXF1aXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1aXJlbWVudCkge1xuICAgICAgICBpZiAobW9kaWZpZXJzLmZpbmQoZnVuY3Rpb24gKG1vZCkge1xuICAgICAgICAgIHJldHVybiBtb2QubmFtZSA9PT0gcmVxdWlyZW1lbnQ7XG4gICAgICAgIH0pID09IG51bGwpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChNSVNTSU5HX0RFUEVOREVOQ1lfRVJST1IsIFN0cmluZyhtb2RpZmllci5uYW1lKSwgcmVxdWlyZW1lbnQsIHJlcXVpcmVtZW50KSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bmlxdWVCeShhcnIsIGZuKSB7XG4gIHZhciBpZGVudGlmaWVycyA9IG5ldyBTZXQoKTtcbiAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgaWRlbnRpZmllciA9IGZuKGl0ZW0pO1xuXG4gICAgaWYgKCFpZGVudGlmaWVycy5oYXMoaWRlbnRpZmllcikpIHtcbiAgICAgIGlkZW50aWZpZXJzLmFkZChpZGVudGlmaWVyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VCeU5hbWUobW9kaWZpZXJzKSB7XG4gIHZhciBtZXJnZWQgPSBtb2RpZmllcnMucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQsIGN1cnJlbnQpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBtZXJnZWRbY3VycmVudC5uYW1lXTtcbiAgICBtZXJnZWRbY3VycmVudC5uYW1lXSA9IGV4aXN0aW5nID8gT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcsIGN1cnJlbnQsIHtcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLm9wdGlvbnMsIGN1cnJlbnQub3B0aW9ucyksXG4gICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5kYXRhLCBjdXJyZW50LmRhdGEpXG4gICAgfSkgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTsgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdC52YWx1ZXNcblxuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtZXJnZWRba2V5XTtcbiAgfSk7XG59IiwiaW1wb3J0IGdldENvbXBvc2l0ZVJlY3QgZnJvbSBcIi4vZG9tLXV0aWxzL2dldENvbXBvc2l0ZVJlY3QuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgb3JkZXJNb2RpZmllcnMgZnJvbSBcIi4vdXRpbHMvb3JkZXJNb2RpZmllcnMuanNcIjtcbmltcG9ydCBkZWJvdW5jZSBmcm9tIFwiLi91dGlscy9kZWJvdW5jZS5qc1wiO1xuaW1wb3J0IHZhbGlkYXRlTW9kaWZpZXJzIGZyb20gXCIuL3V0aWxzL3ZhbGlkYXRlTW9kaWZpZXJzLmpzXCI7XG5pbXBvcnQgdW5pcXVlQnkgZnJvbSBcIi4vdXRpbHMvdW5pcXVlQnkuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBtZXJnZUJ5TmFtZSBmcm9tIFwiLi91dGlscy9tZXJnZUJ5TmFtZS5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IHsgYXV0byB9IGZyb20gXCIuL2VudW1zLmpzXCI7XG52YXIgSU5WQUxJRF9FTEVNRU5UX0VSUk9SID0gJ1BvcHBlcjogSW52YWxpZCByZWZlcmVuY2Ugb3IgcG9wcGVyIGFyZ3VtZW50IHByb3ZpZGVkLiBUaGV5IG11c3QgYmUgZWl0aGVyIGEgRE9NIGVsZW1lbnQgb3IgdmlydHVhbCBlbGVtZW50Lic7XG52YXIgSU5GSU5JVEVfTE9PUF9FUlJPUiA9ICdQb3BwZXI6IEFuIGluZmluaXRlIGxvb3AgaW4gdGhlIG1vZGlmaWVycyBjeWNsZSBoYXMgYmVlbiBkZXRlY3RlZCEgVGhlIGN5Y2xlIGhhcyBiZWVuIGludGVycnVwdGVkIHRvIHByZXZlbnQgYSBicm93c2VyIGNyYXNoLic7XG52YXIgREVGQVVMVF9PUFRJT05TID0ge1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICBtb2RpZmllcnM6IFtdLFxuICBzdHJhdGVneTogJ2Fic29sdXRlJ1xufTtcblxuZnVuY3Rpb24gYXJlVmFsaWRFbGVtZW50cygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiAhYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuICEoZWxlbWVudCAmJiB0eXBlb2YgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgPT09ICdmdW5jdGlvbicpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvcHBlckdlbmVyYXRvcihnZW5lcmF0b3JPcHRpb25zKSB7XG4gIGlmIChnZW5lcmF0b3JPcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBnZW5lcmF0b3JPcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX2dlbmVyYXRvck9wdGlvbnMgPSBnZW5lcmF0b3JPcHRpb25zLFxuICAgICAgX2dlbmVyYXRvck9wdGlvbnMkZGVmID0gX2dlbmVyYXRvck9wdGlvbnMuZGVmYXVsdE1vZGlmaWVycyxcbiAgICAgIGRlZmF1bHRNb2RpZmllcnMgPSBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYgPT09IHZvaWQgMCA/IFtdIDogX2dlbmVyYXRvck9wdGlvbnMkZGVmLFxuICAgICAgX2dlbmVyYXRvck9wdGlvbnMkZGVmMiA9IF9nZW5lcmF0b3JPcHRpb25zLmRlZmF1bHRPcHRpb25zLFxuICAgICAgZGVmYXVsdE9wdGlvbnMgPSBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyID09PSB2b2lkIDAgPyBERUZBVUxUX09QVElPTlMgOiBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyO1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgICBvcmRlcmVkTW9kaWZpZXJzOiBbXSxcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfT1BUSU9OUywgZGVmYXVsdE9wdGlvbnMpLFxuICAgICAgbW9kaWZpZXJzRGF0YToge30sXG4gICAgICBlbGVtZW50czoge1xuICAgICAgICByZWZlcmVuY2U6IHJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyOiBwb3BwZXJcbiAgICAgIH0sXG4gICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgIHN0eWxlczoge31cbiAgICB9O1xuICAgIHZhciBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgdmFyIGlzRGVzdHJveWVkID0gZmFsc2U7XG4gICAgdmFyIGluc3RhbmNlID0ge1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgc2V0T3B0aW9uczogZnVuY3Rpb24gc2V0T3B0aW9ucyhzZXRPcHRpb25zQWN0aW9uKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHNldE9wdGlvbnNBY3Rpb24gPT09ICdmdW5jdGlvbicgPyBzZXRPcHRpb25zQWN0aW9uKHN0YXRlLm9wdGlvbnMpIDogc2V0T3B0aW9uc0FjdGlvbjtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBzdGF0ZS5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIHN0YXRlLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0ge1xuICAgICAgICAgIHJlZmVyZW5jZTogaXNFbGVtZW50KHJlZmVyZW5jZSkgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UpIDogcmVmZXJlbmNlLmNvbnRleHRFbGVtZW50ID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlLmNvbnRleHRFbGVtZW50KSA6IFtdLFxuICAgICAgICAgIHBvcHBlcjogbGlzdFNjcm9sbFBhcmVudHMocG9wcGVyKVxuICAgICAgICB9OyAvLyBPcmRlcnMgdGhlIG1vZGlmaWVycyBiYXNlZCBvbiB0aGVpciBkZXBlbmRlbmNpZXMgYW5kIGBwaGFzZWBcbiAgICAgICAgLy8gcHJvcGVydGllc1xuXG4gICAgICAgIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJNb2RpZmllcnMobWVyZ2VCeU5hbWUoW10uY29uY2F0KGRlZmF1bHRNb2RpZmllcnMsIHN0YXRlLm9wdGlvbnMubW9kaWZpZXJzKSkpOyAvLyBTdHJpcCBvdXQgZGlzYWJsZWQgbW9kaWZpZXJzXG5cbiAgICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyZWRNb2RpZmllcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgcmV0dXJuIG0uZW5hYmxlZDtcbiAgICAgICAgfSk7IC8vIFZhbGlkYXRlIHRoZSBwcm92aWRlZCBtb2RpZmllcnMgc28gdGhhdCB0aGUgY29uc3VtZXIgd2lsbCBnZXQgd2FybmVkXG4gICAgICAgIC8vIGlmIG9uZSBvZiB0aGUgbW9kaWZpZXJzIGlzIGludmFsaWQgZm9yIGFueSByZWFzb25cblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgdmFyIG1vZGlmaWVycyA9IHVuaXF1ZUJ5KFtdLmNvbmNhdChvcmRlcmVkTW9kaWZpZXJzLCBzdGF0ZS5vcHRpb25zLm1vZGlmaWVycyksIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhbGlkYXRlTW9kaWZpZXJzKG1vZGlmaWVycyk7XG5cbiAgICAgICAgICBpZiAoZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5vcHRpb25zLnBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICAgICAgICAgIHZhciBmbGlwTW9kaWZpZXIgPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZpbmQoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgICAgIHZhciBuYW1lID0gX3JlZjIubmFtZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5hbWUgPT09ICdmbGlwJztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIWZsaXBNb2RpZmllcikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImF1dG9cIiBwbGFjZW1lbnRzIHJlcXVpcmUgdGhlIFwiZmxpcFwiIG1vZGlmaWVyIGJlJywgJ3ByZXNlbnQgYW5kIGVuYWJsZWQgdG8gd29yay4nXS5qb2luKCcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUocG9wcGVyKSxcbiAgICAgICAgICAgICAgbWFyZ2luVG9wID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luVG9wLFxuICAgICAgICAgICAgICBtYXJnaW5SaWdodCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpblJpZ2h0LFxuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b20gPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5Cb3R0b20sXG4gICAgICAgICAgICAgIG1hcmdpbkxlZnQgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5MZWZ0OyAvLyBXZSBubyBsb25nZXIgdGFrZSBpbnRvIGFjY291bnQgYG1hcmdpbnNgIG9uIHRoZSBwb3BwZXIsIGFuZCBpdCBjYW5cbiAgICAgICAgICAvLyBjYXVzZSBidWdzIHdpdGggcG9zaXRpb25pbmcsIHNvIHdlJ2xsIHdhcm4gdGhlIGNvbnN1bWVyXG5cblxuICAgICAgICAgIGlmIChbbWFyZ2luVG9wLCBtYXJnaW5SaWdodCwgbWFyZ2luQm90dG9tLCBtYXJnaW5MZWZ0XS5zb21lKGZ1bmN0aW9uIChtYXJnaW4pIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KG1hcmdpbik7XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihbJ1BvcHBlcjogQ1NTIFwibWFyZ2luXCIgc3R5bGVzIGNhbm5vdCBiZSB1c2VkIHRvIGFwcGx5IHBhZGRpbmcnLCAnYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgb3IgYm91bmRhcnkuJywgJ1RvIHJlcGxpY2F0ZSBtYXJnaW4sIHVzZSB0aGUgYG9mZnNldGAgbW9kaWZpZXIsIGFzIHdlbGwgYXMnLCAndGhlIGBwYWRkaW5nYCBvcHRpb24gaW4gdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIGFuZCBgZmxpcGAnLCAnbW9kaWZpZXJzLiddLmpvaW4oJyAnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcnVuTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICAvLyBTeW5jIHVwZGF0ZSDigJMgaXQgd2lsbCBhbHdheXMgYmUgZXhlY3V0ZWQsIGV2ZW4gaWYgbm90IG5lY2Vzc2FyeS4gVGhpc1xuICAgICAgLy8gaXMgdXNlZnVsIGZvciBsb3cgZnJlcXVlbmN5IHVwZGF0ZXMgd2hlcmUgc3luYyBiZWhhdmlvciBzaW1wbGlmaWVzIHRoZVxuICAgICAgLy8gbG9naWMuXG4gICAgICAvLyBGb3IgaGlnaCBmcmVxdWVuY3kgdXBkYXRlcyAoZS5nLiBgcmVzaXplYCBhbmQgYHNjcm9sbGAgZXZlbnRzKSwgYWx3YXlzXG4gICAgICAvLyBwcmVmZXIgdGhlIGFzeW5jIFBvcHBlciN1cGRhdGUgbWV0aG9kXG4gICAgICBmb3JjZVVwZGF0ZTogZnVuY3Rpb24gZm9yY2VVcGRhdGUoKSB7XG4gICAgICAgIGlmIChpc0Rlc3Ryb3llZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfc3RhdGUkZWxlbWVudHMgPSBzdGF0ZS5lbGVtZW50cyxcbiAgICAgICAgICAgIHJlZmVyZW5jZSA9IF9zdGF0ZSRlbGVtZW50cy5yZWZlcmVuY2UsXG4gICAgICAgICAgICBwb3BwZXIgPSBfc3RhdGUkZWxlbWVudHMucG9wcGVyOyAvLyBEb24ndCBwcm9jZWVkIGlmIGByZWZlcmVuY2VgIG9yIGBwb3BwZXJgIGFyZSBub3QgdmFsaWQgZWxlbWVudHNcbiAgICAgICAgLy8gYW55bW9yZVxuXG4gICAgICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKElOVkFMSURfRUxFTUVOVF9FUlJPUik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIFN0b3JlIHRoZSByZWZlcmVuY2UgYW5kIHBvcHBlciByZWN0cyB0byBiZSByZWFkIGJ5IG1vZGlmaWVyc1xuXG5cbiAgICAgICAgc3RhdGUucmVjdHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBnZXRDb21wb3NpdGVSZWN0KHJlZmVyZW5jZSwgZ2V0T2Zmc2V0UGFyZW50KHBvcHBlciksIHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3kgPT09ICdmaXhlZCcpLFxuICAgICAgICAgIHBvcHBlcjogZ2V0TGF5b3V0UmVjdChwb3BwZXIpXG4gICAgICAgIH07IC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIHJlc2V0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZS4gVGhlXG4gICAgICAgIC8vIG1vc3QgY29tbW9uIHVzZSBjYXNlIGZvciB0aGlzIGlzIHRoZSBgZmxpcGAgbW9kaWZpZXIgY2hhbmdpbmcgdGhlXG4gICAgICAgIC8vIHBsYWNlbWVudCwgd2hpY2ggdGhlbiBuZWVkcyB0byByZS1ydW4gYWxsIHRoZSBtb2RpZmllcnMsIGJlY2F1c2UgdGhlXG4gICAgICAgIC8vIGxvZ2ljIHdhcyBwcmV2aW91c2x5IHJhbiBmb3IgdGhlIHByZXZpb3VzIHBsYWNlbWVudCBhbmQgaXMgdGhlcmVmb3JlXG4gICAgICAgIC8vIHN0YWxlL2luY29ycmVjdFxuXG4gICAgICAgIHN0YXRlLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLnBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50OyAvLyBPbiBlYWNoIHVwZGF0ZSBjeWNsZSwgdGhlIGBtb2RpZmllcnNEYXRhYCBwcm9wZXJ0eSBmb3IgZWFjaCBtb2RpZmllclxuICAgICAgICAvLyBpcyBmaWxsZWQgd2l0aCB0aGUgaW5pdGlhbCBkYXRhIHNwZWNpZmllZCBieSB0aGUgbW9kaWZpZXIuIFRoaXMgbWVhbnNcbiAgICAgICAgLy8gaXQgZG9lc24ndCBwZXJzaXN0IGFuZCBpcyBmcmVzaCBvbiBlYWNoIHVwZGF0ZS5cbiAgICAgICAgLy8gVG8gZW5zdXJlIHBlcnNpc3RlbnQgZGF0YSwgdXNlIGAke25hbWV9I3BlcnNpc3RlbnRgXG5cbiAgICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgICAgICAgIHJldHVybiBzdGF0ZS5tb2RpZmllcnNEYXRhW21vZGlmaWVyLm5hbWVdID0gT2JqZWN0LmFzc2lnbih7fSwgbW9kaWZpZXIuZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgX19kZWJ1Z19sb29wc19fID0gMDtcblxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBfX2RlYnVnX2xvb3BzX18gKz0gMTtcblxuICAgICAgICAgICAgaWYgKF9fZGVidWdfbG9vcHNfXyA+IDEwMCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKElORklOSVRFX0xPT1BfRVJST1IpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3RhdGUucmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHN0YXRlLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZSA9IHN0YXRlLm9yZGVyZWRNb2RpZmllcnNbaW5kZXhdLFxuICAgICAgICAgICAgICBmbiA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5mbixcbiAgICAgICAgICAgICAgX3N0YXRlJG9yZGVyZWRNb2RpZmllMiA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5vcHRpb25zLFxuICAgICAgICAgICAgICBfb3B0aW9ucyA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPT09IHZvaWQgMCA/IHt9IDogX3N0YXRlJG9yZGVyZWRNb2RpZmllMixcbiAgICAgICAgICAgICAgbmFtZSA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5uYW1lO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3RhdGUgPSBmbih7XG4gICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgICAgb3B0aW9uczogX29wdGlvbnMsXG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZVxuICAgICAgICAgICAgfSkgfHwgc3RhdGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gQXN5bmMgYW5kIG9wdGltaXN0aWNhbGx5IG9wdGltaXplZCB1cGRhdGUg4oCTIGl0IHdpbGwgbm90IGJlIGV4ZWN1dGVkIGlmXG4gICAgICAvLyBub3QgbmVjZXNzYXJ5IChkZWJvdW5jZWQgdG8gcnVuIGF0IG1vc3Qgb25jZS1wZXItdGljaylcbiAgICAgIHVwZGF0ZTogZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICBpbnN0YW5jZS5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgIHJlc29sdmUoc3RhdGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pLFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBpc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTlZBTElEX0VMRU1FTlRfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc2V0T3B0aW9ucyhvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgaWYgKCFpc0Rlc3Ryb3llZCAmJiBvcHRpb25zLm9uRmlyc3RVcGRhdGUpIHtcbiAgICAgICAgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSBiZWZvcmUgdGhlIGZpcnN0XG4gICAgLy8gdXBkYXRlIGN5Y2xlIHJ1bnMuIFRoZXkgd2lsbCBiZSBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgdXBkYXRlXG4gICAgLy8gY3ljbGUuIFRoaXMgaXMgdXNlZnVsIHdoZW4gYSBtb2RpZmllciBhZGRzIHNvbWUgcGVyc2lzdGVudCBkYXRhIHRoYXRcbiAgICAvLyBvdGhlciBtb2RpZmllcnMgbmVlZCB0byB1c2UsIGJ1dCB0aGUgbW9kaWZpZXIgaXMgcnVuIGFmdGVyIHRoZSBkZXBlbmRlbnRcbiAgICAvLyBvbmUuXG5cbiAgICBmdW5jdGlvbiBydW5Nb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgIHZhciBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgICAgIF9yZWYzJG9wdGlvbnMgPSBfcmVmMy5vcHRpb25zLFxuICAgICAgICAgICAgb3B0aW9ucyA9IF9yZWYzJG9wdGlvbnMgPT09IHZvaWQgMCA/IHt9IDogX3JlZjMkb3B0aW9ucyxcbiAgICAgICAgICAgIGVmZmVjdCA9IF9yZWYzLmVmZmVjdDtcblxuICAgICAgICBpZiAodHlwZW9mIGVmZmVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciBjbGVhbnVwRm4gPSBlZmZlY3Qoe1xuICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZSxcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHZhciBub29wRm4gPSBmdW5jdGlvbiBub29wRm4oKSB7fTtcblxuICAgICAgICAgIGVmZmVjdENsZWFudXBGbnMucHVzaChjbGVhbnVwRm4gfHwgbm9vcEZuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIGVmZmVjdENsZWFudXBGbnMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICB9KTtcbiAgICAgIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG59XG5leHBvcnQgdmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3IoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBkZXRlY3RPdmVyZmxvdyB9OyIsImltcG9ydCB7IHBvcHBlckdlbmVyYXRvciwgZGV0ZWN0T3ZlcmZsb3cgfSBmcm9tIFwiLi9jcmVhdGVQb3BwZXIuanNcIjtcbmltcG9ydCBldmVudExpc3RlbmVycyBmcm9tIFwiLi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanNcIjtcbmltcG9ydCBwb3BwZXJPZmZzZXRzIGZyb20gXCIuL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzXCI7XG5pbXBvcnQgY29tcHV0ZVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qc1wiO1xuaW1wb3J0IGFwcGx5U3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9hcHBseVN0eWxlcy5qc1wiO1xuaW1wb3J0IG9mZnNldCBmcm9tIFwiLi9tb2RpZmllcnMvb2Zmc2V0LmpzXCI7XG5pbXBvcnQgZmxpcCBmcm9tIFwiLi9tb2RpZmllcnMvZmxpcC5qc1wiO1xuaW1wb3J0IHByZXZlbnRPdmVyZmxvdyBmcm9tIFwiLi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgYXJyb3cgZnJvbSBcIi4vbW9kaWZpZXJzL2Fycm93LmpzXCI7XG5pbXBvcnQgaGlkZSBmcm9tIFwiLi9tb2RpZmllcnMvaGlkZS5qc1wiO1xudmFyIGRlZmF1bHRNb2RpZmllcnMgPSBbZXZlbnRMaXN0ZW5lcnMsIHBvcHBlck9mZnNldHMsIGNvbXB1dGVTdHlsZXMsIGFwcGx5U3R5bGVzLCBvZmZzZXQsIGZsaXAsIHByZXZlbnRPdmVyZmxvdywgYXJyb3csIGhpZGVdO1xudmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3Ioe1xuICBkZWZhdWx0TW9kaWZpZXJzOiBkZWZhdWx0TW9kaWZpZXJzXG59KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIsIHBvcHBlckdlbmVyYXRvciwgZGVmYXVsdE1vZGlmaWVycywgZGV0ZWN0T3ZlcmZsb3cgfTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIgYXMgY3JlYXRlUG9wcGVyTGl0ZSB9IGZyb20gXCIuL3BvcHBlci1saXRlLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0ICogZnJvbSBcIi4vbW9kaWZpZXJzL2luZGV4LmpzXCI7IiwiaW1wb3J0IFwiLi9wb3BwZXItY29uZmlnXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVBvcHBlciB9IGZyb20gXCJAcG9wcGVyanMvY29yZVwiO1xyXG5pbXBvcnQgeyB1c2VHbG9iYWxIYW5kbGVyLCB1c2VMb2dpY2FsRGlyZWN0aW9uLCB1c2VNZXJnZWRQcm9wcywgdXNlUmVmRWxlbWVudCwgdXNlU3RhdGUsIHVzZVRpbWVvdXQgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVyc1wiO1xyXG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VNZW1vIH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5leHBvcnQgZnVuY3Rpb24gdXNlUG9wcGVyQXBpKHsgdXBkYXRpbmcsIHBvc2l0aW9uLCBza2lkZGluZywgZGlzdGFuY2UsIHBhZGRpbmdUb3AsIHBhZGRpbmdCb3R0b20sIHBhZGRpbmdMZWZ0LCBwYWRkaW5nUmlnaHQgfSkge1xyXG4gICAgY29uc3QgW3BvcHBlckluc3RhbmNlLCBzZXRQb3BwZXJJbnN0YW5jZSwgZ2V0UG9wcGVySW5zdGFuY2VdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbdXNlZFBsYWNlbWVudCwgc2V0VXNlZFBsYWNlbWVudF0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IHsgZWxlbWVudDogc291cmNlRWxlbWVudCwgZ2V0RWxlbWVudDogZ2V0U291cmNlRWxlbWVudCwgdXNlUmVmRWxlbWVudFByb3BzOiB1c2VTb3VyY2VFbGVtZW50UmVmUHJvcHMgfSA9IHVzZVJlZkVsZW1lbnQoKTtcclxuICAgIGNvbnN0IHsgZWxlbWVudDogcG9wcGVyRWxlbWVudCwgZ2V0RWxlbWVudDogZ2V0UG9wcGVyRWxlbWVudCwgdXNlUmVmRWxlbWVudFByb3BzOiB1c2VQb3BwZXJFbGVtZW50UmVmUHJvcHMgfSA9IHVzZVJlZkVsZW1lbnQoKTtcclxuICAgIGNvbnN0IHsgZWxlbWVudDogYXJyb3dFbGVtZW50LCBnZXRFbGVtZW50OiBnZXRBcnJvd0VsZW1lbnQsIHVzZVJlZkVsZW1lbnRQcm9wczogdXNlQXJyb3dFbGVtZW50UmVmUHJvcHMgfSA9IHVzZVJlZkVsZW1lbnQoKTtcclxuICAgIGNvbnN0IFtzb3VyY2VTdHlsZSwgc2V0U291cmNlU3R5bGVdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbc291cmNlQXR0cmlidXRlcywgc2V0U291cmNlQXR0cmlidXRlc10gPSB1c2VTdGF0ZSh7fSk7XHJcbiAgICBjb25zdCBbcG9wcGVyU3R5bGUsIHNldFBvcHBlclN0eWxlXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgW3BvcHBlckF0dHJpYnV0ZXMsIHNldFBvcHBlckF0dHJpYnV0ZXNdID0gdXNlU3RhdGUoe30pO1xyXG4gICAgY29uc3QgW2Fycm93U3R5bGUsIHNldEFycm93U3R5bGVdID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCBbYXJyb3dBdHRyaWJ1dGVzLCBzZXRBcnJvd0F0dHJpYnV0ZXNdID0gdXNlU3RhdGUoe30pO1xyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAodXBkYXRpbmcpIHtcclxuICAgICAgICAgICAgbGV0IHJhZkhhbmRsZSA9IDA7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJhZigpIHtcclxuICAgICAgICAgICAgICAgIGxldCBwID0gKChjbG9zZWQgPyBQcm9taXNlLnJlc29sdmUoKSA6IGdldFBvcHBlckluc3RhbmNlKCk/LnVwZGF0ZSgpKSA/PyBQcm9taXNlLnJlc29sdmUoKSk7XHJcbiAgICAgICAgICAgICAgICBwLnRoZW4oXyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhZkhhbmRsZSAhPSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhZkhhbmRsZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShyYWYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJhZkhhbmRsZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShyYWYpO1xyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmSGFuZGxlKTtcclxuICAgICAgICAgICAgICAgIC8vIFNpbmdsZS10aHJlYWRlZCBsYW5ndWFnZXMgYXJlIG5pY2Ugc29tZXRpbWVzLlxyXG4gICAgICAgICAgICAgICAgcmFmSGFuZGxlID0gMDtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbdXBkYXRpbmddKTtcclxuICAgIGNvbnN0IHVwZGF0ZVN0YXRlTW9kaWZpZXIgPSB1c2VNZW1vKCgpID0+IHtcclxuICAgICAgICBsZXQgbW9kaWZpZXIgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwidXBkYXRlU3RhdGVcIixcclxuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgcGhhc2U6IFwid3JpdGVcIixcclxuICAgICAgICAgICAgZm46ICh7IHN0YXRlLCBvcHRpb25zLCBuYW1lLCBpbnN0YW5jZSB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdXNlZFBsYWNlbWVudCA9IHN0YXRlLnBsYWNlbWVudDtcclxuICAgICAgICAgICAgICAgIGlmICh1c2VkUGxhY2VtZW50LmluY2x1ZGVzKFwiLVwiKSlcclxuICAgICAgICAgICAgICAgICAgICB1c2VkUGxhY2VtZW50ID0gdXNlZFBsYWNlbWVudC5zdWJzdHIoMCwgdXNlZFBsYWNlbWVudC5pbmRleE9mKFwiLVwiKSk7XHJcbiAgICAgICAgICAgICAgICBzZXRVc2VkUGxhY2VtZW50KHVzZWRQbGFjZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnN0eWxlcy5yZWZlcmVuY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0U291cmNlU3R5bGUoc3RhdGUuc3R5bGVzLnJlZmVyZW5jZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuYXR0cmlidXRlcy5yZWZlcmVuY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0U291cmNlQXR0cmlidXRlcyhzdGF0ZS5hdHRyaWJ1dGVzLnJlZmVyZW5jZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuc3R5bGVzLnBvcHBlcilcclxuICAgICAgICAgICAgICAgICAgICBzZXRQb3BwZXJTdHlsZShzdGF0ZS5zdHlsZXMucG9wcGVyKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlcilcclxuICAgICAgICAgICAgICAgICAgICBzZXRQb3BwZXJBdHRyaWJ1dGVzKHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5zdHlsZXMuYXJyb3cpXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0QXJyb3dTdHlsZShzdGF0ZS5zdHlsZXMuYXJyb3cpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmF0dHJpYnV0ZXMuYXJyb3cpXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0QXJyb3dBdHRyaWJ1dGVzKHN0YXRlLmF0dHJpYnV0ZXMuYXJyb3cpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZXF1aXJlczogW1wiY29tcHV0ZVN0eWxlc1wiLCBcImZsaXBcIl1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBtb2RpZmllcjtcclxuICAgIH0sIFtdKTtcclxuICAgIGNvbnN0IHsgY29udmVydEVsZW1lbnRTaXplLCBnZXRMb2dpY2FsRGlyZWN0aW9uIH0gPSB1c2VMb2dpY2FsRGlyZWN0aW9uKHNvdXJjZUVsZW1lbnQpO1xyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAoc291cmNlRWxlbWVudCAmJiBwb3BwZXJFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9uRmlyc3RVcGRhdGUgPSAoKSA9PiB7IH07XHJcbiAgICAgICAgICAgIGNvbnN0IHN0cmF0ZWd5ID0gXCJhYnNvbHV0ZVwiO1xyXG4gICAgICAgICAgICBsZXQgcGxhY2VtZW50ID0gbG9naWNhbFRvUGxhY2VtZW50KGdldExvZ2ljYWxEaXJlY3Rpb24oKSwgcG9zaXRpb24pO1xyXG4gICAgICAgICAgICBzZXRQb3BwZXJJbnN0YW5jZShjcmVhdGVQb3BwZXIoc291cmNlRWxlbWVudCwgcG9wcGVyRWxlbWVudCwge1xyXG4gICAgICAgICAgICAgICAgbW9kaWZpZXJzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiBcImZsaXBcIiwgb3B0aW9uczoge30gfSxcclxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6IFwicHJldmVudE92ZXJmbG93XCIsIG9wdGlvbnM6IHsgcGFkZGluZzogeyBib3R0b206IHBhZGRpbmdCb3R0b20sIHRvcDogcGFkZGluZ1RvcCwgbGVmdDogcGFkZGluZ0xlZnQsIHJpZ2h0OiBwYWRkaW5nUmlnaHQgfSB9IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlU3RhdGVNb2RpZmllcixcclxuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICdldmVudExpc3RlbmVycycsIGVuYWJsZWQ6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyBuYW1lOiBcImFwcGx5U3R5bGVzXCIsIGVuYWJsZWQ6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBdLCBvbkZpcnN0VXBkYXRlLCBwbGFjZW1lbnQsIHN0cmF0ZWd5XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBbc291cmNlRWxlbWVudCwgcG9wcGVyRWxlbWVudCwgcG9zaXRpb24sIHNraWRkaW5nLCBkaXN0YW5jZSwgcGFkZGluZ1RvcCwgcGFkZGluZ0JvdHRvbSwgcGFkZGluZ0xlZnQsIHBhZGRpbmdSaWdodF0pO1xyXG4gICAgZnVuY3Rpb24gdXNlUG9wcGVyU291cmNlKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIHVzZVBvcHBlclNvdXJjZVByb3BzKHByb3BzKSB7XHJcbiAgICAgICAgICAgIGxldCBzdHlsZSA9IHsgLi4uc291cmNlU3R5bGUgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKCkoc291cmNlQXR0cmlidXRlcywgdXNlTWVyZ2VkUHJvcHMoKSh7IHN0eWxlIH0sIHVzZVNvdXJjZUVsZW1lbnRSZWZQcm9wcyhwcm9wcykpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdXNlUG9wcGVyU291cmNlUHJvcHMgfTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVzZVBvcHBlclBvcHVwKHsgb3BlbiB9KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gdXNlUG9wcGVyUG9wdXBQcm9wcyhwcm9wcykge1xyXG4gICAgICAgICAgICBsZXQgc3R5bGUgPSB7IC4uLnBvcHBlclN0eWxlLCBwb2ludGVyRXZlbnRzOiBvcGVuID8gdW5kZWZpbmVkIDogXCJub25lXCIgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKCkocG9wcGVyQXR0cmlidXRlcywgdXNlTWVyZ2VkUHJvcHMoKSh7IHN0eWxlIH0sIHVzZVBvcHBlckVsZW1lbnRSZWZQcm9wcyhwcm9wcykpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdXNlUG9wcGVyUG9wdXBQcm9wcyB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXNlUG9wcGVyQXJyb3coKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gdXNlUG9wcGVyQXJyb3dQcm9wcyhwcm9wcykge1xyXG4gICAgICAgICAgICBsZXQgc3R5bGUgPSB7IC4uLmFycm93U3R5bGUgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKCkocG9wcGVyQXR0cmlidXRlcywgdXNlTWVyZ2VkUHJvcHMoKSh7IHN0eWxlIH0sIHVzZUFycm93RWxlbWVudFJlZlByb3BzKHByb3BzKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyB1c2VQb3BwZXJBcnJvd1Byb3BzIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyB1c2VQb3BwZXJTb3VyY2UsIHVzZVBvcHBlclBvcHVwLCB1c2VQb3BwZXJBcnJvdywgdXNlZFBsYWNlbWVudCwgZ2V0TG9naWNhbERpcmVjdGlvbiB9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBwbGFjZW1lbnRUb0xvZ2ljYWwobG9naWNhbERpcmVjdGlvbiwgcGxhY2VtZW50KSB7XHJcbiAgICBjb25zdCB7IGJsb2NrRGlyZWN0aW9uLCBibG9ja09yaWVudGF0aW9uLCBpbmxpbmVEaXJlY3Rpb24sIGlubGluZU9yaWVudGF0aW9uIH0gPSBsb2dpY2FsRGlyZWN0aW9uO1xyXG4gICAgbGV0IGxvZ2ljYWw7XHJcbiAgICBzd2l0Y2ggKGAke2lubGluZURpcmVjdGlvbn0tJHtibG9ja0RpcmVjdGlvbn0sJHtwbGFjZW1lbnR9YCkge1xyXG4gICAgICAgIC8vIFRoZXJlJ3MgYSBwYXR0ZXJuLCBhbmQgaXQgY291bGQgYmUgY29kZWQgYXMgYSBwYXR0ZXJuXHJcbiAgICAgICAgY2FzZSBcImx0ci10dGIsdG9wXCI6XHJcbiAgICAgICAgICAgIGxvZ2ljYWwgPSBcImJsb2NrLXN0YXJ0XCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJsdHItYnR0LGJvdHRvbVwiOlxyXG4gICAgICAgICAgICBsb2dpY2FsID0gXCJibG9jay1zdGFydFwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwicnRsLXR0Yix0b3BcIjpcclxuICAgICAgICAgICAgbG9naWNhbCA9IFwiYmxvY2stc3RhcnRcIjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcInJ0bC1idHQsYm90dG9tXCI6XHJcbiAgICAgICAgICAgIGxvZ2ljYWwgPSBcImJsb2NrLXN0YXJ0XCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJ0dGItbHRyLGxlZnRcIjpcclxuICAgICAgICAgICAgbG9naWNhbCA9IFwiYmxvY2stc3RhcnRcIjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcImJ0dC1sdHIscmlnaHRcIjpcclxuICAgICAgICAgICAgbG9naWNhbCA9IFwiYmxvY2stc3RhcnRcIjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcInR0Yi1ydGwsbGVmdFwiOlxyXG4gICAgICAgICAgICBsb2dpY2FsID0gXCJibG9jay1zdGFydFwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwiYnR0LXJ0bCxyaWdodFwiOlxyXG4gICAgICAgICAgICBsb2dpY2FsID0gXCJibG9jay1zdGFydFwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwibHRyLXR0Yixib3R0b21cIjpcclxuICAgICAgICAgICAgbG9naWNhbCA9IFwiYmxvY2stZW5kXCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJydGwtdHRiLGJvdHRvbVwiOlxyXG4gICAgICAgICAgICBsb2dpY2FsID0gXCJibG9jay1lbmRcIjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcImx0ci1idHQsdG9wXCI6XHJcbiAgICAgICAgICAgIGxvZ2ljYWwgPSBcImJsb2NrLWVuZFwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwicnRsLWJ0dCx0b3BcIjpcclxuICAgICAgICAgICAgbG9naWNhbCA9IFwiYmxvY2stZW5kXCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJ0dGItbHRyLHJpZ2h0XCI6XHJcbiAgICAgICAgICAgIGxvZ2ljYWwgPSBcImJsb2NrLWVuZFwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwidHRiLXJ0bCxyaWdodFwiOlxyXG4gICAgICAgICAgICBsb2dpY2FsID0gXCJibG9jay1lbmRcIjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcImJ0dC1sdHIsbGVmdFwiOlxyXG4gICAgICAgICAgICBsb2dpY2FsID0gXCJibG9jay1lbmRcIjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcImJ0dC1ydGwsbGVmdFwiOlxyXG4gICAgICAgICAgICBsb2dpY2FsID0gXCJibG9jay1lbmRcIjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcInR0Yi1sdHIsdG9wXCI6XHJcbiAgICAgICAgICAgIGxvZ2ljYWwgPSBcImlubGluZS1zdGFydFwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwidHRiLXJ0bCx0b3BcIjpcclxuICAgICAgICAgICAgbG9naWNhbCA9IFwiaW5saW5lLXN0YXJ0XCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJidHQtbHRyLGJvdHRvbVwiOlxyXG4gICAgICAgICAgICBsb2dpY2FsID0gXCJpbmxpbmUtc3RhcnRcIjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcImJ0dC1ydGwsYm90dG9tXCI6XHJcbiAgICAgICAgICAgIGxvZ2ljYWwgPSBcImlubGluZS1zdGFydFwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwibHRyLXR0YixsZWZ0XCI6XHJcbiAgICAgICAgICAgIGxvZ2ljYWwgPSBcImlubGluZS1zdGFydFwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwicnRsLXR0YixsZWZ0XCI6XHJcbiAgICAgICAgICAgIGxvZ2ljYWwgPSBcImlubGluZS1zdGFydFwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwibHRyLWJ0dCxyaWdodFwiOlxyXG4gICAgICAgICAgICBsb2dpY2FsID0gXCJpbmxpbmUtc3RhcnRcIjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcInJ0bC1idHQscmlnaHRcIjpcclxuICAgICAgICAgICAgbG9naWNhbCA9IFwiaW5saW5lLXN0YXJ0XCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJ0dGItbHRyLGJvdHRvbVwiOlxyXG4gICAgICAgICAgICBsb2dpY2FsID0gXCJpbmxpbmUtZW5kXCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJ0dGItcnRsLGJvdHRvbVwiOlxyXG4gICAgICAgICAgICBsb2dpY2FsID0gXCJpbmxpbmUtZW5kXCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJidHQtbHRyLHRvcFwiOlxyXG4gICAgICAgICAgICBsb2dpY2FsID0gXCJpbmxpbmUtZW5kXCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJidHQtcnRsLHRvcFwiOlxyXG4gICAgICAgICAgICBsb2dpY2FsID0gXCJpbmxpbmUtZW5kXCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJsdHItdHRiLHJpZ2h0XCI6XHJcbiAgICAgICAgICAgIGxvZ2ljYWwgPSBcImlubGluZS1lbmRcIjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcInJ0bC10dGIscmlnaHRcIjpcclxuICAgICAgICAgICAgbG9naWNhbCA9IFwiaW5saW5lLWVuZFwiO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwibHRyLWJ0dCxsZWZ0XCI6XHJcbiAgICAgICAgICAgIGxvZ2ljYWwgPSBcImlubGluZS1lbmRcIjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcInJ0bC1idHQsbGVmdFwiOlxyXG4gICAgICAgICAgICBsb2dpY2FsID0gXCJpbmxpbmUtZW5kXCI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIC8vIFNob3VsZG4ndCBoYXBwZW4sIGJ1dCBoZXJlIGZvciB0eXBlIGNvcnJlY3RuZXNzLlxyXG4gICAgICAgIGNhc2UgXCJ0dGItdHRiLGJvdHRvbVwiOlxyXG4gICAgICAgIGNhc2UgXCJ0dGItdHRiLHRvcFwiOlxyXG4gICAgICAgIGNhc2UgXCJidHQtYnR0LGJvdHRvbVwiOlxyXG4gICAgICAgIGNhc2UgXCJidHQtYnR0LHRvcFwiOlxyXG4gICAgICAgIGNhc2UgXCJsdHItbHRyLGJvdHRvbVwiOlxyXG4gICAgICAgIGNhc2UgXCJsdHItbHRyLHRvcFwiOlxyXG4gICAgICAgIGNhc2UgXCJydGwtcnRsLGJvdHRvbVwiOlxyXG4gICAgICAgIGNhc2UgXCJydGwtcnRsLHRvcFwiOlxyXG4gICAgICAgIGNhc2UgXCJ0dGItYnR0LGJvdHRvbVwiOlxyXG4gICAgICAgIGNhc2UgXCJidHQtdHRiLHRvcFwiOlxyXG4gICAgICAgIGNhc2UgXCJidHQtdHRiLGJvdHRvbVwiOlxyXG4gICAgICAgIGNhc2UgXCJ0dGItYnR0LHRvcFwiOlxyXG4gICAgICAgIGNhc2UgXCJsdHItcnRsLGJvdHRvbVwiOlxyXG4gICAgICAgIGNhc2UgXCJydGwtbHRyLHRvcFwiOlxyXG4gICAgICAgIGNhc2UgXCJydGwtbHRyLGJvdHRvbVwiOlxyXG4gICAgICAgIGNhc2UgXCJsdHItcnRsLHRvcFwiOlxyXG4gICAgICAgIGNhc2UgXCJ0dGItdHRiLHJpZ2h0XCI6XHJcbiAgICAgICAgY2FzZSBcInR0Yi10dGIsbGVmdFwiOlxyXG4gICAgICAgIGNhc2UgXCJidHQtYnR0LHJpZ2h0XCI6XHJcbiAgICAgICAgY2FzZSBcImJ0dC1idHQsbGVmdFwiOlxyXG4gICAgICAgIGNhc2UgXCJsdHItbHRyLHJpZ2h0XCI6XHJcbiAgICAgICAgY2FzZSBcImx0ci1sdHIsbGVmdFwiOlxyXG4gICAgICAgIGNhc2UgXCJydGwtcnRsLHJpZ2h0XCI6XHJcbiAgICAgICAgY2FzZSBcInJ0bC1ydGwsbGVmdFwiOlxyXG4gICAgICAgIGNhc2UgXCJ0dGItYnR0LHJpZ2h0XCI6XHJcbiAgICAgICAgY2FzZSBcImJ0dC10dGIsbGVmdFwiOlxyXG4gICAgICAgIGNhc2UgXCJidHQtdHRiLHJpZ2h0XCI6XHJcbiAgICAgICAgY2FzZSBcInR0Yi1idHQsbGVmdFwiOlxyXG4gICAgICAgIGNhc2UgXCJsdHItcnRsLHJpZ2h0XCI6XHJcbiAgICAgICAgY2FzZSBcInJ0bC1sdHIsbGVmdFwiOlxyXG4gICAgICAgIGNhc2UgXCJydGwtbHRyLHJpZ2h0XCI6XHJcbiAgICAgICAgY2FzZSBcImx0ci1ydGwsbGVmdFwiOlxyXG4gICAgICAgICAgICBkZWJ1Z2dlcjtcclxuICAgICAgICAgICAgbG9naWNhbCA9IGxvZ2ljYWw7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxvZ2ljYWw7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGxvZ2ljYWxUb1BsYWNlbWVudChsb2dpY2FsRGlyZWN0aW9uLCBwb3NpdGlvbikge1xyXG4gICAgbGV0IHBsYWNlbWVudDtcclxuICAgIGNvbnN0IHsgYmxvY2tEaXJlY3Rpb24sIGJsb2NrT3JpZW50YXRpb24sIGlubGluZURpcmVjdGlvbiwgaW5saW5lT3JpZW50YXRpb24gfSA9IGxvZ2ljYWxEaXJlY3Rpb247XHJcbiAgICBpZiAocG9zaXRpb24gPT09IFwiYmxvY2stc3RhcnRcIiB8fCBwb3NpdGlvbiA9PSBcImJsb2NrLWVuZFwiKSB7XHJcbiAgICAgICAgc3dpdGNoIChgJHtwb3NpdGlvbn0tJHtibG9ja0RpcmVjdGlvbn1gKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJibG9jay1zdGFydC10dGJcIjpcclxuICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9IFwidG9wXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImJsb2NrLWVuZC1idHRcIjpcclxuICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9IFwidG9wXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImJsb2NrLXN0YXJ0LWJ0dFwiOlxyXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gXCJib3R0b21cIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiYmxvY2stZW5kLXR0YlwiOlxyXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gXCJib3R0b21cIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiYmxvY2stc3RhcnQtbHRyXCI6XHJcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSBcImxlZnRcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiYmxvY2stZW5kLXJ0bFwiOlxyXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gXCJsZWZ0XCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImJsb2NrLWVuZC1sdHJcIjpcclxuICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9IFwicmlnaHRcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiYmxvY2stc3RhcnQtcnRsXCI6XHJcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSBcInJpZ2h0XCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9IFwiYm90dG9tXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBzd2l0Y2ggKGAke3Bvc2l0aW9ufS0ke2lubGluZURpcmVjdGlvbn1gKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJpbmxpbmUtc3RhcnQtbHRyXCI6XHJcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSBcImxlZnRcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiaW5saW5lLWVuZC1ydGxcIjpcclxuICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9IFwibGVmdFwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJpbmxpbmUtZW5kLWx0clwiOlxyXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gXCJyaWdodFwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJpbmxpbmUtc3RhcnQtcnRsXCI6XHJcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSBcInJpZ2h0XCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImlubGluZS1zdGFydC10dGJcIjpcclxuICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9IFwidG9wXCI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImlubGluZS1lbmQtYnR0XCI6XHJcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSBcInRvcFwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJpbmxpbmUtZW5kLXR0YlwiOlxyXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gXCJib3R0b21cIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiaW5saW5lLXN0YXJ0LWJ0dFwiOlxyXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gXCJib3R0b21cIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcGxhY2VtZW50ID0gXCJyaWdodFwiO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBsYWNlbWVudDtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdXNlU2hvdWxkVXBkYXRlUG9wcGVyKG9wZW4sIGVsZW1lbnRTaXplKSB7XHJcbiAgICAvLyBTaW5jZSBzY3JvbGwgZXZlbnRzIGFyZSBhc3luY2hyb25vdXMsIGVzcGVjaWFsbHkgb24gaU9TIGRldmljZXMsXHJcbiAgICAvLyBqdXN0IG1hbnVhbGx5IGFkanVzdCB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlciBmb3IgYSBiaXRcclxuICAgIC8vIGFueSB0aW1lIGJhc2ljYWxseSBhbnkgdXNlciBpbnRlcmFjdGlvbiBoYXBwZW5zLlxyXG4gICAgY29uc3QgW3VwZGF0aW5nRm9yQUJpdCwgc2V0VXBkYXRpbmdGb3JBQml0XSA9IHVzZVN0YXRlKDApO1xyXG4gICAgdXNlVGltZW91dCh7IGNhbGxiYWNrOiAoKSA9PiB7IHNldFVwZGF0aW5nRm9yQUJpdCgwKTsgfSwgdGltZW91dDogMTAwLCB0cmlnZ2VySW5kZXg6IHVwZGF0aW5nRm9yQUJpdCB9KTtcclxuICAgIGxldCBvbkludGVyYWN0aW9uID0gdXNlQ2FsbGJhY2soKCkgPT4geyBzZXRVcGRhdGluZ0ZvckFCaXQodSA9PiArK3UpOyB9LCBbY2xvc2VkXSk7XHJcbiAgICBpZiAoIW9wZW4pXHJcbiAgICAgICAgb25JbnRlcmFjdGlvbiA9IG51bGw7XHJcbiAgICB1c2VHbG9iYWxIYW5kbGVyKGRvY3VtZW50LCBcImtleWRvd25cIiwgb25JbnRlcmFjdGlvbiwgeyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiB0cnVlIH0pO1xyXG4gICAgdXNlR2xvYmFsSGFuZGxlcih3aW5kb3csIFwic2Nyb2xsXCIsIG9uSW50ZXJhY3Rpb24sIHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogdHJ1ZSB9KTtcclxuICAgIHVzZUdsb2JhbEhhbmRsZXIod2luZG93LCBcInBvaW50ZXJtb3ZlXCIsIG9uSW50ZXJhY3Rpb24sIHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogdHJ1ZSB9KTtcclxuICAgIHVzZUdsb2JhbEhhbmRsZXIod2luZG93LCBcImNsaWNrXCIsIG9uSW50ZXJhY3Rpb24sIHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogdHJ1ZSB9KTtcclxuICAgIHVzZUdsb2JhbEhhbmRsZXIod2luZG93LCBcInJlc2l6ZVwiLCBvbkludGVyYWN0aW9uLCB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IHRydWUgfSk7XHJcbiAgICB1c2VFZmZlY3QoKCkgPT4geyBvbkludGVyYWN0aW9uPy4oKTsgfSwgT2JqZWN0LnZhbHVlcyhlbGVtZW50U2l6ZSA/PyB7fSkpO1xyXG4gICAgcmV0dXJuIHsgc2hvdWxkVXBkYXRlOiAhIXVwZGF0aW5nRm9yQUJpdCwgb25JbnRlcmFjdGlvbiB9O1xyXG59XHJcbi8qKlxyXG4gKiBIYW5kbGUgdGhlIGUuZy4gem9vbU9yaWdpbkR5bmFtaWMgcHJvcHMsIHRvIHR1cm4gdGhlbSBpbnRvIHpvb21PcmlnaW5JbmxpbmUgb3Igem9vbU9yaWdpbkJsb2NrIGFzIGFwcHJvcHJpYXRlLlxyXG4gKiBUT0RPOiBSaWdodCBub3csIGFsbCAqRHluYW1pYyBwcm9wcyBhcmUganVzdCBoYW5kbGVkIGFzIDEgLSBwcm9wLiBTb21lIHByb2JhYmx5IG5lZWQgdG8gYmUgLTEgKiBwcm9wIHRob3VnaC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmaXhQcm9wcyhsb2dpY2FsRGlyZWN0aW9uLCByZXF1ZXN0ZWRQbGFjZW1lbnQsIHVzZWRQbGFjZW1lbnQsIHByb3BzKSB7XHJcbiAgICBsZXQgbG9naWNhbFNuYWtlID0gcGxhY2VtZW50VG9Mb2dpY2FsKGxvZ2ljYWxEaXJlY3Rpb24sIHVzZWRQbGFjZW1lbnQpO1xyXG4gICAgbGV0IHByb3BBeGlzO1xyXG4gICAgbGV0IHJldmVyc2U7XHJcbiAgICBzd2l0Y2ggKGxvZ2ljYWxTbmFrZSkge1xyXG4gICAgICAgIGNhc2UgXCJibG9jay1zdGFydFwiOlxyXG4gICAgICAgICAgICBwcm9wQXhpcyA9IFwiQmxvY2tcIjtcclxuICAgICAgICAgICAgcmV2ZXJzZSA9IChyZXF1ZXN0ZWRQbGFjZW1lbnQgPT0gXCJibG9jay1lbmRcIik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJibG9jay1lbmRcIjpcclxuICAgICAgICAgICAgcHJvcEF4aXMgPSBcIkJsb2NrXCI7XHJcbiAgICAgICAgICAgIHJldmVyc2UgPSAocmVxdWVzdGVkUGxhY2VtZW50ID09IFwiYmxvY2stc3RhcnRcIik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJpbmxpbmUtc3RhcnRcIjpcclxuICAgICAgICAgICAgcHJvcEF4aXMgPSBcIklubGluZVwiO1xyXG4gICAgICAgICAgICByZXZlcnNlID0gKHJlcXVlc3RlZFBsYWNlbWVudCA9PSBcImlubGluZS1lbmRcIik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJpbmxpbmUtZW5kXCI6XHJcbiAgICAgICAgICAgIHByb3BBeGlzID0gXCJJbmxpbmVcIjtcclxuICAgICAgICAgICAgcmV2ZXJzZSA9IChyZXF1ZXN0ZWRQbGFjZW1lbnQgPT0gXCJpbmxpbmUtc3RhcnRcIik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgbGV0IG5ld1Byb3BzID0geyAuLi5wcm9wcyB9O1xyXG4gICAgZm9yIChsZXQgcHJvcE5hbWUgaW4gcHJvcHMpIHtcclxuICAgICAgICBpZiAocHJvcE5hbWUuZW5kc1dpdGgoXCJEeW5hbWljXCIpICYmIHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgbGV0IG5ld1Byb3BOYW1lID0gYCR7cHJvcE5hbWUuc3Vic3RyKDAsIHByb3BOYW1lLmluZGV4T2YoXCJEeW5hbWljXCIpKX0ke3Byb3BBeGlzfWA7XHJcbiAgICAgICAgICAgIG5ld1Byb3BzW25ld1Byb3BOYW1lXSA9ICghcmV2ZXJzZSA/IG5ld1Byb3BzW3Byb3BOYW1lXSA6IDEgLSBuZXdQcm9wc1twcm9wTmFtZV0pO1xyXG4gICAgICAgICAgICBkZWxldGUgbmV3UHJvcHNbcHJvcE5hbWVdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBuZXdQcm9wcztcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3BwZXItYXBpLmpzLm1hcCIsImltcG9ydCB7IGNsb25lRWxlbWVudCwgY3JlYXRlQ29udGV4dCwgRnJhZ21lbnQsIGggfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZUFyaWFNZW51IH0gZnJvbSBcInByZWFjdC1hcmlhLXdpZGdldHNcIjtcclxuaW1wb3J0IHsgdXNlRWxlbWVudFNpemUsIHVzZU1lcmdlZFByb3BzLCB1c2VSZWZFbGVtZW50LCB1c2VTdGF0ZSwgdXNlVGltZW91dCB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tIFwicHJlYWN0L2hvb2tzXCI7XHJcbmltcG9ydCB7IEJvZHlQb3J0YWwgfSBmcm9tIFwiLi4vcG9ydGFsXCI7XHJcbmltcG9ydCB7IGZpeFByb3BzLCB1c2VQb3BwZXJBcGksIHVzZVNob3VsZFVwZGF0ZVBvcHBlciB9IGZyb20gXCIuL3BvcHBlci1hcGlcIjtcclxuZnVuY3Rpb24gZm9vKHBsYWNlbWVudCwgcHJvcHMpIHtcclxufVxyXG5jb25zdCBPbkNsb3NlQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTtcclxuY29uc3QgVXNlTWVudUl0ZW1Db250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKTtcclxuZXhwb3J0IGZ1bmN0aW9uIE1lbnUoeyBhbmNob3IsIGFuY2hvclRhZywgY2hpbGRyZW4sIHRhZywgVHJhbnNpdGlvbiwgLi4ucmVzdCB9KSB7XHJcbiAgICBjb25zdCBbb3Blbiwgc2V0T3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcbiAgICBjb25zdCBvbkNsb3NlID0gdXNlQ2FsbGJhY2soKCkgPT4gc2V0T3BlbihmYWxzZSksIFtdKTtcclxuICAgIGNvbnN0IG9uT3BlbiA9ICgpID0+IHNldE9wZW4odHJ1ZSk7XHJcbiAgICBjb25zdCB7IHVzZUVsZW1lbnRTaXplUHJvcHMsIGVsZW1lbnRTaXplIH0gPSB1c2VFbGVtZW50U2l6ZSgpO1xyXG4gICAgY29uc3QgeyBzaG91bGRVcGRhdGU6IHVwZGF0aW5nRm9yQUJpdCwgb25JbnRlcmFjdGlvbiB9ID0gdXNlU2hvdWxkVXBkYXRlUG9wcGVyKG9wZW4sIGVsZW1lbnRTaXplKTtcclxuICAgIGNvbnN0IHsgdXNlUG9wcGVyQXJyb3csIHVzZVBvcHBlclBvcHVwLCB1c2VQb3BwZXJTb3VyY2UsIHVzZWRQbGFjZW1lbnQsIGdldExvZ2ljYWxEaXJlY3Rpb24gfSA9IHVzZVBvcHBlckFwaSh7IHBvc2l0aW9uOiBcImJsb2NrLWVuZFwiLCB1cGRhdGluZzogdXBkYXRpbmdGb3JBQml0IH0pO1xyXG4gICAgY29uc3QgeyB1c2VNZW51QnV0dG9uLCB1c2VNZW51SXRlbSwgdXNlTWVudUl0ZW1DaGVja2JveCwgdXNlTWVudVByb3BzLCB1c2VNZW51U3VibWVudUl0ZW0sIGZvY3VzTWVudSB9ID0gdXNlQXJpYU1lbnUoeyBvcGVuLCBvbkNsb3NlLCBvbk9wZW4gfSk7XHJcbiAgICBjb25zdCB7IHVzZU1lbnVCdXR0b25Qcm9wcyB9ID0gdXNlTWVudUJ1dHRvbih7IHRhZzogYW5jaG9yVGFnID8/IFwiYnV0dG9uXCIgfSk7XHJcbiAgICBjb25zdCB7IHVzZVBvcHBlclNvdXJjZVByb3BzIH0gPSB1c2VQb3BwZXJTb3VyY2UoKTtcclxuICAgIGNvbnN0IHsgdXNlUG9wcGVyUG9wdXBQcm9wcyB9ID0gdXNlUG9wcGVyUG9wdXAoeyBvcGVuIH0pO1xyXG4gICAgY29uc3QgeyB1c2VQb3BwZXJBcnJvd1Byb3BzIH0gPSB1c2VQb3BwZXJBcnJvdygpO1xyXG4gICAgLypjb25zdCBbc2VudGluZWxGb2N1c2VkLCBzZXRTZW50aW5lbEZvY3VzZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgdXNlVGltZW91dCh7IGNhbGxiYWNrOiAoKSA9PiB7IGlmIChzZW50aW5lbEZvY3VzZWQpIG9uQ2xvc2UoKTsgc2V0U2VudGluZWxGb2N1c2VkKGZhbHNlKTsgfSwgdGltZW91dDogMTAwMCwgdHJpZ2dlckluZGV4OiBzZW50aW5lbEZvY3VzZWQudG9TdHJpbmcoKSB9KSovXHJcbiAgICBjb25zdCBbZmlyc3RTZW50aW5lbElzQWN0aXZlLCBzZXRGaXJzdFNlbnRpbmVsSXNBY3RpdmVdID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgdXNlVGltZW91dCh7IGNhbGxiYWNrOiAoKSA9PiB7IHNldEZpcnN0U2VudGluZWxJc0FjdGl2ZShvcGVuKTsgfSwgdGltZW91dDogMTAwLCB0cmlnZ2VySW5kZXg6IGAke2ZpcnN0U2VudGluZWxJc0FjdGl2ZX1gIH0pO1xyXG4gICAgY29uc3QgbWVudUNoaWxkcmVuID0gKGgoRnJhZ21lbnQsIG51bGwsXHJcbiAgICAgICAgaChcImRpdlwiLCB7IC4uLnVzZVBvcHBlckFycm93UHJvcHMoe30pIH0pLFxyXG4gICAgICAgIGgoXCJidXR0b25cIiwgeyBjbGFzc05hbWU6IFwidmlzdWFsbHktaGlkZGVuXCIsIG9uRm9jdXM6ICFmaXJzdFNlbnRpbmVsSXNBY3RpdmUgPyAoKSA9PiBmb2N1c01lbnU/LigpIDogKCkgPT4gb25DbG9zZSgpLCBvbkNsaWNrOiBvbkNsb3NlIH0sIFwiQ2xvc2UgbWVudVwiKSxcclxuICAgICAgICBjaGlsZHJlbixcclxuICAgICAgICBoKFwiYnV0dG9uXCIsIHsgY2xhc3NOYW1lOiBcInZpc3VhbGx5LWhpZGRlblwiLCBvbkZvY3VzOiBvbkNsb3NlLCBvbkNsaWNrOiBvbkNsb3NlIH0sIFwiQ2xvc2UgbWVudVwiKSkpO1xyXG4gICAgY29uc3QgbG9naWNhbERpcmVjdGlvbiA9IGdldExvZ2ljYWxEaXJlY3Rpb24oKTtcclxuICAgIGlmIChsb2dpY2FsRGlyZWN0aW9uICYmIHVzZWRQbGFjZW1lbnQpXHJcbiAgICAgICAgcmVzdCA9IGZpeFByb3BzKGxvZ2ljYWxEaXJlY3Rpb24sIFwiYmxvY2stZW5kXCIsIHVzZWRQbGFjZW1lbnQsIHJlc3QpO1xyXG4gICAgcmV0dXJuIChoKEZyYWdtZW50LCBudWxsLFxyXG4gICAgICAgIGgoT25DbG9zZUNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IG9uQ2xvc2UgfSxcclxuICAgICAgICAgICAgaChVc2VNZW51SXRlbUNvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHVzZU1lbnVJdGVtIH0sXHJcbiAgICAgICAgICAgICAgICBjbG9uZUVsZW1lbnQoYW5jaG9yLCB1c2VNZXJnZWRQcm9wcygpKHVzZUVsZW1lbnRTaXplUHJvcHMoeyByZWY6IGFuY2hvci5yZWYsIGNsYXNzOiBgZHJvcGRvd24tdG9nZ2xlICR7b3BlbiA/IFwiYWN0aXZlXCIgOiBcIlwifWAgfSksIHVzZVBvcHBlclNvdXJjZVByb3BzKHVzZU1lbnVCdXR0b25Qcm9wcyhhbmNob3IucHJvcHMpKSkpLFxyXG4gICAgICAgICAgICAgICAgaChCb2R5UG9ydGFsLCBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGgoXCJkaXZcIiwgeyAuLi51c2VQb3BwZXJQb3B1cFByb3BzKHsgY2xhc3M6IFwiZHJvcGRvd24tbWVudS1wb3BwZXJcIiB9KSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoKFRyYW5zaXRpb24sIHsgLi4udXNlTWVudVByb3BzKHJlc3QpLCBvcGVuOiBvcGVuLCBvblRyYW5zaXRpb25VcGRhdGU6IG9uSW50ZXJhY3Rpb24sIGV4aXRWaXNpYmlsaXR5OiBcImhpZGRlblwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoKFwiZGl2XCIsIG51bGwsIGgodGFnLCB7IGNoaWxkcmVuOiBtZW51Q2hpbGRyZW4sIGNsYXNzTmFtZTogXCJkcm9wZG93bi1tZW51XCIgfSkpKSkpKSkpKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gTWVudUl0ZW0oeyBjaGlsZHJlbiwgaW5kZXgsIC4uLnJlc3QgfSkge1xyXG4gICAgY29uc3QgdXNlTWVudUl0ZW0gPSB1c2VDb250ZXh0KFVzZU1lbnVJdGVtQ29udGV4dCk7XHJcbiAgICBjb25zdCBbdGV4dCwgc2V0VGV4dF0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIGNvbnN0IHsgdXNlUmVmRWxlbWVudFByb3BzLCBlbGVtZW50IH0gPSB1c2VSZWZFbGVtZW50KCk7XHJcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGlmIChlbGVtZW50KVxyXG4gICAgICAgICAgICBzZXRUZXh0KGVsZW1lbnQuaW5uZXJUZXh0KTtcclxuICAgIH0sIFtlbGVtZW50XSk7XHJcbiAgICBjb25zdCB7IHVzZU1lbnVJdGVtUHJvcHMgfSA9IHVzZU1lbnVJdGVtKHsgaW5kZXgsIHRleHQgfSk7XHJcbiAgICByZXR1cm4gKGgoXCJsaVwiLCBudWxsLFxyXG4gICAgICAgIGgoXCJidXR0b25cIiwgeyAuLi51c2VNZW51SXRlbVByb3BzKHVzZVJlZkVsZW1lbnRQcm9wcyh1c2VNZXJnZWRQcm9wcygpKHJlc3QsIHsgY2xhc3M6IFwiZHJvcGRvd24taXRlbVwiIH0pKSkgfSwgY2hpbGRyZW4pKSk7XHJcbn1cclxuZnVuY3Rpb24gZmxpcFRyYW5zaXRpb25Db21wb25lbnQoaW5wdXQsIHsgaW5saW5lLCBibG9jayB9KSB7XHJcbiAgICBsZXQgb3V0cHV0ID0geyAuLi5pbnB1dCB9O1xyXG4gICAgZm9yIChjb25zdCBwcm9wTmFtZSBpbiBvdXRwdXQpIHtcclxuICAgICAgICBpZiAob3V0cHV0W2Ake3Byb3BOYW1lfUZsaXBzYF0gPT09IHRydWUpIHtcclxuICAgICAgICAgICAgbGV0IGwgPSBwcm9wTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBpc0lubGluZSA9IGwuaW5jbHVkZXMoXCJpbmxpbmVcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzQmxvY2sgPSBsLmluY2x1ZGVzKFwiYmxvY2tcIik7XHJcbiAgICAgICAgICAgIGlmICgoaXNJbmxpbmUgJiYgaW5saW5lKSB8fCAoaXNCbG9jayAmJiBibG9jaykpIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBvdXRwdXRbYCR7cHJvcE5hbWV9RmxpcHNgXTtcclxuICAgICAgICAgICAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSAtaW5wdXRbcHJvcE5hbWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dHB1dDtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZW51LmpzLm1hcCIsImltcG9ydCB7IGggfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZU1lcmdlZFByb3BzIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLW1lcmdlZC1wcm9wc1wiO1xyXG5pbXBvcnQgeyB1c2VSYW5kb21JZCB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1yYW5kb20taWRcIjtcclxuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2Utc3RhdGVcIjtcclxuaW1wb3J0IHsgdXNlRm9jdXNUcmFwIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnMvdXNlLWZvY3VzLXRyYXBcIjtcclxuaW1wb3J0IHsgQm9keVBvcnRhbCB9IGZyb20gXCIuLi9wb3J0YWxcIjtcclxuaW1wb3J0IHsgRmFkZSB9IGZyb20gXCJwcmVhY3QtdHJhbnNpdGlvbi9mYWRlXCI7XHJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCIuLi9idXR0b25cIjtcclxuaW1wb3J0IHsgdXNlR2xvYmFsSGFuZGxlciB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VBcmlhT2ZmY2FudmFzKHsgb3Blbiwgb25DbG9zZSB9KSB7XHJcbiAgICBjb25zdCBbb2ZmY2FudmFzRGVzY3JpYmVkQnlCb2R5LCBzZXRPZmZjYW52YXNEZXNjcmliZWRCeUJvZHldID0gdXNlU3RhdGUoZmFsc2UpO1xyXG4gICAgY29uc3QgeyBpZDogb2ZmY2FudmFzSWQsIHVzZVJhbmRvbUlkUHJvcHM6IHVzZU9mZmNhbnZhc0lkUHJvcHMsIHVzZVJlZmVyZW5jZWRJZFByb3BzOiB1c2VPZmZjYW52YXNSZWZlcmVuY2luZ0lkUHJvcHMgfSA9IHVzZVJhbmRvbUlkKHsgcHJlZml4OiBcImFyaWEtb2ZmY2FudmFzLVwiIH0pO1xyXG4gICAgY29uc3QgeyBpZDogYm9keUlkLCB1c2VSYW5kb21JZFByb3BzOiB1c2VCb2R5SWRQcm9wcywgdXNlUmVmZXJlbmNlZElkUHJvcHM6IHVzZUJvZHlSZWZlcmVuY2luZ0lkUHJvcHMgfSA9IHVzZVJhbmRvbUlkKHsgcHJlZml4OiBcImFyaWEtb2ZmY2FudmFzLWJvZHktXCIgfSk7XHJcbiAgICBjb25zdCB7IGlkOiB0aXRsZUlkLCB1c2VSYW5kb21JZFByb3BzOiB1c2VUaXRsZUlkUHJvcHMsIHVzZVJlZmVyZW5jZWRJZFByb3BzOiB1c2VUaXRsZVJlZmVyZW5jaW5nSWRQcm9wcyB9ID0gdXNlUmFuZG9tSWQoeyBwcmVmaXg6IFwiYXJpYS1vZmZjYW52YXMtdGl0bGUtXCIgfSk7XHJcbiAgICB1c2VHbG9iYWxIYW5kbGVyKHdpbmRvdywgXCJtb3VzZWRvd25cIiwgKGUpID0+IHtcclxuICAgICAgICBpZiAoIShvZmZjYW52YXNJZCAmJiBlLnRhcmdldCBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob2ZmY2FudmFzSWQpPy5jb250YWlucyhlLnRhcmdldCkpKSB7XHJcbiAgICAgICAgICAgIG9uQ2xvc2UoXCJiYWNrZHJvcFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9LCB7IGNhcHR1cmU6IHRydWUgfSk7XHJcbiAgICBjb25zdCBvbktleURvd24gPSAoZSkgPT4ge1xyXG4gICAgICAgIGlmIChlLmtleSA9PT0gXCJFc2NhcGVcIikge1xyXG4gICAgICAgICAgICBvbkNsb3NlKFwiZXNjYXBlXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCB1c2VPZmZjYW52YXNCYWNrZHJvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvL2NvbnN0IG9uQ2xpY2s6IGguSlNYLkV2ZW50SGFuZGxlcjxoLkpTWC5UYXJnZXRlZEV2ZW50PEJhY2tkcm9wRWxlbWVudD4+ID0gZSA9PiBvbkNsb3NlKFwiZXNjYXBlXCIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIHVzZU9mZmNhbnZhc0JhY2tkcm9wUHJvcHMocHJvcHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVzZU1lcmdlZFByb3BzKCkoe30sIHByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgdXNlT2ZmY2FudmFzQmFja2Ryb3BQcm9wcyB9O1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHVzZU9mZmNhbnZhc1Byb3BzID0gZnVuY3Rpb24gKHsgXCJhcmlhLW1vZGFsXCI6IGFyaWFNb2RhbCwgcm9sZSwgLi4ucDAgfSkge1xyXG4gICAgICAgIGNvbnN0IHsgdXNlRm9jdXNUcmFwUHJvcHMgfSA9IHVzZUZvY3VzVHJhcCh7IHRyYXBBY3RpdmU6IG9wZW4gfSk7XHJcbiAgICAgICAgY29uc3QgcDEgPSB1c2VUaXRsZVJlZmVyZW5jaW5nSWRQcm9wcyhcImFyaWEtbGFiZWxsZWRieVwiKShwMCk7XHJcbiAgICAgICAgY29uc3QgcDIgPSB1c2VPZmZjYW52YXNJZFByb3BzKHAxKTtcclxuICAgICAgICBjb25zdCBwRmluYWwgPSB1c2VCb2R5UmVmZXJlbmNpbmdJZFByb3BzKFwiYXJpYS1kZXNjcmliZWRieVwiKShwMik7XHJcbiAgICAgICAgcmV0dXJuIHVzZUZvY3VzVHJhcFByb3BzKHVzZU1lcmdlZFByb3BzKCkoeyByb2xlOiBcIm9mZmNhbnZhc1wiLCBvbktleURvd24gfSwgb2ZmY2FudmFzRGVzY3JpYmVkQnlCb2R5ID8gcEZpbmFsIDogcDIpKTtcclxuICAgIH07XHJcbiAgICBmdW5jdGlvbiB1c2VPZmZjYW52YXNUaXRsZSgpIHtcclxuICAgICAgICBjb25zdCB1c2VPZmZjYW52YXNUaXRsZVByb3BzID0gZnVuY3Rpb24gKHByb3BzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VUaXRsZUlkUHJvcHMocHJvcHMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHsgdXNlT2ZmY2FudmFzVGl0bGVQcm9wcyB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXNlT2ZmY2FudmFzQm9keSh7IGRlc2NyaXB0aXZlIH0pIHtcclxuICAgICAgICBzZXRPZmZjYW52YXNEZXNjcmliZWRCeUJvZHkoZGVzY3JpcHRpdmUpO1xyXG4gICAgICAgIGNvbnN0IHVzZU9mZmNhbnZhc0JvZHlQcm9wcyA9IGZ1bmN0aW9uIChwcm9wcykge1xyXG4gICAgICAgICAgICByZXR1cm4gdXNlQm9keUlkUHJvcHMocHJvcHMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHsgdXNlT2ZmY2FudmFzQm9keVByb3BzIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHVzZU9mZmNhbnZhc1Byb3BzLFxyXG4gICAgICAgIHVzZU9mZmNhbnZhc1RpdGxlLFxyXG4gICAgICAgIHVzZU9mZmNhbnZhc0JvZHksXHJcbiAgICAgICAgdXNlT2ZmY2FudmFzQmFja2Ryb3BcclxuICAgIH07XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIE9mZmNhbnZhcyh7IG9uQ2xvc2UsIG9wZW4sIGRlc2NyaXB0aXZlLCB0aXRsZSwgZm9vdGVyLCBUcmFuc2l0aW9uLCBjaGlsZHJlbiwgLi4ucmVzdCB9KSB7XHJcbiAgICBjb25zdCB7IHVzZU9mZmNhbnZhc0JhY2tkcm9wLCB1c2VPZmZjYW52YXNCb2R5LCB1c2VPZmZjYW52YXNQcm9wcywgdXNlT2ZmY2FudmFzVGl0bGUgfSA9IHVzZUFyaWFPZmZjYW52YXMoeyBvcGVuLCBvbkNsb3NlIH0pO1xyXG4gICAgY29uc3QgeyB1c2VPZmZjYW52YXNCYWNrZHJvcFByb3BzIH0gPSB1c2VPZmZjYW52YXNCYWNrZHJvcCgpO1xyXG4gICAgY29uc3QgeyB1c2VPZmZjYW52YXNCb2R5UHJvcHMsIH0gPSB1c2VPZmZjYW52YXNCb2R5KHsgZGVzY3JpcHRpdmUgfSk7XHJcbiAgICBjb25zdCB7IHVzZU9mZmNhbnZhc1RpdGxlUHJvcHMgfSA9IHVzZU9mZmNhbnZhc1RpdGxlKCk7XHJcbiAgICByZXR1cm4gKGgoQm9keVBvcnRhbCwgbnVsbCxcclxuICAgICAgICBoKFwiZGl2XCIsIG51bGwsXHJcbiAgICAgICAgICAgIGgoRmFkZSwgeyBvcGVuOiBvcGVuIH0sXHJcbiAgICAgICAgICAgICAgICBoKFwiZGl2XCIsIHsgLi4udXNlT2ZmY2FudmFzQmFja2Ryb3BQcm9wcyh7IGNsYXNzOiBcIm9mZmNhbnZhcy1iYWNrZHJvcCBiYWNrZHJvcC1maWx0ZXItdHJhbnNpdGlvblwiIH0pIH0pKSxcclxuICAgICAgICAgICAgaChUcmFuc2l0aW9uLCB7IC4uLnsgb3BlbiwgLi4ucmVzdCB9IH0sXHJcbiAgICAgICAgICAgICAgICBoKFwiZGl2XCIsIHsgLi4udXNlT2ZmY2FudmFzUHJvcHMoeyBjbGFzczogXCJvZmZjYW52YXMgb2ZmY2FudmFzLXN0YXJ0XCIsIHRhYmluZGV4OiAtMSB9KSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGgoXCJkaXZcIiwgeyBjbGFzczogXCJvZmZjYW52YXMtaGVhZGVyXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaChcImg1XCIsIHsgLi4udXNlT2ZmY2FudmFzVGl0bGVQcm9wcyh7IGNsYXNzOiBcIm9mZmNhbnZhcy10aXRsZVwiIH0pIH0sIFwiT2ZmY2FudmFzXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoKEJ1dHRvbiwgeyB0YWc6IFwiYnV0dG9uXCIsIGNsYXNzOiBcImJ0bi1jbG9zZSB0ZXh0LXJlc2V0XCIsIFwiYXJpYS1sYWJlbFwiOiBcIkNsb3NlXCIsIG9uQ2xpY2s6ICgpID0+IG9uQ2xvc2UoXCJlc2NhcGVcIikgfSkpLFxyXG4gICAgICAgICAgICAgICAgICAgIGgoXCJkaXZcIiwgeyAuLi51c2VPZmZjYW52YXNCb2R5UHJvcHMoeyBjbGFzczogXCJvZmZjYW52YXMtYm9keVwiIH0pIH0sIFwiQ29udGVudCBmb3IgdGhlIG9mZmNhbnZhcyBnb2VzIGhlcmUuWW91IGNhbiBwbGFjZSBqdXN0IGFib3V0IGFueSBCb290c3RyYXAgY29tcG9uZW50IG9yIGN1c3RvbSBlbGVtZW50cyBoZXJlLlwiKSkpKSkpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9mZmNhbnZhcy5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VDYWxsYmFjayB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuZXhwb3J0IGNvbnN0IEluSW5wdXRHcm91cENvbnRleHQgPSBjcmVhdGVDb250ZXh0KGZhbHNlKTtcclxuZXhwb3J0IGZ1bmN0aW9uIHVzZUlucHV0Q2FwdHVyZXModHlwZSkge1xyXG4gICAgY29uc3QgY2FwdHVyZSA9IHVzZUNhbGxiYWNrKChldmVudCkgPT4ge1xyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwidGV4dFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWU7XHJcbiAgICAgICAgICAgIGNhc2UgXCJudW1iZXJcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlQXNOdW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgW3R5cGVdKTtcclxuICAgIGNvbnN0IHVuY2FwdHVyZSA9IHVzZUNhbGxiYWNrKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwidGV4dFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICBjYXNlIFwibnVtYmVyXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7dmFsdWV9YDtcclxuICAgICAgICB9XHJcbiAgICB9LCBbdHlwZV0pO1xyXG4gICAgcmV0dXJuIHsgY2FwdHVyZSwgdW5jYXB0dXJlIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvcHMuanMubWFwIiwiaW1wb3J0IGNsc3ggZnJvbSBcImNsc3hcIjtcclxuaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgRnJhZ21lbnQsIGggfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZUFyaWFDaGVja2JveCwgdXNlQ2hlY2tib3hHcm91cCB9IGZyb20gXCJwcmVhY3QtYXJpYS13aWRnZXRzXCI7XHJcbmltcG9ydCB7IEV2ZW50RGV0YWlsIH0gZnJvbSBcInByZWFjdC1hcmlhLXdpZGdldHMvcHJvcHNcIjtcclxuaW1wb3J0IHsgdXNlQXN5bmNIYW5kbGVyLCB1c2VNZXJnZWRQcm9wcyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VDb250ZXh0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyBQcm9ncmVzc0NpcmN1bGFyIH0gZnJvbSBcIi4uL3Byb2dyZXNzL2xpbmVhclwiO1xyXG5pbXBvcnQgeyBJbklucHV0R3JvdXBDb250ZXh0IH0gZnJvbSBcIi4vcHJvcHNcIjtcclxuZnVuY3Rpb24gY2FwdHVyZShlKSB7XHJcbiAgICByZXR1cm4gZVtFdmVudERldGFpbF0uY2hlY2tlZDtcclxufVxyXG4vKipcclxuICogVE9ETzogV2hlbiBpbnNpZGUgYW4gSW5wdXRHcm91cCwgQ2hlY2tib3hlcyBkb24ndCBmb3J3YXJkIGFueSBwcm9wZXJ0aWVzIG9yIHJlZnMgYmVjYXVzZSB0aGVyZSdzIG5vIG9uZSBET00gZWxlbWVudCB0byBhdHRhY2ggdG8uXHJcbiAqXHJcbiAqIFByb2JhYmx5IG5lZWQgc2VwYXJhdGUgYGlucHV0UmVmYCAmIGBsYWJlbFJlZmAgcHJvcGVydGllcyBmb3IgdGhhdCxcclxuICogYnV0IGdpdmVuIHRoZXJlJ3MgYWxzbyBubyBlYXN5IHdheSB0byBmb3J3YXJkIHByb3BzIHRvIGp1c3QgdGhlbSBhIHNvbHV0aW9uIGxpa2UgdGhhdCBmZWVscyBpbmNvbXBsZXRlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIENoZWNrYm94KHsgY2hlY2tlZCwgZGlzYWJsZWQsIG9uSW5wdXQ6IG9uSW5wdXRBc3luYywgbGFiZWwsIGxhYmVsUG9zaXRpb24sIC4uLnJlc3QgfSwgcmVmKSB7XHJcbiAgICBsYWJlbFBvc2l0aW9uID8/PSBcImVuZFwiO1xyXG4gICAgY29uc3QgeyBnZXRTeW5jSGFuZGxlciwgcGVuZGluZywgaGFzRXJyb3IsIHNldHRsZUNvdW50IH0gPSB1c2VBc3luY0hhbmRsZXIoKSh7IGNhcHR1cmUgfSk7XHJcbiAgICBjb25zdCBvbklucHV0ID0gZ2V0U3luY0hhbmRsZXIob25JbnB1dEFzeW5jKTtcclxuICAgIGNvbnN0IHsgdXNlQ2hlY2tib3hJbnB1dEVsZW1lbnQsIHVzZUNoZWNrYm94TGFiZWxFbGVtZW50IH0gPSB1c2VBcmlhQ2hlY2tib3goeyBjaGVja2VkOiBjaGVja2VkID09PSBcImluZGV0ZXJtaW5hdGVcIiA/IFwibWl4ZWRcIiA6IGNoZWNrZWQsIGRpc2FibGVkOiBkaXNhYmxlZCA/PyBmYWxzZSwgb25JbnB1dCwgbGFiZWxQb3NpdGlvbjogXCJzZXBhcmF0ZVwiIH0pO1xyXG4gICAgY29uc3QgeyB1c2VDaGVja2JveElucHV0RWxlbWVudFByb3BzIH0gPSB1c2VDaGVja2JveElucHV0RWxlbWVudCh7IHRhZzogXCJpbnB1dFwiIH0pO1xyXG4gICAgY29uc3QgeyB1c2VDaGVja2JveExhYmVsRWxlbWVudFByb3BzIH0gPSB1c2VDaGVja2JveExhYmVsRWxlbWVudCh7IHRhZzogXCJsYWJlbFwiIH0pO1xyXG4gICAgY29uc3QgaW5JbnB1dEdyb3VwID0gdXNlQ29udGV4dChJbklucHV0R3JvdXBDb250ZXh0KTtcclxuICAgIGxldCBzdHJpbmdMYWJlbCA9IGAke2xhYmVsfWA7XHJcbiAgICBpZiAobGFiZWwgIT0gbnVsbCAmJiBsYWJlbFBvc2l0aW9uID09PSBcImhpZGRlblwiICYmICFbXCJzdHJpbmdcIiwgXCJudW1iZXJcIiwgXCJib29sZWFuXCJdLmluY2x1ZGVzKHR5cGVvZiBsYWJlbCkpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBIaWRkZW4gbGFiZWxzIHJlcXVpcmUgYSBzdHJpbmctYmFzZWQgbGFiZWwgZm9yIHRoZSBhcmlhLWxhYmVsIGF0dHJpYnV0ZS5gKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGFzeW5jU3RhdGUgPSAoaGFzRXJyb3IgPyBcImZhaWxlZFwiIDogcGVuZGluZyA/IFwicGVuZGluZ1wiIDogc2V0dGxlQ291bnQgPyBcInN1Y2NlZWRlZFwiIDogbnVsbCk7XHJcbiAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBoKE9wdGlvbmFsbHlJbnB1dEdyb3VwLCBudWxsLFxyXG4gICAgICAgIGgoUHJvZ3Jlc3NDaXJjdWxhciwgeyBjaGlsZHJlblBvc2l0aW9uOiBcImFmdGVyXCIsIGNvbG9yRmlsbDogXCJmb3JlZ3JvdW5kLW9ubHlcIiwgbW9kZTogYXN5bmNTdGF0ZSwgY29sb3I6IFwiaW5mb1wiIH0sXHJcbiAgICAgICAgICAgIGgoXCJpbnB1dFwiLCB7IC4uLnVzZUNoZWNrYm94SW5wdXRFbGVtZW50UHJvcHMoeyB0eXBlOiBcImNoZWNrYm94XCIsIGNsYXNzTmFtZTogY2xzeChcImZvcm0tY2hlY2staW5wdXRcIiwgaW5JbnB1dEdyb3VwICYmIFwibXQtMFwiKSwgXCJhcmlhLWxhYmVsXCI6IGxhYmVsUG9zaXRpb24gPT09IFwiaGlkZGVuXCIgPyBzdHJpbmdMYWJlbCA6IHVuZGVmaW5lZCB9KSB9KSkpO1xyXG4gICAgY29uc3QgbGFiZWxFbGVtZW50ID0gaChGcmFnbWVudCwgbnVsbCwgbGFiZWwgIT0gbnVsbCAmJiBoKE9wdGlvbmFsbHlJbnB1dEdyb3VwLCBudWxsLFxyXG4gICAgICAgIGgoXCJsYWJlbFwiLCB7IC4uLnVzZUNoZWNrYm94TGFiZWxFbGVtZW50UHJvcHMoeyBjbGFzc05hbWU6IFwiZm9ybS1jaGVjay1sYWJlbFwiLCBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiIH0pIH0sIGxhYmVsKSkpO1xyXG4gICAgY29uc3QgcmV0ID0gKGgoRnJhZ21lbnQsIG51bGwsXHJcbiAgICAgICAgbGFiZWxQb3NpdGlvbiA9PSBcInN0YXJ0XCIgJiYgbGFiZWxFbGVtZW50LFxyXG4gICAgICAgIGlucHV0RWxlbWVudCxcclxuICAgICAgICBsYWJlbFBvc2l0aW9uID09IFwiZW5kXCIgJiYgbGFiZWxFbGVtZW50KSk7XHJcbiAgICBpZiAoIWluSW5wdXRHcm91cClcclxuICAgICAgICByZXR1cm4gaChcImRpdlwiLCB7IC4uLnVzZU1lcmdlZFByb3BzKCkocmVzdCwgeyByZWYsIGNsYXNzOiBcImZvcm0tY2hlY2tcIiB9KSB9LCByZXQpO1xyXG4gICAgcmV0dXJuIHJldDtcclxufVxyXG5jb25zdCBDaGVja2JveEdyb3VwUGFyZW50Q2hlY2tib3hQcm9wc0NvbnRleHQgPSBjcmVhdGVDb250ZXh0KG51bGwpO1xyXG5jb25zdCBDaGVja2JveEdyb3VwQ2hpbGRDb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsKTtcclxuZXhwb3J0IGZ1bmN0aW9uIENoZWNrYm94R3JvdXAoeyBjaGlsZHJlbiB9KSB7XHJcbiAgICBjb25zdCB7IHBlcmNlbnRDaGVja2VkLCBzZWxmSXNDaGVja2VkLCBvbkNoZWNrYm94R3JvdXBJbnB1dCwgdXNlQ2hlY2tib3hHcm91cENoZWNrYm94UHJvcHMsIHVzZUNoZWNrYm94R3JvdXBDaGlsZCB9ID0gdXNlQ2hlY2tib3hHcm91cCh7fSk7XHJcbiAgICByZXR1cm4gKGgoRnJhZ21lbnQsIG51bGwsXHJcbiAgICAgICAgaChDaGVja2JveEdyb3VwUGFyZW50Q2hlY2tib3hQcm9wc0NvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHVzZUNoZWNrYm94R3JvdXBDaGVja2JveFByb3BzIH0sXHJcbiAgICAgICAgICAgIGgoQ2hlY2tib3gsIHsgY2xhc3NOYW1lOiBcImNoZWNrYm94LWdyb3VwLXBhcmVudFwiLCBjaGVja2VkOiBzZWxmSXNDaGVja2VkLCBvbklucHV0OiB1c2VDYWxsYmFjaygoY2hlY2tlZCwgZSkgPT4geyBvbkNoZWNrYm94R3JvdXBJbnB1dChlKTsgfSwgW29uQ2hlY2tib3hHcm91cElucHV0XSkgfSkpLFxyXG4gICAgICAgIGgoQ2hlY2tib3hHcm91cENoaWxkQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogdXNlQ2hlY2tib3hHcm91cENoaWxkIH0sIGNoaWxkcmVuKSkpO1xyXG59XHJcbmZ1bmN0aW9uIE9wdGlvbmFsbHlJbnB1dEdyb3VwKHsgY2hpbGRyZW4gfSkge1xyXG4gICAgY29uc3QgaW5JbnB1dEdyb3VwID0gdXNlQ29udGV4dChJbklucHV0R3JvdXBDb250ZXh0KTtcclxuICAgIGlmICghaW5JbnB1dEdyb3VwKVxyXG4gICAgICAgIHJldHVybiBoKEZyYWdtZW50LCBudWxsLCBjaGlsZHJlbik7XHJcbiAgICByZXR1cm4gaChcImRpdlwiLCB7IGNsYXNzOiBcImlucHV0LWdyb3VwLXRleHRcIiB9LCBjaGlsZHJlbik7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5wdXQtY2hlY2suanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlQ29udGV4dCwgRnJhZ21lbnQsIGggfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IEV2ZW50RGV0YWlsIH0gZnJvbSBcInByZWFjdC1hcmlhLXdpZGdldHMvcHJvcHNcIjtcclxuaW1wb3J0IHsgdXNlR2VuZXJpY0xhYmVsIH0gZnJvbSBcInByZWFjdC1hcmlhLXdpZGdldHMvdXNlLWxhYmVsXCI7XHJcbmltcG9ydCB7IHVzZUFyaWFSYWRpb0dyb3VwIH0gZnJvbSBcInByZWFjdC1hcmlhLXdpZGdldHMvdXNlLXJhZGlvLWdyb3VwXCI7XHJcbmltcG9ydCB7IHVzZUFzeW5jSGFuZGxlciwgdXNlU3RhdGUgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVyc1wiO1xyXG5pbXBvcnQgeyB1c2VDaGlsZEZsYWcgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVycy91c2UtY2hpbGQtbWFuYWdlclwiO1xyXG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyBQcm9ncmVzc0NpcmN1bGFyIH0gZnJvbSBcIi4uL3Byb2dyZXNzXCI7XHJcbmltcG9ydCB7IEluSW5wdXRHcm91cENvbnRleHQgfSBmcm9tIFwiLi9wcm9wc1wiO1xyXG5jb25zdCBSYWRpb0dyb3VwQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCk7XHJcbmV4cG9ydCBmdW5jdGlvbiBSYWRpb0dyb3VwKHsgY2hpbGRyZW4sIG5hbWUsIHNlbGVjdGVkVmFsdWUsIGxhYmVsLCBsYWJlbFBvc2l0aW9uLCBvbklucHV0OiBvbklucHV0QXN5bmMgfSkge1xyXG4gICAgY29uc3QgeyBnZXRTeW5jSGFuZGxlciwgcGVuZGluZywgaGFzRXJyb3IsIHNldHRsZUNvdW50LCBjdXJyZW50Q2FwdHVyZSB9ID0gdXNlQXN5bmNIYW5kbGVyKCkoeyBjYXB0dXJlOiAoZSkgPT4gZVtFdmVudERldGFpbF0uc2VsZWN0ZWRWYWx1ZSB9KTtcclxuICAgIGNvbnN0IG9uSW5wdXQgPSBnZXRTeW5jSGFuZGxlcihvbklucHV0QXN5bmMpO1xyXG4gICAgY29uc3QgeyB1c2VSYWRpbywgdXNlUmFkaW9Hcm91cFByb3BzLCBtYW5hZ2VkQ2hpbGRyZW4sIGdldEluZGV4IH0gPSB1c2VBcmlhUmFkaW9Hcm91cCh7IG5hbWUsIHNlbGVjdGVkVmFsdWU6IGN1cnJlbnRDYXB0dXJlID8/IHNlbGVjdGVkVmFsdWUsIG9uSW5wdXQ6IG9uSW5wdXQgfSk7XHJcbiAgICBsZXQgc3RyaW5nTGFiZWwgPSB1bmRlZmluZWQ7XHJcbiAgICBpZiAobGFiZWxQb3NpdGlvbiA9PT0gXCJoaWRkZW5cIikge1xyXG4gICAgICAgIGlmIChsYWJlbCAhPSBudWxsICYmICFbXCJzdHJpbmdcIiwgXCJudW1iZXJcIiwgXCJib29sZWFuXCJdLmluY2x1ZGVzKHR5cGVvZiBsYWJlbCkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgSGlkZGVuIGxhYmVscyByZXF1aXJlIGEgc3RyaW5nLWJhc2VkIGxhYmVsIGZvciB0aGUgYXJpYS1sYWJlbCBhdHRyaWJ1dGUuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzdHJpbmdMYWJlbCA9IGAke2xhYmVsfWA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3Qgc2VsZWN0ZWRJbmRleCA9IGdldEluZGV4KGN1cnJlbnRDYXB0dXJlID8/IHNlbGVjdGVkVmFsdWUpO1xyXG4gICAgLy9jb25zdCBjYXB0dXJlZEluZGV4ID0gZ2V0SW5kZXgoY3VycmVudENhcHR1cmUhKTtcclxuICAgIHVzZUNoaWxkRmxhZyhzZWxlY3RlZEluZGV4LCBtYW5hZ2VkQ2hpbGRyZW4ubGVuZ3RoLCAoaW5kZXgsIGlzU2VsZWN0ZWQpID0+IG1hbmFnZWRDaGlsZHJlbltpbmRleF0uc2V0QXN5bmNTdGF0ZShpc1NlbGVjdGVkID8gKGhhc0Vycm9yID8gXCJmYWlsZWRcIiA6IHBlbmRpbmcgPyBcInBlbmRpbmdcIiA6IFwic3VjY2VlZGVkXCIpIDogbnVsbCkpO1xyXG4gICAgLy8gdXNlQ2hpbGRGbGFnKHBlbmRpbmcgPyBjYXB0dXJlZEluZGV4IDogbnVsbCwgbWFuYWdlZENoaWxkcmVuLmxlbmd0aCwgdXNlQ2FsbGJhY2soKGluZGV4LCBpc0NhcHR1cmVkKSA9PiBtYW5hZ2VkQ2hpbGRyZW5baW5kZXhdLnNldFBlbmRpbmcoaXNDYXB0dXJlZD8gXCJpblwiIDogZmFsc2UpLCBbXSkpO1xyXG4gICAgY29uc3QgeyB1c2VHZW5lcmljTGFiZWxMYWJlbCwgdXNlR2VuZXJpY0xhYmVsSW5wdXQgfSA9IHVzZUdlbmVyaWNMYWJlbCh7IGlucHV0UHJlZml4OiBcImFyaWEtcmFkaW9ncm91cFwiLCBsYWJlbFByZWZpeDogXCJhcmlhLXJhZGlvZ3JvdXAtbGFiZWxcIiwgYmFja3VwVGV4dDogc3RyaW5nTGFiZWwgfSk7XHJcbiAgICBjb25zdCB7IHVzZUdlbmVyaWNMYWJlbElucHV0UHJvcHMgfSA9IHVzZUdlbmVyaWNMYWJlbElucHV0KCk7XHJcbiAgICBjb25zdCB7IHVzZUdlbmVyaWNMYWJlbExhYmVsUHJvcHMgfSA9IHVzZUdlbmVyaWNMYWJlbExhYmVsKCk7XHJcbiAgICBsZXQgbGFiZWxKc3ggPSBoKFwiZGl2XCIsIHsgLi4udXNlR2VuZXJpY0xhYmVsTGFiZWxQcm9wcyh7fSkgfSk7XHJcbiAgICBsZXQgZ3JvdXBKc3ggPSAoaChcImRpdlwiLCB7IC4uLnVzZUdlbmVyaWNMYWJlbElucHV0UHJvcHModXNlUmFkaW9Hcm91cFByb3BzKHsgXCJhcmlhLWxhYmVsXCI6IGxhYmVsUG9zaXRpb24gPT09IFwiaGlkZGVuXCIgPyBzdHJpbmdMYWJlbCA6IHVuZGVmaW5lZCB9KSkgfSwgY2hpbGRyZW4pKTtcclxuICAgIHJldHVybiAoaChSYWRpb0dyb3VwQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogdXNlUmFkaW8gfSxcclxuICAgICAgICBsYWJlbFBvc2l0aW9uID09IFwic3RhcnRcIiAmJiBsYWJlbEpzeCxcclxuICAgICAgICBncm91cEpzeCxcclxuICAgICAgICBsYWJlbFBvc2l0aW9uID09IFwiZW5kXCIgJiYgbGFiZWxKc3gpKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gUmFkaW8oeyBkaXNhYmxlZCwgbGFiZWwsIGluZGV4LCB2YWx1ZSwgbGFiZWxQb3NpdGlvbiB9KSB7XHJcbiAgICBjb25zdCB1c2VBcmlhUmFkaW8gPSB1c2VDb250ZXh0KFJhZGlvR3JvdXBDb250ZXh0KTtcclxuICAgIGxhYmVsUG9zaXRpb24gPz89IFwiZW5kXCI7XHJcbiAgICBjb25zdCB0ZXh0ID0gbnVsbDtcclxuICAgIGNvbnN0IFthc3luY1N0YXRlLCBzZXRBc3luY1N0YXRlXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gICAgY29uc3QgeyB1c2VSYWRpb0lucHV0LCB1c2VSYWRpb0xhYmVsIH0gPSB1c2VBcmlhUmFkaW8oeyBkaXNhYmxlZDogZGlzYWJsZWQgPz8gZmFsc2UsIGxhYmVsUG9zaXRpb246IFwic2VwYXJhdGVcIiwgaW5kZXgsIHRleHQsIHZhbHVlLCBzZXRBc3luY1N0YXRlIH0pO1xyXG4gICAgY29uc3QgeyB1c2VSYWRpb0lucHV0UHJvcHMgfSA9IHVzZVJhZGlvSW5wdXQoeyB0YWc6IFwiaW5wdXRcIiB9KTtcclxuICAgIGNvbnN0IHsgdXNlUmFkaW9MYWJlbFByb3BzIH0gPSB1c2VSYWRpb0xhYmVsKHsgdGFnOiBcImxhYmVsXCIgfSk7XHJcbiAgICBjb25zdCBpbklucHV0R3JvdXAgPSB1c2VDb250ZXh0KEluSW5wdXRHcm91cENvbnRleHQpO1xyXG4gICAgbGFiZWwgPz89IHZhbHVlO1xyXG4gICAgbGV0IHN0cmluZ0xhYmVsID0gYCR7bGFiZWx9YDtcclxuICAgIGlmIChsYWJlbCAhPSBudWxsICYmIGxhYmVsUG9zaXRpb24gPT09IFwiaGlkZGVuXCIgJiYgIVtcInN0cmluZ1wiLCBcIm51bWJlclwiLCBcImJvb2xlYW5cIl0uaW5jbHVkZXModHlwZW9mIGxhYmVsKSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEhpZGRlbiBsYWJlbHMgcmVxdWlyZSBhIHN0cmluZy1iYXNlZCBsYWJlbCBmb3IgdGhlIGFyaWEtbGFiZWwgYXR0cmlidXRlLmApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaW5wdXRFbGVtZW50ID0gaChPcHRpb25hbGx5SW5wdXRHcm91cCwgbnVsbCxcclxuICAgICAgICBoKFByb2dyZXNzQ2lyY3VsYXIsIHsgY2hpbGRyZW5Qb3NpdGlvbjogXCJhZnRlclwiLCBjb2xvckZpbGw6IFwiZm9yZWdyb3VuZC1vbmx5XCIsIG1vZGU6IGFzeW5jU3RhdGUsIGNvbG9yOiBcImluZm9cIiB9LFxyXG4gICAgICAgICAgICBoKFwiaW5wdXRcIiwgeyAuLi51c2VSYWRpb0lucHV0UHJvcHMoeyB0eXBlOiBcInJhZGlvXCIsIGNsYXNzTmFtZTogXCJmb3JtLWNoZWNrLWlucHV0XCIsIFwiYXJpYS1sYWJlbFwiOiBsYWJlbFBvc2l0aW9uID09PSBcImhpZGRlblwiID8gc3RyaW5nTGFiZWwgOiB1bmRlZmluZWQgfSkgfSkpKTtcclxuICAgIGNvbnN0IGxhYmVsRWxlbWVudCA9IGgoRnJhZ21lbnQsIG51bGwsIGxhYmVsICE9IG51bGwgJiYgaChPcHRpb25hbGx5SW5wdXRHcm91cCwgbnVsbCxcclxuICAgICAgICBoKFwibGFiZWxcIiwgeyAuLi51c2VSYWRpb0xhYmVsUHJvcHMoeyBjbGFzc05hbWU6IFwiZm9ybS1jaGVjay1sYWJlbFwiLCBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiIH0pIH0sIGxhYmVsKSkpO1xyXG4gICAgY29uc3QgcmV0ID0gKGgoRnJhZ21lbnQsIG51bGwsXHJcbiAgICAgICAgbGFiZWxQb3NpdGlvbiA9PSBcInN0YXJ0XCIgJiYgbGFiZWxFbGVtZW50LFxyXG4gICAgICAgIGlucHV0RWxlbWVudCxcclxuICAgICAgICBsYWJlbFBvc2l0aW9uID09IFwiZW5kXCIgJiYgbGFiZWxFbGVtZW50KSk7XHJcbiAgICBpZiAoIWluSW5wdXRHcm91cClcclxuICAgICAgICByZXR1cm4gaChcImRpdlwiLCB7IGNsYXNzOiBcImZvcm0tY2hlY2tcIiB9LCByZXQpO1xyXG4gICAgcmV0dXJuIHJldDtcclxufVxyXG5mdW5jdGlvbiBPcHRpb25hbGx5SW5wdXRHcm91cCh7IGNoaWxkcmVuIH0pIHtcclxuICAgIGNvbnN0IGluSW5wdXRHcm91cCA9IHVzZUNvbnRleHQoSW5JbnB1dEdyb3VwQ29udGV4dCk7XHJcbiAgICBpZiAoIWluSW5wdXRHcm91cClcclxuICAgICAgICByZXR1cm4gaChGcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4pO1xyXG4gICAgcmV0dXJuIGgoXCJkaXZcIiwgeyBjbGFzczogXCJpbnB1dC1ncm91cC10ZXh0XCIgfSwgY2hpbGRyZW4pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlucHV0LXJhZGlvLmpzLm1hcCIsImltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCIuLi9idXR0b24vYnV0dG9uXCI7XHJcbmltcG9ydCB7IEJvZHlQb3J0YWwgfSBmcm9tIFwiLi4vcG9ydGFsXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIEZyYWdtZW50LCBoLCBjbG9uZUVsZW1lbnQgfSBmcm9tIFwicHJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInByZWFjdC1wcm9wLWhlbHBlcnNcIjtcclxuaW1wb3J0IHsgZ2VuZXJhdGVSYW5kb21JZCB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzL3VzZS1yYW5kb20taWRcIjtcclxuaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZUNvbnRleHQsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gXCJwcmVhY3QvaG9va3NcIjtcclxuaW1wb3J0IHsgU2xpZGVGYWRlIH0gZnJvbSBcInByZWFjdC10cmFuc2l0aW9uXCI7XHJcbmltcG9ydCB7IHVzZVRvYXN0cyB9IGZyb20gXCJwcmVhY3QtYXJpYS13aWRnZXRzXCI7XHJcbmNvbnN0IFB1c2hUb2FzdENvbnRleHQgPSBjcmVhdGVDb250ZXh0KG51bGwpO1xyXG5jb25zdCBEZWZhdWx0VG9hc3RUaW1lb3V0ID0gY3JlYXRlQ29udGV4dCg1MDAwKTtcclxuZXhwb3J0IGZ1bmN0aW9uIFRvYXN0c1Byb3ZpZGVyKHsgY2hpbGRyZW4sIGRlZmF1bHRUaW1lb3V0IH0pIHtcclxuICAgIGNvbnN0IFtwdXNoVG9hc3QsIHNldFB1c2hUb2FzdF0gPSB1c2VTdGF0ZShudWxsKTtcclxuICAgIHJldHVybiAoaChGcmFnbWVudCwgbnVsbCxcclxuICAgICAgICBoKERlZmF1bHRUb2FzdFRpbWVvdXQuUHJvdmlkZXIsIHsgdmFsdWU6IGRlZmF1bHRUaW1lb3V0ID8/IDUwMDAgfSxcclxuICAgICAgICAgICAgaChUb2FzdHNQcm92aWRlckhlbHBlciwgeyBzZXRQdXNoVG9hc3Q6IHNldFB1c2hUb2FzdCB9KSxcclxuICAgICAgICAgICAgcHVzaFRvYXN0ICYmIGgoUHVzaFRvYXN0Q29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogcHVzaFRvYXN0IH0sIGNoaWxkcmVuKSkpKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdXNlUHVzaFRvYXN0KCkge1xyXG4gICAgY29uc3QgcHVzaFRvYXN0ID0gdXNlQ29udGV4dChQdXNoVG9hc3RDb250ZXh0KTtcclxuICAgIHJldHVybiBwdXNoVG9hc3Q7XHJcbn1cclxuLy8gRXh0cmFjdGVkIHRvIGEgc2VwYXJhdGUgY29tcG9uZW50IHRvIGF2b2lkIHJlcmVuZGVyaW5nIGFsbCBub24tdG9hc3QgY2hpbGRyZW5cclxuZnVuY3Rpb24gVG9hc3RzUHJvdmlkZXJIZWxwZXIoeyBzZXRQdXNoVG9hc3QgfSkge1xyXG4gICAgY29uc3QgW2NoaWxkcmVuLCBzZXRDaGlsZHJlbl0gPSB1c2VTdGF0ZShbXSk7XHJcbiAgICBjb25zdCBwdXNoVG9hc3QgPSB1c2VDYWxsYmFjaygodG9hc3QpID0+IHsgY29uc3QgcmFuZG9tS2V5ID0gZ2VuZXJhdGVSYW5kb21JZCgpOyBzZXRDaGlsZHJlbihwcmV2ID0+IChbLi4ucHJldiwgY2xvbmVFbGVtZW50KHRvYXN0LCB7IGtleTogcmFuZG9tS2V5IH0pXSkpOyB9LCBbXSk7XHJcbiAgICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4geyBzZXRQdXNoVG9hc3QoXyA9PiBwdXNoVG9hc3QpOyB9LCBbcHVzaFRvYXN0XSk7XHJcbiAgICByZXR1cm4gKGgoQm9keVBvcnRhbCwgbnVsbCxcclxuICAgICAgICBoKFRvYXN0c0NvbnRhaW5lckNoaWxkcmVuQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogY2hpbGRyZW4gfSxcclxuICAgICAgICAgICAgaChUb2FzdHNDb250YWluZXIsIG51bGwpKSkpO1xyXG59XHJcbmNvbnN0IFRvYXN0c0NvbnRhaW5lckNoaWxkcmVuQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoW10pO1xyXG5jb25zdCBVc2VUb2FzdENvbnRleHQgPSBjcmVhdGVDb250ZXh0KG51bGwpO1xyXG5mdW5jdGlvbiBUb2FzdHNDb250YWluZXIocHJvcHMpIHtcclxuICAgIGNvbnN0IGNoaWxkcmVuID0gdXNlQ29udGV4dChUb2FzdHNDb250YWluZXJDaGlsZHJlbkNvbnRleHQpO1xyXG4gICAgY29uc3QgeyB1c2VUb2FzdCwgdXNlVG9hc3RDb250YWluZXJQcm9wcyB9ID0gdXNlVG9hc3RzKHByb3BzKTtcclxuICAgIHJldHVybiAoaChVc2VUb2FzdENvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHVzZVRvYXN0IH0sXHJcbiAgICAgICAgaChcImRpdlwiLCB7IC4uLnVzZVRvYXN0Q29udGFpbmVyUHJvcHMocHJvcHMpIH0sIGNoaWxkcmVuKSkpO1xyXG59XHJcbmNvbnN0IFRvYXN0RGlzbWlzc0NvbnRleHQgPSBjcmVhdGVDb250ZXh0KG51bGwpO1xyXG5leHBvcnQgZnVuY3Rpb24gVG9hc3QoeyB0aW1lb3V0LCBwb2xpdGVuZXNzLCBjaGlsZHJlbiB9KSB7XHJcbiAgICBjb25zdCB1c2VUb2FzdCA9IHVzZUNvbnRleHQoVXNlVG9hc3RDb250ZXh0KTtcclxuICAgIGNvbnN0IGRlZmF1bHRUaW1lb3V0ID0gdXNlQ29udGV4dChEZWZhdWx0VG9hc3RUaW1lb3V0KTtcclxuICAgIGNvbnN0IHsgdXNlVG9hc3RQcm9wcywgZGlzbWlzcywgc3RhdHVzIH0gPSB1c2VUb2FzdCh7IHRpbWVvdXQ6IHRpbWVvdXQgPz8gZGVmYXVsdFRpbWVvdXQsIHBvbGl0ZW5lc3MgfSk7XHJcbiAgICByZXR1cm4gKGgoVG9hc3REaXNtaXNzQ29udGV4dC5Qcm92aWRlciwgeyB2YWx1ZTogZGlzbWlzcyB9LFxyXG4gICAgICAgIGgoU2xpZGVGYWRlLCB7IG9wZW46IHN0YXR1cyAhPSBcImRpc21pc3NlZFwiLCBzbGlkZVRhcmdldElubGluZTogMSwgYW5pbWF0ZU9uTW91bnQ6IHRydWUsIGV4aXRWaXNpYmlsaXR5OiBcInJlbW92ZWRcIiB9LFxyXG4gICAgICAgICAgICBoKFwiZGl2XCIsIHsgLi4udXNlVG9hc3RQcm9wcyh7IGNsYXNzOiBcInRvYXN0IHNob3dcIiwgcm9sZTogXCJhbGVydFwiLCBcImFyaWEtYXRvbWljXCI6IFwidHJ1ZVwiIH0pIH0sXHJcbiAgICAgICAgICAgICAgICBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiZC1mbGV4XCIgfSxcclxuICAgICAgICAgICAgICAgICAgICBoKFwiZGl2XCIsIHsgY2xhc3M6IFwidG9hc3QtYm9keVwiIH0sIGNoaWxkcmVuKSxcclxuICAgICAgICAgICAgICAgICAgICBoKEJ1dHRvbiwgeyBjbGFzczogXCJidG4tY2xvc2UgbWUtMiBtLWF1dG9cIiwgXCJhcmlhLWxhYmVsXCI6IFwiQ2xvc2VcIiwgb25DbGljazogZGlzbWlzcyB9KSkpKSkpO1xyXG59XHJcbi8qXHJcbmV4cG9ydCBmdW5jdGlvbiBUb2FzdEhlYWRlcih7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IENvbXBvbmVudENoaWxkcmVuIH0pIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInRvYXN0LWhlYWRlclwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWUtYXV0b1wiPlxyXG4gICAgICAgICAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPEJ1dHRvbiBjbGFzcz1cImJ0bi1jbG9zZVwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0qL1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10b2FzdC5qcy5tYXAiLCJpbXBvcnQgeyBoIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VNZXJnZWRQcm9wcyB9IGZyb20gXCJwcmVhY3QtcHJvcC1oZWxwZXJzXCI7XHJcbmltcG9ydCB7IGZvcndhcmRFbGVtZW50UmVmIH0gZnJvbSBcIi4uL3Byb3BzXCI7XHJcbmltcG9ydCB7IEluSW5wdXRHcm91cENvbnRleHQgfSBmcm9tIFwiLi9wcm9wc1wiO1xyXG4vKipcclxuICogQW4gSW5wdXRHcm91cCwgdGhhdCBwdXRzIGFuIElucHV0IGFuZCBpdHMgTGFiZWwgdG9nZXRoZXIsIHZpc3VhbGx5LCBpbnRvIG9uZSBjb21wb25lbnQuXHJcbiAqXHJcbiAqIEFsbCBJbnB1dC10eXBlIGNvbXBvbmVudHMgYXV0b21hdGljYWxseSBkZXRlY3Qgd2hlbiB0aGV5J3JlIGluIGFuIElucHV0R3JvdXAgYW5kIHJlbmRlciBkaWZmZXJlbnQgYWNjb3JkaW5nbHkuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgSW5wdXRHcm91cCA9IGZvcndhcmRFbGVtZW50UmVmKGZ1bmN0aW9uIElucHV0R3JvdXAoeyBjaGlsZHJlbiwgLi4ucmVzdCB9LCByZWYpIHtcclxuICAgIHJldHVybiAoaChcImRpdlwiLCB7IC4uLnVzZU1lcmdlZFByb3BzKCkoeyBjbGFzczogXCJpbnB1dC1ncm91cFwiLCByZWYgfSwgcmVzdCkgfSxcclxuICAgICAgICBoKEluSW5wdXRHcm91cENvbnRleHQuUHJvdmlkZXIsIHsgdmFsdWU6IHRydWUgfSwgY2hpbGRyZW4pKSk7XHJcbn0pO1xyXG4vKipcclxuICogTm90IGdlbmVyYWxseSBuZWVkZWQsIHNpbmNlIG1vc3QgaW5wdXQgY29tcG9uZW50cyBjb21lIHdpdGggbGFiZWxzIHRoYXQgZG8gdGhpcyBmb3IgeW91LlxyXG4gKlxyXG4gKiBUaGF0IGJlaW5nIHNhaWQsIGlmIHlvdSBqdXN0IG5lZWQgYSBzdGF0aWMgYmxvY2sgb2YgdGV4dCBub3QgaG9va2VkIHVwIHRvIGFueSBpbnB1dCBlbGVtZW50LCB0aGlzIGlzIHlvdXIgY29tcG9uZW50LlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IElucHV0R3JvdXBUZXh0ID0gZm9yd2FyZEVsZW1lbnRSZWYoZnVuY3Rpb24gSW5wdXRHcm91cFRleHQoeyBjaGlsZHJlbiwgLi4ucmVzdCB9LCByZWYpIHtcclxuICAgIHJldHVybiBoKFwic3BhblwiLCB7IC4uLnVzZU1lcmdlZFByb3BzKCkoeyBjbGFzczogXCJpbnB1dC1ncm91cC10ZXh0XCIsIHJlZiB9LCByZXN0KSB9KTtcclxufSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlucHV0LWdyb3VwLmpzLm1hcCIsImltcG9ydCB7IEZyYWdtZW50LCBoIH0gZnJvbSBcInByZWFjdFwiO1xyXG5pbXBvcnQgeyB1c2VJbnB1dExhYmVsIH0gZnJvbSBcInByZWFjdC1hcmlhLXdpZGdldHMvdXNlLWxhYmVsXCI7XHJcbmltcG9ydCB7IHVzZUFzeW5jSGFuZGxlciwgdXNlTWVyZ2VkUHJvcHMgfSBmcm9tIFwicHJlYWN0LXByb3AtaGVscGVyc1wiO1xyXG5pbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSBcInByZWFjdC9ob29rc1wiO1xyXG5pbXBvcnQgeyBQcm9ncmVzc0NpcmN1bGFyIH0gZnJvbSBcIi4uL3Byb2dyZXNzXCI7XHJcbmltcG9ydCB7IEluSW5wdXRHcm91cENvbnRleHQsIHVzZUlucHV0Q2FwdHVyZXMgfSBmcm9tIFwiLi9wcm9wc1wiO1xyXG5pbXBvcnQgY2xzeCBmcm9tIFwiY2xzeFwiO1xyXG5leHBvcnQgZnVuY3Rpb24gSW5wdXQoeyB0eXBlLCB2YWx1ZSwgb25JbnB1dDogb25JbnB1dEFzeW5jLCAuLi5wcm9wcyB9KSB7XHJcbiAgICBjb25zdCB7IGNhcHR1cmUsIHVuY2FwdHVyZSB9ID0gdXNlSW5wdXRDYXB0dXJlcyh0eXBlKTtcclxuICAgIGNvbnN0IHsgZ2V0U3luY0hhbmRsZXIsIGN1cnJlbnRDYXB0dXJlLCBwZW5kaW5nLCBoYXNFcnJvciwgc2V0dGxlQ291bnQsIGZsdXNoRGVib3VuY2VkUHJvbWlzZSwgLi4uYXN5bmNJbmZvIH0gPSB1c2VBc3luY0hhbmRsZXIoKSh7IGNhcHR1cmUsIGRlYm91bmNlOiAxNTAwIH0pO1xyXG4gICAgY29uc3Qgb25JbnB1dCA9IGdldFN5bmNIYW5kbGVyKG9uSW5wdXRBc3luYyk7XHJcbiAgICBjb25zdCBvbkJsdXIgPSBmbHVzaERlYm91bmNlZFByb21pc2U7XHJcbiAgICByZXR1cm4gKGgoUHJvZ3Jlc3NDaXJjdWxhciwgeyBzcGlubmVyVGltZW91dDogMTAsIG1vZGU6IGhhc0Vycm9yID8gXCJmYWlsZWRcIiA6IHBlbmRpbmcgPyBcInBlbmRpbmdcIiA6IHNldHRsZUNvdW50ID8gXCJzdWNjZWVkZWRcIiA6IG51bGwsIGNoaWxkcmVuUG9zaXRpb246IFwiYWZ0ZXJcIiwgY29sb3I6IFwiaW5mb1wiIH0sXHJcbiAgICAgICAgaChcImlucHV0XCIsIHsgLi4udXNlTWVyZ2VkUHJvcHMoKShwcm9wcywgeyBvbkJsdXIsIGNsYXNzOiBjbHN4KGBmb3JtLWNvbnRyb2xgLCBwZW5kaW5nICYmIFwid2l0aC1lbmQtaWNvblwiKSwgdHlwZSwgdmFsdWU6IGN1cnJlbnRDYXB0dXJlID8/IHVuY2FwdHVyZSh2YWx1ZSksIG9uSW5wdXQgfSkgfSkpKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gTGFiZWxsZWRJbnB1dCh7IGxhYmVsLCBsYWJlbFBvc2l0aW9uLCAuLi5wcm9wcyB9KSB7XHJcbiAgICBsYWJlbFBvc2l0aW9uID8/PSBcInN0YXJ0XCI7XHJcbiAgICBjb25zdCB7IGlucHV0SWQsIGxhYmVsSWQsIHVzZUlucHV0TGFiZWxJbnB1dCwgdXNlSW5wdXRMYWJlbExhYmVsIH0gPSB1c2VJbnB1dExhYmVsKHsgaW5wdXRQcmVmaXg6IFwiaW5wdXQtXCIsIGxhYmVsUHJlZml4OiBcImlucHV0LWxhYmVsLVwiIH0pO1xyXG4gICAgY29uc3QgeyB1c2VJbnB1dExhYmVsSW5wdXRQcm9wcyB9ID0gdXNlSW5wdXRMYWJlbElucHV0KCk7XHJcbiAgICBjb25zdCB7IHVzZUlucHV0TGFiZWxMYWJlbFByb3BzIH0gPSB1c2VJbnB1dExhYmVsTGFiZWwoeyB0YWc6IFwibGFiZWxcIiB9KTtcclxuICAgIGNvbnN0IGlzSW5JbnB1dEdyb3VwID0gdXNlQ29udGV4dChJbklucHV0R3JvdXBDb250ZXh0KTtcclxuICAgIGNvbnN0IGxhYmVsSnN4ID0gaChcImxhYmVsXCIsIHsgLi4udXNlSW5wdXRMYWJlbExhYmVsUHJvcHMoeyBjbGFzczogaXNJbklucHV0R3JvdXAgPyBcImlucHV0LWdyb3VwLXRleHRcIiA6IGxhYmVsUG9zaXRpb24gIT0gXCJmbG9hdGluZ1wiID8gXCJmb3JtLWxhYmVsXCIgOiBcIlwiIH0pIH0sIGxhYmVsKTtcclxuICAgIGNvbnN0IGlucHV0SnN4ID0gaChJbnB1dCwgeyAuLi51c2VJbnB1dExhYmVsSW5wdXRQcm9wcyhwcm9wcykgfSk7XHJcbiAgICBjb25zdCBpbnB1dFdpdGhMYWJlbCA9IChoKEZyYWdtZW50LCBudWxsLFxyXG4gICAgICAgIGxhYmVsUG9zaXRpb24gPT09IFwic3RhcnRcIiAmJiBsYWJlbEpzeCxcclxuICAgICAgICBpbnB1dEpzeCxcclxuICAgICAgICAobGFiZWxQb3NpdGlvbiA9PT0gXCJlbmRcIiB8fCBsYWJlbFBvc2l0aW9uID09IFwiZmxvYXRpbmdcIikgJiYgbGFiZWxKc3gpKTtcclxuICAgIGlmIChsYWJlbFBvc2l0aW9uICE9PSBcImZsb2F0aW5nXCIpXHJcbiAgICAgICAgcmV0dXJuIGlucHV0V2l0aExhYmVsO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiZm9ybS1mbG9hdGluZ1wiIH0sIGlucHV0SnN4KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnB1dC10ZXh0LmpzLm1hcCIsbnVsbF0sIm5hbWVzIjpbIl9fYXNzaWduIiwiT2JqZWN0IiwiYXNzaWduIiwidCIsInMiLCJpIiwibiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsImFkb3B0IiwidmFsdWUiLCJyZXNvbHZlIiwiUHJvbWlzZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJfX2dlbmVyYXRvciIsImJvZHkiLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsImYiLCJ5IiwiZyIsInZlcmIiLCJTeW1ib2wiLCJpdGVyYXRvciIsInYiLCJvcCIsIlR5cGVFcnJvciIsInBvcCIsInB1c2giLCJFTVBUWV9PQkoiLCJFTVBUWV9BUlIiLCJJU19OT05fRElNRU5TSU9OQUwiLCJjdXJyZW50SW5kZXgiLCJjdXJyZW50Q29tcG9uZW50IiwicHJldlJhZiIsImN1cnJlbnRIb29rIiwiYWZ0ZXJQYWludEVmZmVjdHMiLCJvbGRCZWZvcmVEaWZmIiwib3B0aW9ucyIsIm9sZEJlZm9yZVJlbmRlciIsIm9sZEFmdGVyRGlmZiIsImRpZmZlZCIsIm9sZENvbW1pdCIsIm9sZEJlZm9yZVVubW91bnQiLCJ1bm1vdW50IiwiZ2V0SG9va1N0YXRlIiwiaW5kZXgiLCJ0eXBlIiwiaG9va3MiLCJ1c2VTdGF0ZSIsImluaXRpYWxTdGF0ZSIsInVzZVJlZHVjZXIiLCJpbnZva2VPclJldHVybiIsInJlZHVjZXIiLCJpbml0IiwiaG9va1N0YXRlIiwiX3JlZHVjZXIiLCJ1bmRlZmluZWQiLCJuZXh0VmFsdWUiLCJhY3Rpb24iLCJzZXRTdGF0ZSIsInVzZUVmZmVjdCIsImNhbGxiYWNrIiwiYXJncyIsInN0YXRlIiwiYXJnc0NoYW5nZWQiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VSZWYiLCJpbml0aWFsVmFsdWUiLCJ1c2VNZW1vIiwiY3VycmVudCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJyZWYiLCJjcmVhdGVIYW5kbGUiLCJjb25jYXQiLCJmYWN0b3J5IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwiY29udGV4dCIsInByb3ZpZGVyIiwic3ViIiwicHJvcHMiLCJmbHVzaEFmdGVyUGFpbnRFZmZlY3RzIiwiZm9yRWFjaCIsImNvbXBvbmVudCIsImludm9rZUNsZWFudXAiLCJpbnZva2VFZmZlY3QiLCJ2bm9kZSIsImMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyYWYiLCJjbGVhclRpbWVvdXQiLCJ0aW1lb3V0IiwiSEFTX1JBRiIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsInByZXZpb3VzQ29tcG9uZW50IiwiY29tbWl0UXVldWUiLCJzb21lIiwiZmlsdGVyIiwiY2IiLCJob29rIiwiY29tcCIsIm9sZEFyZ3MiLCJuZXdBcmdzIiwiYXJnIiwidXNlU3RhdGVQIiwiY3JlYXRlRWxlbWVudCIsIkZyYWdtZW50IiwidG9WYWwiLCJtaXgiLCJrIiwic3RyIiwiQXJyYXkiLCJpc0FycmF5IiwidG1wIiwieCIsInVzZUxheW91dEVmZmVjdE5hdGl2ZSIsImNhbmRpZGF0ZVNlbGVjdG9ycyIsIm1hdGNoZXMiLCJFbGVtZW50IiwiaXNJbnB1dCIsIm5vZGUiLCJpc0hpZGRlbklucHV0IiwiaXNEZXRhaWxzV2l0aFN1bW1hcnkiLCJyIiwiY2hpbGQiLCJpc0hpZGRlbiIsImdldENvbXB1dGVkU3R5bGUiLCJpc0RpcmVjdFN1bW1hcnkiLCJub2RlVW5kZXJEZXRhaWxzIiwiZGlzcGxheUNoZWNrIiwid2lkdGgiLCJoZWlnaHQiLCJpc0Rpc2FibGVkRnJvbUZpZWxkc2V0IiwicGFyZW50Tm9kZSIsImlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUiLCJmb2N1c2FibGVDYW5kaWRhdGVTZWxlY3RvciIsImlzRm9jdXNhYmxlIiwiZ2xvYmFsIiwidGhpcyIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwid2luZG93Iiwic2xpY2UiLCJtc01hdGNoZXNTZWxlY3RvciIsIl9mb2N1c2FibGVFbGVtZW50c1N0cmluZyIsImpvaW4iLCJJbmVydFJvb3QiLCJyb290RWxlbWVudCIsImluZXJ0TWFuYWdlciIsIl9pbmVydE1hbmFnZXIiLCJfcm9vdEVsZW1lbnQiLCJfbWFuYWdlZE5vZGVzIiwiU2V0IiwiaGFzQXR0cmlidXRlIiwiX3NhdmVkQXJpYUhpZGRlbiIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIl9tYWtlU3VidHJlZVVuZm9jdXNhYmxlIiwiX29ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIl9vbk11dGF0aW9uIiwiYmluZCIsIm9ic2VydmUiLCJhdHRyaWJ1dGVzIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImRlc3RydWN0b3IiLCJkaXNjb25uZWN0IiwicmVtb3ZlQXR0cmlidXRlIiwiaW5lcnROb2RlIiwiX3VubWFuYWdlTm9kZSIsInN0YXJ0Tm9kZSIsIl90aGlzMiIsImNvbXBvc2VkVHJlZVdhbGsiLCJfdmlzaXROb2RlIiwiYWN0aXZlRWxlbWVudCIsImRvY3VtZW50IiwiY29udGFpbnMiLCJyb290Iiwibm9kZVR5cGUiLCJOb2RlIiwiRE9DVU1FTlRfRlJBR01FTlRfTk9ERSIsImJsdXIiLCJmb2N1cyIsIkVMRU1FTlRfTk9ERSIsImVsZW1lbnQiLCJfYWRvcHRJbmVydFJvb3QiLCJfbWFuYWdlTm9kZSIsInJlZ2lzdGVyIiwiYWRkIiwiZGVyZWdpc3RlciIsIl91bm1hbmFnZVN1YnRyZWUiLCJfdGhpczMiLCJpbmVydFN1YnJvb3QiLCJnZXRJbmVydFJvb3QiLCJzZXRJbmVydCIsIm1hbmFnZWROb2RlcyIsInNhdmVkSW5lcnROb2RlIiwicmVjb3JkcyIsInNlbGYiLCJyZWNvcmQiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwiYXR0cmlidXRlTmFtZSIsIm1hbmFnZWROb2RlIiwiZ2V0Iiwic2V0IiwiYXJpYUhpZGRlbiIsIkluZXJ0Tm9kZSIsImluZXJ0Um9vdCIsIl9ub2RlIiwiX292ZXJyb2RlRm9jdXNNZXRob2QiLCJfaW5lcnRSb290cyIsIl9zYXZlZFRhYkluZGV4IiwiX2Rlc3Ryb3llZCIsImVuc3VyZVVudGFiYmFibGUiLCJfdGhyb3dJZkRlc3Ryb3llZCIsImRlc3Ryb3llZCIsIkVycm9yIiwidGFiSW5kZXgiLCJoYXNTYXZlZFRhYkluZGV4IiwiYWRkSW5lcnRSb290IiwicmVtb3ZlSW5lcnRSb290Iiwic2l6ZSIsIkluZXJ0TWFuYWdlciIsIl9kb2N1bWVudCIsIk1hcCIsIl93YXRjaEZvckluZXJ0IiwiYWRkSW5lcnRTdHlsZSIsImhlYWQiLCJkb2N1bWVudEVsZW1lbnQiLCJyZWFkeVN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9vbkRvY3VtZW50TG9hZGVkIiwiaW5lcnQiLCJoYXMiLCJwYXJlbnQiLCJfaW5lcnRSb290IiwiaW5lcnRFbGVtZW50cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbmVydEVsZW1lbnQiLCJfdGhpcyIsInVuc2hpZnQiLCJzaGFkb3dSb290QW5jZXN0b3IiLCJzaGFkb3dSb290IiwibG9jYWxOYW1lIiwiY29udGVudCIsImRpc3RyaWJ1dGVkTm9kZXMiLCJnZXREaXN0cmlidXRlZE5vZGVzIiwic2xvdCIsIl9kaXN0cmlidXRlZE5vZGVzIiwiYXNzaWduZWROb2RlcyIsImZsYXR0ZW4iLCJfaSIsImZpcnN0Q2hpbGQiLCJuZXh0U2libGluZyIsInF1ZXJ5U2VsZWN0b3IiLCJzdHlsZSIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJvYmoiLCJzaGFsbG93RGlmZmVycyIsImEiLCJiIiwiZm9yd2FyZEVsZW1lbnRSZWYiLCJmb3J3YXJkUmVmIiwiY2xvbmVFbGVtZW50IiwiaCIsImNyZWF0ZUNvbnRleHQiLCJtZW1vIiwiY3JlYXRlUG9ydGFsIiwidG9wIiwiYm90dG9tIiwicmlnaHQiLCJsZWZ0IiwiYXV0byIsImJhc2VQbGFjZW1lbnRzIiwic3RhcnQiLCJlbmQiLCJjbGlwcGluZ1BhcmVudHMiLCJ2aWV3cG9ydCIsInBvcHBlciIsInJlZmVyZW5jZSIsInZhcmlhdGlvblBsYWNlbWVudHMiLCJyZWR1Y2UiLCJhY2MiLCJwbGFjZW1lbnQiLCJwbGFjZW1lbnRzIiwiYmVmb3JlUmVhZCIsInJlYWQiLCJhZnRlclJlYWQiLCJiZWZvcmVNYWluIiwibWFpbiIsImFmdGVyTWFpbiIsImJlZm9yZVdyaXRlIiwid3JpdGUiLCJhZnRlcldyaXRlIiwibW9kaWZpZXJQaGFzZXMiLCJnZXROb2RlTmFtZSIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJnZXRXaW5kb3ciLCJ0b1N0cmluZyIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImlzRWxlbWVudCIsIk93bkVsZW1lbnQiLCJpc0hUTUxFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJpc1NoYWRvd1Jvb3QiLCJTaGFkb3dSb290IiwiYXBwbHlTdHlsZXMiLCJfcmVmIiwia2V5cyIsImVsZW1lbnRzIiwibmFtZSIsInN0eWxlcyIsImVmZmVjdCIsIl9yZWYyIiwiaW5pdGlhbFN0eWxlcyIsInBvc2l0aW9uIiwic3RyYXRlZ3kiLCJtYXJnaW4iLCJhcnJvdyIsInN0eWxlUHJvcGVydGllcyIsInByb3BlcnR5IiwiYXR0cmlidXRlIiwiZW5hYmxlZCIsInBoYXNlIiwiZm4iLCJyZXF1aXJlcyIsImdldEJhc2VQbGFjZW1lbnQiLCJzcGxpdCIsInJvdW5kIiwiTWF0aCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImluY2x1ZGVTY2FsZSIsInJlY3QiLCJzY2FsZVgiLCJzY2FsZVkiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXRXaWR0aCIsImdldExheW91dFJlY3QiLCJjbGllbnRSZWN0IiwiYWJzIiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsInJvb3ROb2RlIiwiZ2V0Um9vdE5vZGUiLCJpc1NhbWVOb2RlIiwiaG9zdCIsImlzVGFibGVFbGVtZW50IiwiaW5kZXhPZiIsImdldERvY3VtZW50RWxlbWVudCIsImdldFBhcmVudE5vZGUiLCJhc3NpZ25lZFNsb3QiLCJnZXRUcnVlT2Zmc2V0UGFyZW50Iiwib2Zmc2V0UGFyZW50IiwiZ2V0Q29udGFpbmluZ0Jsb2NrIiwiaXNGaXJlZm94IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaXNJRSIsImVsZW1lbnRDc3MiLCJjdXJyZW50Tm9kZSIsImNzcyIsInRyYW5zZm9ybSIsInBlcnNwZWN0aXZlIiwiY29udGFpbiIsIndpbGxDaGFuZ2UiLCJnZXRPZmZzZXRQYXJlbnQiLCJnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQiLCJtYXgiLCJtaW4iLCJ3aXRoaW4iLCJtYXRoTWF4IiwibWF0aE1pbiIsImdldEZyZXNoU2lkZU9iamVjdCIsIm1lcmdlUGFkZGluZ09iamVjdCIsInBhZGRpbmdPYmplY3QiLCJleHBhbmRUb0hhc2hNYXAiLCJoYXNoTWFwIiwidG9QYWRkaW5nT2JqZWN0IiwicGFkZGluZyIsInJlY3RzIiwiX3N0YXRlJG1vZGlmaWVyc0RhdGEkIiwiYXJyb3dFbGVtZW50IiwicG9wcGVyT2Zmc2V0cyIsIm1vZGlmaWVyc0RhdGEiLCJiYXNlUGxhY2VtZW50IiwiYXhpcyIsImlzVmVydGljYWwiLCJsZW4iLCJhcnJvd1JlY3QiLCJtaW5Qcm9wIiwibWF4UHJvcCIsImVuZERpZmYiLCJzdGFydERpZmYiLCJhcnJvd09mZnNldFBhcmVudCIsImNsaWVudFNpemUiLCJjbGllbnRIZWlnaHQiLCJjbGllbnRXaWR0aCIsImNlbnRlclRvUmVmZXJlbmNlIiwiY2VudGVyIiwib2Zmc2V0IiwiYXhpc1Byb3AiLCJjZW50ZXJPZmZzZXQiLCJfb3B0aW9ucyRlbGVtZW50IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiY29uc29sZSIsImVycm9yIiwicmVxdWlyZXNJZkV4aXN0cyIsImdldFZhcmlhdGlvbiIsInVuc2V0U2lkZXMiLCJyb3VuZE9mZnNldHNCeURQUiIsIndpbiIsImRwciIsImRldmljZVBpeGVsUmF0aW8iLCJtYXBUb1N0eWxlcyIsIl9PYmplY3QkYXNzaWduMiIsInBvcHBlclJlY3QiLCJ2YXJpYXRpb24iLCJvZmZzZXRzIiwiZ3B1QWNjZWxlcmF0aW9uIiwiYWRhcHRpdmUiLCJyb3VuZE9mZnNldHMiLCJfcmVmMyIsIl9yZWYzJHgiLCJfcmVmMyR5IiwiaGFzWCIsImhhc1kiLCJzaWRlWCIsInNpZGVZIiwiaGVpZ2h0UHJvcCIsIndpZHRoUHJvcCIsImNvbW1vblN0eWxlcyIsIl9PYmplY3QkYXNzaWduIiwiY29tcHV0ZVN0eWxlcyIsIl9yZWY0IiwiX29wdGlvbnMkZ3B1QWNjZWxlcmF0IiwiX29wdGlvbnMkYWRhcHRpdmUiLCJfb3B0aW9ucyRyb3VuZE9mZnNldHMiLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJ3YXJuIiwiZGF0YSIsInBhc3NpdmUiLCJfb3B0aW9ucyRzY3JvbGwiLCJzY3JvbGwiLCJfb3B0aW9ucyRyZXNpemUiLCJyZXNpemUiLCJzY3JvbGxQYXJlbnRzIiwic2Nyb2xsUGFyZW50IiwidXBkYXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImhhc2giLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsInJlcGxhY2UiLCJtYXRjaGVkIiwiZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQiLCJnZXRXaW5kb3dTY3JvbGwiLCJzY3JvbGxMZWZ0IiwicGFnZVhPZmZzZXQiLCJzY3JvbGxUb3AiLCJwYWdlWU9mZnNldCIsImdldFdpbmRvd1Njcm9sbEJhclgiLCJnZXRWaWV3cG9ydFJlY3QiLCJodG1sIiwidmlzdWFsVmlld3BvcnQiLCJ0ZXN0IiwiZ2V0RG9jdW1lbnRSZWN0IiwiX2VsZW1lbnQkb3duZXJEb2N1bWVuIiwid2luU2Nyb2xsIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJkaXJlY3Rpb24iLCJpc1Njcm9sbFBhcmVudCIsIl9nZXRDb21wdXRlZFN0eWxlIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJnZXRTY3JvbGxQYXJlbnQiLCJsaXN0U2Nyb2xsUGFyZW50cyIsImxpc3QiLCJpc0JvZHkiLCJ1cGRhdGVkTGlzdCIsInJlY3RUb0NsaWVudFJlY3QiLCJnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFRvcCIsImNsaWVudExlZnQiLCJnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZSIsImNsaXBwaW5nUGFyZW50IiwiZ2V0Q2xpcHBpbmdQYXJlbnRzIiwiY2FuRXNjYXBlQ2xpcHBpbmciLCJjbGlwcGVyRWxlbWVudCIsImdldENsaXBwaW5nUmVjdCIsImJvdW5kYXJ5Iiwicm9vdEJvdW5kYXJ5IiwibWFpbkNsaXBwaW5nUGFyZW50cyIsImZpcnN0Q2xpcHBpbmdQYXJlbnQiLCJjbGlwcGluZ1JlY3QiLCJhY2NSZWN0IiwiY29tcHV0ZU9mZnNldHMiLCJjb21tb25YIiwiY29tbW9uWSIsIm1haW5BeGlzIiwiZGV0ZWN0T3ZlcmZsb3ciLCJfb3B0aW9ucyIsIl9vcHRpb25zJHBsYWNlbWVudCIsIl9vcHRpb25zJGJvdW5kYXJ5IiwiX29wdGlvbnMkcm9vdEJvdW5kYXJ5IiwiX29wdGlvbnMkZWxlbWVudENvbnRlIiwiZWxlbWVudENvbnRleHQiLCJfb3B0aW9ucyRhbHRCb3VuZGFyeSIsImFsdEJvdW5kYXJ5IiwiX29wdGlvbnMkcGFkZGluZyIsImFsdENvbnRleHQiLCJjbGlwcGluZ0NsaWVudFJlY3QiLCJjb250ZXh0RWxlbWVudCIsInJlZmVyZW5jZUNsaWVudFJlY3QiLCJwb3BwZXJDbGllbnRSZWN0IiwiZWxlbWVudENsaWVudFJlY3QiLCJvdmVyZmxvd09mZnNldHMiLCJvZmZzZXREYXRhIiwibXVsdGlwbHkiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsImZsaXBWYXJpYXRpb25zIiwiX29wdGlvbnMkYWxsb3dlZEF1dG9QIiwiYWxsb3dlZEF1dG9QbGFjZW1lbnRzIiwiYWxsUGxhY2VtZW50cyIsImFsbG93ZWRQbGFjZW1lbnRzIiwib3ZlcmZsb3dzIiwic29ydCIsImdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzIiwib3Bwb3NpdGVQbGFjZW1lbnQiLCJmbGlwIiwiX3NraXAiLCJfb3B0aW9ucyRtYWluQXhpcyIsImNoZWNrTWFpbkF4aXMiLCJfb3B0aW9ucyRhbHRBeGlzIiwiYWx0QXhpcyIsImNoZWNrQWx0QXhpcyIsInNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyIsImZhbGxiYWNrUGxhY2VtZW50cyIsIl9vcHRpb25zJGZsaXBWYXJpYXRpbyIsInByZWZlcnJlZFBsYWNlbWVudCIsImlzQmFzZVBsYWNlbWVudCIsInJlZmVyZW5jZVJlY3QiLCJjaGVja3NNYXAiLCJtYWtlRmFsbGJhY2tDaGVja3MiLCJmaXJzdEZpdHRpbmdQbGFjZW1lbnQiLCJfYmFzZVBsYWNlbWVudCIsImlzU3RhcnRWYXJpYXRpb24iLCJtYWluVmFyaWF0aW9uU2lkZSIsImFsdFZhcmlhdGlvblNpZGUiLCJjaGVja3MiLCJldmVyeSIsImNoZWNrIiwibnVtYmVyT2ZDaGVja3MiLCJfbG9vcCIsImZpdHRpbmdQbGFjZW1lbnQiLCJmaW5kIiwiX3JldCIsInJlc2V0IiwiZ2V0U2lkZU9mZnNldHMiLCJwcmV2ZW50ZWRPZmZzZXRzIiwiaXNBbnlTaWRlRnVsbHlDbGlwcGVkIiwic2lkZSIsImhpZGUiLCJwcmV2ZW50T3ZlcmZsb3ciLCJyZWZlcmVuY2VPdmVyZmxvdyIsInBvcHBlckFsdE92ZXJmbG93IiwicmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzIiwicG9wcGVyRXNjYXBlT2Zmc2V0cyIsImlzUmVmZXJlbmNlSGlkZGVuIiwiaGFzUG9wcGVyRXNjYXBlZCIsImRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZIiwiaW52ZXJ0RGlzdGFuY2UiLCJza2lkZGluZyIsImRpc3RhbmNlIiwiX29wdGlvbnMkb2Zmc2V0IiwiX2RhdGEkc3RhdGUkcGxhY2VtZW50IiwiZ2V0QWx0QXhpcyIsIl9vcHRpb25zJHRldGhlciIsInRldGhlciIsIl9vcHRpb25zJHRldGhlck9mZnNldCIsInRldGhlck9mZnNldCIsInRldGhlck9mZnNldFZhbHVlIiwibWFpblNpZGUiLCJhbHRTaWRlIiwiYWRkaXRpdmUiLCJtaW5MZW4iLCJtYXhMZW4iLCJhcnJvd1BhZGRpbmdPYmplY3QiLCJhcnJvd1BhZGRpbmdNaW4iLCJhcnJvd1BhZGRpbmdNYXgiLCJhcnJvd0xlbiIsIm1pbk9mZnNldCIsIm1heE9mZnNldCIsImNsaWVudE9mZnNldCIsIm9mZnNldE1vZGlmaWVyVmFsdWUiLCJ0ZXRoZXJNaW4iLCJ0ZXRoZXJNYXgiLCJwcmV2ZW50ZWRPZmZzZXQiLCJfbWFpblNpZGUiLCJfYWx0U2lkZSIsIl9vZmZzZXQiLCJfbWluIiwiX21heCIsIl9wcmV2ZW50ZWRPZmZzZXQiLCJnZXRIVE1MRWxlbWVudFNjcm9sbCIsImdldE5vZGVTY3JvbGwiLCJpc0VsZW1lbnRTY2FsZWQiLCJnZXRDb21wb3NpdGVSZWN0IiwiZWxlbWVudE9yVmlydHVhbEVsZW1lbnQiLCJpc0ZpeGVkIiwiaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQiLCJvZmZzZXRQYXJlbnRJc1NjYWxlZCIsIm9yZGVyIiwibW9kaWZpZXJzIiwibWFwIiwidmlzaXRlZCIsIm1vZGlmaWVyIiwiZGVwIiwiZGVwTW9kaWZpZXIiLCJvcmRlck1vZGlmaWVycyIsIm9yZGVyZWRNb2RpZmllcnMiLCJkZWJvdW5jZSIsInBlbmRpbmciLCJmb3JtYXQiLCJfbGVuIiwiX2tleSIsIklOVkFMSURfTU9ESUZJRVJfRVJST1IiLCJNSVNTSU5HX0RFUEVOREVOQ1lfRVJST1IiLCJWQUxJRF9QUk9QRVJUSUVTIiwidmFsaWRhdGVNb2RpZmllcnMiLCJTdHJpbmciLCJyZXF1aXJlbWVudCIsIm1vZCIsInVuaXF1ZUJ5IiwiYXJyIiwiaWRlbnRpZmllcnMiLCJpdGVtIiwiaWRlbnRpZmllciIsIm1lcmdlQnlOYW1lIiwibWVyZ2VkIiwiZXhpc3RpbmciLCJJTlZBTElEX0VMRU1FTlRfRVJST1IiLCJJTkZJTklURV9MT09QX0VSUk9SIiwiREVGQVVMVF9PUFRJT05TIiwiYXJlVmFsaWRFbGVtZW50cyIsInBvcHBlckdlbmVyYXRvciIsImdlbmVyYXRvck9wdGlvbnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyIsIl9nZW5lcmF0b3JPcHRpb25zJGRlZiIsImRlZmF1bHRNb2RpZmllcnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyIiwiZGVmYXVsdE9wdGlvbnMiLCJjcmVhdGVQb3BwZXIiLCJlZmZlY3RDbGVhbnVwRm5zIiwiaXNEZXN0cm95ZWQiLCJzZXRPcHRpb25zIiwic2V0T3B0aW9uc0FjdGlvbiIsImNsZWFudXBNb2RpZmllckVmZmVjdHMiLCJtIiwiZmxpcE1vZGlmaWVyIiwibWFyZ2luVG9wIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0IiwicGFyc2VGbG9hdCIsInJ1bk1vZGlmaWVyRWZmZWN0cyIsImZvcmNlVXBkYXRlIiwiX3N0YXRlJGVsZW1lbnRzIiwiX19kZWJ1Z19sb29wc19fIiwiX3N0YXRlJG9yZGVyZWRNb2RpZmllIiwiX3N0YXRlJG9yZGVyZWRNb2RpZmllMiIsImRlc3Ryb3kiLCJvbkZpcnN0VXBkYXRlIiwiX3JlZjMkb3B0aW9ucyIsImNsZWFudXBGbiIsIm5vb3BGbiIsImV2ZW50TGlzdGVuZXJzIiwiT3B0aW9uYWxseUlucHV0R3JvdXAiLCJyZW5kZXIiXSwibWFwcGluZ3MiOiI7OztJQUFBO0lBQ0E7QUFDQTtJQUNBO0lBQ0E7QUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFrQk8sSUFBSUEsUUFBUSxHQUFHLFlBQVc7SUFDN0JBLEVBQUFBLFFBQVEsR0FBR0MsTUFBTSxDQUFDQyxNQUFQLElBQWlCLFNBQVNGLFFBQVQsQ0FBa0JHLENBQWxCLEVBQXFCO0lBQzdDLFNBQUssSUFBSUMsQ0FBSixFQUFPQyxDQUFDLEdBQUcsQ0FBWCxFQUFjQyxDQUFDLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBakMsRUFBeUNILENBQUMsR0FBR0MsQ0FBN0MsRUFBZ0RELENBQUMsRUFBakQsRUFBcUQ7SUFDakRELE1BQUFBLENBQUMsR0FBR0csU0FBUyxDQUFDRixDQUFELENBQWI7O0lBQ0EsV0FBSyxJQUFJSSxDQUFULElBQWNMLENBQWQ7SUFBaUIsWUFBSUgsTUFBTSxDQUFDUyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNSLENBQXJDLEVBQXdDSyxDQUF4QyxDQUFKLEVBQWdETixDQUFDLENBQUNNLENBQUQsQ0FBRCxHQUFPTCxDQUFDLENBQUNLLENBQUQsQ0FBUjtJQUFqRTtJQUNIOztJQUNELFdBQU9OLENBQVA7SUFDSCxHQU5EOztJQU9BLFNBQU9ILFFBQVEsQ0FBQ2EsS0FBVCxDQUFlLElBQWYsRUFBcUJOLFNBQXJCLENBQVA7SUFDSCxDQVRNO0lBc0NBLFNBQVNPLFNBQVQsQ0FBbUJDLE9BQW5CLEVBQTRCQyxVQUE1QixFQUF3Q0MsQ0FBeEMsRUFBMkNDLFNBQTNDLEVBQXNEO0lBQ3pELFdBQVNDLEtBQVQsQ0FBZUMsS0FBZixFQUFzQjtJQUFFLFdBQU9BLEtBQUss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Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7U0N6R007SUFBQSxPQUFBO0lBQUEsT0FBQTtJQUFBLE9BQUE7SUFBQSxPQUFBO0lBQUEsT0FBQTtJQUFBLE9BQUE7SUFBQSxJQUFNb0IsR0FBQUEsR0FBWSxFQUFsQjtJQUFBLElBQ01DLEdBQUFBLEdBQVksRUFEbEI7SUFBQSxJQUVNQyxHQUFBQSxHQUFxQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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
