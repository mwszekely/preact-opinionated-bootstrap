@use "../variables.scss" as *;
@use "sass:color";
@use "sass:map";
@use "sass:string";

@forward "../variables.scss";

// Make the buttons' text move up and down as the shadows imply
.btn {
  position: relative;
  touch-action: manipulation;
  position: relative;

  &:not(.disabled):not(:disabled):not(.pending) {
    cursor: pointer;
  }
  &.pending:not(.disabled):not(:disabled) {
    cursor: progress;
  }

  & > .circular-progress-container {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
  }

  // Checked buttons don't always have their text offset,
  // just when they're actively being pressed.
  /*.btn-check:checked + &,.btn-check:active + &,*/
  &:active,
  &.active {
    padding-bottom: $btn-padding-y * 0.5;
    padding-top: $btn-padding-y + $btn-padding-y * 0.5;
  }
}
.btn-lg {
  /*.btn-check:checked + &,.btn-check:active + &,*/
  &:active,
  &.active {
    padding-bottom: $btn-padding-y-lg * 0.5;
    padding-top: $btn-padding-y-lg + $btn-padding-y-lg * 0.5;
  }
}
.btn-sm {
  /*.btn-check:checked + &,.btn-check:active + &,*/
  &:active,
  &.active {
    padding-bottom: $btn-padding-y-sm * 0.5;
    padding-top: $btn-padding-y-sm + $btn-padding-y-sm * 0.5;
  }
}

// Make outline button styles a bit less flashy
@each $color, $value in $theme-colors {
  .btn-outline-#{$color} {
    @include button-outline-variant(
      $color: $value,
      $color-hover: $value,
      $active-background: color.change($value, $alpha: 0.125),
      $active-border: color.change($value, $alpha: 0.25),
      $active-color: $value
    );

    $contrast-ratio: contrast-ratio($body-bg, $value);
    @if $contrast-ratio <= $min-contrast-ratio {
      color: #{color-contrast($body-bg)};
      &:not(:hover) {
        text-shadow: 1px 0px 4px $value, 0px 1px 4px $value, -3px 0px 4px $value, 0px -3px 4px $value;
      }
      &:hover {
        color: #{color-contrast($body-bg)};
      }
    }

    &:focus {
      border-color: color.change($value, $alpha: 0.4);
      background-color: color.change($value, $alpha: 0.25);
    }
  }
}

@media (prefers-reduced-motion) {
  .btn {
    .btn-check:checked + &,
    .btn-check:active + &,
    &:active,
    &.active {
      padding-bottom: $btn-padding-y;
      padding-top: $btn-padding-y;
      &.list-group-item {
        padding-bottom: $btn-padding-y;
        padding-top: $btn-padding-y;
      }
    }
  }
  .btn-lg {
    .btn-check:checked + &,
    .btn-check:active + &,
    &:active,
    &.active {
      padding-bottom: $btn-padding-y-lg;
      padding-top: $btn-padding-y-lg;
    }
  }
  .btn-sm {
    .btn-check:checked + &,
    .btn-check:active + &,
    &:active,
    &.active {
      padding-bottom: $btn-padding-y-sm;
      padding-top: $btn-padding-y-sm;
    }
  }
}
