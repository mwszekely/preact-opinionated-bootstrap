@use "sass:color";
@use "sass:map";
@use "sass:string";
@use "./ensure-contrast.scss" as *;

@use "../variables.scss" as *;


.btn-group {
  &.wrap {
    flex-wrap: wrap;
    row-gap: 0.25em;
  }
}

// Some of the button mixins are missing variables to adjust opacity of the focus ring,
// so add that back in (basically just copied and pasted from the mixin with most lines removed).
.btn {
  @each $color, $value in $theme-colors {
    &.btn-#{$color} {
      .btn-check:focus + &,
      &:focus {
        @include box-shadow(
          $btn-box-shadow,
          0 0 0 $btn-focus-width
            rgba(mix($value, $value, 15%), $input-btn-check-focus-color-opacity)
        );
      }

      .btn-check:checked + &,
      .btn-check:active + &,
      &:active,
      &.active,
      .show > &.dropdown-toggle {
        &:focus {
          @include box-shadow(
            $btn-active-box-shadow,
            0 0 0 $btn-focus-width
              rgba(
                mix($value, $value, 15%),
                $input-btn-check-focus-color-opacity
              )
          );
        }
      }
    }

    &.btn-outline-#{$color} {
      .btn-check:focus + &,
      &:focus {
        box-shadow: 0
          0
          0
          $btn-focus-width
          rgba($value, $input-btn-check-focus-color-opacity);
      }

      .btn-check:checked + &,
      .btn-check:active + &,
      &:active,
      &.active,
      &.dropdown-toggle.show {
        &:focus {
          @include box-shadow(
            $btn-active-box-shadow,
            0 0 0 $btn-focus-width
              rgba($value, $input-btn-check-focus-color-opacity)
          );
        }
      }
    }
  }
}

// Make the buttons' text move up and down as the shadows imply
.btn {

  // Boilerplate
  position: relative;         // Needed for spinners, etc.
  touch-action: manipulation; // Improve responsiveness
  position: relative;         //
  appearance: none;           // Standardize styling

  // Because buttons animate the press effect by
  // adjusting their padding, which affects layout,
  // we force a certain height and disable layout shifting.
  contain: content;
  height: calc((#{$line-height-base} * 1em) + (#{$btn-padding-y} * 2) + 2px);

  // Bootstrap also does this when $enable-button-pointers
  // but not for .pending
  &:not(.disabled):not(:disabled):not(.pending) {
    cursor: pointer;
  }
  &.pending {
    cursor: progress;
    pointer-events: auto;
  }

  // The reason buttons are position: relative
  & > .circular-progress-container {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
  }

  --press-effect-block-offset: $btn-focus-width;

  padding-top: calc(#{$btn-padding-y}  - var(--press-effect-block-offset));
  padding-bottom: calc(#{$btn-padding-y} + var(--press-effect-block-offset));

  // When, when hoving or focused, they're level with the page
  &:hover:not(.active):not(:active),
  &:focus:not(.active):not(:active) {
    --press-effect-block-offset: 0;
  }

  // And when pressed, they're inset into the page.
  &:active,
  &.active,
  &.pending:not(.toggle-button) {
    --press-effect-block-offset: calc(#{-1 * $btn-focus-width});
  }


  @each $color-name, $color-value in $theme-colors {
    &.btn-outline-#{$color-name} {

      // Make outline button styles a bit less flashy
      // by only partially fading in the background
      @include button-outline-variant(
        $color: $color-value,
        $color-hover: $color-value,
        $active-background: color.change($color-value, $alpha: 0.125),
        $active-border: color.change($color-value, $alpha: 0.25),
        $active-color: $color-value
      );

      // Make sure all colors are visible on the default body background
      // (Especially a problem for dark themes)
      $contrast-ratio: contrast-ratio($body-bg, $color-value);
      @if $contrast-ratio <= $min-contrast-ratio {
        $adjusted-color: ensure-contrasting-color($body-bg, $color-value);
        color: $adjusted-color;
        border-color: $adjusted-color;

        // Adjust these colors because either
        // * They're over a translucent colored background
        // * Their opacity has been lowered
        &:hover,
        &:focus,
        &.active,
        &:active,
        &:disabled,
        &.disabled {
          color: ensure-contrasting-color(mix($color-value, $body-bg), $color-value);
        }
      }

      // TODO: Redundant? Why not?
      &:focus,
      &.active {
        border-color: color.change($color-value, $alpha: 0.4);
        background-color: color.change($color-value, $alpha: 0.25);
      }
    }

    // Default box shadow:
    // Slightly raised, 0-width focus ring
    // The raised effect is done with a solid inset at the bottom.
    // The color of the inset is black for filled buttons and the (contrast-adjusted) border color for outlined buttons.
    &.btn-#{$color-name} {
      border-color: transparent;
      @include box-shadow(
        inset 0 -3px 0 0 rgba(0 0 0 / 40%),
        0 0 0 0 rgba(tint-color($color-value, 40%), $input-btn-focus-color-opacity)
      );
    }
    &.btn-outline-#{$color-name} {
      @include box-shadow(
        inset 0 -3px 0 0 rgba(ensure-contrasting-color($body-bg, $color-value), 80%),
        0 0 0 0 rgba(tint-color($color-value, 40%), $input-btn-focus-color-opacity)
      );
    }

    // Box shadow when focused, but not active:
    // (FYI: In most contexts, including this one, pending also counts as active)
    // Flat, with a focus ring
    &:focus:not(.active):not(:active):not(.pending) {
      &.btn-#{$color-name} {
        @include box-shadow(
          inset 0 0 0 0 rgba(0 0 0 / 30%),
          0 0 0 $btn-focus-width
            rgba(tint-color($color-value, 40%), $input-btn-focus-color-opacity)
        );
      }
      &.btn-outline-#{$color-name} {
        @include box-shadow(
          inset 0 0 0 0 rgba(0 0 0 / 30%),
          0 0 0 $btn-focus-width
            rgba(tint-color($color-value, 40%), $input-btn-focus-color-opacity)
        );
      }
    }

    // Box shadow when hovering, but not active:
    // Flat, 0-width focus ring
    &:hover:not(.active):not(:active):not(.pending) {
      &.btn-#{$color-name} {
        @include box-shadow(
          inset 0 0 0 0 rgba(0 0 0 / 30%),
          0 0 0 0 rgba(tint-color($color-value, 40%), $input-btn-focus-color-opacity)
        );
      }
      &.btn-outline-#{$color-name} {
        @include box-shadow(
          inset 0 0 0 0 rgba(0 0 0 / 30%),
          0 0 0 0 rgba(tint-color($color-value, 40%), $input-btn-focus-color-opacity)
        );
      }
    }
    // Box shadow when active, but not focused
    // (generally buttons can't be active without being focused,
    // but e.g. checked buttons fall under this category)
    // Depressed, 0-width focus ring
    &:active:not(:focus),
    &.active:not(:focus),
    &:not(:active):not(.active).pending:not(:focus) {
      &.btn-#{$color-name} {
        @include box-shadow(
          $btn-active-box-shadow,
          0 0 0 0 rgba(tint-color($color-value, 40%), $input-btn-focus-color-opacity)
        );
      }
      &.btn-outline-#{$color-name} {
        @include box-shadow(
          $btn-active-box-shadow,
          0 0 0 0 rgba(tint-color($color-value, 40%), $input-btn-focus-color-opacity)
        );
      }
    }

    // Box shadow when active and focused
    // Depressed, with a focus ring
    &:active:focus,
    &.active:focus,
    &:not(:active):not(.active).pending:focus {
      &.btn-#{$color-name} {
        @include box-shadow(
          $btn-active-box-shadow,
          0 0 0 $btn-focus-width
            rgba(tint-color($color-value, 40%), $input-btn-focus-color-opacity)
        );
      }
      &.btn-outline-#{$color-name} {
        @include box-shadow(
          $btn-active-box-shadow,
          0 0 0 $btn-focus-width
            rgba(tint-color($color-value, 40%), $input-btn-focus-color-opacity)
        );
      }
    }
  }

  &.btn-lg {
    height: calc((#{$line-height-lg} * 1em) + (#{$btn-padding-y-lg} * 2) + 2px);
    padding-top: calc(#{$btn-padding-y-lg} - var(--press-effect-block-offset));
    padding-bottom: calc(#{$btn-padding-y-lg} + var(--press-effect-block-offset));
  }
  &.btn-sm {
    height: calc((#{$line-height-sm} * 1em) + (#{$btn-padding-y-sm} * 2) + 2px);
    padding-top: calc(#{$btn-padding-y-sm}  - var(--press-effect-block-offset));
    padding-bottom: calc(#{$btn-padding-y-sm} + var(--press-effect-block-offset));
  }
}

@media (prefers-reduced-motion) {
  .btn {
    --press-effect-block-offset: 1 !important;
  }
}
