@use "sass:color";
@use "sass:map";
@use "sass:string";
@use "./ensure-contrast.scss" as *;

@use "../variables.scss" as *;


.btn-group {
  &.wrap {
    flex-wrap: wrap;
    row-gap: 0.25em;
  }
}

// Some of the button mixins are missing variables to adjust opacity of the focus ring,
// so add that back in (basically just copied and pasted from the mixin with most lines removed).
.btn {
  @each $color, $value in $theme-colors {
    &.btn-#{$color} {
      .btn-check:focus + &,
      &:focus {
        @include box-shadow(
          $btn-box-shadow,
          0 0 0 $btn-focus-width
            rgba(mix($value, $value, 15%), $input-btn-check-focus-color-opacity)
        );
      }

      .btn-check:checked + &,
      .btn-check:active + &,
      &:active,
      &.active,
      .show > &.dropdown-toggle {
        &:focus {
          @include box-shadow(
            $btn-active-box-shadow,
            0 0 0 $btn-focus-width
              rgba(
                mix($value, $value, 15%),
                $input-btn-check-focus-color-opacity
              )
          );
        }
      }
    }

    &.btn-outline-#{$color} {
      .btn-check:focus + &,
      &:focus {
        box-shadow: 0
          0
          0
          $btn-focus-width
          rgba($value, $input-btn-check-focus-color-opacity);
      }

      .btn-check:checked + &,
      .btn-check:active + &,
      &:active,
      &.active,
      &.dropdown-toggle.show {
        &:focus {
          @include box-shadow(
            $btn-active-box-shadow,
            0 0 0 $btn-focus-width
              rgba($value, $input-btn-check-focus-color-opacity)
          );
        }
      }
    }
  }
}

// Make the buttons' text move up and down as the shadows imply
.btn {
  position: relative;
  touch-action: manipulation;
  position: relative;
  contain: content;
  appearance: none;
  height: calc(1.5em + (#{$btn-padding-y} * 2) + 2px);

  &:not(.disabled):not(:disabled):not(.pending) {
    cursor: pointer;
  }
  &.pending {
    cursor: progress;
    pointer-events: auto;
  }

  & > .circular-progress-container {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
  }

  padding-top: $btn-padding-y * 0.75;
  padding-bottom: $btn-padding-y + $btn-padding-y * 0.25;

  &:hover:not(.active):not(:active),
  &:focus:not(.active):not(:active) {
    padding-top: $btn-padding-y;
    padding-bottom: $btn-padding-y;
  }

  &:active,
  &.active,
  &.pending:not(.toggle-button) {
    padding-bottom: $btn-padding-y * 0.5;
    padding-top: $btn-padding-y + $btn-padding-y * 0.5;
  }

  // Fix some default Bootstrap styles not applying all the box-shadows we want
  // Box shadows should always appear when active.
  @each $color, $value in $theme-colors {
    &.btn-outline-#{$color} {
      // Make outline button styles a bit less flashy
      @include button-outline-variant(
        $color: $value,
        $color-hover: $value,
        $active-background: color.change($value, $alpha: 0.125),
        $active-border: color.change($value, $alpha: 0.25),
        $active-color: $value
      );

      // Make sure all colors are visible on the default body background
      // (Especially a problem for dark themes)
      $contrast-ratio: contrast-ratio($body-bg, $value);
      @if $contrast-ratio <= $min-contrast-ratio {
        $adjusted-color: ensure-contrasting-color($body-bg, $value);
        color: $adjusted-color;
        border-color: $adjusted-color;

        // Adjust these colors because either
        // * They're over a translucent colored background
        // * Their opacity has been lowered
        &:hover,
        &:focus,
        &.active,
        &:active,
        &:disabled,
        &.disabled {
          color: ensure-contrasting-color(mix($value, $body-bg), $value);
        }
      }

      &:focus,
      &.active {
        border-color: color.change($value, $alpha: 0.4);
        background-color: color.change($value, $alpha: 0.25);
      }
    }

    // Default box shadow:
    // Slightly raised, 0-width focus ring
    // The raised effect is done with a solid inset at the bottom.
    // The color of the inset is black for filled buttons and the (contrast-adjusted) border color for outlined buttons.
    &.btn-#{$color} {
      border: none;
      @include box-shadow(
        inset 0 -3px 0 0 rgba(0 0 0 / 40%),
        0 0 0 0 rgba(tint-color($value, 40%), $input-btn-focus-color-opacity)
      );
    }
    &.btn-outline-#{$color} {
      @include box-shadow(
        inset 0 -3px 0 0 rgba(ensure-contrasting-color($body-bg, $value), 80%),
        0 0 0 0 rgba(tint-color($value, 40%), $input-btn-focus-color-opacity)
      );
    }

    // Box shadow when focused, but not active:
    // (FYI: In most contexts, including this one, pending also counts as active)
    // Flat, with a focus ring
    &:focus:not(.active):not(:active):not(.pending) {
      &.btn-#{$color} {
        @include box-shadow(
          inset 0 0 0 0 rgba(0 0 0 / 30%),
          0 0 0 $btn-focus-width
            rgba(tint-color($value, 40%), $input-btn-focus-color-opacity)
        );
      }
      &.btn-outline-#{$color} {
        @include box-shadow(
          inset 0 0 0 0 rgba(0 0 0 / 30%),
          0 0 0 $btn-focus-width
            rgba(tint-color($value, 40%), $input-btn-focus-color-opacity)
        );
      }
    }

    // Box shadow when hovering, but not active:
    // Flat, 0-width focus ring
    &:hover:not(.active):not(:active):not(.pending) {
      &.btn-#{$color} {
        @include box-shadow(
          inset 0 0 0 0 rgba(0 0 0 / 30%),
          0 0 0 0 rgba(tint-color($value, 40%), $input-btn-focus-color-opacity)
        );
      }
      &.btn-outline-#{$color} {
        @include box-shadow(
          inset 0 0 0 0 rgba(0 0 0 / 30%),
          0 0 0 0 rgba(tint-color($value, 40%), $input-btn-focus-color-opacity)
        );
      }
    }
    // Box shadow when active, but not focused
    // (generally buttons can't be active without being focused,
    // but e.g. checked buttons fall under this category)
    // Depressed, 0-width focus ring
    &:active:not(:focus),
    &.active:not(:focus),
    &:not(:active):not(.active).pending:not(:focus) {
      &.btn-#{$color} {
        @include box-shadow(
          $btn-active-box-shadow,
          0 0 0 0 rgba(tint-color($value, 40%), $input-btn-focus-color-opacity)
        );
      }
      &.btn-outline-#{$color} {
        @include box-shadow(
          $btn-active-box-shadow,
          0 0 0 0 rgba(tint-color($value, 40%), $input-btn-focus-color-opacity)
        );
      }
    }

    // Box shadow when active and focused
    // Depressed, with a focus ring
    &:active:focus,
    &.active:focus,
    &:not(:active):not(.active).pending:focus {
      &.btn-#{$color} {
        @include box-shadow(
          $btn-active-box-shadow,
          0 0 0 $btn-focus-width
            rgba(tint-color($value, 40%), $input-btn-focus-color-opacity)
        );
      }
      &.btn-outline-#{$color} {
        @include box-shadow(
          $btn-active-box-shadow,
          0 0 0 $btn-focus-width
            rgba(tint-color($value, 40%), $input-btn-focus-color-opacity)
        );
      }
    }

    /*&.pending:focus {
      &.btn-#{$color} {
        @include box-shadow(
          $btn-active-box-shadow,
          0 0 0 $btn-focus-width
            rgba(tint-color($value, 40%), $input-btn-focus-color-opacity)
        );
      }
      &.btn-outline-#{$color} {
        @include box-shadow(
          $btn-active-box-shadow,
          0 0 0 $btn-focus-width
            rgba(tint-color($value, 40%), $input-btn-focus-color-opacity)
        );
      }
    }

    &.pending:not(:focus) {
      &.btn-#{$color} {
        @include box-shadow(
          $btn-active-box-shadow,
          0 0 0 0 rgba(tint-color($value, 40%), $input-btn-focus-color-opacity)
        );
      }
      &.btn-outline-#{$color} {
        @include box-shadow(
          $btn-active-box-shadow,
          0 0 0 0 rgba(tint-color($value, 40%), $input-btn-focus-color-opacity)
        );
      }
    }*/

    // Handle the "text depression" effect
    // It should happen when we're active *and* have focus.
    // (TODO: iOS is *really* reluctant to focus buttons.
    // The pending class acts the same as :focus for now to "fix" that,
    // at least for async buttons, but it would be nice to remove that
    // and just have :focus apply the relevant styles without also .pending,
    // which should normally apply the box shadow but NOT the text shadow.)
    /*&:focus,
    &:active:not(:focus),
    &.active:not(:focus),
    &.pending:not(.toggle-button) {
      padding-bottom: $btn-padding-y * 0.5;
      padding-top: $btn-padding-y + $btn-padding-y * 0.5;
    }*/

    // We don't offset the text when the button isn't actively focused
    // (it's a little distracting if it's in a row with other buttons)
    // so as a compromise, there's a small shadow to make it appear to float.
    //
    // Do this any time we're active *but not* focused.
    &:not(:focus):not(.pending).active,
    &:not(:focus):not(.pending).active.toggle-button {
      //--text-shadow-color: rgb(0 0 0 / 35%);
      //text-shadow: 0em 0.2em 0.25em var(--text-shadow-color), 0.05em 0.15em 0.25em var(--text-shadow-color), -0.05em 0.15em 0.25em var(--text-shadow-color);
    }
  }
}
.btn-lg {
  height: calc(1.5em + (#{$btn-padding-y-lg} * 2) + 2px);
  &:focus,
  &:active:not(:focus),
  &.active:not(:focus),
  &.pending:not(.toggle-button) {
    padding-top: $btn-padding-y-lg * 0.75;
    padding-bottom: $btn-padding-y-lg + $btn-padding-y-lg * 0.25;

    &:hover:not(.active):not(:active),
    &:focus:not(.active):not(:active) {
      padding-top: $btn-padding-y-lg;
      padding-bottom: $btn-padding-y-lg;
    }

    &:active,
    &.active,
    &.pending:not(.toggle-button) {
      padding-bottom: $btn-padding-y-lg * 0.5;
      padding-top: $btn-padding-y-lg + $btn-padding-y-lg * 0.5;
    }
  }
}
.btn-sm {
  height: calc(1.5em + (#{$btn-padding-y-sm} * 2) + 2px);
  &:focus,
  &:active:not(:focus),
  &.active:not(:focus),
  &.pending:not(.toggle-button) {
    padding-top: $btn-padding-y-sm * 0.75;
    padding-bottom: $btn-padding-y-sm + $btn-padding-y-sm * 0.25;

    &:hover:not(.active):not(:active),
    &:focus:not(.active):not(:active) {
      padding-top: $btn-padding-y-sm;
      padding-bottom: $btn-padding-y-sm;
    }

    &:active,
    &.active,
    &.pending:not(.toggle-button) {
      padding-bottom: $btn-padding-y-sm * 0.5;
      padding-top: $btn-padding-y-sm + $btn-padding-y-sm * 0.5;
    }
  }
}

@each $color, $value in $theme-colors {
}

@media (prefers-reduced-motion) {
  .btn {
    .btn-check:checked + &,
    .btn-check:active + &,
    &:active,
    &.active {
      padding-bottom: $btn-padding-y;
      padding-top: $btn-padding-y;
      &.list-group-item {
        padding-bottom: $btn-padding-y;
        padding-top: $btn-padding-y;
      }
    }
  }
  .btn-lg {
    .btn-check:checked + &,
    .btn-check:active + &,
    &:active,
    &.active {
      padding-bottom: $btn-padding-y-lg;
      padding-top: $btn-padding-y-lg;
    }
  }
  .btn-sm {
    .btn-check:checked + &,
    .btn-check:active + &,
    &:active,
    &.active {
      padding-bottom: $btn-padding-y-sm;
      padding-top: $btn-padding-y-sm;
    }
  }
}
