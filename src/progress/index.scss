@use "../variables" as *;
@use "sass:color";
@use "sass:map";
@use "sass:string";
@forward "../variables";


@each $color, $value in $theme-colors {
  .circular-progress-#{$color}:not(.inverse-fill) {
    --ball-color: #{$value};
  }
  .circular-progress-#{$color}:not(.inverse-fill):not(.no-fill) {    
    background: #{$body-bg};
  }

  .circular-progress-#{$color}.inverse-fill {
    background: #{$value};
    --ball-color: #{color-contrast($value)};
  }
}

.circular-progress+*, .circular-progress+*+* {
  background: $body-bg;
  border: 0.1em solid $body-bg;
  box-sizing: content-box;
  border-radius: 100%;
  height: 1em;
  width: 1em;

  &>i::before {
    vertical-align: 0;
  }
}

.circular-progress-swappable.transition-swap-container {
  overflow: visible;

  & > * {
    align-self: center;
    justify-self: center;
  }
}

.circular-progress-container {
  pointer-events: none;
  justify-content: center;
  align-items: center;
  display: flex;
}

.circular-progress {
  --duration: 0.5s;
  --count: 8;
  --size: 0.3em;
  --angle: 30;
  width: 1em;
  height: 1em;
  display: grid;
  border-radius: 100%;
  animation: 6s steps(12, jump-start) infinite spinner;
  //animation: calc(360 / var(--angle) * var(--duration)) steps(calc(360 / var(--angle)), jump-start) infinite spinner;
}

.circular-progress>div {
  grid-area: 1 / 1 / 1 / 1;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}
.circular-progress>div>div {
  width: var(--size);
  height: var(--size);
  background-color: var( --ball-color, black);
  border-radius: 100%;
}

.circular-progress>div:nth-child(1)>div {
  animation: var(--duration) cubic-bezier(.23,.49,.78,.54) infinite spinner-lead;
}
.circular-progress>div:nth-child(2)>div {
  transform: rotate(calc(var(--angle) * 1deg)) translate(0.5em, 0em);
}
.circular-progress>div:nth-child(3)>div {
  transform: rotate(calc(var(--angle) * 2deg)) translate(0.5em, 0em);
}
.circular-progress>div:nth-child(4)>div {
  transform: rotate(calc(var(--angle) * 3deg)) translate(0.5em, 0em);
}
.circular-progress>div:nth-child(5)>div {
  transform: rotate(calc(var(--angle) * 4deg)) translate(0.5em, 0em);
}
.circular-progress>div:nth-child(6)>div {
  transform: rotate(calc(var(--angle) * 5deg)) translate(0.5em, 0em);
}
.circular-progress>div:nth-child(7)>div {
  transform: rotate(calc(var(--angle) * 6deg)) translate(0.5em, 0em);
}
.circular-progress>div:nth-child(8)>div {
  transform: rotate(calc(var(--angle) * 7deg)) translate(0.5em, 0em);
}
.circular-progress>div:nth-child(9)>div {
  transform: rotate(calc(var(--angle) * 8deg)) translate(0.5em, 0em);
}
.circular-progress>div:nth-child(10)>div {
  transform: rotate(calc(var(--angle) * 9deg)) translate(0.5em, 0em);
}

@keyframes spinner {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@keyframes spinner-lead {
  0% { transform: rotate(0deg) translate(0.5em, 0em); }
  95% { transform: rotate(calc(-360deg + (var(--angle) * 1deg) * var(--count))) translate(0.5em, 0em); }
  100% { transform: rotate(calc(-360deg + (var(--angle) * 1deg) * var(--count))) translate(0.5em, 0em); }
}
