@use "../variables" as *;
@use "sass:color";
@use "sass:map";
@use "sass:string";
@forward "../variables";

@each $color, $value in $theme-colors {
  .circular-progress-#{$color}:not(.inverse-fill) {
    --ball-color: #{$value};
  }
  .circular-progress-#{$color}:not(.inverse-fill):not(.no-fill) {
    background: #{$body-bg};
  }

  .circular-progress-#{$color}.inverse-fill {
    background: #{$value};
    --ball-color: #{color-contrast($value)};
  }
}

.circular-progress-container {
  & .circular-progress-succeeded,
  & .circular-progress-failed {
    border-radius: 100%;
    height: 1em;
    width: 1em;

    & > i::before {
      vertical-align: 0;
    }
  }

  & .circular-progress-succeeded {
    background: $success;
    color: color-contrast($success);

    // TODO: The check is confusing on checkboxes specifically
    // and since it's the default it feels sort of redundant always appearing.
    // Probably better to have no indicator for success for now.
    // opacity: 0 !important;
  }

  & .circular-progress-failed {
    background: $warning;
    color: color-contrast($warning);
  }
}

.circular-progress-swappable.transition-swap-container {
  overflow: visible;

  & > * {
    align-self: center;
    justify-self: center;
  }
}

.circular-progress-container {
  pointer-events: none;
  justify-content: center;
  align-items: center;
  display: flex;

  & .bi {
    position: relative;
    top: -0.05em;
  }
}

.circular-progress {
  --duration: 0.5s;
  --count: 8;
  --size: 0.3em;
  --angle: 30;
  width: 1em;
  height: 1em;
  display: grid;
  border-radius: 100%;
  animation: 6s steps(12, start) infinite spinner;
  contain: layout size;
  //animation: 6s steps(12, jump-start) infinite spinner;
  //animation: calc(360 / var(--angle) * var(--duration)) steps(calc(360 / var(--angle)), jump-start) infinite spinner;
}

.circular-progress > .circular-progress-ball-origin {
  grid-area: 1 / 1 / 1 / 1;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}
.circular-progress > .circular-progress-ball-origin > .circular-progress-ball {
  width: var(--size);
  height: var(--size);
  background-color: var(--ball-color, currentColor);
  border-radius: 100%;
  will-change: transform;
}

.circular-progress > .circular-progress-ball-origin-0 > .circular-progress-ball {
  animation: var(--duration) cubic-bezier(0.23, 0.49, 0.78, 0.54) infinite
    spinner-lead;
}
.circular-progress > .circular-progress-ball-origin-1 > .circular-progress-ball {
  transform: rotate(calc(var(--angle) * 1deg)) translate(0.5em, 0em);
}
.circular-progress > .circular-progress-ball-origin-2 > .circular-progress-ball {
  transform: rotate(calc(var(--angle) * 2deg)) translate(0.5em, 0em);
}
.circular-progress > .circular-progress-ball-origin-3 > .circular-progress-ball {
  transform: rotate(calc(var(--angle) * 3deg)) translate(0.5em, 0em);
}
.circular-progress > .circular-progress-ball-origin-4 > .circular-progress-ball {
  transform: rotate(calc(var(--angle) * 4deg)) translate(0.5em, 0em);
}
.circular-progress > .circular-progress-ball-origin-5 > .circular-progress-ball {
  transform: rotate(calc(var(--angle) * 5deg)) translate(0.5em, 0em);
}
.circular-progress > .circular-progress-ball-origin-6 > .circular-progress-ball {
  transform: rotate(calc(var(--angle) * 6deg)) translate(0.5em, 0em);
}
.circular-progress > .circular-progress-ball-origin-7 > .circular-progress-ball {
  transform: rotate(calc(var(--angle) * 7deg)) translate(0.5em, 0em);
}
.circular-progress > .circular-progress-ball-origin-8 > .circular-progress-ball {
  transform: rotate(calc(var(--angle) * 8deg)) translate(0.5em, 0em);
}
.circular-progress > .circular-progress-ball-origin-9 > .circular-progress-ball {
  transform: rotate(calc(var(--angle) * 9deg)) translate(0.5em, 0em);
}
.circular-progress > .circular-progress-ball-origin-10 > .circular-progress-ball {
  transform: rotate(calc(var(--angle) * 10deg)) translate(0.5em, 0em);
}
.circular-progress > .circular-progress-ball-origin-11 > .circular-progress-ball {
  transform: rotate(calc(var(--angle) * 11deg)) translate(0.5em, 0em);
}
.circular-progress > .circular-progress-ball-origin-12 > .circular-progress-ball {
  transform: rotate(calc(var(--angle) * 12deg)) translate(0.5em, 0em);
}
.circular-progress > .circular-progress-ball-origin-13 > .circular-progress-ball {
  transform: rotate(calc(var(--angle) * 13deg)) translate(0.5em, 0em);
}
.circular-progress > .circular-progress-ball-origin-14 > .circular-progress-ball {
  transform: rotate(calc(var(--angle) * 14deg)) translate(0.5em, 0em);
}
.circular-progress > .circular-progress-ball-origin-15 > .circular-progress-ball {
  transform: rotate(calc(var(--angle) * 15deg)) translate(0.5em, 0em);
}

@keyframes spinner {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes spinner-lead {
  0% {
    transform: rotate(0deg) translate(0.5em, 0em);
  }
  95% {
    transform: rotate(calc(-360deg + (var(--angle) * 1deg) * var(--count)))
      translate(0.5em, 0em);
  }
  100% {
    transform: rotate(calc(-360deg + (var(--angle) * 1deg) * var(--count)))
      translate(0.5em, 0em);
  }
}
