@use "../variables.scss" as *;
@use "sass:color";
@use "sass:map";
@use "sass:string";

@forward "../variables.scss";

.input-group-text.form-switch {
  // Shrink the usual padding to make switches fill the same space as a checkbox or radio
  padding-left: 0.25em;
  padding-right: 0.25em;

  & > .form-check-input {
    margin-inline-start: 0;
  }
}

.form-check:not(.input-group-text).form-switch {
  padding-left: $form-check-padding-start;
}

.form-control {
  border-color: transparent;
}

.input-group-text {
  position: relative;
  border-top-color: transparent;
  border-bottom: transparent;
  &:first-child {
    border-inline-start-color: transparent;
  }
  &:last-child {
    border-inline-end-color: transparent;
  }
}

// All of this is to allow us to wrap form-control
// input elements, to allow us to have a child
// of a form-control.
// Basically, we create two form-control elements,
// an outer one that handles things related to
// "I'm the first form-control in this input-group
// so my left borders are rounded", and an inner
// one that handles "I control the styling of
// the actual <input> element.
.form-control.faux-form-control-inner {
  width: 100%;
  height: 100%;
  border: none;
  border-radius: 0;
  box-shadow: none;
  padding: 0;
  background: transparent;
  font-size: unset;

  &.form-control {
    background: transparent;
    &:focus {
      background: transparent;
    }
  }
}

.form-control.faux-form-control-outer {
  position: relative;
  overflow: hidden;
  max-width: calc(#{2 * $input-padding-x} + 15px + var(--form-control-width, 9999ch));

  @include box-shadow($input-box-shadow);
}




.form-check-input + .circular-progress-container {
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
}

.input-group-text > .form-check-input {
  margin-top: 0;
}

.form-control.with-end-icon {
  padding-inline-end: 1.8em;
}

.form-control + .circular-progress-container {
  position: absolute;
  right: 0.5em;
  top: 0;
  bottom: 0;
  align-items: center;
  z-index: 5;
}

.form-check-label,
.form-check-input {
  touch-action: manipulation;
}

// "Polyfill" disabled controls
.form-check-input.disabled,
.form-check-input:disabled,
.form-check-label.disabled,
.input-group-text.disabled,
.form-control.disabled,
.form-control:disabled {
  opacity: $form-check-label-disabled-opacity;

  &:not(.pending) {
    cursor: default;
  }
}

.form-check-input.pending,
.form-check-label.pending {
  cursor: progress;
}

.form-check-input:not(.disabled).form-check-input:not(:disabled),
.form-check-label:not(.disabled),
label.form-check-label:not(.disabled),
label.input-group-text:not(.disabled) {
  touch-action: manipulation;
  cursor: pointer;
}

:not(.input-group) > .form-control + .circular-progress-container {
  align-items: flex-end;
  inset-block-end: 0.6em;
}

.form-check {
  position: relative;

  &.form-switch > .form-check-input:not(:checked) + .circular-progress-container {
    //inset-inline-start: -1.05em;
  }

  & > .circular-progress-container {
    justify-content: flex-start;
  }
}
.input-grid {
  display: grid;
  grid-template-columns: repeat(var(--input-grid-columns, 1), max-content auto);
  grid-auto-rows: auto;
  row-gap: 0.5em;
  & > [role="radiogroup"] {
    display: contents;
  }

  // For full-width rows, give the input the most space.
  &>.input-grid-span-all>label {
    grid-column: auto / span 1;
  }
  &>.input-grid-span-all>.form-control {
      grid-column: auto / span calc(var(--input-grid-columns, 1) * 2 - 1);
  }

  &>.input-grid-span-2 > * {grid-column: auto / span 2;}
  &>.input-grid-span-3 > * {grid-column: auto / span 3;}
  &>.input-grid-span-4 > * {grid-column: auto / span 4;}
  &>.input-grid-span-5 > * {grid-column: auto / span 5;}
  &>.input-grid-span-6 > * {grid-column: auto / span 6;}
  &>.input-grid-span-7 > * {grid-column: auto / span 7;}
  &>.input-grid-span-8 > * {grid-column: auto / span 8;}
  &>.input-grid-span-all > * {grid-column: auto / span var(--input-grid-columns, 1); }

  /*
This is a bunch of hackery to allow spinners, which must be placed
absolutely relative to the input, to be placed there *despite*
input not allowing children, and the Bootstrap DOM generally not being
designed to allow a "wrapper" that we can position: relative.
*/
  & .input-group {
    & > *:nth-child(2n + 0) {
      justify-self: flex-start;
    }
    & > *:nth-child(2n + 1) {
      justify-self: flex-end;
    }

    display: contents;
    > input.form-control {
      width: unset;
    }

    & .form-control.faux-form-control-outer {
      justify-self: stretch;
      width: 100%;
    }

    & .form-control.faux-form-control-outer,
    & .input-group-text.faux-input-group-text {
      position: relative;
      width: unset;

      & > .form-control,
      & > .input-group-text {
        border: none;
        padding: 0;
      }

      & > .circular-progress-container {
        position: absolute;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        display: flex;
        justify-content: flex-end;
        align-items: center;
        inset-inline-end: 0.5em;
      }
    }
  }
}

.faux-form-control-outer {
  position: relative;
}

input.form-control:not(.show-spin-buttons) {
  -moz-appearance: textfield;
  appearance: textfield;
}

input[type="number"]:not(.show-spin-buttons)::-webkit-inner-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  display: none;
  margin: 0;
}
