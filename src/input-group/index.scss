@use "../variables.scss" as *;
@use "sass:color";
@use "sass:map";
@use "sass:string";

@forward "../variables.scss";


// Fix some things related to switches and alignment.
// Namely we run into problems because switches are wider than radios or checks...
.input-group-text.form-switch {
  // Shrink the usual padding to make switches fill the same space as a checkbox or radio
  padding-left: 0.25em;
  padding-right: 0.25em;

  &>.form-check-input {
    margin-inline-start: 0;
  }
}

.form-check:not(.input-group-text).form-switch {
  padding-left: $form-check-padding-start;
}

:not(.faux-input-group-text)>.input-group-text {
  position: relative;
}


// Remove the borders of the various form controls.
// TODO: I still want to style these better.
.form-control {
  border-color: transparent;
}

.input-group-text {
  border-top-color: transparent;
  border-bottom: transparent;

  &:first-child {
    border-inline-start-color: transparent;
  }

  &:last-child {
    border-inline-end-color: transparent;
  }
}

// Set up InputGrid
.input-grid {
  display: grid;
  grid-template-columns: repeat(var(--input-grid-columns, 1), auto 1fr);
  row-gap: 0.5em;

  // Please. Anyone. Support subgrid along with Firefox.
  // It's been so, so long
  // Please
  // Please
  // Please
  // Please
  &,
  &>[role=radiogroup] {
    &>.input-group {
      display: contents;

      &>*:first-child {
        justify-self: end;
        text-align: end
      }

      &>*:last-child {
        justify-self: start;
        text-align: start;
        max-width: 100%;
        //overflow-x: auto;
        scrollbar-width: none;
      }
    }
  }

  &>[role=radiogroup] {
    display: contents;
  }
}

// We do some silly things to make text fields have start/end icons.
// The outer form-control is NOT the <input> element, and is for style only,
// and to set up the display grid.
// The inner form-control is the <input> element and actually handles input.
// there's also a measure control that is used to help the <input> behave like an inline element.
.form-control {

  // The outer form-control is a grid where every child is on the same row
  // so that, if necessary, the pending spinner overlaps with the start/end icon.
  &.faux-form-control-outer {
    display: grid;
    grid-template-columns: auto 1fr auto;
    width: auto;
    padding: 0;

    &>.form-control-prefix {
      grid-column: 1 / span 1;
      align-self: center;
      &>.icon { padding-inline-start: 0.5em; }
      &>.btn { border-start-start-radius: 0; border-end-start-radius: 0; }
    }
    &>.form-control-suffix {
      grid-column: 3 / span 1;
      align-self: center;
      &>.icon { padding-inline-end: 0.5em; }
      &>.btn { border-start-end-radius: 0; border-end-end-radius: 0; }
    }

    &>* {
      grid-row: 1 / span 1;
    }
  }

  // The actual control itself (and the dummy element used to measure its ideal size)
  // are placed in the center of the control. 
  &.faux-form-control-measure,
  &.form-control-input-container {
    grid-column: 2 / span 1;
    grid-row: 1 / span 1;
    position: relative;
  }

  // The <input> element does not contribute to layout at all.
  // Only the measurement element does.
  &.form-control-input-container {

    &>.circular-progress-container {
      text-align: end;
      inset-inline-end: 0;
    }

    &>* {
      position: absolute;
      height: 100%;

      &:not(.circular-progress-container) {
        inset: 0;
        width: 100%;
      }
    }
  }

  // We remove most visual indicators of the actual control and the measurer, 
  // like their background, padding, and focus shadow, since the outer
  // form-control takes care of all of that.
  &.faux-form-control-measure,
  &.faux-form-control-inner,
  &.form-control-input-container {
    border: none;
    box-shadow: none;
    background: none;
  }

  &.form-control-input-container {
    &:focus-within {
      box-shadow: $input-focus-box-shadow;
    }
  }

  // The dummy element used to measure the ideal size of the <input>
  // based on its content. Not visible, just takes up space.
  &.faux-form-control-measure {
    visibility: hidden;
    pointer-events: none;
    user-select: none;
    white-space: pre;
    z-index: -100;

    &>span::after {
      content: "";
      width: 0.5em;
      display: inline-block;
    }
  }
}

// The form-control-sm and -lg classes are normally not used inside input-groups,
// but they're used in this library for sizing purposes.
// We need to remove the min-height those classes come with to prevent then interfering
// with the normal height of the parent input-group.
.form-control-sm, .form-control-lg, .form-control-md {
  &.form-control-input-container, .form-control-input-container > &, &.faux-form-control-measure {
    min-height: unset;
  }
}



// Needed for proper spinner alignment
.form-check {
  position: relative;
}

// Hide spin buttons always, unless explicitly enabled with .show-spin-buttons
input.form-control:not(.show-spin-buttons) {
  -moz-appearance: textfield;
  appearance: textfield;
}

input[type="number"]:not(.show-spin-buttons)::-webkit-inner-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  display: none;
  margin: 0;
}



.form-check-label,
.form-check-input {
  // TODO: Necessary?
  touch-action: manipulation;
}

// "Polyfill" disabled controls
.form-check-input.disabled,
.form-check-input:disabled,
.form-check-label.disabled,
.input-group-text.disabled,
.form-control.disabled,
.form-control:disabled {
  opacity: $form-check-label-disabled-opacity;

  /*&:not(.pending) {
    cursor: default;
  }*/
}

.form-check-input.pending,
.form-check-label.pending,
.form-control.pending {
  cursor: progress;
}

.form-check-input:not(.disabled).form-check-input:not(:disabled),
.form-check-label:not(.disabled),
label.form-check-label:not(.disabled),
label.input-group-text:not(.disabled) {
  touch-action: manipulation;
  cursor: pointer;
}

// Progress indicators are removed from the flow to appear on top of the checkbox, switch, etc.
.input-group-text>.circular-progress-container {
  position: absolute;
  inset: 0;
}

.form-check>.circular-progress-container {
  position: absolute;
  inset-inline-start: 0;
  inset-block-start: 0.25em;
}

/*

// All of this is to allow us to wrap form-control
// input elements, to allow us to have a child
// of a form-control.
// Basically, we create two form-control elements,
// an outer one that handles things related to
// "I'm the first form-control in this input-group
// so my left borders are rounded", and an inner
// one that handles "I control the styling of
// the actual <input> element.
.form-control.faux-form-control-measure {
  width: var(--form-control-width, 100%);
  height: 100%;
  border: none;
  border-radius: 0;
  box-shadow: none;
  padding: 0;
  background: transparent;
  font-size: unset;
  max-height: 1.5em;
  align-self: center;


  &.form-control {
    background: transparent;
    &:focus {
      background: transparent;
    }
  }
}

.faux-form-control-measure {
  white-space: pre;
  &>*:not(input) {
    z-index: -100;
    visibility: hidden;
    pointer-events: none;
    user-select: none;
  }
}

.form-control.faux-form-control-outer {
  position: relative;
  overflow: hidden;

  @include box-shadow($input-box-shadow);
}

// Make sure that checkboxes are clickable within the entire
// input group section they're in, like the labels are.
.input-group-text>.form-check-input::after {
  content: "";
  position: absolute;
  inset: 0;
}

.form-check-input + .circular-progress-container {
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
}

.input-group-text > .form-check-input {
  margin-top: 0;
}

.form-control.with-end-icon {
  padding-inline-end: 1.8em;
}

.form-control + .circular-progress-container {
  align-items: center;
  z-index: 5;
}



.form-check {
  position: relative;

  &.form-switch
    > .form-check-input:not(:checked)
    + .circular-progress-container {
    //inset-inline-start: -1.05em;
  }

  & > .circular-progress-container {
    justify-content: flex-start;
  }
}
.input-grid {
  display: grid;
  grid-template-columns: repeat(var(--input-grid-columns, 1), auto auto);
  grid-auto-rows: auto;
  row-gap: 0.5em;
  justify-content: start;
  
  & > [role="radiogroup"] {
    display: contents;
    & > .input-group {
      display: contents; // Having fun with CSS

      // TODO: This is basically just copy-pasted from the normal "correctly align input groups in input grid" CSS.
      & > *:nth-child(2n + 0) {
        justify-self: flex-start;
      }
      & > *:nth-child(2n + 1) {
        justify-self: flex-end;
      }
    }
  }

  // For full-width rows, give the input the most space.
  & > .input-grid-span-all > label {
    grid-column: auto / span 1;
  }
  & > .input-grid-span-all > .form-control {
    width: 100%;
    grid-column: auto / span calc(var(--input-grid-columns, 1) * 2 - 1);
  }

  & > .input-grid-span-2 > * {
    grid-column: auto / span 2;
  }
  & > .input-grid-span-3 > * {
    grid-column: auto / span 3;
  }
  & > .input-grid-span-4 > * {
    grid-column: auto / span 4;
  }
  & > .input-grid-span-5 > * {
    grid-column: auto / span 5;
  }
  & > .input-grid-span-6 > * {
    grid-column: auto / span 6;
  }
  & > .input-grid-span-7 > * {
    grid-column: auto / span 7;
  }
  & > .input-grid-span-8 > * {
    grid-column: auto / span 8;
  }
  & > .input-grid-span-all > * {
    grid-column: auto / span var(--input-grid-columns, 1);
  }

  & > .input-group {
    & > *:nth-child(2n + 0) {
      justify-self: flex-start;
    }
    & > *:nth-child(2n + 1) {
      justify-self: flex-end;
    }

    /*
This is a bunch of hackery to allow spinners, which must be placed
absolutely relative to the input, to be placed there *despite*
input not allowing children, and the Bootstrap DOM generally not being
designed to allow a "wrapper" that we can position: relative.
*/

/*
    display: contents;
    > input.form-control {
      width: unset;
    }

    & .form-control.faux-form-control-outer {
      justify-self: stretch;
      width: 100%;
    }

    & .form-control.faux-form-control-outer,
    & .input-group-text.faux-input-group-text {
      position: relative;
      width: unset;

      & > .form-control,
      & > .input-group-text {
        border: none;
      }

      & > .input-group-text {
        padding: 0;
      }

      & > .circular-progress-container {

        display: flex;
        justify-content: flex-end;
        align-items: center;
        inset-inline-end: 0.5em;
        padding-inline-start: 0.75em;
      }
    }
  }
}

.faux-form-control-outer {
  &>.form-control-suffix,
  &>.form-control-prefix {
      &>.input-group-text {
        background: none;
        border: none;
    }
  }
}


.form-control.faux-form-control-outer {
  display: grid;
  grid-template-columns: auto 1fr auto;
}
.faux-form-control-outer>.form-control-prefix {
  grid-column: 1 / span 1;
  grid-row: 1 / span 1;
}
.faux-form-control-measure {
  grid-column: 2 / span 1;
  grid-row: 1 / span 1;
  position: relative;
}
.form-control.faux-form-control-inner {
  position: absolute;
  inset: 0;
}
.form-control.faux-form-control-inner, .form-control.faux-form-control-measure {
  font-size: unset;
}
.faux-form-control-outer>.form-control-suffix, .faux-form-control-outer>.circular-progress-container {
  grid-column: 3 / span 1;
  grid-row: 1 / span 1;
}

.faux-form-control-outer {
  position: relative;
}

input.form-control:not(.show-spin-buttons) {
  -moz-appearance: textfield;
  appearance: textfield;
}

input[type="number"]:not(.show-spin-buttons)::-webkit-inner-spin-button {
  -webkit-appearance: none;
  -moz-appearance: none;
  display: none;
  margin: 0;
}
*/